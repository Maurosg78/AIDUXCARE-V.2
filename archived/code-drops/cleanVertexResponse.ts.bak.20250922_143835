// Vertex → UI normalizer (EN content). Minimal, no new files.
// - Accepts English keys (chief_complaint, medications, suggested_tests, red_flags objects).
// - Accepts prior Spanish-shaped payloads.
// - Outputs the SAME field names your UI expects, but with ENGLISH strings.
// - Converts red_flags objects -> readable strings (no [object Object]).

type EngMed = { name: string; reason?: string }
type EngRF  = { finding: string; rationale?: string; priority?: string }
type EngTst = { test: string; reason?: string; sensitivity?: number; specificity?: number }

function isObj(x: unknown): x is Record<string, any> { return !!x && typeof x === "object" }
function arrStr(x: any): string[] { return Array.isArray(x) ? x.filter((v)=>typeof v==="string") : [] }

function mapPriority(p?: string): "ER"|"Urgent"|"Deferred" {
  const s = (p || "").toLowerCase()
  if (s.includes("er")) return "ER"
  if (s.includes("urgent") || s.includes("immediate")) return "Urgent"
  if (s.includes("defer") || s.includes("differ")) return "Deferred"
  return "Urgent"
}

export function normalizeVertexResponse(input: any) {
  // If wrapped as { text: "<json>" }
  if (isObj(input) && typeof input.text === "string") {
    try { input = JSON.parse(input.text) } catch { /* continue */ }
  }

  // Case 1: Spanish-shaped object already (keep keys, force EN content)
  if (isObj(input) && (
    "motivo_consulta" in input || "hallazgos_clinicos" in input || "evaluaciones_fisicas_sugeridas" in input
  )) {
    const src = input as Record<string, any>

    // RED FLAGS -> readable EN strings
    const red = Array.isArray(src.red_flags) ? src.red_flags.map((x:any)=>{
      if (typeof x === "string") return x // keep as-is (assumed already readable)
      if (isObj(x)) {
        const pr = mapPriority(x.prioridad || x.priority)
        const finding = x.hallazgo || x.finding || "Relevant finding"
        const rationale = (x.justificacion || x.rationale) ? ` — ${x.justificacion || x.rationale}` : ""
        const referral =
          pr === "ER" ? " (Referral: ER)" :
          pr === "Urgent" ? " (Referral: Family Physician/Urgent Care)" :
          " (Referral: Deferred)"
        return 
      }
      return String(x)
    }) : []

    // MEDICATIONS -> "Name - Reason" English line items
    const meds = Array.isArray(src.medicacion_actual) ? src.medicacion_actual.map((m:any)=>{
      if (typeof m === "string") return m
      const n = (m?.nombre || m?.name || "").trim()
      const r = (m?.motivo  || m?.reason || "").trim()
      return r ? `${n} - ${r}` : n
    }).filter(Boolean) : []

    // TESTS -> ensure fields; allow numbers or null
    const testsSrc = Array.isArray(src.evaluaciones_fisicas_sugeridas) ? src.evaluaciones_fisicas_sugeridas : []
    const tests = testsSrc.map((t:any)=>({
      test: t?.test ?? "",
      sensibilidad: typeof t?.sensibilidad === "number" ? t.sensibilidad
                   : typeof t?.sensitivity === "number"  ? t.sensitivity : null,
      especificidad: typeof t?.especificidad === "number" ? t.especificidad
                    : typeof t?.specificity === "number"  ? t.specificity : null,
      objetivo: t?.objetivo ?? t?.reason ?? "",
      contraindicado_si: t?.contraindicado_si ?? "",
      justificacion: t?.justificacion ?? t?.reason ?? ""
    }))

    return {
      // Keep Spanish keys for UI wiring; fill with EN text
      motivo_consulta: String(src.motivo_consulta || src.chief_complaint || ""),
      hallazgos_clinicos: arrStr(src.hallazgos_clinicos),
      hallazgos_relevantes: arrStr(src.hallazgos_relevantes),
      contexto_ocupacional: arrStr(src.contexto_ocupacional),
      contexto_psicosocial: arrStr(src.contexto_psicosocial),
      medicacion_actual: meds,
      antecedentes_medicos: arrStr(src.antecedentes_medicos),
      diagnosticos_probables: arrStr(src.diagnosticos_probables),
      red_flags: red,
      yellow_flags: arrStr(src.yellow_flags),
      evaluaciones_fisicas_sugeridas: tests,
      plan_tratamiento_sugerido: arrStr(src.plan_tratamiento_sugerido),
      derivacion_recomendada: String(src.derivacion_recomendada || ""),
      pronostico_estimado: String(src.pronostico_estimado || ""),
      notas_seguridad: String(src.notas_seguridad || ""),
      riesgo_legal: (["bajo","medio","alto"].includes(String(src.riesgo_legal))) ? src.riesgo_legal : "bajo"
    }
  }

  // Case 2: Pure English inbound (as per your Niagara logs)
  if (isObj(input)) {
    const medsIn = Array.isArray(input.medications) ? (input.medications as EngMed[]) : []
    const rfIn   = Array.isArray(input.red_flags)   ? (input.red_flags as Array<string|EngRF>) : []
    const tstIn  = Array.isArray(input.suggested_tests) ? (input.suggested_tests as EngTst[]) : []

    const meds = medsIn.map(m=>{
      const n=(m?.name||"").trim(), r=(m?.reason||"").trim()
      return r ? `${n} - ${r}` : n
    }).filter(Boolean)

    const red = rfIn.map(r=>{
      if (typeof r === "string") return 
      const pr = mapPriority(r.priority)
      const finding = r.finding || "Relevant finding"
      const rationale = (x.justificacion || x.rationale) ? ` — ${x.justificacion || x.rationale}` : ""
      const referral = pr === "ER" ? " (Referral: ER)"
                     : pr === "Urgent" ? " (Referral: Family Physician/Urgent Care)"
                     : " (Referral: Deferred)"
      return 
    })

    const tests = tstIn.map(t=>({
      test: t.test,
      sensibilidad: typeof t.sensitivity==="number"? t.sensitivity : null,
      especificidad: typeof t.specificity==="number"? t.specificity : null,
      objetivo: t.reason || "",
      contraindicado_si: "",
      justificacion: t.reason || ""
    }))

    return {
      // Spanish keys for UI wiring; English strings for Niagara demo
      motivo_consulta: String(input.chief_complaint || ""),
      hallazgos_clinicos: arrStr(input.physical_findings),
      hallazgos_relevantes: [],
      contexto_ocupacional: [],
      contexto_psicosocial: arrStr(input.social_context),
      medicacion_actual: meds,
      antecedentes_medicos: [],
      diagnosticos_probables: [],
      red_flags: red,
      yellow_flags: arrStr(input.yellow_flags),
      evaluaciones_fisicas_sugeridas: tests,
      plan_tratamiento_sugerido: [],
      derivacion_recomendada: "",
      pronostico_estimado: "",
      notas_seguridad: "",
      riesgo_legal: "bajo"
    }
  }

  // Fallback safe to avoid UI breaking
  return {
    motivo_consulta: "",
    hallazgos_clinicos: [],
    hallazgos_relevantes: [],
    contexto_ocupacional: [],
    contexto_psicosocial: [],
    medicacion_actual: [],
    antecedentes_medicos: [],
    diagnosticos_probables: [],
    red_flags: [],
    yellow_flags: [],
    evaluaciones_fisicas_sugeridas: [],
    plan_tratamiento_sugerido: [],
    derivacion_recomendada: "",
    pronostico_estimado: "",
    notas_seguridad: "",
    riesgo_legal: "bajo"
  }
}
