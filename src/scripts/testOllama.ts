/**
 * üß™ AiDuxCare - Test Completo Ollama Integration
 * Script para probar todo el pipeline NLP con LLM local
 */

import { ollamaClient, isOllamaConfigured, getOllamaConfig } from '../lib/ollama';
import { NLPServiceOllama } from '../services/nlpServiceOllama';

// Transcripciones de prueba variadas
const testTranscripts = [
  {
    name: "Sesi√≥n Dolor Lumbar",
    text: `
El paciente Carlos Mendoza lleg√≥ reportando dolor intenso en la zona lumbar baja. 
Menciona que el dolor comenz√≥ hace 3 d√≠as despu√©s de levantar una caja pesada en el trabajo. 
Durante la evaluaci√≥n observ√© tensi√≥n muscular significativa en el √°rea paravertebral L4-L5. 
Limitaci√≥n notable en la flexi√≥n anterior del tronco, alcanzando solo 30 grados.
Aplicamos masaje terap√©utico profundo y t√©cnicas de liberaci√≥n miofascial durante 20 minutos.
El paciente report√≥ alivio inmediato del 60% del dolor tras la sesi√≥n.
Plan: continuar con sesiones de fisioterapia tres veces por semana durante 2 semanas,
ejercicios de fortalecimiento del core en casa, y aplicaci√≥n de calor local antes de dormir.
Reevaluaci√≥n en una semana para evaluar progreso.
    `
  },
  {
    name: "Rehabilitaci√≥n Rodilla",
    text: `
Paciente Mar√≠a Gonz√°lez, segunda sesi√≥n post-cirug√≠a de menisco. 
Reporta dolor moderado 4/10 en rodilla derecha, especialmente al subir escaleras.
Evaluaci√≥n: rango de movimiento mejorado desde √∫ltima sesi√≥n, flexi√≥n 90 grados, extensi√≥n completa.
Aplicamos ejercicios de movilidad pasiva, fortalecimiento de cu√°driceps con resistencia leve.
Hidroterapia 15 minutos para reducir inflamaci√≥n.
Paciente tolera bien el tratamiento, sin complicaciones.
Objetivos: alcanzar flexi√≥n 120 grados en pr√≥ximas 2 sesiones.
Continuar ejercicios en casa, hielo post-ejercicio, control en 3 d√≠as.
    `
  },
  {
    name: "Sesi√≥n Corta Hombro",
    text: `
Paciente Juan reporta dolor hombro izquierdo. 
Observo rigidez capsular. 
Aplicamos movilizaci√≥n articular.
Mejora parcial inmediata.
Plan: continuar tratamiento 2 veces por semana.
    `
  }
];

// Configuraciones de test
const testConfigs = {
  quick: { maxTests: 1, detailed: false },
  standard: { maxTests: 2, detailed: true },
  complete: { maxTests: 3, detailed: true }
};

/**
 * Funci√≥n principal de testing
 */
async function runOllamaTests(mode: keyof typeof testConfigs = 'standard') {
  console.log('üß™ === INICIANDO TESTS OLLAMA INTEGRATION ===\n');
  
  const config = testConfigs[mode];
  const startTime = Date.now();
  
  try {
    // Test 1: Verificar configuraci√≥n
    await testConfiguration();
    
    // Test 2: Health check del cliente
    await testClientHealth();
    
    // Test 3: Procesamiento de transcripciones
    await testTranscriptProcessing(config.maxTests, config.detailed);
    
    // Test 4: Performance y m√©tricas
    if (config.detailed) {
      await testPerformanceMetrics();
    }
    
    const totalTime = Date.now() - startTime;
    
    console.log('\nüéâ === TODOS LOS TESTS COMPLETADOS EXITOSAMENTE ===');
    console.log(`‚è±Ô∏è  Tiempo total: ${totalTime}ms`);
    console.log(`üí∞ Costo total: $0.00 (¬°GRATIS!)`);
    console.log(`‚úÖ Sistema listo para integraci√≥n en AiDuxCare\n`);
    
  } catch (error) {
    console.error('\n‚ùå === ERROR EN TESTS ===');
    console.error('Error:', error);
    console.log('\nüîß === TROUBLESHOOTING ===');
    await printTroubleshootingGuide();
  }
}

/**
 * Test de configuraci√≥n b√°sica
 */
async function testConfiguration() {
  console.log('üîß Testing configuraci√≥n...');
  
  const isConfigured = isOllamaConfigured();
  const config = getOllamaConfig();
  
  console.log('üìã Configuraci√≥n actual:');
  console.log(`   Provider: ${config.provider}`);
  console.log(`   URL: ${config.url}`);
  console.log(`   Model: ${config.model}`);
  
  if (!isConfigured) {
    throw new Error('Ollama no est√° configurado correctamente');
  }
  
  console.log('‚úÖ Configuraci√≥n v√°lida\n');
}

/**
 * Test de salud del cliente Ollama
 */
async function testClientHealth() {
  console.log('üè• Testing salud del cliente...');
  
  // Test disponibilidad
  const isAvailable = await ollamaClient.isAvailable();
  console.log(`   Disponibilidad: ${isAvailable ? '‚úÖ' : '‚ùå'}`);
  
  if (!isAvailable) {
    throw new Error('Ollama server no est√° disponible');
  }
  
  // Test modelos
  const models = await ollamaClient.listModels();
  console.log(`   Modelos disponibles: ${models.length}`);
  models.forEach(model => console.log(`     - ${model}`));
  
  // Health check completo
  const health = await ollamaClient.healthCheck();
  console.log(`   Status: ${health.status}`);
  console.log(`   Latencia: ${health.latency_ms}ms`);
  
  if (health.status !== 'healthy') {
    throw new Error(`Health check fall√≥: ${health.error}`);
  }
  
  console.log('‚úÖ Cliente saludable\n');
}

/**
 * Test de procesamiento de transcripciones
 */
async function testTranscriptProcessing(maxTests: number, detailed: boolean) {
  console.log('üìù Testing procesamiento de transcripciones...');
  
  for (let i = 0; i < Math.min(maxTests, testTranscripts.length); i++) {
    const test = testTranscripts[i];
    console.log(`\nüß™ Test ${i + 1}: ${test.name}`);
    
    if (detailed) {
      console.log(`üìã Transcripci√≥n: "${test.text.substring(0, 100)}..."`);
    }
    
    try {
      // Procesar transcripci√≥n completa
      const result = await NLPServiceOllama.processTranscript(test.text);
      
      // Mostrar resultados
      console.log(`‚úÖ Entidades extra√≠das: ${result.entities.length}`);
      
      if (detailed) {
        result.entities.slice(0, 3).forEach(entity => {
          console.log(`   - ${entity.type}: "${entity.text}" (${(entity.confidence * 100).toFixed(0)}%)`);
        });
      }
      
      console.log(`‚úÖ Nota SOAP generada:`);
      console.log(`   S: ${result.soapNotes.subjective.substring(0, 80)}...`);
      console.log(`   O: ${result.soapNotes.objective.substring(0, 80)}...`);
      console.log(`   A: ${result.soapNotes.assessment.substring(0, 80)}...`);
      console.log(`   P: ${result.soapNotes.plan.substring(0, 80)}...`);
      
      console.log(`üìä M√©tricas:`);
      console.log(`   Tiempo total: ${result.metrics.total_processing_time_ms}ms`);
      console.log(`   Confianza general: ${(result.metrics.overall_confidence * 100).toFixed(0)}%`);
      console.log(`   Requiere revisi√≥n: ${result.metrics.requires_review ? '‚ö†Ô∏è S√≠' : '‚úÖ No'}`);
      
    } catch (error) {
      console.error(`‚ùå Error en test ${i + 1}:`, error);
      throw error;
    }
  }
  
  console.log('\n‚úÖ Todos los tests de procesamiento completados\n');
}

/**
 * Test de m√©tricas de performance
 */
async function testPerformanceMetrics() {
  console.log('üìä Testing m√©tricas de performance...');
  
  const simpleText = "Paciente reporta dolor leve en rodilla.";
  const complexText = testTranscripts[0].text;
  
  // Test texto simple
  console.log('üîπ Test texto simple...');
  const simpleStart = Date.now();
  await NLPServiceOllama.extractClinicalEntities(simpleText);
  const simpleTime = Date.now() - simpleStart;
  console.log(`   Tiempo: ${simpleTime}ms`);
  
  // Test texto complejo
  console.log('üîπ Test texto complejo...');
  const complexStart = Date.now();
  await NLPServiceOllama.extractClinicalEntities(complexText);
  const complexTime = Date.now() - complexStart;
  console.log(`   Tiempo: ${complexTime}ms`);
  
  // Health check del servicio NLP
  const nlpHealth = await NLPServiceOllama.healthCheck();
  console.log(`üè• Health check NLP: ${nlpHealth.status} (${nlpHealth.latency_ms}ms)`);
  
  console.log('‚úÖ M√©tricas de performance completadas\n');
}

/**
 * Gu√≠a de troubleshooting
 */
async function printTroubleshootingGuide() {
  console.log('1. ¬øEst√° Ollama corriendo?');
  console.log('   ‚Üí ollama serve');
  console.log('');
  console.log('2. ¬øModelo descargado?');
  console.log('   ‚Üí ollama list');
  console.log('   ‚Üí ollama pull llama3.2:3b');
  console.log('');
  console.log('3. ¬øPuerto correcto?');
  console.log('   ‚Üí curl http://localhost:11434/api/tags');
  console.log('');
  console.log('4. ¬øVariables de entorno?');
  console.log('   ‚Üí cat .env.local | grep OLLAMA');
  console.log('');
  console.log('5. Reiniciar Ollama:');
  console.log('   ‚Üí pkill ollama && ollama serve');
}

/**
 * Funci√≥n para testing espec√≠fico de un √°rea
 */
async function testSpecificFeature(feature: 'entities' | 'soap' | 'health' | 'performance') {
  const testText = testTranscripts[0].text;
  
  switch (feature) {
    case 'entities':
      console.log('üß™ Testing solo extracci√≥n de entidades...');
      const entities = await NLPServiceOllama.extractClinicalEntities(testText);
      console.log(`‚úÖ ${entities.length} entidades extra√≠das`);
      entities.forEach(e => console.log(`   - ${e.type}: ${e.text}`));
      break;
      
    case 'soap':
      console.log('üß™ Testing solo generaci√≥n SOAP...');
      const soap = await NLPServiceOllama.generateSOAPNotes(testText, []);
      console.log('‚úÖ Nota SOAP generada:');
      console.log(`   S: ${soap.subjective}`);
      console.log(`   O: ${soap.objective}`);
      console.log(`   A: ${soap.assessment}`);
      console.log(`   P: ${soap.plan}`);
      break;
      
    case 'health':
      console.log('üß™ Testing solo health checks...');
      await testClientHealth();
      break;
      
    case 'performance':
      console.log('üß™ Testing solo performance...');
      await testPerformanceMetrics();
      break;
  }
}

// Si se ejecuta directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  const mode = (process.argv[2] as keyof typeof testConfigs) || 'standard';
  runOllamaTests(mode);
}

// Exportar para uso en otros archivos
export { runOllamaTests, testSpecificFeature };

// Para ejecutar desde navegador/Vite
declare global {
  interface Window {
    testOllama: typeof runOllamaTests;
    testOllamaFeature: typeof testSpecificFeature;
  }
}

if (typeof window !== 'undefined') {
  window.testOllama = runOllamaTests;
  window.testOllamaFeature = testSpecificFeature;
} 