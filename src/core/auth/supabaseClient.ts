import { createClient } from '@supabase/supabase-js';
import { supabaseUrl, supabaseAnonKey, validateSupabaseEnv } from '@/config/env';
import { createFallbackClient, testDirectConnection } from './directClient';

// Validar las credenciales de Supabase
const envValidation = validateSupabaseEnv();

// Verificar si las credenciales est√°n disponibles
if (!envValidation.success) {
  console.warn("‚ö†Ô∏è Supabase no configurado correctamente. Utilizando valores de fallback.");
  console.error("‚ùå Detalle del error:", envValidation.error?.errors);
}

// Opciones para el cliente de Supabase
const options = {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storageKey: 'aiduxcare_auth_token' // A√±adir nombre espec√≠fico para el token
  },
  global: {
    headers: {
      'X-Client-Info': 'aiduxcare-v2'
    }
  }
};

// Crear el cliente de Supabase o utilizar el fallback si no est√° configurado
const supabase = envValidation.success 
  ? createClient(supabaseUrl, supabaseAnonKey, options)
  : createFallbackClient();

// Imprimir informaci√≥n de diagn√≥stico en modo desarrollo
if (import.meta.env.DEV) {
  console.log('üìå Informaci√≥n de conexi√≥n Supabase:');
  console.log(`- URL: ${supabaseUrl ? supabaseUrl.substring(0, 15) + '...' : 'FALTA ‚ùå'}`);
  console.log(`- API Key v√°lida: ${supabaseAnonKey ? 'S√ç ‚úÖ' : 'NO ‚ùå'}`);
  console.log(`- Modo: ${envValidation.success ? 'PRODUCCI√ìN ‚úÖ' : 'FALLBACK ‚ö†Ô∏è'}`);
}

// Exportar una bandera para saber si se est√° usando el modo fallback
export const isSupabaseConfigured = envValidation.success;

// Funci√≥n para verificar la conexi√≥n a Supabase
export async function checkSupabaseConnection() {
  // Si estamos en modo fallback, usar testDirectConnection para verificaci√≥n
  if (!isSupabaseConfigured) {
    console.log('üîç Verificando conexi√≥n utilizando m√©todo directo (modo fallback)...');
    return await testDirectConnection();
  }

  try {
    console.log('üîç Verificando conexi√≥n a Supabase...');
    
    // Intentar una petici√≥n de prueba
    const { data, error } = await supabase.from('health_check').select('*').limit(1);
    
    if (error) {
      console.error('‚ùå Error conectando a Supabase:', error);
      
      // Diagnosticar tipo de error para dar mejor feedback
      if (error.code === 'PGRST301') {
        return { 
          success: false, 
          error: 'Error de autenticaci√≥n. API key inv√°lida o expirada.', 
          code: 'AUTH_ERROR' 
        };
      } else if (error.code === '20000') {
        return { 
          success: false, 
          error: 'No se pudo contactar al servidor. Verifique su conexi√≥n a internet.', 
          code: 'NETWORK_ERROR' 
        };
      } else {
        return { 
          success: false, 
          error: error.message, 
          code: error.code 
        };
      }
    }
    
    console.log('‚úÖ Conexi√≥n a Supabase establecida correctamente');
    return { success: true };
  } catch (err) {
    console.error('‚ùå Error inesperado conectando a Supabase:', err);
    return { 
      success: false, 
      error: String(err),
      code: 'UNKNOWN_ERROR'
    };
  }
}

// Exportar el cliente como default
export default supabase; 