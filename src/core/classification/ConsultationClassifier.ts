/**
 * üéØ Clasificador Inteligente de Consultas - AiDuxCare V.2
 * 
 * Sistema que analiza autom√°ticamente el contexto de una consulta m√©dica para:
 * 1. Determinar el tipo: INICIAL, SEGUIMIENTO, EMERGENCIA
 * 2. Identificar la especialidad: PSICOLOGIA, FISIOTERAPIA, MEDICINA_GENERAL
 * 3. Optimizar el procesamiento de IA seg√∫n el contexto
 * 4. Aplicar l√≠mites y costos espec√≠ficos por plan
 */

import { 
  specializedPlansService, 
  PlanType, 
  ConsultationType as SpecializedConsultationType,
  MedicalSpecialty as SpecializedMedicalSpecialty
} from '../../services/SpecializedPlansService';

export interface ConsultationContext {
  patientId: string;
  transcription: string;
  sessionDuration: number;
  previousSessions: number;
  lastSessionDate?: Date;
  professionalSpecialty: MedicalSpecialty;
  currentPlan?: PlanType;
  currentUsage?: any;
}

export interface ClassificationResult {
  consultationType: ConsultationType;
  specialty: MedicalSpecialty;
  confidence: number;
  processingLevel: ProcessingLevel;
  estimatedCost: number;
  redFlags: RedFlag[];
  recommendations: string[];
  costOptimization: any;
  planValidation: any;
  specializedProcessing: any;
}

export type ConsultationType = 'INICIAL' | 'SEGUIMIENTO' | 'EMERGENCIA';
export type MedicalSpecialty = 'PSICOLOGIA' | 'FISIOTERAPIA' | 'MEDICINA_GENERAL';
export type ProcessingLevel = 'BASICO' | 'COMPLETO' | 'AVANZADO';

export interface RedFlag {
  type: 'SUICIDAL_IDEATION' | 'NEUROLOGICAL_SIGNS' | 'EMERGENCY_SYMPTOMS' | 'FRACTURE_SIGNS' | 'VASCULAR_COMPROMISE';
  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
  description: string;
  action: string;
}

/**
 * Clasificador principal que determina el tipo y contexto de consulta
 */
export class ConsultationClassifier {
  
  /**
   * Clasifica una consulta bas√°ndose en el contexto y transcripci√≥n
   * NUEVO: Integrado con planes especializados y optimizaci√≥n de costos
   */
  static async classifyConsultation(context: ConsultationContext): Promise<ClassificationResult> {
    console.log('üîç Iniciando clasificaci√≥n de consulta...');
    
    // 1. Determinar tipo de consulta
    const consultationType = this.determineConsultationType(context);
    
    // 2. Confirmar especialidad (puede diferir del profesional)
    const specialty = await this.detectSpecialty(context);
    
    // 3. Determinar nivel de procesamiento necesario
    const processingLevel = this.determineProcessingLevel(consultationType, specialty);
    
    // 4. NUEVO: Calcular costo optimizado usando planes especializados
    const costOptimization = this.calculateOptimizedCost(
      context.currentPlan || 'GENERAL_PRO',
      consultationType,
      specialty
    );
    
    // 5. Detectar banderas rojas espec√≠ficas por especialidad
    const redFlags = await this.detectRedFlags(context, specialty);
    
    // 6. Generar recomendaciones
    const recommendations = this.generateRecommendations(consultationType, specialty, redFlags);
    
    // 7. NUEVO: Validar l√≠mites del plan
    const planValidation = this.validatePlanLimits(
      context.currentPlan || 'GENERAL_PRO',
      consultationType,
      context.currentUsage
    );
    
    const result: ClassificationResult = {
      consultationType,
      specialty,
      confidence: this.calculateConfidence(context, consultationType, specialty),
      processingLevel,
      estimatedCost: costOptimization.cost,
      redFlags,
      recommendations,
      // NUEVOS CAMPOS
      costOptimization,
      planValidation,
      specializedProcessing: this.getSpecializedProcessingConfig(
        context.currentPlan || 'GENERAL_PRO',
        specialty
      )
    };
    
    console.log(`‚úÖ Consulta clasificada: ${consultationType} - ${specialty} (${result.confidence}% confianza)`);
    console.log(`üí∞ Costo optimizado: ‚Ç¨${costOptimization.cost} (${costOptimization.optimization})`);
    
    return result;
  }
  
  /**
   * Determina si es consulta inicial, seguimiento o emergencia
   */
  private static determineConsultationType(context: ConsultationContext): ConsultationType {
    // L√≥gica de clasificaci√≥n por contexto hist√≥rico
    if (context.previousSessions === 0) {
      return 'INICIAL';
    }
    
    // Detectar emergencia por palabras clave urgentes
    const emergencyKeywords = [
      'urgente', 'emergencia', 'dolor severo', 'no puedo', 'crisis',
      'suicidio', 'autolesi√≥n', 'p√°nico', 'convulsi√≥n', 'desmayo'
    ];
    
    const transcriptionLower = context.transcription.toLowerCase();
    const hasEmergencyKeywords = emergencyKeywords.some(keyword => 
      transcriptionLower.includes(keyword)
    );
    
    if (hasEmergencyKeywords) {
      return 'EMERGENCIA';
    }
    
    // Determinar seguimiento por tiempo transcurrido
    if (context.lastSessionDate) {
      const daysSinceLastSession = Math.floor(
        (Date.now() - context.lastSessionDate.getTime()) / (1000 * 60 * 60 * 24)
      );
      
      // Si han pasado m√°s de 30 d√≠as, tratar como inicial
      if (daysSinceLastSession > 30) {
        return 'INICIAL';
      }
    }
    
    return 'SEGUIMIENTO';
  }
  
  /**
   * Detecta la especialidad m√©dica bas√°ndose en el contenido
   * OPTIMIZADO PARA UAT: Enfoque 100% en FISIOTERAPIA
   */
  private static async detectSpecialty(context: ConsultationContext): Promise<MedicalSpecialty> {
    const transcription = context.transcription.toLowerCase();
    
    // PARA UAT: SIEMPRE FISIOTERAPIA - Optimizado para casos de uso espec√≠ficos
    // Expandir palabras clave espec√≠ficas de fisioterapia
    const physiotherapyKeywords = [
      // Anatom√≠a espec√≠fica
      'dolor', 'movilidad', 'ejercicio', 'rehabilitaci√≥n', 'fisioterapia',
      'm√∫sculo', 'articulaci√≥n', 'lesi√≥n', 'contractura', 'espalda',
      'rodilla', 'hombro', 'cuello', 'lumbar', 'cervical',
      
      // S√≠ntomas musculoesquel√©ticos
      'rigidez', 'inflamaci√≥n', 'entumecimiento', 'hormigueo', 'debilidad',
      'limitaci√≥n', 'tensi√≥n', 'sobrecarga', 'fatiga muscular',
      
      // Tratamientos de fisioterapia
      'estiramiento', 'fortalecimiento', 'movilizaci√≥n', 'manipulaci√≥n',
      'electroterapia', 'ultrasound', 'l√°ser', 'calor', 'fr√≠o', 'hielo',
      'masaje', 'terapia manual', 'ejercicios terap√©uticos',
      
      // Evaluaci√≥n funcional
      'rango de movimiento', 'fuerza muscular', 'equilibrio', 'coordinaci√≥n',
      'postura', 'marcha', 'funcionalidad', 'actividades diarias',
      
      // Escalas y mediciones
      'escala del dolor', 'grados', 'flexi√≥n', 'extensi√≥n', 'rotaci√≥n',
      'abducci√≥n', 'aducci√≥n', 'pronaci√≥n', 'supinaci√≥n',
      
      // Anatom√≠a detallada
      'v√©rtebras', 'disco', 'nervio', 'tend√≥n', 'ligamento',
      'trapecio', 'deltoides', 'b√≠ceps', 'tr√≠ceps', 'cu√°driceps',
      'isquiotibiales', 'gemelos', 'fascia', 'menisco',

      // NUEVOS T√âRMINOS ESPEC√çFICOS PARA UAT FISIOTERAPIA
      'contractura muscular', 'espasmo', 'trigger point', 'punto gatillo',
      's√≠ndrome del t√∫nel carpiano', 'epicondilitis', 'tendinitis',
      'bursitis', 'fascitis plantar', 'hernia discal', 'protrusi√≥n',
      'escoliosis', 'cifosis', 'lordosis', 'subluxaci√≥n',
      'capsulitis', 'artritis', 'artrosis', 'osteoartritis',
      'fibromialgia', 'mialgia', 'neuralgia', 'radiculopat√≠a',
      'compresi√≥n nerviosa', 'atrapamiento', 'neuropat√≠a',
      'inestabilidad articular', 'hipermovilidad', 'hiperlaxitud',
      'disfunci√≥n temporomandibular', 'ATM', 'bruxismo',
      'cefalea tensional', 'migra√±a cervicog√©nica',
      's√≠ndrome piramidal', 'trocanteritis', 'pubalgia',
      'condromalacia', 'meniscopat√≠a', 'rotura fibrilar',
      'distensi√≥n muscular', 'desgarro', 'hematoma',
      'edema', 'tumefacci√≥n', 'crepitaci√≥n', 'bloqueo articular',
      'limitaci√≥n funcional', 'incapacidad', 'discapacidad temporal',
      'reeducaci√≥n postural', 'ergonom√≠a', 'higiene postural',
      'cadenas musculares', 'compensaci√≥n', 'adaptaci√≥n',
      'propiocepci√≥n', 'equilibrio', 'coordinaci√≥n motora',
      'esquema corporal', 'conciencia corporal',
      'activaci√≥n muscular', 'inhibici√≥n', 'facilitaci√≥n',
      'patr√≥n de movimiento', 'biomec√°nica', 'cin√©tica',
      'cinem√°tica', 'an√°lisis del movimiento',
      'test funcional', 'evaluaci√≥n', 'valoraci√≥n',
      'goniometr√≠a', 'dinamometr√≠a', 'palpaci√≥n',
      'inspecci√≥n', 'observaci√≥n', 'anamnesis',
      'historia cl√≠nica', 'antecedentes', 'evoluci√≥n',
      'pron√≥stico', 'objetivos terap√©uticos',
      'plan de tratamiento', 'protocolo', 'pauta',
      'frecuencia', 'intensidad', 'duraci√≥n',
      'progresi√≥n', 'adaptaci√≥n', 'modificaci√≥n',
      'alta m√©dica', 'derivaci√≥n', 'interconsulta'
    ];
    
    // Para UAT: Log de t√©rminos detectados para validaci√≥n
    const detectedTerms = physiotherapyKeywords.filter(keyword => 
      transcription.includes(keyword)
    );
    
    if (detectedTerms.length > 0) {
      console.log(`üéØ UAT Fisioterapia: ${detectedTerms.length} t√©rminos detectados:`, detectedTerms.slice(0, 5));
      console.log(`üìä T√©rminos m√°s relevantes: ${detectedTerms.slice(0, 3).join(', ')}`);
    }
    
    // PARA UAT: SIEMPRE RETORNAR FISIOTERAPIA con logging detallado
    console.log('üè• UAT: Forzando especialidad FISIOTERAPIA para testing');
    console.log(`üìù Transcripci√≥n analizada: ${transcription.length} caracteres`);
    console.log(`üîç T√©rminos de fisioterapia encontrados: ${detectedTerms.length}`);
    
    return 'FISIOTERAPIA';
  }
  
  /**
   * Determina el nivel de procesamiento de IA necesario
   */
  private static determineProcessingLevel(
    type: ConsultationType, 
    specialty: MedicalSpecialty
  ): ProcessingLevel {
    // Emergencias siempre requieren procesamiento avanzado
    if (type === 'EMERGENCIA') {
      return 'AVANZADO';
    }
    
    // Consultas iniciales de psicolog√≠a requieren an√°lisis completo
    if (type === 'INICIAL' && specialty === 'PSICOLOGIA') {
      return 'COMPLETO';
    }
    
    // Consultas iniciales de fisioterapia requieren an√°lisis completo
    if (type === 'INICIAL' && specialty === 'FISIOTERAPIA') {
      return 'COMPLETO';
    }
    
    // Seguimientos pueden usar procesamiento b√°sico
    return 'BASICO';
  }
  
  /**
   * Calcula el costo estimado seg√∫n el tipo y nivel de procesamiento
   */
  private static calculateEstimatedCost(
    type: ConsultationType,
    specialty: MedicalSpecialty,
    level: ProcessingLevel
  ): number {
    // Costos base por especialidad y tipo (en euros)
    const costMatrix = {
      PSICOLOGIA: {
        INICIAL: 0.35,    // ‚Ç¨35 por consulta inicial compleja
        SEGUIMIENTO: 0.18, // ‚Ç¨18 por seguimiento
        EMERGENCIA: 0.50   // ‚Ç¨50 por emergencia
      },
      FISIOTERAPIA: {
        INICIAL: 0.25,    // ‚Ç¨25 por consulta inicial
        SEGUIMIENTO: 0.12, // ‚Ç¨12 por seguimiento
        EMERGENCIA: 0.35   // ‚Ç¨35 por emergencia
      },
      MEDICINA_GENERAL: {
        INICIAL: 0.20,    // ‚Ç¨20 por consulta inicial
        SEGUIMIENTO: 0.10, // ‚Ç¨10 por seguimiento
        EMERGENCIA: 0.30   // ‚Ç¨30 por emergencia
      }
    };
    
    return costMatrix[specialty][type];
  }
  
  /**
   * Detecta banderas rojas espec√≠ficas por especialidad
   */
  private static async detectRedFlags(
    context: ConsultationContext,
    specialty: MedicalSpecialty
  ): Promise<RedFlag[]> {
    const redFlags: RedFlag[] = [];
    const transcription = context.transcription.toLowerCase();
    
    if (specialty === 'PSICOLOGIA') {
      // Detecci√≥n de ideaci√≥n suicida
      const suicidalKeywords = [
        'suicidio', 'matarme', 'acabar con todo', 'no quiero vivir',
        'mejor muerto', 'quitarme la vida'
      ];
      
      const hasSuicidalIdeation = suicidalKeywords.some(keyword => 
        transcription.includes(keyword)
      );
      
      if (hasSuicidalIdeation) {
        redFlags.push({
          type: 'SUICIDAL_IDEATION',
          severity: 'CRITICAL',
          description: 'Posible ideaci√≥n suicida detectada en la transcripci√≥n',
          action: 'Evaluaci√≥n inmediata de riesgo suicida requerida'
        });
      }
    }
    
    if (specialty === 'FISIOTERAPIA') {
      // Detecci√≥n de signos neurol√≥gicos - EXPANDIDO PARA UAT
      const neurologicalKeywords = [
        'entumecimiento', 'hormigueo', 'p√©rdida de fuerza',
        'no siento', 'paralizado', 'convulsi√≥n',
        // NUEVOS: Signos neurol√≥gicos espec√≠ficos
        'adormecimiento', 'p√©rdida de sensibilidad', 'debilidad severa',
        'par√°lisis', 'espasmos', 'temblor', 'p√©rdida de control',
        'no puedo mover', 'se me durmi√≥', 'sin fuerza'
      ];
      
      const hasNeurologicalSigns = neurologicalKeywords.some(keyword => 
        transcription.includes(keyword)
      );
      
      if (hasNeurologicalSigns) {
        redFlags.push({
          type: 'NEUROLOGICAL_SIGNS',
          severity: 'HIGH',
          description: 'Posibles signos neurol√≥gicos detectados',
          action: 'Derivaci√≥n a neurolog√≠a recomendada'
        });
      }

      // NUEVO: Detecci√≥n de fracturas o lesiones graves
      const fractureKeywords = [
        'fractura', 'hueso roto', 'deformidad', 'crepitaci√≥n',
        'imposible mover', 'dolor extremo', 'hinchaz√≥n severa',
        'moret√≥n grande', 'no puedo apoyar', 'se escuch√≥ crack'
      ];

      const hasFractureSign = fractureKeywords.some(keyword =>
        transcription.includes(keyword)
      );

      if (hasFractureSign) {
        redFlags.push({
          type: 'FRACTURE_SIGNS',
          severity: 'CRITICAL',
          description: 'Posibles signos de fractura o lesi√≥n grave detectados',
          action: 'Evaluaci√≥n m√©dica urgente y radiograf√≠as requeridas'
        });
      }

      // NUEVO: Detecci√≥n de problemas vasculares
      const vascularKeywords = [
        'pie fr√≠o', 'cambio de color', 'pulso d√©bil', 'cianosis',
        'palidez extrema', 'no hay circulaci√≥n', 'entumecimiento total'
      ];

      const hasVascularIssue = vascularKeywords.some(keyword =>
        transcription.includes(keyword)
      );

      if (hasVascularIssue) {
        redFlags.push({
          type: 'VASCULAR_COMPROMISE',
          severity: 'CRITICAL',
          description: 'Posible compromiso vascular detectado',
          action: 'Evaluaci√≥n m√©dica inmediata - emergencia vascular'
        });
      }
    }
    
    // S√≠ntomas de emergencia generales
    const emergencyKeywords = [
      'dolor de pecho', 'dificultad para respirar', 'desmayo',
      'convulsi√≥n', 'sangrado', 'fiebre alta'
    ];
    
    const hasEmergencySymptoms = emergencyKeywords.some(keyword => 
      transcription.includes(keyword)
    );
    
    if (hasEmergencySymptoms) {
      redFlags.push({
        type: 'EMERGENCY_SYMPTOMS',
        severity: 'CRITICAL',
        description: 'S√≠ntomas de emergencia detectados',
        action: 'Evaluaci√≥n m√©dica inmediata requerida'
      });
    }
    
    return redFlags;
  }
  
  /**
   * Genera recomendaciones basadas en la clasificaci√≥n
   */
  private static generateRecommendations(
    type: ConsultationType,
    specialty: MedicalSpecialty,
    redFlags: RedFlag[]
  ): string[] {
    const recommendations: string[] = [];
    
    // Recomendaciones por banderas rojas
    if (redFlags.length > 0) {
      recommendations.push('Revisar banderas rojas detectadas antes de continuar');
    }
    
    // Recomendaciones por tipo de consulta
    if (type === 'INICIAL') {
      recommendations.push('Realizar evaluaci√≥n completa inicial');
      recommendations.push('Establecer l√≠nea base para seguimientos futuros');
    }
    
    if (type === 'SEGUIMIENTO') {
      recommendations.push('Comparar con sesi√≥n anterior');
      recommendations.push('Evaluar progreso del tratamiento');
    }
    
    if (type === 'EMERGENCIA') {
      recommendations.push('Priorizar evaluaci√≥n inmediata');
      recommendations.push('Considerar derivaci√≥n si es necesario');
    }
    
    // Recomendaciones por especialidad
    if (specialty === 'PSICOLOGIA') {
      recommendations.push('Aplicar protocolos de evaluaci√≥n psicol√≥gica');
      recommendations.push('Considerar escalas de medici√≥n apropiadas');
    }
    
    if (specialty === 'FISIOTERAPIA') {
      recommendations.push('Realizar evaluaci√≥n funcional');
      recommendations.push('Documentar rango de movimiento y fuerza');
    }
    
    return recommendations;
  }
  
  /**
   * Calcula la confianza de la clasificaci√≥n
   */
  private static calculateConfidence(
    context: ConsultationContext,
    type: ConsultationType,
    specialty: MedicalSpecialty
  ): number {
    let confidence = 70; // Base confidence
    
    // Aumentar confianza si hay historial
    if (context.previousSessions > 0) {
      confidence += 10;
    }
    
    // Aumentar confianza si la especialidad coincide con el profesional
    if (specialty === context.professionalSpecialty) {
      confidence += 15;
    }
    
    // Aumentar confianza si la transcripci√≥n es suficientemente larga
    if (context.transcription.length > 200) {
      confidence += 5;
    }
    
    return Math.min(confidence, 95); // M√°ximo 95% de confianza
  }

  /**
   * NUEVO: Calcula costo optimizado usando planes especializados
   */
  private static calculateOptimizedCost(
    planId: PlanType,
    consultationType: ConsultationType,
    specialty: MedicalSpecialty
  ) {
    try {
      return specializedPlansService.calculateProcessingCost(
        planId,
        consultationType as SpecializedConsultationType,
        specialty as SpecializedMedicalSpecialty
      );
    } catch (error) {
      console.error('Error calculando costo optimizado:', error);
      return {
        cost: 0.20,
        reasoning: 'Costo base por error en clasificaci√≥n',
        optimization: 'Usando costo base de seguridad'
      };
    }
  }

  /**
   * NUEVO: Valida l√≠mites del plan actual
   */
  private static validatePlanLimits(
    planId: PlanType,
    consultationType: ConsultationType,
    currentUsage?: any
  ) {
    if (!currentUsage) {
      return {
        canProceed: true,
        remaining: 999,
        message: 'L√≠mites no verificados',
        upgradeRecommendation: undefined
      };
    }

    try {
      return specializedPlansService.validateConsultationLimits(
        planId,
        consultationType as SpecializedConsultationType,
        currentUsage
      );
    } catch (error) {
      console.error('Error validando l√≠mites del plan:', error);
      return {
        canProceed: true,
        remaining: 0,
        message: 'Error validando l√≠mites',
        upgradeRecommendation: undefined
      };
    }
  }

  /**
   * NUEVO: Obtiene configuraci√≥n de procesamiento especializado
   */
  private static getSpecializedProcessingConfig(planId: PlanType, specialty: MedicalSpecialty) {
    try {
      const plan = specializedPlansService.getPlan(planId);
      
      return {
        soapTemplate: plan.soapTemplate,
        features: plan.features.filter(f => f.isActive),
        redFlagDetectors: plan.redFlagDetectors,
        specializedAnalysis: this.getSpecializedAnalysisConfig(specialty)
      };
    } catch (error) {
      console.error('Error obteniendo configuraci√≥n especializada:', error);
      return {
        soapTemplate: null,
        features: [],
        redFlagDetectors: [],
        specializedAnalysis: null
      };
    }
  }

  /**
   * NUEVO: Configuraci√≥n de an√°lisis especializado por disciplina
   */
  private static getSpecializedAnalysisConfig(specialty: MedicalSpecialty) {
    const configs = {
      PSICOLOGIA: {
        enableDSM5Classification: true,
        enableSuicidalRiskAssessment: true,
        enableMentalStateExam: true,
        requiredFields: ['mood_assessment', 'risk_evaluation'],
        specializedPrompts: [
          'Evaluar estado emocional y cognitivo',
          'Identificar factores de riesgo psicol√≥gico',
          'Aplicar criterios DSM-5 relevantes'
        ]
      },
      FISIOTERAPIA: {
        enableFunctionalAssessment: true,
        enableBiomechanicalAnalysis: true,
        enableNeurologicalScreening: true,
        requiredFields: ['pain_assessment', 'functional_limitations', 'range_of_motion'],
        specializedPrompts: [
          'Evaluar funci√≥n y limitaciones f√≠sicas',
          'Analizar patrones de movimiento',
          'Detectar signos neurol√≥gicos'
        ]
      },
      MEDICINA_GENERAL: {
        enableSystemsReview: true,
        enableDifferentialDiagnosis: true,
        enableReferralAssistant: true,
        requiredFields: ['chief_complaint', 'systems_review', 'clinical_impression'],
        specializedPrompts: [
          'Revisi√≥n completa por sistemas',
          'Considerar diagn√≥sticos diferenciales',
          'Evaluar necesidad de derivaci√≥n'
        ]
      }
    };

    return configs[specialty] || configs.MEDICINA_GENERAL;
  }

  /**
   * NUEVO: M√©todo para procesar consulta con especializaci√≥n completa
   */
  static async processSpecializedConsultation(
    context: ConsultationContext,
    transcription: string,
    entities: any[]
  ): Promise<{
    classification: ClassificationResult;
    specializedSOAP: any;
    costSummary: any;
  }> {
    console.log('üîÑ Iniciando procesamiento especializado de consulta...');
    
    // 1. Clasificar consulta
    const classification = await this.classifyConsultation(context);
    
    if (!classification.planValidation.canProceed) {
      throw new Error(`L√≠mite de consultas alcanzado: ${classification.planValidation.message}`);
    }

    // 2. Generar SOAP especializado
    let specializedSOAP = null;
    try {
      const soapResult = specializedPlansService.generateSpecializedSOAP(
        context.currentPlan || 'GENERAL_PRO',
        transcription,
        entities as any[]
      );
      specializedSOAP = soapResult;
    } catch (error) {
      console.error('Error generando SOAP especializado:', error);
      // Fallback a SOAP gen√©rico
    }

    // 3. Resumen de costos
    const costSummary = {
      currentConsultationCost: classification.costOptimization.cost,
      reasoning: classification.costOptimization.reasoning,
      optimization: classification.costOptimization.optimization,
      remainingInPlan: classification.planValidation.remaining,
      estimatedMonthlyCost: classification.costOptimization.cost * 30 // Estimaci√≥n
    };

    console.log('‚úÖ Procesamiento especializado completado');
    console.log(`üí∞ Costo de consulta: ‚Ç¨${costSummary.currentConsultationCost}`);
    console.log(`üìä Optimizaci√≥n: ${costSummary.optimization}`);

    return {
      classification,
      specializedSOAP,
      costSummary
    };
  }

  /**
   * Clasificaci√≥n SOAP usando Gemini 1.5 Pro (Vertex AI)
   * @param context - Contexto de la consulta
   * @param entities - Entidades NER extra√≠das
   * @param speakers - Informaci√≥n de hablantes (opcional)
   * @returns Objeto estructurado con la nota SOAP generada por Gemini
   */
  static async classifyWithGemini(
    context: ConsultationContext,
    entities: any[],
    speakers: any[] = []
  ): Promise<any> {
    const { GOOGLE_CLOUD_PROJECT_ID, GOOGLE_CLOUD_LOCATION, GOOGLE_CLOUD_CREDENTIALS } = require('../../config/env');
    const fetch = (globalThis.fetch || require('node-fetch'));
    const apiEndpoint = `https://${GOOGLE_CLOUD_LOCATION}-aiplatform.googleapis.com/v1/projects/${GOOGLE_CLOUD_PROJECT_ID}/locations/${GOOGLE_CLOUD_LOCATION}/publishers/google/models/gemini-1.5-pro:predict`;

    // Construir el prompt JSON modular
    const prompt = {
      context: {
        patientId: context.patientId,
        professionalSpecialty: context.professionalSpecialty,
        sessionDuration: context.sessionDuration,
        previousSessions: context.previousSessions,
        lastSessionDate: context.lastSessionDate,
        plan: context.currentPlan || 'GENERAL_PRO',
      },
      input: {
        transcription: context.transcription,
        entities,
        speakers
      },
      output_schema: {
        soap: {
          S: 'string',
          O: 'string',
          A: 'string',
          P: 'string'
        },
        confidence: 'number',
        redFlags: 'array',
        recommendations: 'array',
        meta: 'object'
      }
    };

    // Preparar la petici√≥n a Vertex AI
    const body = {
      instances: [
        { prompt: JSON.stringify(prompt) }
      ],
      parameters: {
        temperature: 0.2,
        maxOutputTokens: 2048,
        topP: 0.8,
        topK: 40
      }
    };

    // Autenticaci√≥n con Google Cloud (Bearer Token)
    let accessToken = process.env.GOOGLE_CLOUD_ACCESS_TOKEN;
    if (!accessToken && GOOGLE_CLOUD_CREDENTIALS) {
      // Si hay credenciales de servicio, obtener token
      const { GoogleAuth } = require('google-auth-library');
      const auth = new GoogleAuth({
        credentials: JSON.parse(GOOGLE_CLOUD_CREDENTIALS),
        scopes: ['https://www.googleapis.com/auth/cloud-platform']
      });
      accessToken = await auth.getAccessToken();
    }
    if (!accessToken) throw new Error('No se pudo obtener el token de acceso para Vertex AI');

    // Medir tiempo de inferencia
    const t0 = Date.now();
    let response, result, cost = 0;
    try {
      response = await fetch(apiEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${accessToken}`
        },
        body: JSON.stringify(body)
      });
      const json = await response.json();
      if (!response.ok) throw new Error(json.error?.message || 'Error en la llamada a Gemini');
      result = json.predictions?.[0] || json;
      // Estimar costo (puede variar seg√∫n tokens, aqu√≠ solo logging)
      cost = (json.usage?.totalTokenCount || 0) * 0.000125; // Ejemplo: $0.000125/token
    } catch (err) {
      const errorMsg = err instanceof Error ? err.message : String(err);
      console.error('‚ùå Error en classifyWithGemini:', errorMsg);
      throw err;
    }
    const t1 = Date.now();
    const elapsedMs = t1 - t0;

    // Logging de m√©tricas
    console.log('üîó Gemini 1.5 Pro - Vertex AI: llamada completada');
    console.log(`‚è±Ô∏è Tiempo de inferencia: ${elapsedMs} ms`);
    console.log(`üí∏ Costo estimado: $${cost.toFixed(4)}`);
    if (result) {
      console.log('üì¶ Respuesta Gemini:', JSON.stringify(result).substring(0, 500));
    }

    // Registrar m√©tricas en PlanLimitsService si est√° disponible
    try {
      const { PlanLimitsService } = require('../../services/PlanLimitsService');
      if (PlanLimitsService && PlanLimitsService.registerGeminiCall) {
        await PlanLimitsService.registerGeminiCall({
          elapsedMs,
          cost,
          promptLength: JSON.stringify(prompt).length,
          responseLength: JSON.stringify(result).length
        });
      }
    } catch (e) {
      // Silenciar si no est√° disponible
    }

    // Parsear y retornar la respuesta estructurada
    return result;
  }
}
