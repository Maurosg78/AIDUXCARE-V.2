import type { ClinicalAnalysisResponse, PhysicalExamResult } from '../../types/vertex-ai';

export class PromptFactory {
  static createClinicalAnalysisPrompt(transcript: string): string {
    return `Analiza esta consulta inicial de fisioterapia y organiza la información para la evaluación:

${transcript}

Consideraciones importantes:
- El paciente ya está en consulta de fisioterapia
- Condiciones médicas conocidas bajo tratamiento NO son emergencias
- Solo marca red flags si hay signos/síntomas NUEVOS y AGUDOS que requieran derivación inmediata

Devuelve un JSON con esta estructura exacta:
{
  "banderas_rojas": [
    {
      "tipo": "nombre del red flag",
      "descripcion": "hallazgos específicos",
      "accion": "derivación requerida",
      "urgencia": "inmediata/24h/48h"
    }
  ],
  "banderas_amarillas": ["factores psicosociales identificados"],
  "sintomas_principales": ["síntomas a evaluar en orden de prioridad"],
  "condiciones_medicas": ["diagnósticos mencionados"],
  "medicamentos": [
    {
      "nombre": "medicamento",
      "dosis": "si se menciona",
      "interacciones_relevantes": "para fisioterapia"
    }
  ],
  "evaluaciones_sugeridas": [
    {
      "tipo": "ortopédica/neurológica/funcional",
      "tests": ["tests específicos apropiados"],
      "justificacion": "por qué estos tests"
    }
  ],
  "precauciones": ["consideraciones por las condiciones del paciente"],
  "contexto_clinico": "resumen breve del caso",
  "motivo_consulta": "razón principal de la visita"
}`;
  }

  static createSOAPFromAnalysis(
    analysis: ClinicalAnalysisResponse,
    selectedEntityIds: string[],
    physicalExamResults: PhysicalExamResult[]
  ): string {
    const selectedEntities = analysis.entities.filter(e => selectedEntityIds.includes(e.id));
    
    return `Genera una nota SOAP profesional de fisioterapia con esta información:

INFORMACIÓN DE LA ANAMNESIS:
${JSON.stringify(selectedEntities, null, 2)}

RESULTADOS DE LA EVALUACIÓN FÍSICA REALIZADA:
${JSON.stringify(physicalExamResults, null, 2)}

CONTEXTO ADICIONAL:
- Banderas rojas identificadas: ${JSON.stringify(analysis.redFlags)}
- Banderas amarillas: ${JSON.stringify(analysis.yellowFlags)}

Genera un JSON con esta estructura exacta:
{
  "subjetivo": "historia del paciente, síntomas reportados, impacto funcional",
  "objetivo": "hallazgos de la evaluación física, tests realizados y resultados, observaciones clínicas",
  "evaluacion": "impresión clínica, diagnóstico fisioterapéutico, pronóstico",
  "plan": {
    "objetivos_tratamiento": ["objetivos SMART a corto y largo plazo"],
    "intervenciones": [
      {
        "tipo": "terapia manual/ejercicio/modalidad",
        "descripcion": "técnica específica",
        "parametros": "series, repeticiones, frecuencia",
        "justificacion": "evidencia o razonamiento clínico"
      }
    ],
    "frecuencia_tratamiento": "X veces por semana por Y semanas",
    "educacion_paciente": ["puntos clave de educación"],
    "ejercicios_casa": ["programa domiciliario"],
    "criterios_alta": ["indicadores de éxito"],
    "proxima_evaluacion": "cuándo reevaluar"
  },
  "precauciones": ["consideraciones especiales"],
  "derivaciones": ["si se requieren interconsultas"],
  "pronostico": "expectativa de recuperación basada en evidencia"
}`;
  }
}

export enum CaseComplexity {
  SIMPLE = 'simple',
  MODERATE = 'moderate',
  COMPLEX = 'complex',
  CRITICAL = 'critical'
}

export enum MedicalSpecialty {
  GENERAL = "general",
  CARDIOLOGY = "cardiology",
  NEUROLOGY = "neurology",
  ORTHOPEDICS = "orthopedics",
  PHYSIOTHERAPY = "physiotherapy",
  FISIOTERAPIA = "fisioterapia"
}
