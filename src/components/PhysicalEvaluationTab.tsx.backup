import React, { useState, useEffect } from 'react';
import { Check, ChevronDown, ChevronRight, Info } from 'lucide-react';

interface PhysicalEvaluationTabProps {
  selectedTests: string[];
  suggestedTests: Array<{
    test: string;
    objective?: string;
    reason?: string;
  }>;
  onTestSelection: (testIds: string[]) => void;
}

interface TestResult {
  id: string;
  name: string;
  category: string;
  normalValue: string;
  unit: string;
  description: string;
  isNormal: boolean;
  actualValue: string;
  notes: string;
  isSuggested?: boolean;
  isBilateral?: boolean;
  leftValue?: string;
  rightValue?: string;
  leftNormal?: boolean;
  rightNormal?: boolean;
}

const PhysicalEvaluationTab: React.FC<PhysicalEvaluationTabProps> = ({
  selectedTests,
  suggestedTests,
  onTestSelection
}) => {
  const [expandedCategories, setExpandedCategories] = useState<Set<string>>(new Set(['suggested']));
  const [testResults, setTestResults] = useState<TestResult[]>([]);

  const categories = {
    suggested: { icon: 'üìã', name: 'Suggested Tests from Analysis', color: 'bg-blue-50 border-blue-200' },
    neurological: { icon: 'üß†', name: 'Neurological Tests', color: 'bg-purple-50 border-purple-200' },
    orthopedic: { icon: 'ü¶¥', name: 'Orthopedic Tests', color: 'bg-orange-50 border-orange-200' },
    functional: { icon: 'üèÉ‚Äç‚ôÇÔ∏è', name: 'Functional Tests', color: 'bg-green-50 border-green-200' },
    balance: { icon: '‚öñÔ∏è', name: 'Balance & Mobility', color: 'bg-yellow-50 border-yellow-200' },
    strength: { icon: 'üí™', name: 'Strength Tests', color: 'bg-red-50 border-red-200' },
    rom: { icon: 'üìê', name: 'Range of Motion', color: 'bg-indigo-50 border-indigo-200' },
    special: { icon: 'ü©∫', name: 'Special Tests', color: 'bg-gray-50 border-gray-200' }
  };

  const allTests: Omit<TestResult, 'isNormal' | 'actualValue' | 'notes'>[] = [
    // Neurological
    {
      id: 'neurological-screen',
      name: 'Neurological Screen (Dermatomes, Myotomes, Reflexes)',
      category: 'neurological',
      normalValue: 'Normal sensation, 4+/5 strength, normal reflexes bilateral',
      unit: 'clinical assessment',
      description: 'Comprehensive neurological assessment for nerve function',
      isBilateral: true
    },
    {
      id: 'deep-tendon-reflexes',
      name: 'Deep Tendon Reflexes',
      category: 'neurological', 
      normalValue: '2+ bilateral',
      unit: 'grade',
      description: 'Tests spinal cord integrity and nerve pathways',
      isBilateral: true
    },

    // Orthopedic
    {
      id: 'slr',
      name: 'Straight Leg Raise',
      category: 'orthopedic',
      normalValue: '70-90¬∞',
      unit: 'degrees',
      description: 'Assesses sciatic nerve tension and lumbar radiculopathy',
      isBilateral: true
    },
    {
      id: 'lumbar-repeated-movement',
      name: 'Lumbar Repeated Movement Assessment',
      category: 'orthopedic',
      normalValue: 'Centralization of symptoms',
      unit: 'clinical response',
      description: 'McKenzie method to identify directional preference',
      isBilateral: false
    },
    {
      id: 'lumbar-flexion',
      name: 'Lumbar Flexion ROM',
      category: 'orthopedic',
      normalValue: '40-60¬∞',
      unit: 'degrees',
      description: 'Active lumbar spine forward bending',
      isBilateral: false
    },

    // Functional
    {
      id: 'tug',
      name: 'Timed Up and Go (TUG)',
      category: 'functional',
      normalValue: '<12 sec',
      unit: 'seconds',
      description: 'Assesses mobility, balance, and fall risk'
    },
    {
      id: '6mwt',
      name: '6 Minute Walk Test',
      category: 'functional',
      normalValue: '400-700m',
      unit: 'meters',
      description: 'Measures functional exercise capacity'
    },
    {
      id: '30sts',
      name: '30-Second Sit to Stand',
      category: 'functional',
      normalValue: '>12 reps',
      unit: 'repetitions',
      description: 'Tests lower extremity strength and endurance'
    },

    // Balance & Mobility
    {
      id: 'berg',
      name: 'Berg Balance Scale',
      category: 'balance',
      normalValue: '45-56 points',
      unit: 'points',
      description: '14-item balance assessment for fall risk'
    },
    {
      id: 'sls',
      name: 'Single Leg Stance',
      category: 'balance',
      normalValue: '>30 sec',
      unit: 'seconds',
      description: 'Static balance test with eyes open'
    },
    {
      id: 'tandem-walk',
      name: 'Tandem Walking',
      category: 'balance',
      normalValue: '10 steps without deviation',
      unit: 'steps',
      description: 'Dynamic balance assessment'
    },

    // Strength
    {
      id: 'grip',
      name: 'Grip Strength',
      category: 'strength',
      normalValue: 'M: 35-45kg, F: 20-30kg',
      unit: 'kg',
      description: 'Hand dynamometer strength test',
      isBilateral: true
    },
    {
      id: 'manual-muscle-test',
      name: 'Manual Muscle Testing',
      category: 'strength',
      normalValue: '4+/5 all groups',
      unit: 'grade',
      description: 'Standardized strength assessment',
      isBilateral: true
    },

    // Range of Motion
    {
      id: 'shoulder-flex',
      name: 'Shoulder Flexion ROM',
      category: 'rom',
      normalValue: '160-180¬∞',
      unit: 'degrees',
      description: 'Active shoulder forward elevation',
      isBilateral: true
    },
    {
      id: 'hip-flex',
      name: 'Hip Flexion ROM',
      category: 'rom',
      normalValue: '110-120¬∞',
      unit: 'degrees',
      description: 'Supine hip flexion measurement',
      isBilateral: true
    },
    {
      id: 'knee-flex',
      name: 'Knee Flexion ROM',
      category: 'rom',
      normalValue: '130-140¬∞',
      unit: 'degrees',
      description: 'Prone or supine knee bending',
      isBilateral: true
    },

    // Special Tests
    {
      id: 'orthostatic-vitals',
      name: 'Orthostatic Blood Pressure',
      category: 'special',
      normalValue: '<20 mmHg drop systolic',
      unit: 'mmHg',
      description: 'Tests for orthostatic hypotension'
    },
    {
      id: 'pain-scale',
      name: 'Pain Scale Assessment',
      category: 'special',
      normalValue: '0-2/10 at rest',
      unit: '/10',
      description: 'Subjective pain intensity measurement'
    }
  ];

  useEffect(() => {
    const initialResults: TestResult[] = (allTests || []).map(test => {
      const isSuggested = suggestedTests.some(suggested => 
        test.name.toLowerCase().includes(suggested.test.toLowerCase()) ||
        suggested.test.toLowerCase().includes(test.name.toLowerCase())
      );
      
      return {
        ...test,
        isNormal: true,
        actualValue: test.normalValue,
        notes: '',
        isSuggested,
        leftValue: test.isBilateral ? test.normalValue : undefined,
        rightValue: test.isBilateral ? test.normalValue : undefined,
        leftNormal: test.isBilateral ? true : undefined,
        rightNormal: test.isBilateral ? true : undefined
      };
    });

    setTestResults(initialResults);
  }, [suggestedTests]);

  const toggleCategory = (category: string) => {
    const newExpanded = new Set(expandedCategories);
    if (newExpanded.has(category)) {
      newExpanded.delete(category);
    } else {
      newExpanded.add(category);
    }
    setExpandedCategories(newExpanded);
  };

  const updateTestResult = (testId: string, field: keyof TestResult, value: any) => {
    setTestResults(prev => prev.map(test => 
      test.id === testId ? { ...test, [field]: value } : test
    ));
  };

  const getTestsByCategory = (category: string) => {
    if (category === 'suggested') {
      return testResults.filter(test => test.isSuggested);
    }
    return testResults.filter(test => test.category === category && !test.isSuggested);
  };

  const renderTest = (test: TestResult, showSuggestedBadge = false) => (
    <div key={test.id} className={`p-4 rounded-lg border-2 transition-all duration-200 ${
      test.isNormal ? 'bg-green-50 border-green-200' : 'bg-yellow-50 border-yellow-300'
    }`}>
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <div className="flex items-center gap-2 mb-2">
            <input
              type="checkbox"
              checked={selectedTests.includes(test.id)}
              onChange={(e) => {
                const newSelected = e.target.checked 
                  ? [...selectedTests, test.id]
                  : selectedTests.filter(id => id !== test.id);
                onTestSelection(newSelected);
              }}
              className="w-4 h-4 text-blue-600"
            />
            <h4 className="font-medium text-gray-900 flex items-center gap-2">
              {test.name}
              {showSuggestedBadge && <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">‚òÖ Suggested</span>}
            </h4>
          </div>
          
          <p className="text-xs text-gray-600 mb-3 italic flex items-center gap-1">
            <Info className="w-3 h-3" />
            {test.description}
          </p>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Status
              </label>
              <div className="flex gap-2">
                <label className="flex items-center">
                  <input
                    type="radio"
                    name={`${test.id}-status`}
                    checked={test.isNormal}
                    onChange={() => updateTestResult(test.id, 'isNormal', true)}
                    className="mr-1"
                  />
                  <span className="text-sm text-green-700">Normal</span>
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    name={`${test.id}-status`}
                    checked={!test.isNormal}
                    onChange={() => updateTestResult(test.id, 'isNormal', false)}
                    className="mr-1"
                  />
                  <span className="text-sm text-red-700">Abnormal</span>
                </label>
              </div>
            </div>

            {test.isBilateral ? (
              <div className="md:col-span-1">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Bilateral Results ({test.unit})
                </label>
                <div className="grid grid-cols-2 gap-2">
                  <div>
                    <label className="block text-xs text-gray-600 mb-1">Left</label>
                    <input
                      type="text"
                      value={test.leftValue || ''}
                      onChange={(e) => updateTestResult(test.id, 'leftValue', e.target.value)}
                      placeholder={test.normalValue}
                      className={`w-full p-2 border rounded text-sm ${
                        test.leftNormal ? 'border-green-300 bg-green-50' : 'border-yellow-400 bg-yellow-50'
                      }`}
                    />
                    <div className="flex gap-1 mt-1">
                      <label className="flex items-center text-xs">
                        <input
                          type="radio"
                          name={`${test.id}-left-status`}
                          checked={test.leftNormal}
                          onChange={() => updateTestResult(test.id, 'leftNormal', true)}
                          className="mr-1 scale-75"
                        />
                        <span className="text-green-700">N</span>
                      </label>
                      <label className="flex items-center text-xs">
                        <input
                          type="radio"
                          name={`${test.id}-left-status`}
                          checked={!test.leftNormal}
                          onChange={() => updateTestResult(test.id, 'leftNormal', false)}
                          className="mr-1 scale-75"
                        />
                        <span className="text-red-700">A</span>
                      </label>
                    </div>
                  </div>
                  <div>
                    <label className="block text-xs text-gray-600 mb-1">Right</label>
                    <input
                      type="text"
                      value={test.rightValue || ''}
                      onChange={(e) => updateTestResult(test.id, 'rightValue', e.target.value)}
                      placeholder={test.normalValue}
                      className={`w-full p-2 border rounded text-sm ${
                        test.rightNormal ? 'border-green-300 bg-green-50' : 'border-yellow-400 bg-yellow-50'
                      }`}
                    />
                    <div className="flex gap-1 mt-1">
                      <label className="flex items-center text-xs">
                        <input
                          type="radio"
                          name={`${test.id}-right-status`}
                          checked={test.rightNormal}
                          onChange={() => updateTestResult(test.id, 'rightNormal', true)}
                          className="mr-1 scale-75"
                        />
                        <span className="text-green-700">N</span>
                      </label>
                      <label className="flex items-center text-xs">
                        <input
                          type="radio"
                          name={`${test.id}-right-status`}
                          checked={!test.rightNormal}
                          onChange={() => updateTestResult(test.id, 'rightNormal', false)}
                          className="mr-1 scale-75"
                        />
                        <span className="text-red-700">A</span>
                      </label>
                    </div>
                  </div>
                </div>
                {test.leftValue !== test.rightValue && test.leftValue && test.rightValue && (
                  <div className="mt-1 text-xs text-orange-600 bg-orange-50 p-1 rounded">
                    ‚ö†Ô∏è Asymmetry detected: Compare sides
                  </div>
                )}
              </div>
            ) : (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Result ({test.unit})
                </label>
                <input
                  type="text"
                  value={test.actualValue}
                  onChange={(e) => updateTestResult(test.id, 'actualValue', e.target.value)}
                  placeholder={test.normalValue}
                  className={`w-full p-2 border rounded text-sm ${
                    test.isNormal ? 'border-green-300 bg-green-50' : 'border-yellow-400 bg-yellow-50'
                  }`}
                />
              </div>
            )}
          </div>

          {!test.isNormal && (
            <div className="mt-3">
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Additional Notes
              </label>
              <textarea
                value={test.notes}
                onChange={(e) => updateTestResult(test.id, 'notes', e.target.value)}
                placeholder="Document abnormal findings..."
                className="w-full p-2 border border-yellow-400 bg-yellow-50 rounded text-sm"
                rows={2}
              />
            </div>
          )}
        </div>
      </div>
    </div>
  );

  return (
    <div className="space-y-6">
      <div className="mb-6">
        <h2 className="text-xl font-semibold text-gray-900 mb-2">Physical Evaluation</h2>
        <p className="text-sm text-gray-600">
          Tests are preset with normal values. Mark as abnormal and modify only what's outside normal range.
        </p>
      </div>

      {/* Render each category */}
      {Object.entries(categories).map(([categoryKey, categoryInfo]) => {
        const categoryTests = getTestsByCategory(categoryKey);
        if (!categoryTests || categoryTests.length === 0) return null;

        return (
          <div key={categoryKey} className={`rounded-lg border-2 ${categoryInfo.color}`}>
            <button
              onClick={() => toggleCategory(categoryKey)}
              className="w-full p-4 flex items-center justify-between hover:bg-opacity-80 transition-colors"
            >
              <div className="flex items-center gap-3">
                <span className="text-xl">{categoryInfo.icon}</span>
                <h3 className="font-semibold text-gray-900">{categoryInfo.name}</h3>
                <span className="text-sm text-gray-500">({categoryTests.length} tests)</span>
              </div>
              {expandedCategories.has(categoryKey) ? 
                <ChevronDown className="w-5 h-5 text-gray-600" /> : 
                <ChevronRight className="w-5 h-5 text-gray-600" />
              }
            </button>
            
            {expandedCategories.has(categoryKey) && (
              <div className="p-4 pt-0 space-y-4">
                {categoryTests.map(test => renderTest(test, categoryKey === 'suggested'))}
              </div>
            )}
          </div>
        );
      })}

      <div className="flex justify-end pt-6 border-t">
        <button
          onClick={() => {/* Navigate to SOAP tab */}}
          disabled={selectedTests.length === 0}
          className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center gap-2"
        >
          Complete Evaluation 
          <span className="text-sm">({selectedTests.length} selected)</span>
        </button>
      </div>
    </div>
  );
};

export default PhysicalEvaluationTab;
