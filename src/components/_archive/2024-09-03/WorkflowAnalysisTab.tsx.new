import { Card, Button } from '../shared/ui';
import { PatientCard } from "./PatientCard";
import { Brain, Mic, MicOff, Upload, FileText, Eye, EyeOff } from 'lucide-react';
import { SelectableFindings } from './SelectableFindings';
import { RedFlagsAlert } from './RedFlagsAlert';
import { ProcessingStatus } from './ProcessingStatus';
import { useState } from 'react';

// ... mantener las props interface ...

export const WorkflowAnalysisTab: React.FC<WorkflowAnalysisTabProps> = ({
  // ... mantener todos los props ...
}) => {
  const [showRawResponse, setShowRawResponse] = useState(false);
  
  // ... mantener las funciones selectAll, deselectAll, etc ...

  return (
    <div className="max-w-7xl mx-auto px-4">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        
        {/* Columna Izquierda: Paciente y Controles */}
        <div className="lg:col-span-1 space-y-4">
          <PatientCard ... />
          <Card className="p-4">
            {/* Controles de grabaci칩n */}
          </Card>
          <Button onClick={onGenerateSOAP} className="w-full">
            <FileText className="w-4 h-4 mr-2" />
            Generar SOAP
          </Button>
        </div>

        {/* Columna Central: Transcripci칩n */}
        <div className="lg:col-span-1">
          <Card className="p-4 h-full">
            <h3 className="font-semibold mb-3">Contenido de la Consulta</h3>
            <textarea
              className="w-full h-96 p-3 border rounded resize-none text-sm"
              value={transcript}
              onChange={(e) => setTranscript(e.target.value)}
              placeholder="Contenido de la consulta..."
            />
            <Button onClick={onAnalyze} className="w-full mt-3">
              <Brain className="w-4 h-4 mr-2" />
              Analizar con IA
            </Button>
          </Card>
        </div>

        {/* Columna Derecha: Resultados */}
        <div className="lg:col-span-1">
          {/* Bot칩n para ver respuesta raw */}
          {niagaraResults && (
            <Button 
              variant="outline" 
              size="sm"
              onClick={() => setShowRawResponse(!showRawResponse)}
              className="mb-3"
            >
              {showRawResponse ? <EyeOff className="w-3 h-3 mr-1" /> : <Eye className="w-3 h-3 mr-1" />}
              {showRawResponse ? 'Ocultar' : 'Ver'} Respuesta Completa
            </Button>
          )}

          {/* Mostrar respuesta raw si est치 activado */}
          {showRawResponse && niagaraResults?.rawResponse && (
            <Card className="p-3 mb-4 bg-gray-50">
              <h4 className="font-mono text-xs font-semibold mb-2">Respuesta de Vertex AI:</h4>
              <pre className="text-xs whitespace-pre-wrap font-mono">
                {niagaraResults.rawResponse}
              </pre>
            </Card>
          )}

          {/* Red Flags Alert */}
          {niagaraResults?.redFlags && niagaraResults.redFlags.length > 0 && (
            <RedFlagsAlert redFlags={niagaraResults.redFlags} />
          )}

          {/* Resultados organizados */}
          {niagaraResults?.entities && (
            <SelectableFindings
              findings={niagaraResults.entities}
              selectedIds={selectedFindings}
              onSelectionChange={setSelectedFindings}
              onExamResultsChange={handleExamResultsChange}
            />
          )}
        </div>
      </div>
    </div>
  );
};
