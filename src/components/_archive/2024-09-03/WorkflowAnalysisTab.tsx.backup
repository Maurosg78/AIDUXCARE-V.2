import { Card, Button } from '../shared/ui';
import { PatientCard } from "./PatientCard";
import { Brain, Mic, MicOff, Upload, Save, FileText, CheckSquare, Square } from 'lucide-react';
import { SelectableFindings } from './SelectableFindings';
import { ProcessingStatus } from './ProcessingStatus';

interface WorkflowAnalysisTabProps {
  selectedPatient: any;
  transcript: string;
  setTranscript: (text: string) => void;
  isRecording: boolean;
  startRecording: () => void;
  stopRecording: () => void;
  recordingTime: string;
  isAnalyzing: boolean;
  isTranscribing: boolean;
  onAnalyze: () => void;
  niagaraResults: any;
  selectedFindings: string[];
  setSelectedFindings: (findings: string[]) => void;
  onGenerateSOAP: () => void;
  onContinueToEvaluation: () => void;
  handleExamResultsChange: (results: any[]) => void;
}

export const WorkflowAnalysisTab: React.FC<WorkflowAnalysisTabProps> = ({
  transcript,
  setTranscript,
  isRecording,
  startRecording,
  stopRecording,
  recordingTime,
  isAnalyzing,
  isTranscribing,
  onAnalyze,
  niagaraResults,
  selectedFindings,
  setSelectedFindings,
  onGenerateSOAP,
  onContinueToEvaluation,
  handleExamResultsChange,
  selectedPatient
}) => {
  console.log("WorkflowAnalysisTab recibe niagaraResults:", niagaraResults);  const selectAll = () => {
    if (niagaraResults?.entities) {
      setSelectedFindings(niagaraResults.entities.map((e: any) => e.id));
    }
  };

  const deselectAll = () => {
    setSelectedFindings([]);
  };

  const isAllSelected = niagaraResults?.entities?.length === selectedFindings.length;

  return (
    <div className="grid grid-cols-12 gap-4">
      {/* Columna 1: Paciente y controles */}
      <div className="col-span-3 space-y-3">
        <PatientCard 
          patient={selectedPatient}
          detectedMedications={niagaraResults?.entities.filter((e: any) => e.text.includes("ðŸ’Š")).map((e: any) => e.text) || []}
          onUpdatePatient={(updated) => console.log("Paciente actualizado:", updated)}
        />
        
        <Card className="p-3">
          <div className="text-center">
            <div className="text-3xl font-mono mb-2">{recordingTime}</div>
            <div className="flex gap-2">
              <Button
                onClick={isRecording ? stopRecording : startRecording}
                variant={isRecording ? 'destructive' : 'default'}
                size="sm"
                className="flex-1"
              >
                {isRecording ? <MicOff className="w-3 h-3" /> : <Mic className="w-3 h-3" />}
                {isRecording ? 'Parar' : 'Grabar'}
              </Button>
              <Button variant="outline" size="sm" title="Subir archivo">
                <Upload className="w-3 h-3" />
              </Button>
            </div>
          </div>
        </Card>

        <div className="space-y-2">
          <Button 
            onClick={onGenerateSOAP} 
            className="w-full" 
            size="sm" 
            disabled={selectedFindings.length === 0}
          >
            <FileText className="w-3 h-3 mr-1" />
            Generar SOAP
          </Button>
        </div>
      </div>

      {/* Columna 2: TranscripciÃ³n */}
      <div className="col-span-5">
        <Card className="p-4 h-full flex flex-col">
          <div className="flex justify-between items-center mb-2">
            <h3 className="font-semibold">Contenido de la Consulta</h3>
            {transcript.length > 0 && (
              <span className="text-xs text-gray-500">{transcript.split(' ').length} palabras</span>
            )}
          </div>
          <textarea
            className="flex-1 w-full p-3 border rounded-md resize-none text-sm"
            value={transcript}
            onChange={(e) => setTranscript(e.target.value)}
            placeholder="Escribe, pega o dicta el contenido de la consulta..."
          />
          <Button
            onClick={onAnalyze}
            disabled={!transcript || isAnalyzing}
            className="mt-3 w-full"
          >
            <Brain className="w-4 h-4 mr-2" />
            {isAnalyzing ? 'Analizando...' : 'Analizar con IA'}
          </Button>
        </Card>
      </div>

      {/* Columna 3: Resultados */}
      <div className="col-span-4 space-y-3">
        {(isAnalyzing || isTranscribing) && (
          <ProcessingStatus 
            isRecording={isRecording}
            isTranscribing={isTranscribing}
            isAnalyzing={isAnalyzing}
          />
        )}
        
        {niagaraResults && niagaraResults.entities && niagaraResults.entities.length > 0 && (
          <>
            <Card className="p-3">
              <div className="flex justify-between items-center mb-3">
                <h3 className="font-semibold text-sm">Hallazgos del AnÃ¡lisis</h3>
                <button
                  onClick={isAllSelected ? deselectAll : selectAll}
                  className="text-xs text-blue-600 hover:text-blue-800 flex items-center gap-1"
                >
                  {isAllSelected ? <CheckSquare className="w-3 h-3" /> : <Square className="w-3 h-3" />}
                  {isAllSelected ? 'Deseleccionar' : 'Seleccionar'} todo
                </button>
              </div>
              
              <SelectableFindings
                findings={niagaraResults?.entities || []}
                onSelectionChange={setSelectedFindings}
                onExamResultsChange={handleExamResultsChange}
                selectedIds={selectedFindings}
              />
            </Card>
            
            {niagaraResults.entities.some((e: any) => e.text.startsWith('ðŸ“‹')) && (
              <Button 
                onClick={onContinueToEvaluation}
                className="w-full"
                variant="default"
              >
                Continuar a EvaluaciÃ³n FÃ­sica
                {selectedFindings.length > 0 && ` (${selectedFindings.filter(id =>
                  niagaraResults.entities.find((e: any) => e.id === id && e.text.startsWith('ðŸ“‹'))
                ).length} tests)`}
              </Button>
            )}
          </>
        )}
      </div>
    </div>
  );
};
