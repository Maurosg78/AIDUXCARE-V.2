import React from 'react';
import { Heart, Activity, Brain, AlertCircle } from 'lucide-react';

interface ClinicalAnalysisResultsProps {
  results: any;
  selectedIds: string[];
  onSelectionChange: (ids: string[]) => void;
}

export const ClinicalAnalysisResults: React.FC<ClinicalAnalysisResultsProps> = ({
  results,
  selectedIds,
  onSelectionChange
}) => {
  if (!results) return null;

  const handleSelectAll = (type: string) => {
    let idsToSelect: string[] = [];
    
    switch(type) {
      case 'alerts':
        idsToSelect = results.redFlags?.map((_, i) => `alert-${i}`) || [];
        const criticalMeds = results.entities?.filter(e => 
          e.type === 'medication' && (
            e.text?.toLowerCase().includes('ketamina') ||
            e.text?.toLowerCase().includes('sin prescri') ||
            e.text?.toLowerCase().includes('no prescrit')
          )
        ) || [];
        idsToSelect.push(...criticalMeds.map(m => m.id));
        break;
        
      case 'clinical':
        const symptoms = results.entities?.filter(e => e.type === 'symptom').map(e => e.id) || [];
        const conditions = results.entities?.filter(e => e.type === 'condition').map(e => e.id) || [];
        const medications = results.entities?.filter(e => e.type === 'medication').map(e => e.id) || [];
        idsToSelect = [...symptoms, ...conditions, ...medications];
        break;
        
      case 'physical':
        idsToSelect = results.physicalTests?.map((_, i) => `physical-${i}`) || [];
        break;
        
      case 'psychosocial':
        idsToSelect = results.yellowFlags?.map((_, i) => `psych-${i}`) || [];
        break;
    }
    
    const newSelection = new Set([...selectedIds, ...idsToSelect]);
    onSelectionChange(Array.from(newSelection));
  };

  const handleClearSelection = (type: string) => {
    const filtered = selectedIds.filter(id => {
      switch(type) {
        case 'alerts':
          return !id.startsWith('alert-') && !results.entities?.find(e => e.id === id && e.type === 'medication');
        case 'clinical':
          return !results.entities?.find(e => e.id === id);
        case 'physical':
          return !id.startsWith('physical-');
        case 'psychosocial':
          return !id.startsWith('psych-');
        default:
          return true;
      }
    });
    onSelectionChange(filtered);
  };

  const handleToggle = (id: string) => {
    if (selectedIds.includes(id)) {
      onSelectionChange(selectedIds.filter(sid => sid !== id));
    } else {
      onSelectionChange([...selectedIds, id]);
    }
  };

  // Separar entidades por tipo
  const symptoms = results.entities?.filter(e => e.type === 'symptom') || [];
  const conditions = results.entities?.filter(e => e.type === 'condition') || [];
  const medications = results.entities?.filter(e => e.type === 'medication') || [];
  
  // Identificar medicación crítica
  const criticalMeds = medications.filter(m => 
    m.text?.toLowerCase().includes('ketamina') ||
    m.text?.toLowerCase().includes('sin prescri') ||
    m.text?.toLowerCase().includes('no prescrit')
  );
  
  const regularMeds = medications.filter(m => !criticalMeds.includes(m));
  const physicalTests = results.physicalTests || [];
  console.log("DEBUG physicalTests:", physicalTests, "from results:", results);
  return (
    <div className="space-y-4">
      
      {/* FILA 1: Alertas Médico-Legales */}
      <div className="bg-red-50 rounded-lg p-4 border border-red-200">
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center gap-2">
            <AlertCircle className="w-5 h-5 text-red-600" />
            <h3 className="font-semibold text-gray-800">Alertas Médico-Legales</h3>
          </div>
          <div className="flex gap-1">
            <button 
              onClick={() => handleSelectAll('alerts')}
              className="px-3 py-1 text-xs bg-red-100 text-red-700 rounded hover:bg-red-200"
            >
              Todo
            </button>
            <button 
              onClick={() => handleClearSelection('alerts')}
              className="px-3 py-1 text-xs bg-gray-100 text-gray-600 rounded hover:bg-gray-200"
            >
              Limpiar
            </button>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
          {/* Medicación crítica */}
          {criticalMeds.map((med) => (
            <label key={med.id} className="flex items-start gap-2 p-2 bg-white border-l-4 border-red-500 rounded cursor-pointer hover:bg-red-100">
              <input
                type="checkbox"
                checked={selectedIds.includes(med.id)}
                onChange={() => handleToggle(med.id)}
                className="mt-0.5"
              />
              <span className="text-sm font-medium text-red-700">
                ⚠️ {med.text}
              </span>
            </label>
          ))}
          
          {/* Red flags */}
          {results.redFlags?.map((flag, i) => (
            <label key={`alert-${i}`} className="flex items-start gap-2 p-2 bg-white rounded cursor-pointer hover:bg-red-100">
              <input
                type="checkbox"
                checked={selectedIds.includes(`alert-${i}`)}
                onChange={() => handleToggle(`alert-${i}`)}
                className="mt-0.5"
              />
              <span className="text-sm">{typeof flag === "string" ? flag : (flag?.pattern || flag?.text || "Error de formato")}</span>
            </label>
          ))}
        </div>
      </div>

      {/* FILA 2: Hallazgos Clínicos */}
      <div className="bg-blue-50 rounded-lg p-4 border border-blue-200">
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center gap-2">
            <Heart className="w-5 h-5 text-blue-600" />
            <h3 className="font-semibold text-gray-800">Hallazgos Clínicos</h3>
          </div>
          <div className="flex gap-1">
            <button 
              onClick={() => handleSelectAll('clinical')}
              className="px-3 py-1 text-xs bg-blue-100 text-blue-700 rounded hover:bg-blue-200"
            >
              Todo
            </button>
            <button 
              onClick={() => handleClearSelection('clinical')}
              className="px-3 py-1 text-xs bg-gray-100 text-gray-600 rounded hover:bg-gray-200"
            >
              Limpiar
            </button>
          </div>
        </div>
        
        {/* Grid de 2-3 columnas para mejor distribución */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
          
          {/* Síntomas actuales */}
          {symptoms.length > 0 && (
            <div className="col-span-1">
              <p className="text-xs font-semibold text-gray-600 mb-2 uppercase">Síntomas Actuales</p>
              <div className="space-y-1">
                {symptoms.map(symptom => (
                  <label key={symptom.id} className="flex items-start gap-2 cursor-pointer hover:bg-blue-100 p-1 rounded">
                    <input
                      type="checkbox"
                      checked={selectedIds.includes(symptom.id)}
                      onChange={() => handleToggle(symptom.id)}
                      className="mt-0.5"
                    />
                    <span className="text-sm">{symptom.text}</span>
                  </label>
                ))}
              </div>
            </div>
          )}
          
          {/* Historial médico */}
          {conditions.length > 0 && (
            <div className="col-span-1">
              <p className="text-xs font-semibold text-gray-600 mb-2 uppercase">Historial Médico</p>
              <div className="space-y-1">
                {conditions.map(condition => (
                  <label key={condition.id} className="flex items-start gap-2 cursor-pointer hover:bg-blue-100 p-1 rounded">
                    <input
                      type="checkbox"
                      checked={selectedIds.includes(condition.id)}
                      onChange={() => handleToggle(condition.id)}
                      className="mt-0.5"
                    />
                    <span className="text-sm">{condition.text}</span>
                  </label>
                ))}
              </div>
            </div>
          )}
          
          {/* Medicación regular */}
          {regularMeds.length > 0 && (
            <div className="col-span-1">
              <p className="text-xs font-semibold text-gray-600 mb-2 uppercase">Medicación Actual</p>
              <div className="space-y-1">
                {regularMeds.map(med => (
                  <label key={med.id} className="flex items-start gap-2 cursor-pointer hover:bg-blue-100 p-1 rounded">
                    <input
                      type="checkbox"
                      checked={selectedIds.includes(med.id)}
                      onChange={() => handleToggle(med.id)}
                      className="mt-0.5"
                    />
                    <span className="text-sm">{med.text}</span>
                  </label>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* FILA 3: Evaluación Física Propuesta */}
      <div className="bg-purple-50 rounded-lg p-4 border border-purple-200">
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center gap-2">
            <Activity className="w-5 h-5 text-purple-600" />
            <h3 className="font-semibold text-gray-800">Evaluación Física Propuesta</h3>
          </div>
          <div className="flex gap-1">
            <button 
              onClick={() => handleSelectAll('physical')}
              className="px-3 py-1 text-xs bg-purple-100 text-purple-700 rounded hover:bg-purple-200"
            >
              Todo
            </button>
            <button 
              onClick={() => handleClearSelection('physical')}
              className="px-3 py-1 text-xs bg-gray-100 text-gray-600 rounded hover:bg-gray-200"
            >
              Limpiar
            </button>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
          {physicalTests.map((test, i) => (
            <label key={`physical-${i}`} className="flex items-start gap-2 cursor-pointer hover:bg-purple-100 p-2 rounded">
              <input
                type="checkbox"
                checked={selectedIds.includes(`physical-${i}`)}
                onChange={() => handleToggle(`physical-${i}`)}
                className="mt-0.5"
              />
              <span className="text-sm">{i + 1}. {test}</span>
            </label>
          ))}
        </div>
      </div>

      {/* FILA 4: Factores Psicosociales */}
      <div className="bg-yellow-50 rounded-lg p-4 border border-yellow-200">
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center gap-2">
            <Brain className="w-5 h-5 text-yellow-600" />
            <h3 className="font-semibold text-gray-800">Factores Psicosociales y Contexto Humano</h3>
          </div>
          <div className="flex gap-1">
            <button 
              onClick={() => handleSelectAll('psychosocial')}
              className="px-3 py-1 text-xs bg-yellow-100 text-yellow-700 rounded hover:bg-yellow-200"
            >
              Todo
            </button>
            <button 
              onClick={() => handleClearSelection('psychosocial')}
              className="px-3 py-1 text-xs bg-gray-100 text-gray-600 rounded hover:bg-gray-200"
            >
              Limpiar
            </button>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
          {results.yellowFlags?.map((flag, i) => (
            <label key={`psych-${i}`} className="bg-white p-2 rounded border border-yellow-200 cursor-pointer hover:bg-yellow-100 flex items-start gap-2">
              <input
                type="checkbox"
                checked={selectedIds.includes(`psych-${i}`)}
                onChange={() => handleToggle(`psych-${i}`)}
                className="mt-0.5"
              />
              <span className="text-sm">{typeof flag === "string" ? flag : (flag?.pattern || flag?.text || "Factor psicosocial")}</span>
            </label>
          ))}
        </div>
      </div>
    </div>
  );
};
