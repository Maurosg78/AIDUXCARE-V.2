import React, { createContext, useContext, useState, useEffect } from 'react';
import { SessionStorage } from '../services/session-storage';

interface SessionContextType {
  sessionData: any;
  updateSessionData: (key: string, value: any) => void;
  saveSession: () => void;
  loadPreviousSession: (patientId: string) => any;
}

const SessionContext = createContext<SessionContextType | undefined>(undefined);

export const SessionProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [sessionData, setSessionData] = useState({
    patientId: null,
    tab1: {
      transcript: '',
      analysisResults: null,
      selectedItems: []
    },
    tab2: {
      suggestedTests: [],
      completedTests: []
    },
    tab3: {
      soapNote: null
    },
    metadata: {
      startTime: new Date().toISOString(),
      lastSaved: null
    }
  });

  const updateSessionData = (key: string, value: any) => {
    setSessionData(prev => ({
      ...prev,
      [key]: { ...prev[key], ...value },
      metadata: { ...prev.metadata, lastModified: new Date().toISOString() }
    }));
  };

  const saveSession = () => {
    if (sessionData.patientId) {
      SessionStorage.saveSession(sessionData.patientId, sessionData);
      console.log('SesiÃ³n guardada:', new Date().toISOString());
    }
  };

  const loadPreviousSession = (patientId: string) => {
    return SessionStorage.getSession(patientId);
  };

  // Auto-guardado cada 30 segundos
  useEffect(() => {
    const interval = setInterval(saveSession, 30000);
    return () => clearInterval(interval);
  }, [sessionData]);

  return (
    <SessionContext.Provider value={{
      sessionData,
      updateSessionData,
      saveSession,
      loadPreviousSession
    }}>
      {children}
    </SessionContext.Provider>
  );
};

export const useSession = () => {
  const context = useContext(SessionContext);
  if (!context) throw new Error('useSession debe usarse dentro de SessionProvider');
  return context;
};
