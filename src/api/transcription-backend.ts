/**
 * MEDICAL AIDUXCARE - BACKEND TRANSCRIPTION SERVICE
 * Pipeline profesional: Audio ‚Üí Google Cloud Speech-to-Text ‚Üí Structured Output
 */

export interface TranscriptionRequest {
  audio: Blob;
  patientId: string;
  speakerDiarization: boolean;
  medicalContext: string;
}

export interface SpeakerLabel {
  speaker: 'PATIENT' | 'THERAPIST';
  label: string; // Para compatibilidad con la UI
  text: string;
  timestamp: number;
  confidence: number;
}

export interface TranscriptionResponse {
  text: string; // SUCCESS Corregido: text en lugar de transcript
  confidence: number;
  duration: number; // SUCCESS Agregado: duraci√≥n en segundos
  speakers?: SpeakerLabel[]; // SUCCESS Corregido: speakers en lugar de speakerLabels
  processingTime: number;
  audioQuality: 'excellent' | 'good' | 'poor';
}

export interface SOAPClassificationRequest {
  transcript: string;
  speakerLabels: SpeakerLabel[];
  patientContext: {
    id: string;
    name: string;
    condition: string;
    medicalHistory: string[];
  };
  useVertexAI: boolean;
}

export interface SOAPResponse {
  subjective: string;
  objective: string;
  assessment: string;
  plan: string;
  confidence: {
    subjective: number;
    objective: number;
    assessment: number;
    plan: number;
  };
  overallConfidence: number;
  processingTime: number;
  processingMethod: 'vertex-ai' | 'gemini-developer';
  timestamp: string;
}

/**
 * MOCK BACKEND IMPLEMENTATION
 * Simula el comportamiento del backend real mientras esperamos la infraestructura
 */
export class ProfessionalTranscriptionService {
  
  /**
   * Simula Google Cloud Speech-to-Text con Speaker Diarization
   */
  static async transcribeAudio(audio: Blob, config: Partial<TranscriptionRequest>): Promise<TranscriptionResponse> {
    console.log('üîä [BACKEND MOCK] Procesando audio con Google Cloud Speech-to-Text...');
    console.log('STATS Configuraci√≥n:', config);
    
    // Simular tiempo de procesamiento real
    await this.delay(2000 + Math.random() * 3000);
    
    // Simular transcripci√≥n m√©dica realista basada en el contexto del paciente
    const mockTranscriptions = this.getMockTranscriptionForContext(config.medicalContext || '');
    const selectedTranscription = mockTranscriptions[Math.floor(Math.random() * mockTranscriptions.length)];
    
    console.log('SUCCESS [BACKEND MOCK] Transcripci√≥n completada');
    
    return {
      text: selectedTranscription.fullText, // SUCCESS Corregido: text en lugar de transcript
      confidence: Math.round((0.92 + Math.random() * 0.07) * 100), // SUCCESS Corregido: porcentaje
      duration: 45 + Math.round(Math.random() * 30), // SUCCESS Agregado: duration
      speakers: selectedTranscription.speakers.map(s => ({ // SUCCESS Corregido: speakers
        ...s,
        label: s.speaker === 'PATIENT' ? 'Paciente' : 'Terapeuta'
      })),
      processingTime: 2.3,
      audioQuality: 'excellent' as const
    };
  }

  /**
   * Simula RealWorldSOAPProcessor + Gemini clasificaci√≥n
   */
  static async classifySOAP(request: SOAPClassificationRequest): Promise<SOAPResponse> {
    console.log('ü§ñ [BACKEND MOCK] Clasificando SOAP con RealWorldSOAPProcessor...');
    console.log('TARGET M√©todo preferido:', request.useVertexAI ? 'Vertex AI' : 'Gemini Developer');
    
    // Simular tiempo de procesamiento de IA
    await this.delay(1500 + Math.random() * 2000);
    
    // Generar SOAP contextual basado en la transcripci√≥n
    const soapResult = this.generateContextualSOAP(request);
    
    console.log('SUCCESS [BACKEND MOCK] Clasificaci√≥n SOAP completada');
    
    return soapResult;
  }

  /**
   * Genera transcripciones m√©dicas realistas por contexto
   */
  private static getMockTranscriptionForContext(context: string): Array<{fullText: string, speakers: SpeakerLabel[]}> {
    if (context.toLowerCase().includes('lumbar') || context.toLowerCase().includes('espalda')) {
      return [{
        fullText: "Doctora buenos d√≠as. Vengo porque tengo un dolor en la parte baja de la espalda que me est√° molestando, especialmente por las ma√±anas cuando me levanto. Me duele cuando me muevo de cierta manera. Muy bien, d√©jeme examinarla. Flexione hacia adelante por favor. Veo que hay cierta limitaci√≥n en el movimiento y refiere molestias en esta zona. Vamos a evaluar m√°s detalladamente para determinar el mejor abordaje fisioterap√©utico.",
        speakers: [
          { speaker: 'PATIENT', label: 'Paciente', text: 'Doctora buenos d√≠as. Vengo porque tengo un dolor en la parte baja de la espalda que me est√° molestando, especialmente por las ma√±anas cuando me levanto. Me duele cuando me muevo de cierta manera.', timestamp: 0, confidence: 0.95 },
          { speaker: 'THERAPIST', label: 'Terapeuta', text: 'Muy bien, d√©jeme examinarla. Flexione hacia adelante por favor. Veo que hay cierta limitaci√≥n en el movimiento y refiere molestias en esta zona.', timestamp: 15, confidence: 0.93 },
          { speaker: 'THERAPIST', label: 'Terapeuta', text: 'Vamos a evaluar m√°s detalladamente para determinar el mejor abordaje fisioterap√©utico.', timestamp: 35, confidence: 0.96 }
        ]
      }];
    }
    
    if (context.toLowerCase().includes('hombro')) {
      return [{
        fullText: "Doctor, vengo por un dolor en el hombro que comenz√≥ hace poco despu√©s de hacer un esfuerzo. Me molesta cuando levanto el brazo. Entiendo. Perm√≠tame evaluar la movilidad del hombro. Levante el brazo lateralmente. Observo cierta limitaci√≥n en el movimiento del hombro. Vamos a trabajar en mejorar la funci√≥n y el rango de movimiento con fisioterapia.",
        speakers: [
          { speaker: 'PATIENT', label: 'Paciente', text: 'Doctor, vengo por un dolor en el hombro que comenz√≥ hace poco despu√©s de hacer un esfuerzo. Me molesta cuando levanto el brazo.', timestamp: 0, confidence: 0.94 },
          { speaker: 'THERAPIST', label: 'Terapeuta', text: 'Entiendo. Perm√≠tame evaluar la movilidad del hombro. Levante el brazo lateralmente. Observo cierta limitaci√≥n en el movimiento del hombro.', timestamp: 18, confidence: 0.92 },
          { speaker: 'THERAPIST', label: 'Terapeuta', text: 'Vamos a trabajar en mejorar la funci√≥n y el rango de movimiento con fisioterapia.', timestamp: 40, confidence: 0.95 }
        ]
      }];
    }

    // Transcripci√≥n gen√©rica
    return [{
      fullText: "Buenos d√≠as doctor. Vengo por una consulta porque he estado sintiendo algunas molestias. Perfecto, cu√©nteme en detalle qu√© s√≠ntomas ha presentado y desde cu√°ndo. Voy a realizar un examen f√≠sico completo para evaluar su condici√≥n.",
      speakers: [
        { speaker: 'PATIENT', label: 'Paciente', text: 'Buenos d√≠as doctor. Vengo por una consulta porque he estado sintiendo algunas molestias.', timestamp: 0, confidence: 0.90 },
        { speaker: 'THERAPIST', label: 'Terapeuta', text: 'Perfecto, cu√©nteme en detalle qu√© s√≠ntomas ha presentado y desde cu√°ndo. Voy a realizar un examen f√≠sico completo para evaluar su condici√≥n.', timestamp: 8, confidence: 0.88 }
      ]
    }];
  }

  /**
   * Genera clasificaci√≥n SOAP contextual usando IA simulada
   * IMPORTANTE: Conservador y apropiado para fisioterapia, sin diagn√≥sticos m√©dicos ni medicamentos
   */
  private static generateContextualSOAP(request: SOAPClassificationRequest): SOAPResponse {
    const transcript = request.transcript.toLowerCase();
    
    let subjective = "Paciente refiere molestias seg√∫n lo manifestado durante la consulta.";
    let objective = "Evaluaci√≥n funcional realizada seg√∫n protocolos de fisioterapia.";
    let assessment = "Evaluaci√≥n fisioterap√©utica en proceso. Se requiere m√°s informaci√≥n para determinar plan de tratamiento espec√≠fico.";
    let plan = "1. Evaluaci√≥n funcional completa\n2. Programa de ejercicios terap√©uticos\n3. Seguimiento fisioterap√©utico\n4. Derivaci√≥n m√©dica si se requiere manejo farmacol√≥gico o estudios complementarios";

    // An√°lisis CONSERVADOR basado √öNICAMENTE en lo transcrito, SIN inventar detalles
    if (transcript.includes('dolor') && (transcript.includes('lumbar') || transcript.includes('espalda'))) {
      subjective = "Paciente refiere molestias en regi√≥n lumbar seg√∫n lo expresado durante la consulta.";
      objective = "Evaluaci√≥n funcional de regi√≥n lumbar realizada, con hallazgos documentados por el fisioterapeuta.";
      assessment = "Disfunci√≥n musculoesquel√©tica en regi√≥n lumbar que requiere abordaje fisioterap√©utico conservador. Evaluaci√≥n en curso para determinar origen funcional.";
      plan = "1. Evaluaci√≥n biomec√°nica completa\n2. Programa de ejercicios de movilidad\n3. Educaci√≥n en higiene postural\n4. Seguimiento fisioterap√©utico semanal\n5. Derivaci√≥n m√©dica para valoraci√≥n y manejo farmacol√≥gico si es necesario";
    }
    
    if (transcript.includes('hombro') && transcript.includes('dolor')) {
      subjective = "Paciente refiere molestias en hombro seg√∫n lo comunicado durante la evaluaci√≥n.";
      objective = "Evaluaci√≥n funcional de hombro realizada, con valoraci√≥n de rango de movimiento documentada.";
      assessment = "Disfunci√≥n funcional de hombro que requiere evaluaci√≥n espec√≠fica fisioterap√©utica. Necesario determinar limitaciones funcionales espec√≠ficas.";
      plan = "1. Evaluaci√≥n detallada de patrones de movimiento\n2. Programa de movilizaci√≥n progresiva\n3. Ejercicios de fortalecimiento gradual\n4. Educaci√≥n en ergonom√≠a\n5. Derivaci√≥n m√©dica para estudios complementarios si es necesario";
    }

    // Para cualquier menci√≥n de medicamentos, derivar apropiadamente
    if (transcript.includes('medicamento') || transcript.includes('pastilla') || transcript.includes('medicina')) {
      plan = "1. Evaluaci√≥n funcional fisioterap√©utica\n2. Programa de ejercicios terap√©uticos\n3. DERIVACI√ìN M√âDICA para evaluaci√≥n farmacol√≥gica (fisioterapeuta no prescribe medicamentos)\n4. Seguimiento fisioterap√©utico\n5. Coordinaci√≥n con equipo m√©dico";
    }

    const baseConfidence = 75 + Math.random() * 15; // 75-90% (m√°s conservador)
    const confidenceVariation = () => Math.round(baseConfidence + (Math.random() - 0.5) * 10);

    return {
      subjective,
      objective,
      assessment,
      plan,
      confidence: {
        subjective: confidenceVariation(),
        objective: confidenceVariation(),
        assessment: confidenceVariation(),
        plan: confidenceVariation()
      },
      overallConfidence: Math.round(baseConfidence),
      processingTime: Math.round(1500 + Math.random() * 2000),
      processingMethod: request.useVertexAI ? 'vertex-ai' : 'gemini-developer',
      timestamp: new Date().toISOString()
    };
  }

  private static delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

/**
 * API Routes Mock - Simula los endpoints del backend
 */
export const BackendAPI = {
  async transcribeAudio(audioBlob: Blob, medicalContext: string): Promise<TranscriptionResponse> {
    console.log('üé§ BackendAPI.transcribeAudio llamado con:', {
      audioSize: audioBlob.size,
      audioType: audioBlob.type,
      medicalContext
    });
    
    return await ProfessionalTranscriptionService.transcribeAudio(audioBlob, {
      medicalContext,
      speakerDiarization: true
    });
  },

  async classifySOAP(transcript: string, medicalContext: string): Promise<SOAPResponse> {
    console.log('ü§ñ BackendAPI.classifySOAP llamado con:', {
      transcriptLength: transcript.length,
      medicalContext
    });
    
    const request: SOAPClassificationRequest = {
      transcript,
      speakerLabels: [], // Se obtendr√≠a de la transcripci√≥n real
      patientContext: {
        id: 'mock-patient',
        name: 'Mock Patient',
        condition: medicalContext,
        medicalHistory: []
      },
      useVertexAI: false // Usar Gemini Developer por ahora
    };
    
    return await ProfessionalTranscriptionService.classifySOAP(request);
  }
}; 