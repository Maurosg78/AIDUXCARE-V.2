/**
 * üè• AIDUXCARE - VISTA INTEGRADA DE CONSULTA
 * Pipeline profesional: Audio ‚Üí Backend ‚Üí Speech-to-Text ‚Üí SOAP ‚Üí Editor
 */

import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { AiDuxCareLogo } from '../components/branding/AiDuxCareLogo';
import { localStorageService } from '@/services/LocalStorageService';

// Interfaces
interface Patient {
  id: string;
  name: string;
  age: number;
  gender: string;
  phone: string;
  email: string;
  medicalHistory: string[];
  currentMedications: string[];
  allergies: string[];
  lastVisit?: string;
  consultationType: 'primera' | 'seguimiento';
  appointmentReason: string;
}

interface MedicalHighlight {
  id: string;
  text: string;
  category: 'symptom' | 'medication' | 'allergy' | 'vital' | 'warning';
  timestamp: string;
  checked: boolean;
  editable: boolean;
}

interface AIQuestion {
  id: string;
  question: string;
  category: 'anamnesis' | 'followup' | 'assessment';
  priority: 'high' | 'medium' | 'low';
  basedOn: string;
}

interface SOAPData {
  subjective: string;
  objective: string;
  assessment: string;
  plan: string;
  confidence: number;
  timestamp: string;
}

interface RecordingState {
  isRecording: boolean;
  isPaused: boolean;
  duration: number;
  audioQuality: 'excellent' | 'good' | 'poor';
  audioBlob: Blob | null;
}

interface TranscriptionState {
  isProcessing: boolean;
  rawText: string;
  confidence: number;
  speakerLabels: Array<{
    speaker: 'PATIENT' | 'THERAPIST';
    text: string;
    timestamp: number;
  }>;
}

const IntegratedConsultationPage: React.FC = () => {
  const { patientId } = useParams<{ patientId: string }>();
  const navigate = useNavigate();

  // Estados principales
  const [patient, setPatient] = useState<Patient | null>(null);
  const [aiQuestions, setAiQuestions] = useState<AIQuestion[]>([]);
  const [recording, setRecording] = useState<RecordingState>({
    isRecording: false,
    isPaused: false,
    duration: 0,
    audioQuality: 'good',
    audioBlob: null
  });
  const [transcription, setTranscription] = useState<TranscriptionState>({
    isProcessing: false,
    rawText: '',
    confidence: 0,
    speakerLabels: []
  });
  const [soapData, setSoapData] = useState<SOAPData | null>(null);
  const [processingStage, setProcessingStage] = useState<string>('');

  // Referencias para grabaci√≥n
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  // Cargar datos reales del paciente desde localStorage
  useEffect(() => {
    if (!patientId) {
      console.error('ERROR: patientId no proporcionado');
      return;
    }

    const realPatient = localStorageService.getPatientById(patientId);
    
    if (!realPatient) {
      console.error('ERROR: Paciente no encontrado:', patientId);
      return;
    }

    console.log('SUCCESS: Paciente cargado:', realPatient.name);

    // Convertir a formato de IntegratedConsultationPage
    const patient: Patient = {
      id: realPatient.id,
      name: realPatient.name,
      age: realPatient.age,
      gender: realPatient.age < 30 ? 'Joven' : realPatient.age > 60 ? 'Adulto mayor' : 'Adulto',
      phone: realPatient.phone,
      email: realPatient.email,
      medicalHistory: realPatient.clinicalHistory ? [realPatient.clinicalHistory] : ['Sin antecedentes registrados'],
      currentMedications: realPatient.medications || ['Sin medicaciones registradas'],
      allergies: realPatient.allergies || ['Sin alergias conocidas'],
      lastVisit: realPatient.updatedAt ? new Date(realPatient.updatedAt).toLocaleDateString() : 'Primera consulta',
      consultationType: 'primera',
      appointmentReason: realPatient.condition
    };

    setPatient(patient);

    // Generar preguntas basadas en el motivo de consulta real
    const generatedQuestions: AIQuestion[] = [
      {
        id: '1',
        question: `¬øPuede describir en detalle los s√≠ntomas relacionados con: ${realPatient.condition}?`,
        category: 'anamnesis',
        priority: 'high',
        basedOn: `Motivo de consulta: ${realPatient.condition}`
      },
      {
        id: '2',
        question: '¬øCu√°ndo comenzaron estos s√≠ntomas y c√≥mo han evolucionado?',
        category: 'anamnesis',
        priority: 'high',
        basedOn: 'Evaluaci√≥n temporal de s√≠ntomas'
      },
      {
        id: '3',
        question: '¬øHa probado alg√∫n tratamiento previo? ¬øCon qu√© resultados?',
        category: 'followup',
        priority: 'medium',
        basedOn: 'Historia terap√©utica previa'
      }
    ];

    setAiQuestions(generatedQuestions);
  }, [patientId]);

  /**
   * PIPELINE PROFESIONAL: Iniciar grabaci√≥n de audio
   * Captura audio de alta calidad para enviar al backend
   */
  const startRecording = async () => {
    try {
      setProcessingStage('Solicitando permisos de micr√≥fono...');
      
      // Configuraci√≥n profesional de audio
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
          sampleRate: 48000,
          channelCount: 1
        }
      });

      // Configurar MediaRecorder para calidad profesional
      const mediaRecorder = new MediaRecorder(stream, {
        mimeType: 'audio/webm;codecs=opus'
      });

      mediaRecorderRef.current = mediaRecorder;
      audioChunksRef.current = [];

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
        }
      };

      mediaRecorder.onstop = async () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });
        setRecording(prev => ({ ...prev, audioBlob }));
        
        // Enviar inmediatamente al backend para procesamiento
        await processAudioWithBackend(audioBlob);
      };

      // Iniciar grabaci√≥n
      mediaRecorder.start(1000); // Chunk cada segundo
      setRecording(prev => ({ 
        ...prev, 
        isRecording: true, 
        isPaused: false, 
        duration: 0,
        audioQuality: 'excellent'
      }));

      // Iniciar contador de tiempo
      intervalRef.current = setInterval(() => {
        setRecording(prev => ({ ...prev, duration: prev.duration + 1 }));
      }, 1000);

      setProcessingStage('Grabando consulta...');
      console.log('‚úÖ Grabaci√≥n profesional iniciada');

    } catch (error) {
      console.error('‚ùå Error al iniciar grabaci√≥n:', error);
      setProcessingStage('Error: No se pudo acceder al micr√≥fono');
    }
  };

  /**
   * PIPELINE PROFESIONAL: Detener grabaci√≥n
   */
  const stopRecording = () => {
    if (mediaRecorderRef.current && recording.isRecording) {
      mediaRecorderRef.current.stop();
      setRecording(prev => ({ ...prev, isRecording: false }));
      
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }

      // Detener stream de audio
      const stream = mediaRecorderRef.current.stream;
      stream.getTracks().forEach(track => track.stop());

      setProcessingStage('Procesando audio con backend...');
      console.log('‚úÖ Grabaci√≥n detenida, enviando al backend');
    }
  };

  /**
   * PIPELINE PROFESIONAL: Procesar audio con backend
   * Env√≠a audio a Google Cloud Speech-to-Text v√≠a nuestro backend
   */
  const processAudioWithBackend = async (audioBlob: Blob) => {
    try {
      setTranscription(prev => ({ ...prev, isProcessing: true }));
      setProcessingStage('Transcribiendo con Google Cloud Speech-to-Text...');

      // Preparar FormData para enviar al backend
      const formData = new FormData();
      formData.append('audio', audioBlob, 'consultation.webm');
      formData.append('patientId', patientId || '');
      formData.append('speakerDiarization', 'true');
      formData.append('medicalContext', patient?.appointmentReason || '');

      // Enviar al endpoint de transcripci√≥n del backend
      const transcriptionResponse = await fetch('/api/transcription', {
        method: 'POST',
        body: formData,
        headers: {
          'Accept': 'application/json'
        }
      });

      if (!transcriptionResponse.ok) {
        throw new Error(`Error de transcripci√≥n: ${transcriptionResponse.status}`);
      }

      const transcriptionResult = await transcriptionResponse.json();
      console.log('‚úÖ Transcripci√≥n recibida del backend:', transcriptionResult);

      // Actualizar estado de transcripci√≥n
      setTranscription({
        isProcessing: false,
        rawText: transcriptionResult.transcript,
        confidence: transcriptionResult.confidence,
        speakerLabels: transcriptionResult.speakerLabels || []
      });

      // PASO 3: Procesar con RealWorldSOAPProcessor y Gemini
      await processSOAPClassification(transcriptionResult);

    } catch (error) {
      console.error('‚ùå Error en procesamiento de audio:', error);
      setTranscription(prev => ({ ...prev, isProcessing: false }));
      setProcessingStage(`Error: ${error.message}`);
    }
  };

  /**
   * PIPELINE PROFESIONAL: Clasificaci√≥n SOAP con Gemini
   * Usa RealWorldSOAPProcessor + ConsultationClassifier + Vertex AI
   */
  const processSOAPClassification = async (transcriptionResult: any) => {
    try {
      setProcessingStage('Clasificando con Gemini 1.5 Pro...');

      // Enviar transcripci√≥n al procesador SOAP del backend
      const soapResponse = await fetch('/api/soap-classification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          transcript: transcriptionResult.transcript,
          speakerLabels: transcriptionResult.speakerLabels,
          patientContext: {
            id: patient?.id,
            name: patient?.name,
            condition: patient?.appointmentReason,
            medicalHistory: patient?.medicalHistory
          },
          useVertexAI: true // Preferir Vertex AI si est√° disponible
        })
      });

      if (!soapResponse.ok) {
        throw new Error(`Error de clasificaci√≥n SOAP: ${soapResponse.status}`);
      }

      const soapResult = await soapResponse.json();
      console.log('‚úÖ Clasificaci√≥n SOAP completada:', soapResult);

      // PASO 4: Poblar el Editor SOAP Din√°mico
      setSoapData({
        subjective: soapResult.subjective,
        objective: soapResult.objective,
        assessment: soapResult.assessment,
        plan: soapResult.plan,
        confidence: soapResult.confidence,
        timestamp: new Date().toISOString()
      });

      setProcessingStage('Pipeline completado exitosamente');
      console.log('üéØ WALKING SKELETON COMPLETADO: Pipeline End-to-End funcional');

    } catch (error) {
      console.error('‚ùå Error en clasificaci√≥n SOAP:', error);
      setProcessingStage(`Error en clasificaci√≥n: ${error.message}`);
    }
  };

  const toggleRecording = () => {
    if (recording.isRecording) {
      stopRecording();
    } else {
      startRecording();
    }
  };

  const formatDuration = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  if (!patient) {
    return (
      <div className="min-h-screen bg-[#F7F7F7] flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#5DA5A3] mx-auto mb-4"></div>
          <p className="text-[#2C3E50]">Cargando informaci√≥n del paciente...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[#F7F7F7]">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-[#BDC3C7]/20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <AiDuxCareLogo size="sm" />
              <div className="h-6 w-px bg-[#BDC3C7]/30"></div>
              <h1 className="text-xl font-semibold text-[#2C3E50]">Consulta Profesional</h1>
              <div className="text-sm text-[#2C3E50]/60">Pipeline End-to-End</div>
            </div>
            <button
              onClick={() => navigate('/patients')}
              className="text-[#5DA5A3] hover:text-[#4A8280] font-medium"
            >
              ‚Üê Volver a Pacientes
            </button>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        {/* Estado del Pipeline */}
        {processingStage && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
            <div className="flex items-center space-x-3">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
              <span className="text-blue-800 font-medium">Estado del Pipeline:</span>
              <span className="text-blue-600">{processingStage}</span>
            </div>
          </div>
        )}

        <div className="grid grid-cols-12 gap-6">
          
          {/* Panel Informaci√≥n del Paciente */}
          <div className="col-span-12 lg:col-span-3">
            <div className="bg-white rounded-xl shadow-sm border border-[#BDC3C7]/20 p-6">
              <div className="flex items-center space-x-3 mb-4">
                <div className="w-12 h-12 bg-[#5DA5A3] rounded-full flex items-center justify-center">
                  <span className="text-white font-bold text-lg">
                    {patient.name.split(' ').map(n => n[0]).join('')}
                  </span>
                </div>
                <div>
                  <h2 className="font-semibold text-[#2C3E50]">{patient.name}</h2>
                  <p className="text-sm text-[#2C3E50]/60">{patient.age} a√±os ‚Ä¢ {patient.gender}</p>
                </div>
              </div>

              <div className="space-y-4">
                <div>
                  <h3 className="font-medium text-[#2C3E50] mb-2">Motivo de Consulta</h3>
                  <p className="text-sm text-[#2C3E50]/80 bg-yellow-50 p-2 rounded-md">
                    {patient.appointmentReason}
                  </p>
                </div>

                <div>
                  <h3 className="font-medium text-[#2C3E50] mb-2">Antecedentes</h3>
                  <div className="space-y-1">
                    {patient.medicalHistory.map((history, index) => (
                      <span key={index} className="inline-block bg-[#5DA5A3]/10 text-[#2C3E50] px-2 py-1 rounded-md text-xs mr-1 mb-1">
                        {history}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Contenido Principal */}
          <div className="col-span-12 lg:col-span-9">
            
            {/* Preguntas IA Sugeridas */}
            <div className="bg-white rounded-xl shadow-sm border border-[#BDC3C7]/20 p-6 mb-6">
              <h3 className="font-semibold text-[#2C3E50] mb-4">Gu√≠a Cl√≠nica IA</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {aiQuestions.map((question) => (
                  <div key={question.id} className="bg-[#5DA5A3]/5 border border-[#5DA5A3]/20 rounded-lg p-3">
                    <p className="text-sm text-[#2C3E50] mb-2">{question.question}</p>
                    <p className="text-xs text-[#2C3E50]/60">
                      <span className="font-medium">Contexto:</span> {question.basedOn}
                    </p>
                  </div>
                ))}
              </div>
            </div>

            {/* Pipeline Principal */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
              
              {/* 1. Grabaci√≥n Profesional */}
              <div className="bg-white rounded-xl shadow-sm border border-[#BDC3C7]/20 p-6">
                <h4 className="font-semibold text-[#2C3E50] mb-4">Grabaci√≥n Audio</h4>
                
                <div className="text-center">
                  <button
                    onClick={toggleRecording}
                    className={`w-20 h-20 rounded-full flex items-center justify-center transition-all ${
                      recording.isRecording 
                        ? 'bg-red-500 hover:bg-red-600 animate-pulse' 
                        : 'bg-[#5DA5A3] hover:bg-[#4A8280]'
                    }`}
                  >
                    {recording.isRecording ? (
                      <div className="w-6 h-6 bg-white rounded-sm"></div>
                    ) : (
                      <div className="w-0 h-0 border-l-[12px] border-l-white border-t-[8px] border-t-transparent border-b-[8px] border-b-transparent ml-1"></div>
                    )}
                  </button>
                  
                  <div className="mt-4">
                    <div className="text-2xl font-mono text-[#2C3E50]">
                      {formatDuration(recording.duration)}
                    </div>
                    <div className="text-sm text-[#2C3E50]/60 mt-1">
                      Calidad: {recording.audioQuality}
                    </div>
                  </div>
                </div>

                <div className="mt-4 text-xs text-[#2C3E50]/60">
                  <div>‚Ä¢ Audio profesional 48kHz</div>
                  <div>‚Ä¢ Cancelaci√≥n de eco</div>
                  <div>‚Ä¢ Env√≠o directo al backend</div>
                </div>
              </div>

              {/* 2. Transcripci√≥n Cloud */}
              <div className="bg-white rounded-xl shadow-sm border border-[#BDC3C7]/20 p-6">
                <h4 className="font-semibold text-[#2C3E50] mb-4">Transcripci√≥n Cloud</h4>
                
                <div className="min-h-[120px]">
                  {transcription.isProcessing ? (
                    <div className="flex items-center justify-center h-full">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#5DA5A3]"></div>
                    </div>
                  ) : transcription.rawText ? (
                    <div className="space-y-3">
                      <div className="text-sm text-[#2C3E50] bg-gray-50 p-3 rounded-md">
                        {transcription.rawText}
                      </div>
                      <div className="text-xs text-[#2C3E50]/60">
                        Confianza: {Math.round(transcription.confidence * 100)}%
                      </div>
                    </div>
                  ) : (
                    <div className="text-center text-[#2C3E50]/60 h-full flex items-center justify-center">
                      <div>
                        <div className="mb-2">üé§</div>
                        <div className="text-sm">Google Speech-to-Text</div>
                        <div className="text-xs">Esperando grabaci√≥n...</div>
                      </div>
                    </div>
                  )}
                </div>

                <div className="mt-4 text-xs text-[#2C3E50]/60">
                  <div>‚Ä¢ Google Cloud Speech API</div>
                  <div>‚Ä¢ Speaker Diarization</div>
                  <div>‚Ä¢ Modelo m√©dico especializado</div>
                </div>
              </div>

              {/* 3. Clasificaci√≥n SOAP */}
              <div className="bg-white rounded-xl shadow-sm border border-[#BDC3C7]/20 p-6">
                <h4 className="font-semibold text-[#2C3E50] mb-4">Clasificaci√≥n IA</h4>
                
                <div className="min-h-[120px]">
                  {soapData ? (
                    <div className="space-y-2">
                      <div className="text-xs font-medium text-green-600">‚úÖ SOAP Generado</div>
                      <div className="text-xs text-[#2C3E50]/80">
                        <div><span className="font-medium">S:</span> {soapData.subjective.substring(0, 30)}...</div>
                        <div><span className="font-medium">O:</span> {soapData.objective.substring(0, 30)}...</div>
                        <div><span className="font-medium">A:</span> {soapData.assessment.substring(0, 30)}...</div>
                        <div><span className="font-medium">P:</span> {soapData.plan.substring(0, 30)}...</div>
                      </div>
                      <div className="text-xs text-[#2C3E50]/60">
                        Confianza: {Math.round(soapData.confidence * 100)}%
                      </div>
                    </div>
                  ) : (
                    <div className="text-center text-[#2C3E50]/60 h-full flex items-center justify-center">
                      <div>
                        <div className="mb-2">ü§ñ</div>
                        <div className="text-sm">Gemini 1.5 Pro</div>
                        <div className="text-xs">Esperando transcripci√≥n...</div>
                      </div>
                    </div>
                  )}
                </div>

                <div className="mt-4 text-xs text-[#2C3E50]/60">
                  <div>‚Ä¢ RealWorldSOAPProcessor</div>
                  <div>‚Ä¢ Vertex AI / Gemini 1.5 Pro</div>
                  <div>‚Ä¢ Clasificaci√≥n m√©dica contextual</div>
                </div>
              </div>
            </div>

            {/* Editor SOAP Din√°mico */}
            {soapData && (
              <div className="bg-white rounded-xl shadow-sm border border-[#BDC3C7]/20 p-6">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="font-semibold text-[#2C3E50]">Nota SOAP - Editor Din√°mico</h3>
                  <div className="text-sm text-green-600 font-medium">
                    ‚úÖ Pipeline Completado
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="font-medium text-[#2C3E50] mb-2">S - Subjetivo</h4>
                    <textarea
                      value={soapData.subjective}
                      onChange={(e) => setSoapData(prev => prev ? {...prev, subjective: e.target.value} : null)}
                      className="w-full h-24 p-3 border border-[#BDC3C7]/30 rounded-lg resize-none focus:ring-2 focus:ring-[#5DA5A3] focus:border-transparent"
                      placeholder="S√≠ntomas y molestias reportados por el paciente..."
                    />
                  </div>

                  <div>
                    <h4 className="font-medium text-[#2C3E50] mb-2">O - Objetivo</h4>
                    <textarea
                      value={soapData.objective}
                      onChange={(e) => setSoapData(prev => prev ? {...prev, objective: e.target.value} : null)}
                      className="w-full h-24 p-3 border border-[#BDC3C7]/30 rounded-lg resize-none focus:ring-2 focus:ring-[#5DA5A3] focus:border-transparent"
                      placeholder="Hallazgos del examen f√≠sico y observaciones..."
                    />
                  </div>

                  <div>
                    <h4 className="font-medium text-[#2C3E50] mb-2">A - Evaluaci√≥n</h4>
                    <textarea
                      value={soapData.assessment}
                      onChange={(e) => setSoapData(prev => prev ? {...prev, assessment: e.target.value} : null)}
                      className="w-full h-24 p-3 border border-[#BDC3C7]/30 rounded-lg resize-none focus:ring-2 focus:ring-[#5DA5A3] focus:border-transparent"
                      placeholder="Impresi√≥n diagn√≥stica y an√°lisis cl√≠nico..."
                    />
                  </div>

                  <div>
                    <h4 className="font-medium text-[#2C3E50] mb-2">P - Plan</h4>
                    <textarea
                      value={soapData.plan}
                      onChange={(e) => setSoapData(prev => prev ? {...prev, plan: e.target.value} : null)}
                      className="w-full h-24 p-3 border border-[#BDC3C7]/30 rounded-lg resize-none focus:ring-2 focus:ring-[#5DA5A3] focus:border-transparent"
                      placeholder="Plan de tratamiento y seguimiento..."
                    />
                  </div>
                </div>

                <div className="mt-6 flex items-center justify-between">
                  <div className="text-sm text-[#2C3E50]/60">
                    Generado: {new Date(soapData.timestamp).toLocaleString()} ‚Ä¢ 
                    Confianza: {Math.round(soapData.confidence * 100)}%
                  </div>
                  <div className="space-x-3">
                    <button className="px-4 py-2 bg-[#5DA5A3] text-white rounded-lg hover:bg-[#4A8280] transition-colors">
                      Guardar Consulta
                    </button>
                    <button className="px-4 py-2 border border-[#BDC3C7] text-[#2C3E50] rounded-lg hover:bg-gray-50 transition-colors">
                      Exportar PDF
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default IntegratedConsultationPage; 