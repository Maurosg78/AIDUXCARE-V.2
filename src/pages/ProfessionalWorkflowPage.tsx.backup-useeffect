import { useState, useEffect } from 'react';
import { PhysicalEvaluationTab } from '../components/PhysicalEvaluationTab';
import { SOAPDisplay } from '../components/SOAPDisplay';
import { WorkflowAnalysisTab } from '../components/WorkflowAnalysisTab';
import { ProfessionalSOAPGenerator } from "../services/soap-generator-professional";
import { useChunkedAnalysis } from '../hooks/useChunkedAnalysis';
import { useTranscript } from '../hooks/useTranscript';
import { useSharedWorkflowState } from "../hooks/useSharedWorkflowState";
import { useTimer } from '../hooks/useTimer';
import { useRecording } from "../hooks/useRecording";

interface PatientData {
  id: string;
  nombre: string;
  apellidos: string;
  fechaNacimiento: string;
  edad: string;
  telefono: string;
  email: string;
}

const ProfessionalWorkflowPage = () => {
  const [activeTab, setActiveTab] = useState<'analysis' | 'evaluation' | 'soap'>('analysis');
  const [selectedPatient, setSelectedPatient] = useState<PatientData | null>(null);
  const [transcript, setTranscript] = useState('');
  const [isRecording, setIsRecording] = useState(false);
  const [analysisResults, setAnalysisResults] = useState<any>(null);
  const { setAnalysisResults: setSharedAnalysisResults } = useSharedWorkflowState();
  const [selectedIds, setSelectedIds] = useState<string[]>([]);
  const [soapNote, setSoapNote] = useState<any>(null);
  const [shouldSuggestPro, setShouldSuggestPro] = useState(false);
  const [credits, setCredits] = useState(150);
  
  const { analyzeWithChunking, isProcessing, progress, currentMessage } = useChunkedAnalysis();
  const { time, reset } = useTimer(isRecording);
  const { transcript: recordedTranscript, isRecording: isRecordingAudio, startRecording, stopRecording } = useRecording();
  
  const consumeCredits = (amount: number): boolean => {
    if (credits >= amount) {
      console.log(`üí≥ Consumiendo ${amount} cr√©ditos. Restantes: ${credits - amount}`);
      setCredits(prev => prev - amount);
      return true;
    }
    return false;
  };

  const mockPatients = [
    { 
      id: "HC-2", 
      nombre: "Mar√≠a", 
      apellidos: "L√≥pez Mart√≠nez", 
      fechaNacimiento: "1952-03-15",
      edad: "72 a√±os",
      telefono: "555-0123",
      email: "maria.lopez@email.com"
    }
  ];

  useEffect(() => {
    if (mockPatients.length > 0 && !selectedPatient) {
      setSelectedPatient(mockPatients[0]);
  // Auto-generar SOAP cuando se navega a la pesta√±a
    }  useEffect(() => {
    if (activeTab === 'soap' && !soapNote && analysisResults && selectedPatient) {
      handleGenerateSOAP();
    }
  }, [activeTab]); // Solo cuando cambia activeTab


  const handleAnalyze = async () => {
    const textLength = transcript.length;
    const estimatedCredits = textLength > 5000 ? 2 : 1;
    
    if (!consumeCredits(estimatedCredits)) {
      alert("Cr√©ditos insuficientes");
      return;
    }
    
    console.log("üîç An√°lisis iniciado con chunking");
    const result = await analyzeWithChunking(transcript, false);
    
    if (result && result.analysis) {
      console.log("‚úÖ An√°lisis completado:", result);
      (window as any).__lastAnalysisResult = result;
      setAnalysisResults(result.analysis);
      setSharedAnalysisResults(result.analysis);
    }
  };

  const handleStartRecording = async () => {
    setIsRecording(true);
    await startRecording();
    console.log("üéôÔ∏è Grabaci√≥n iniciada");
  };

  const handleStopRecording = async () => {
    setIsRecording(false);
    await stopRecording();
    setTranscript(recordedTranscript);
    console.log("‚èπÔ∏è Grabaci√≥n detenida");
  };

  const handleGenerateSOAP = async () => {
    if (!analysisResults || !selectedPatient) return;
    
    try {
      const { completedTests } = useSharedWorkflowState.getState();
      
      const soapRequest = {
        analysisResults,
        physicalTestResults: completedTests || [],
        patientData: selectedPatient,
        selectedItems: selectedIds,
        sessionContext: {
          duration: 30,
          location: 'clinic',
          sessionType: 'initial' as const
        }
      };
      
      const soap = await ProfessionalSOAPGenerator.generateWithVertex(soapRequest);
      setSoapNote(soap);
      setActiveTab('soap');
    } catch (error) {
      console.error('[SOAP] Error generating:', error);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 py-6">
        <div className="bg-white rounded-lg shadow-sm">
          {/* Header */}
          <div className="border-b px-6 py-4">
            <div className="flex justify-between items-center">
              <h1 className="text-2xl font-bold text-gray-900">Clinical Workflow</h1>
              <div className="flex items-center gap-4">
                <span className="text-sm text-gray-500">
                  {credits} cr√©ditos disponibles
                </span>
              </div>
            </div>
          </div>

          {/* Tabs */}
          <div className="border-b">
            <nav className="flex space-x-8 px-6" aria-label="Tabs">
              <button
                onClick={() => setActiveTab('analysis')}
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'analysis'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                Analysis
              </button>
              <button
                onClick={() => setActiveTab('evaluation')}
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'evaluation'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                Physical Evaluation
              </button>
              <button
                onClick={() => setActiveTab('soap')}
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'soap'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                SOAP
              </button>
            </nav>
          </div>

          {/* Tab Content */}
          <div className="p-6">
            {activeTab === 'analysis' && (
              <WorkflowAnalysisTab
                patients={mockPatients}
                selectedPatient={selectedPatient}
                onSelectPatient={setSelectedPatient}
                transcript={transcript}
                setTranscript={setTranscript}
                isRecording={isRecording}
                onStartRecording={handleStartRecording}
                onStopRecording={handleStopRecording}
                onAnalyze={handleAnalyze}
                isProcessing={isProcessing}
                analysisResults={analysisResults}
                onNavigateToEvaluation={() => setActiveTab("evaluation")}
                selectedIds={selectedIds}
                onSelectionChange={setSelectedIds}
                credits={credits}
              />
            )}
            
            {activeTab === 'evaluation' && (
              <PhysicalEvaluationTab onComplete={() => setActiveTab("soap")} />
            )}
            
            {activeTab === 'soap' && (
              <div>
                {soapNote ? (
                  <SOAPDisplay soapNote={soapNote} />
                ) : (
                  <div className="text-center py-12">
                    <p className="text-gray-500 mb-4">
                      No hay nota SOAP generada a√∫n
                    </p>
                    <button
                      onClick={handleGenerateSOAP}
                      disabled={!analysisResults}
                      className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50"
                    >
                      Generar SOAP
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default ProfessionalWorkflowPage;
