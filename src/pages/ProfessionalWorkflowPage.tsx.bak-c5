import React, { useState, useEffect } from 'react';
import { PatientData } from '../types/patient';
import { PatientSelector } from '../components/PatientSelector';
import { WorkflowAnalysisTab } from '../components/WorkflowAnalysisTab';
import { PhysicalEvaluationTab } from '../components/PhysicalEvaluationTab';
import { SOAPReportTab } from '../components/SOAPReportTab';
import { LanguageToggle } from "../shared/ui/LanguageToggle";
import { useRecording } from '../hooks/useRecording';
import { useNiagaraProcessor } from '../hooks/useNiagaraProcessor';
import { useSharedWorkflowState } from '../hooks/useSharedWorkflowState';

const ProfessionalWorkflowPage: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'analysis' | 'evaluation' | 'soap'>('analysis');
  const [selectedPatient, setSelectedPatient] = useState<PatientData | null>(null);
  
  const {
    transcript,
    isRecording,
    startRecording,
    stopRecording,
    setTranscript
  } = useRecording();

  const {
    processText,
    generateSOAPNote,
    niagaraResults,
    soapNote,
    isProcessing
  } = useNiagaraProcessor();

  const {
    setPatient,
    setAnalysisResults,
    updateSelectedFindings,
    updatePhysicalExamResults,
    setSoapNote,
    selectedFindings,
    physicalExamResults
  } = useSharedWorkflowState();

  useEffect(() => {
    if (selectedPatient) {
      setPatient(selectedPatient);
    }
  }, [selectedPatient, setPatient]);

  useEffect(() => {
    if (niagaraResults) {
      setAnalysisResults(niagaraResults);
    }
  }, [niagaraResults, setAnalysisResults]);

  useEffect(() => {
    if (soapNote) {
      setSoapNote(soapNote);
    }
  }, [soapNote, setSoapNote]);

  const handleAnalyze = async () => {
    if (transcript && selectedPatient) {
      await processText(transcript);
    }
  };

  const handleGenerateSOAP = async () => {
    await generateSOAPNote();
  };

  const handleSelectionChange = (selectedIds: string[]) => {
    updateSelectedFindings(selectedIds);
  };

  const handleExamResultsChange = (results: any[]) => {
    updatePhysicalExamResults(results);
  };

  const canNavigateToEvaluation = niagaraResults && selectedFindings.length > 0;
  const canNavigateToSOAP = physicalExamResults.length > 0;

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto p-4">
        <h1 className="text-2xl font-bold mb-6">Flujo de Trabajo Clínico</h1>
        
        <PatientSelector 
          onPatientSelect={setSelectedPatient}
          selectedPatient={selectedPatient}
        />

        {selectedPatient && (
          <>
            <div className="flex space-x-4 mb-6 border-b">
              <button
                onClick={() => setActiveTab('analysis')}
                className={`pb-2 px-4 ${
                  activeTab === 'analysis'
                    ? 'border-b-2 border-blue-600 text-blue-600'
                    : 'text-gray-600'
                }`}
              >
                1. Análisis
              </button>
              
              <button
                onClick={() => canNavigateToEvaluation && setActiveTab('evaluation')}
                disabled={!canNavigateToEvaluation}
                className={`pb-2 px-4 ${
                  activeTab === 'evaluation'
                    ? 'border-b-2 border-blue-600 text-blue-600'
                    : 'text-gray-600'
                } ${!canNavigateToEvaluation ? 'opacity-50 cursor-not-allowed' : ''}`}
              >
                2. Evaluación Física (Opcional)
              </button>
              
              <button
                onClick={() => canNavigateToSOAP && setActiveTab('soap')}
                disabled={!canNavigateToSOAP}
                className={`pb-2 px-4 ${
                  activeTab === 'soap'
                    ? 'border-b-2 border-blue-600 text-blue-600'
                    : 'text-gray-600'
                } ${!canNavigateToSOAP ? 'opacity-50 cursor-not-allowed' : ''}`}
              >
                3. SOAP
              </button>
            </div>

            <div className="bg-white rounded-lg shadow p-6">
              {activeTab === 'analysis' && (
                <WorkflowAnalysisTab
                  selectedPatient={selectedPatient}
                  transcript={transcript}
                  setTranscript={setTranscript}
                  isRecording={isRecording}
                  startRecording={startRecording}
                  stopRecording={stopRecording}
                  onAnalyze={handleAnalyze}
                  niagaraResults={niagaraResults}
                  isProcessing={isProcessing}
                  selectedIds={selectedFindings}
                  onSelectionChange={handleSelectionChange}
                  physicalExamResults={physicalExamResults}
                  handleExamResultsChange={handleExamResultsChange}
                  onContinue={() => setActiveTab('evaluation')}
                />
              )}

              {activeTab === 'evaluation' && (
                <PhysicalEvaluationTab
                  onComplete={() => setActiveTab('soap')}
                />
              )}

              {activeTab === 'soap' && (
                <SOAPReportTab
                  onGenerateSOAP={handleGenerateSOAP}
                  soapNote={soapNote}
                  isGenerating={isProcessing}
                />
              )}
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default ProfessionalWorkflowPage;
