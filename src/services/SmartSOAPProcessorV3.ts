/**
 * AI: SMART SOAP PROCESSOR V3.0 - Procesador SOAP Inteligente Avanzado
 * 
 * Integra transcripción en tiempo real con clasificación SOAP automática
 * Soluciona el problema de "copy/paste" implementando IA real
 * 
 * MEJORAS V3.0 (ChatGPT Optimized):
 * SUCCESS: Clasificación inteligente por patrones semánticos
 * SUCCESS: Identificación de hablante mejorada
 * SUCCESS: Extracción de entidades médicas especializada en fisioterapia
 * SUCCESS: Auto-generación de Assessment basado en S+O
 * SUCCESS: Algoritmos contextuales por disciplina médica
 * 
 * @author AiDuxCare Team + ChatGPT Optimization
 * @date Junio 2025
 * @version 3.0
 */

// === IMPORTS ===
import AdvancedSOAPClassifier, { 
  SOAPSegment, 
  CompletedSOAP, 
  ClassificationResult,
  MedicalEntities 
} from './AdvancedSOAPClassifier';

// === INTERFACES ===

export interface TranscriptionSegment {
  id: string;
  text: string;
  speaker: 'PATIENT' | 'THERAPIST' | 'UNKNOWN';
  confidence: number;
  timestamp: number;
  isFinal: boolean;
}

export interface SmartSOAPResultV3 {
  subjective: SOAPSegment[];
  objective: SOAPSegment[];
  assessment: string;
  plan: SOAPSegment[];
  summary: {
    totalSegments: number;
    confidence: number;
    keyFindings: string[];
    autoGeneratedAssessment: boolean;
  };
  processingMetrics: {
    processingTime: number;
    classifierVersion: string;
    entitiesExtracted: number;
  };
}

// === PROCESADOR PRINCIPAL V3.0 ===

export class SmartSOAPProcessorV3 {
  private classifier: AdvancedSOAPClassifier;

  constructor() {
    this.classifier = new AdvancedSOAPClassifier();
    console.log('LAUNCH: SmartSOAPProcessor V3.0 inicializado con AdvancedSOAPClassifier');
  }

  /**
   * FUNCIÓN PRINCIPAL: Procesar transcripción con algoritmos de ChatGPT
   */
  async processTranscription(segments: TranscriptionSegment[]): Promise<SmartSOAPResultV3> {
    const startTime = Date.now();
    
    console.log(`RELOAD: Procesamiento V3.0 iniciado - ${segments.length} segmentos`);

    // Filtrar segmentos finales
    const finalSegments = segments.filter(s => s.isFinal);
    
    // Convertir formato
    const classifierSegments = finalSegments.map(segment => ({
      id: segment.id,
      text: segment.text,
      speaker: segment.speaker,
      timestamp: segment.timestamp
    }));

    // USAR CLASIFICADOR AVANZADO
    const result: CompletedSOAP = this.classifier.processConversation(classifierSegments);

    // Calcular métricas
    const processingTime = Date.now() - startTime;
    const entitiesExtracted = this.countEntities(result);

    console.log(`SUCCESS: Procesamiento completado en ${processingTime}ms`);
    console.log(`TARGET: Confianza: ${Math.round(result.summary.confidence * 100)}%`);
    console.log(`STATS: Entidades: ${entitiesExtracted}`);

    return {
      subjective: result.subjective,
      objective: result.objective,
      assessment: result.assessment,
      plan: result.plan,
      summary: result.summary,
      processingMetrics: {
        processingTime,
        classifierVersion: 'AdvancedSOAPClassifier V3.0',
        entitiesExtracted
      }
    };
  }

  /**
   * Contar entidades totales
   */
  private countEntities(result: CompletedSOAP): number {
    const allSegments = [...result.subjective, ...result.objective, ...result.plan];
    let total = 0;
    
    allSegments.forEach(segment => {
      const entities = segment.classification.entities;
      total += entities.anatomia.length + 
               entities.sintomas.length + 
               entities.procedimientos.length + 
               entities.medicamentos.length;
    });
    
    return total;
  }

  /**
   * MÉTODO DIRECTO: Clasificar un segmento
   */
  public classifySegment(text: string, speaker: 'PATIENT' | 'THERAPIST' | 'UNKNOWN'): ClassificationResult {
    return this.classifier.classifySOAPSegment(text, speaker);
  }

  /**
   * MÉTODO DIRECTO: Extraer entidades
   */
  public extractEntities(text: string): MedicalEntities {
    return this.classifier.extractMedicalEntities(text);
  }

  /**
   * MÉTODO DIRECTO: Inferir hablante
   */
  public guessSpeaker(text: string): 'PATIENT' | 'THERAPIST' {
    return this.classifier.guessSpeaker(text);
  }
}

export default SmartSOAPProcessorV3; 