/**
 * üö® RealTimeAnalysisEngine - Motor de An√°lisis en Tiempo Real
 * 
 * Sistema cr√≠tico para prevenir da√±o al paciente mediante an√°lisis inmediato
 * de audio durante exploraci√≥n f√≠sica y t√©cnicas manuales.
 * 
 * OBJETIVO: Detectar riesgos iatrog√©nicos y banderas rojas EN TIEMPO REAL
 * para prevenir da√±o al paciente durante consultas m√©dicas.
 */

import { AudioChunkAnalysis, IatrogenicRisk, RedFlag } from '../types/medicalSafety';

export interface AudioData {
  id: string;
  timestamp: number;
  duration: number;
  audioBlob: Blob;
  transcription?: string;
}

export interface AudioChunk {
  id: string;
  timestamp: number;
  duration: number;
  audioData: AudioData;
  transcription: string;
}

/**
 * üö® Motor de An√°lisis en Tiempo Real
 * 
 * Procesa chunks de audio de 15 segundos para detectar riesgos iatrog√©nicos
 * y banderas rojas durante consultas m√©dicas en tiempo real.
 */
export class RealTimeAnalysisEngine {
  private chunkSize: number = 15000; // 15 segundos
  private overlapSize: number = 2000; // 2 segundos overlap
  private analysisQueue: AudioChunk[] = [];
  private riskDetector: IatrogenicRiskDetector;
  private redFlagDetector: RedFlagDetector;
  private isProcessing: boolean = false;

  constructor() {
    this.riskDetector = new IatrogenicRiskDetector();
    this.redFlagDetector = new RedFlagDetector();
  }

  /**
   * Procesar chunk de audio para an√°lisis inmediato
   */
  async processAudioChunk(audioData: AudioData): Promise<AudioChunkAnalysis> {
    try {
      console.log(`üö® Procesando chunk de audio: ${audioData.id}`);

      // 1. Transcribir chunk si no est√° disponible
      let transcription = audioData.transcription;
      if (!transcription) {
        transcription = await this.transcribeChunk(audioData);
      }

      // 2. An√°lisis iatrog√©nico inmediato
      const risks = await this.riskDetector.detectRisks(transcription);
      
      // 3. An√°lisis de banderas rojas
      const redFlags = await this.redFlagDetector.detectRedFlags(transcription);
      
      // 4. Evaluaci√≥n de urgencia
      const urgency = this.calculateUrgency(risks, redFlags);
      
      // 5. Calcular nivel de riesgo
      const riskLevel = this.calculateRiskLevel(risks, redFlags);
      
      // 6. Generar recomendaciones
      const recommendations = this.generateRecommendations(risks, redFlags);

      const analysis: AudioChunkAnalysis = {
        chunkId: audioData.id,
        timestamp: audioData.timestamp,
        duration: audioData.duration,
        transcription,
        riskLevel,
        iatrogenicRisks: risks,
        redFlags,
        recommendations,
        shouldAlert: urgency >= 3,
        urgencyLevel: urgency
      };

      console.log(`‚úÖ An√°lisis completado - Urgencia: ${urgency}, Riesgos: ${risks.length}, Banderas Rojas: ${redFlags.length}`);

      return analysis;

    } catch (error) {
      console.error('‚ùå Error en an√°lisis de chunk:', error);
      throw error;
    }
  }

  /**
   * Transcribir chunk de audio
   */
  private async transcribeChunk(audioData: AudioData): Promise<string> {
    // Simulaci√≥n de transcripci√≥n - en producci√≥n usar Web Speech API o similar
    return new Promise((resolve) => {
      setTimeout(() => {
        // Simular transcripci√≥n basada en el contexto m√©dico
        const mockTranscriptions = [
          "El paciente refiere dolor intenso en la zona lumbar",
          "Observo limitaci√≥n en la flexi√≥n lumbar",
          "La t√©cnica de manipulaci√≥n est√° siendo aplicada",
          "El paciente menciona parestesias en la pierna derecha",
          "Hay signos de inflamaci√≥n local"
        ];
        resolve(mockTranscriptions[Math.floor(Math.random() * mockTranscriptions.length)]);
      }, 100);
    });
  }

  /**
   * Calcular nivel de urgencia basado en riesgos y banderas rojas
   */
  private calculateUrgency(risks: IatrogenicRisk[], redFlags: RedFlag[]): 1 | 2 | 3 | 4 | 5 {
    let urgency = 1;

    // Riesgos iatrog√©nicos cr√≠ticos
    const criticalRisks = risks.filter(r => r.severity === 'critical');
    if (criticalRisks.length > 0) {
      urgency = Math.max(urgency, 5); // STOP IMMEDIATELY
    }

    // Riesgos severos
    const severeRisks = risks.filter(r => r.severity === 'severe');
    if (severeRisks.length > 0) {
      urgency = Math.max(urgency, 4); // HIGH ALERT
    }

    // Banderas rojas urgentes
    const urgentRedFlags = redFlags.filter(r => r.urgency === 'immediate');
    if (urgentRedFlags.length > 0) {
      urgency = Math.max(urgency, 4);
    }

    // Riesgos moderados
    const moderateRisks = risks.filter(r => r.severity === 'moderate');
    if (moderateRisks.length > 0) {
      urgency = Math.max(urgency, 3); // CAUTION
    }

    // Banderas rojas de monitoreo
    const monitorRedFlags = redFlags.filter(r => r.urgency === 'urgent');
    if (monitorRedFlags.length > 0) {
      urgency = Math.max(urgency, 3);
    }

    return urgency as 1 | 2 | 3 | 4 | 5;
  }

  /**
   * Calcular nivel de riesgo general
   */
  private calculateRiskLevel(risks: IatrogenicRisk[], redFlags: RedFlag[]): 'safe' | 'caution' | 'warning' | 'danger' {
    const urgency = this.calculateUrgency(risks, redFlags);
    
    switch (urgency) {
      case 5:
        return 'danger';
      case 4:
        return 'warning';
      case 3:
        return 'caution';
      default:
        return 'safe';
    }
  }

  /**
   * Generar recomendaciones basadas en riesgos detectados
   */
  private generateRecommendations(risks: IatrogenicRisk[], redFlags: RedFlag[]): string[] {
    const recommendations: string[] = [];

    // Recomendaciones por riesgos iatrog√©nicos
    risks.forEach(risk => {
      switch (risk.type) {
        case 'contraindication':
          recommendations.push(`‚õî CONTRAINDICACI√ìN: ${risk.recommendedAction}`);
          break;
        case 'technique_error':
          recommendations.push(`‚ö†Ô∏è ERROR T√âCNICO: ${risk.recommendedAction}`);
          break;
        case 'force_excessive':
          recommendations.push(`üí™ FUERZA EXCESIVA: ${risk.recommendedAction}`);
          break;
        case 'anatomic_risk':
          recommendations.push(`üîç RIESGO ANAT√ìMICO: ${risk.recommendedAction}`);
          break;
      }
    });

    // Recomendaciones por banderas rojas
    redFlags.forEach(flag => {
      if (flag.referralNeeded) {
        recommendations.push(`üö® REFERENCIA URGENTE: ${flag.recommendedAction}`);
      } else {
        recommendations.push(`‚ö†Ô∏è MONITOREAR: ${flag.recommendedAction}`);
      }
    });

    return recommendations;
  }

  /**
   * Agregar chunk a la cola de an√°lisis
   */
  addChunkToQueue(chunk: AudioChunk): void {
    this.analysisQueue.push(chunk);
    this.processQueue();
  }

  /**
   * Procesar cola de an√°lisis
   */
  private async processQueue(): Promise<void> {
    if (this.isProcessing || this.analysisQueue.length === 0) {
      return;
    }

    this.isProcessing = true;

    try {
      while (this.analysisQueue.length > 0) {
        const chunk = this.analysisQueue.shift();
        if (chunk) {
          const audioData: AudioData = {
            id: chunk.id,
            timestamp: chunk.timestamp,
            duration: chunk.duration,
            audioBlob: chunk.audioData.audioBlob,
            transcription: chunk.transcription
          };

          const analysis = await this.processAudioChunk(audioData);
          
          // Emitir evento de an√°lisis completado
          this.emitAnalysisComplete(analysis);
        }
      }
    } finally {
      this.isProcessing = false;
    }
  }

  /**
   * Emitir evento de an√°lisis completado
   */
  private emitAnalysisComplete(analysis: AudioChunkAnalysis): void {
    // En producci√≥n, usar un sistema de eventos
    console.log('üìä An√°lisis completado:', analysis);
    
    // Trigger callback si est√° disponible
    if (this.onAnalysisComplete) {
      this.onAnalysisComplete(analysis);
    }
  }

  // Callback para an√°lisis completado
  onAnalysisComplete?: (analysis: AudioChunkAnalysis) => void;
}

/**
 * üö® Detector de Riesgos Iatrog√©nicos
 * 
 * Analiza transcripciones para detectar riesgos durante t√©cnicas manuales
 */
export class IatrogenicRiskDetector {
  private riskPatterns = {
    // Contraindicaciones absolutas
    contraindicationsAbsolute: [
      /infecci√≥n.*local.*activa/i,
      /fractura.*no.*consolidada/i,
      /tumor.*maligno.*zona/i,
      /trombosis.*venosa.*profunda/i,
      /embarazo.*primer.*trimestre/i,
      /osteoporosis.*severa/i,
      /met√°stasis.*√≥sea/i
    ],
    
    // T√©cnicas peligrosas
    dangerousTechniques: [
      /manipulaci√≥n.*cervical.*alta.*velocidad/i,
      /thrust.*c1.*c2/i,
      /rotaci√≥n.*forzada.*cuello/i,
      /tracci√≥n.*axial.*fuerte/i,
      /manipulaci√≥n.*lumbar.*sin.*evaluaci√≥n/i,
      /t√©cnica.*contraindicada/i
    ],
    
    // Signos de alarma durante t√©cnica
    techniqueDanger: [
      /parestesia.*nuevas/i,
      /debilidad.*s√∫bita/i,
      /dolor.*irradiado.*nuevo/i,
      /mareo.*durante.*t√©cnica/i,
      /nausea.*manipulaci√≥n/i,
      /dolor.*intenso.*durante/i,
      /p√©rdida.*conciencia/i
    ],
    
    // Fuerza excesiva
    excessiveForce: [
      /duele.*mucho.*pare/i,
      /no.*puedo.*aguantar/i,
      /demasiado.*fuerte/i,
      /dolor.*insoportable/i,
      /fuerza.*excesiva/i,
      /resistencia.*excesiva/i
    ]
  };
  
  async detectRisks(transcription: string): Promise<IatrogenicRisk[]> {
    const risks: IatrogenicRisk[] = [];
    
    // Analizar cada patr√≥n de riesgo
    Object.entries(this.riskPatterns).forEach(([category, patterns]) => {
      patterns.forEach(pattern => {
        const match = transcription.match(pattern);
        if (match) {
          risks.push({
            type: this.mapCategoryToType(category),
            description: this.getRiskDescription(category, match[0]),
            severity: this.calculateSeverity(category, match[0]),
            bodyRegion: this.extractBodyRegion(transcription),
            recommendedAction: this.getRecommendedAction(category),
            evidence: match[0]
          });
        }
      });
    });
    
    return risks;
  }

  private mapCategoryToType(category: string): IatrogenicRisk['type'] {
    switch (category) {
      case 'contraindicationsAbsolute':
        return 'contraindication';
      case 'dangerousTechniques':
        return 'technique_error';
      case 'techniqueDanger':
        return 'anatomic_risk';
      case 'excessiveForce':
        return 'force_excessive';
      default:
        return 'anatomic_risk';
    }
  }

  private getRiskDescription(category: string, evidence: string): string {
    switch (category) {
      case 'contraindicationsAbsolute':
        return `Contraindicaci√≥n absoluta detectada: ${evidence}`;
      case 'dangerousTechniques':
        return `T√©cnica peligrosa identificada: ${evidence}`;
      case 'techniqueDanger':
        return `Signo de alarma durante t√©cnica: ${evidence}`;
      case 'excessiveForce':
        return `Fuerza excesiva aplicada: ${evidence}`;
      default:
        return `Riesgo detectado: ${evidence}`;
    }
  }

  private calculateSeverity(category: string, evidence: string): IatrogenicRisk['severity'] {
    switch (category) {
      case 'contraindicationsAbsolute':
        return 'critical';
      case 'dangerousTechniques':
        return 'severe';
      case 'techniqueDanger':
        return 'moderate';
      case 'excessiveForce':
        return 'mild';
      default:
        return 'moderate';
    }
  }

  private extractBodyRegion(transcription: string): string {
    const bodyRegions = [
      'cervical', 'lumbar', 'tor√°cica', 'hombro', 'rodilla', 'cadera',
      'codo', 'mu√±eca', 'tobillo', 'columna', 'extremidad'
    ];

    for (const region of bodyRegions) {
      if (transcription.toLowerCase().includes(region)) {
        return region;
      }
    }

    return 'regi√≥n no especificada';
  }

  private getRecommendedAction(category: string): string {
    switch (category) {
      case 'contraindicationsAbsolute':
        return 'DETENER T√âCNICA INMEDIATAMENTE y reevaluar contraindicaciones';
      case 'dangerousTechniques':
        return 'Suspender t√©cnica y aplicar m√©todo alternativo m√°s seguro';
      case 'techniqueDanger':
        return 'Detener t√©cnica y evaluar signos neurol√≥gicos';
      case 'excessiveForce':
        return 'Reducir intensidad de la t√©cnica';
      default:
        return 'Revisar t√©cnica y ajustar seg√∫n respuesta del paciente';
    }
  }
}

/**
 * üö® Detector de Banderas Rojas
 * 
 * Identifica se√±ales de alarma que requieren atenci√≥n inmediata
 */
export class RedFlagDetector {
  private redFlagPatterns = {
    // Neurol√≥gicas
    neurological: [
      /parestesia.*nueva/i,
      /debilidad.*s√∫bita/i,
      /p√©rdida.*fuerza/i,
      /alteraci√≥n.*sensibilidad/i,
      /dolor.*irradiado.*nuevo/i,
      /dolor.*nocturno/i,
      /dolor.*que.*despierta/i
    ],
    
    // Vasculares
    vascular: [
      /edema.*s√∫bito/i,
      /cambio.*color.*extremidad/i,
      /pulso.*d√©bil/i,
      /frialdad.*extremidad/i,
      /dolor.*isqu√©mico/i
    ],
    
    // Infecci√≥n
    infection: [
      /fiebre.*elevada/i,
      /signos.*infecci√≥n/i,
      /drenaje.*purulento/i,
      /calor.*local/i,
      /enrojecimiento.*intenso/i
    ],
    
    // Fractura
    fracture: [
      /dolor.*intenso.*trauma/i,
      /deformidad.*visible/i,
      /crepitaci√≥n/i,
      /movilidad.*anormal/i,
      /dolor.*punto.*espec√≠fico/i
    ],
    
    // Sist√©micas
    systemic: [
      /p√©rdida.*peso.*inexplicada/i,
      /fiebre.*persistente/i,
      /sudoraci√≥n.*nocturna/i,
      /fatiga.*extrema/i,
      /dolor.*nocturno/i
    ]
  };

  async detectRedFlags(transcription: string): Promise<RedFlag[]> {
    const redFlags: RedFlag[] = [];

    Object.entries(this.redFlagPatterns).forEach(([category, patterns]) => {
      patterns.forEach(pattern => {
        const match = transcription.match(pattern);
        if (match) {
          redFlags.push({
            category: category as RedFlag['category'],
            indicator: this.getIndicatorDescription(category, match[0]),
            urgency: this.calculateUrgency(category),
            recommendedAction: this.getRecommendedAction(category),
            referralNeeded: this.needsReferral(category)
          });
        }
      });
    });

    return redFlags;
  }

  private getIndicatorDescription(category: string, evidence: string): string {
    switch (category) {
      case 'neurological':
        return `Signo neurol√≥gico: ${evidence}`;
      case 'vascular':
        return `Signo vascular: ${evidence}`;
      case 'infection':
        return `Signo de infecci√≥n: ${evidence}`;
      case 'fracture':
        return `Signo de fractura: ${evidence}`;
      case 'systemic':
        return `Signo sist√©mico: ${evidence}`;
      default:
        return `Bandera roja: ${evidence}`;
    }
  }

  private calculateUrgency(category: string): RedFlag['urgency'] {
    switch (category) {
      case 'neurological':
      case 'vascular':
        return 'immediate';
      case 'infection':
      case 'fracture':
        return 'urgent';
      case 'systemic':
        return 'monitor';
      default:
        return 'urgent';
    }
  }

  private getRecommendedAction(category: string): string {
    switch (category) {
      case 'neurological':
        return 'Evaluaci√≥n neurol√≥gica inmediata';
      case 'vascular':
        return 'Evaluaci√≥n vascular urgente';
      case 'infection':
        return 'Evaluaci√≥n m√©dica para infecci√≥n';
      case 'fracture':
        return 'Radiograf√≠a y evaluaci√≥n ortop√©dica';
      case 'systemic':
        return 'Evaluaci√≥n m√©dica general';
      default:
        return 'Evaluaci√≥n m√©dica';
    }
  }

  private needsReferral(category: string): boolean {
    return ['neurological', 'vascular', 'infection', 'fracture'].includes(category);
  }
} 