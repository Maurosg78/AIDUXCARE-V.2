import { beforeEach, describe, expect, it, vi } from 'vitest';
import { 
  getContextualMemory, 
  getPersistentMemory, 
  getSemanticMemory 
} from '@/core/mcp/MCPDataSourceSupabase';
import supabase from '@/core/auth/supabaseClient';

// Mock de Supabase
vi.mock('@/core/auth/supabaseClient', () => {
  return {
    default: {
      from: vi.fn(),
    }
  };
});

describe('MCPDataSourceSupabase', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  const validMemoryBlock = {
    id: 'test-1',
    created_at: new Date().toISOString(),
    type: 'contextual',
    content: 'Datos de prueba',
    visit_id: 'visit-123',
    patient_id: 'patient-456'
  };

  const invalidMemoryBlock = {
    id: 'invalid-1',
    created_at: 'fecha-invalida',  // Esto fallará la validación de Zod
    type: 'contextual',
    content: 'Datos inválidos'
  };

  describe('getContextualMemory', () => {
    it('debería devolver datos válidos cuando Supabase responde correctamente', async () => {
      // Mock de respuesta exitosa de Supabase
      // @ts-expect-error - Mock simplificado para pruebas
      vi.spyOn(supabase, 'from').mockReturnValue({
        select: () => ({
          eq: () => ({
            order: () => Promise.resolve({
              data: [validMemoryBlock],
              error: null
            })
          })
        })
      });

      const result = await getContextualMemory('visit-123');
      expect(result).toHaveLength(1);
      expect(result[0].id).toBe('test-1');
    });

    it('debería devolver un array vacío cuando no hay datos', async () => {
      // Mock de respuesta sin datos
      // @ts-expect-error - Mock simplificado para pruebas
      vi.spyOn(supabase, 'from').mockReturnValue({
        select: () => ({
          eq: () => ({
            order: () => Promise.resolve({
              data: [],
              error: null
            })
          })
        })
      });

      const result = await getContextualMemory('visit-123');
      expect(result).toHaveLength(0);
    });

    it('debería manejar errores de red de Supabase', async () => {
      // Mock de error de Supabase
      // @ts-expect-error - Mock simplificado para pruebas
      vi.spyOn(supabase, 'from').mockReturnValue({
        select: () => ({
          eq: () => ({
            order: () => Promise.resolve({
              data: null,
              error: { message: 'Error de conexión' }
            })
          })
        })
      });

      const result = await getContextualMemory('visit-123');
      expect(result).toHaveLength(0);
    });

    it('debería manejar errores de validación de Zod', async () => {
      // Mock de datos que no pasarán la validación
      // @ts-expect-error - Mock simplificado para pruebas
      vi.spyOn(supabase, 'from').mockReturnValue({
        select: () => ({
          eq: () => ({
            order: () => Promise.resolve({
              data: [invalidMemoryBlock],
              error: null
            })
          })
        })
      });

      const result = await getContextualMemory('visit-123');
      expect(result).toHaveLength(0);
    });
  });

  describe('getPersistentMemory', () => {
    it('debería devolver datos válidos cuando Supabase responde correctamente', async () => {
      // Mock de respuesta exitosa de Supabase
      // @ts-expect-error - Mock simplificado para pruebas
      vi.spyOn(supabase, 'from').mockReturnValue({
        select: () => ({
          eq: () => ({
            order: () => Promise.resolve({
              data: [validMemoryBlock],
              error: null
            })
          })
        })
      });

      const result = await getPersistentMemory('patient-456');
      expect(result).toHaveLength(1);
      expect(result[0].patient_id).toBe('patient-456');
    });

    it('debería manejar errores de red y validación', async () => {
      // Mock de error de Supabase
      // @ts-expect-error - Mock simplificado para pruebas
      vi.spyOn(supabase, 'from').mockReturnValue({
        select: () => ({
          eq: () => ({
            order: () => Promise.reject(new Error('Error de red'))
          })
        })
      });

      const result = await getPersistentMemory('patient-456');
      expect(result).toHaveLength(0);
    });
  });

  describe('getSemanticMemory', () => {
    it('debería devolver datos válidos cuando Supabase responde correctamente', async () => {
      // Mock de respuesta exitosa de Supabase
      // @ts-expect-error - Mock simplificado para pruebas
      vi.spyOn(supabase, 'from').mockReturnValue({
        select: () => ({
          eq: () => ({
            order: () => Promise.resolve({
              data: [validMemoryBlock],
              error: null
            })
          })
        })
      });

      const result = await getSemanticMemory();
      expect(result).toHaveLength(1);
      expect(result[0].type).toBe('contextual');
    });

    it('debería manejar errores de red y validación', async () => {
      // Mock de error de Supabase
      // @ts-expect-error - Mock simplificado para pruebas
      vi.spyOn(supabase, 'from').mockReturnValue({
        select: () => ({
          eq: () => ({
            order: () => Promise.resolve({
              data: null,
              error: { message: 'Error de base de datos' }
            })
          })
        })
      });

      const result = await getSemanticMemory();
      expect(result).toHaveLength(0);
    });
  });
}); 