[{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/App.backup.20250823-212857.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/App.backup.20250823-213045.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/App.baup.20250823-212930.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/__tests__/auth-flow.integration.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3930,3933],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3930,3933],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { screen, fireEvent, waitFor } from '@testing-library/react';\n\nimport WelcomePage from '../pages/WelcomePage';\nimport LoginPage from '../pages/LoginPage';\nimport VerifyEmailPage from '../pages/VerifyEmailPage';\n\nimport { renderWithRouter } from './test-utils';\n\n// Mocks globales para firebase/auth y firestore\nlet mockEmailVerified = false;\n\nvi.mock('firebase/auth', () => {\n  const mockSendEmailVerification = vi.fn();\n  const mockReload = vi.fn();\n  return {\n    getAuth: () => ({\n      currentUser: {\n        email: 'test@aiduxcare.com',\n        get emailVerified() { return mockEmailVerified; },\n        reload: mockReload,\n        sendEmailVerification: mockSendEmailVerification,\n      },\n    }),\n    signInWithEmailAndPassword: vi.fn(async (_auth, email) => {\n      if (email === 'test@aiduxcare.com') {\n        return {\n          user: {\n            email,\n            get emailVerified() { return mockEmailVerified; },\n            reload: mockReload,\n            sendEmailVerification: mockSendEmailVerification,\n          },\n        };\n      }\n      throw new Error('Credenciales inválidas');\n    }),\n    createUserWithEmailAndPassword: vi.fn(async (_auth, email) => {\n      mockEmailVerified = false;\n      return {\n        user: {\n          email,\n          get emailVerified() { return mockEmailVerified; },\n          reload: mockReload,\n          sendEmailVerification: mockSendEmailVerification,\n        },\n      };\n    }),\n    sendEmailVerification: mockSendEmailVerification,\n  };\n});\nvi.mock('firebase/firestore', () => ({\n  getFirestore: vi.fn(() => ({})),\n  doc: vi.fn(),\n  setDoc: vi.fn(),\n  getDoc: vi.fn(),\n  updateDoc: vi.fn(),\n  addDoc: vi.fn(async () => ({ id: 'mocked-id' })), // Mock necesario para FirestoreAuditLogger\n  collection: vi.fn(), // Mock necesario para FirestoreAuditLogger\n  Timestamp: { now: () => 1234567890 }, // Mock para FirestoreAuditLogger\n}));\n\n// Test principal\n\ndescribe('Flujo de autenticación y verificación (UI/UX)', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n    mockEmailVerified = false;\n  });\n\n  it('registro exitoso muestra mensaje de verificación', async () => {\n    renderWithRouter(<WelcomePage />);\n    // Usar getAllByPlaceholderText para seleccionar el input de registro (panel derecho)\n    const emailInputs = screen.getAllByPlaceholderText(/correo electrónico/i);\n    const passwordInputs = screen.getAllByPlaceholderText(/contraseña/i);\n    const nameInput = screen.getByPlaceholderText(/nombre/i);\n    // Panel derecho: registro (asumimos el segundo input de email y password)\n    fireEvent.change(emailInputs[1], { target: { value: 'test@aiduxcare.com' } });\n    fireEvent.change(passwordInputs[1], { target: { value: '123456' } });\n    fireEvent.change(nameInput, { target: { value: 'Test User' } });\n    const registerButton = screen.getByRole('button', { name: /registrarse/i });\n    fireEvent.click(registerButton);\n    await waitFor(() => {\n      // Usar matcher flexible\n      const verificationMsg = screen.queryByText((content) =>\n        /correo de verificación/i.test(content)\n      );\n      expect(verificationMsg).not.toBeNull();\n    });\n  });\n\n  it('usuario no verificado es bloqueado en login', async () => {\n    // Mock getDoc para simular usuario no verificado\n    const { getDoc } = await import('firebase/firestore');\n    vi.mocked(getDoc).mockImplementation(async () => ({\n      id: 'mocked-user-id',\n      exists: () => true,\n      data: () => ({\n        id: 'mocked-user-id',\n        email: 'test@aiduxcare.com',\n        emailVerified: false,\n        name: 'Test User',\n        role: 'PHYSICIAN',\n        mfaEnabled: false,\n        createdAt: { toDate: () => new Date() },\n        updatedAt: { toDate: () => new Date() },\n      }),\n      get: () => undefined,\n      toJSON: () => ({}),\n      ref: {},\n      metadata: {},\n    } as any));\n    renderWithRouter(<LoginPage />);\n    const emailInput = screen.getByPlaceholderText(/correo electrónico/i);\n    const passwordInput = screen.getByPlaceholderText(/contraseña/i);\n    fireEvent.change(emailInput, { target: { value: 'test@aiduxcare.com' } });\n    fireEvent.change(passwordInput, { target: { value: '123456' } });\n    fireEvent.click(screen.getByRole('button', { name: /iniciar sesión/i }));\n    await waitFor(() => {\n      const errorMsg = screen.queryByText((content) =>\n        /email no verificado/i.test(content)\n      );\n      expect(errorMsg).not.toBeNull();\n    });\n  });\n\n  it('reenviar verificación en VerifyEmailPage muestra feedback', async () => {\n    renderWithRouter(<VerifyEmailPage />);\n    fireEvent.click(screen.getByRole('button', { name: /reenviar/i }));\n    await waitFor(() => {\n      const feedbackMsg = screen.queryByText((content) =>\n        /correo de verificación reenviado/i.test(content)\n      );\n      expect(feedbackMsg).not.toBeNull();\n    });\n  });\n\n  it('usuario verificado puede acceder tras login', async () => {\n    // Simular verificación\n    mockEmailVerified = true;\n    renderWithRouter(<LoginPage />);\n    const emailInput = screen.getByPlaceholderText(/correo electrónico/i);\n    const passwordInput = screen.getByPlaceholderText(/contraseña/i);\n    fireEvent.change(emailInput, { target: { value: 'test@aiduxcare.com' } });\n    fireEvent.change(passwordInput, { target: { value: '123456' } });\n    fireEvent.click(screen.getByRole('button', { name: /iniciar sesión/i }));\n    await waitFor(() => {\n      const errorMsg = screen.queryByText((content) =>\n        /email no verificado/i.test(content)\n      );\n      expect(errorMsg).toBeNull();\n    });\n  });\n}); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/__tests__/test-utils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/_deprecated/features_onboarding/OnboardingWizard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[304,307],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[304,307],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1436,1480],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\n\nimport PersonalDataStep from '@/features/onboarding/steps/PersonalDataStep';\nimport ProfessionalDataStep from '@/features/onboarding/steps/ProfessionalDataStep';\nimport LocationDataStep from '@/features/onboarding/steps/LocationDataStep';\n\ntype OnboardingData = any; // dejamos flexible; cada Step valida su shape\n\nconst OnboardingWizard: React.FC = () => {\n  const [step, setStep] = useState(0);\n  const [data, setData] = useState<OnboardingData>({});\n\n  const update = (partial: Partial<OnboardingData>) =>\n    setData((prev: OnboardingData) => ({ ...prev, ...partial }));\n\n  const next = () => setStep((s) => Math.min(s + 1, 2));\n  const back = () => setStep((s) => Math.max(s - 1, 0));\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n      <div className=\"max-w-3xl w-full bg-white rounded-2xl shadow-2xl p-6 md:p-8\">\n        {step === 0 && (\n          <PersonalDataStep\n            data={data}\n            onUpdate={update}\n            onNext={next}\n          />\n        )}\n\n        {step === 1 && (\n          <ProfessionalDataStep\n            data={data}\n            onUpdate={update}\n            onNext={next}\n            onBack={back}\n          />\n        )}\n\n        {step === 2 && (\n          <LocationDataStep\n            data={data}\n            onUpdate={update}\n            onBack={back}\n            onComplete={() => {\n              console.log('✅ Registro completado:', data);\n              alert('¡Registro completado!');\n            }}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default OnboardingWizard;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/_deprecated/features_onboarding/TestPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/_deprecated/features_onboarding/steps/LocationDataStep.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[70,73],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[70,73],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[110,113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[110,113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[330,333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[330,333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\ninterface LocationDataStepProps {\n  data: any;\n  onUpdate: (field: string, value: any) => void;\n  onComplete: () => void;\n  onBack: () => void;\n}\n\nconst LocationDataStep: React.FC<LocationDataStepProps> = ({ data, onUpdate, onComplete, onBack }) => {\n  const handleFieldChange = (field: string, value: any) => {\n    onUpdate(field, value);\n  };\n\n  const canComplete = data.city && data.gdprConsent && data.hipaaConsent && data.dataProcessingConsent;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Ubicación y Compliance</h2>\n        <p className=\"text-gray-600\">Regulaciones y consentimientos legales</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Ciudad *\n          </label>\n          <input\n            type=\"text\"\n            value={data.city || ''}\n            onChange={(e) => handleFieldChange('city', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            placeholder=\"Ej: Madrid, Barcelona, Valencia\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Provincia/Estado\n          </label>\n          <input\n            type=\"text\"\n            value={data.state || ''}\n            onChange={(e) => handleFieldChange('state', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            placeholder=\"Ej: Madrid, Cataluña, Valencia\"\n          />\n        </div>\n      </div>\n\n      {/* Sección de Compliance */}\n      <div className=\"bg-gray-50 rounded-lg p-6 space-y-4\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Consentimientos Legales</h3>\n        \n        <div className=\"space-y-4\">\n          <div className=\"flex items-start space-x-3\">\n            <input\n              type=\"checkbox\"\n              id=\"gdprConsent\"\n              checked={data.gdprConsent || false}\n              onChange={(e) => handleFieldChange('gdprConsent', e.target.checked)}\n              className=\"mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n              required\n            />\n            <div>\n              <label htmlFor=\"gdprConsent\" className=\"text-sm font-medium text-gray-700\">\n                Consentimiento GDPR (Unión Europea) *\n              </label>\n              <p className=\"text-xs text-gray-600 mt-1\">\n                Autorizo el procesamiento de mis datos personales según el Reglamento General de Protección de Datos de la UE.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-start space-x-3\">\n            <input\n              type=\"checkbox\"\n              id=\"hipaaConsent\"\n              checked={data.hipaaConsent || false}\n              onChange={(e) => handleFieldChange('hipaaConsent', e.target.checked)}\n              className=\"mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n              required\n            />\n            <div>\n              <label htmlFor=\"hipaaConsent\" className=\"text-sm font-medium text-gray-700\">\n                Consentimiento HIPAA (Estados Unidos) *\n              </label>\n              <p className=\"text-xs text-gray-600 mt-1\">\n                Autorizo el uso y divulgación de mi información de salud protegida según la Ley HIPAA.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-start space-x-3\">\n            <input\n              type=\"checkbox\"\n              id=\"pipedaConsent\"\n              checked={data.pipedaConsent || false}\n              onChange={(e) => handleFieldChange('pipedaConsent', e.target.checked)}\n              className=\"mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n            />\n            <div>\n              <label htmlFor=\"pipedaConsent\" className=\"text-sm font-medium text-gray-700\">\n                Consentimiento PIPEDA (Canadá)\n              </label>\n              <p className=\"text-xs text-gray-600 mt-1\">\n                Autorizo la recopilación, uso y divulgación de mi información personal según PIPEDA.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-start space-x-3\">\n            <input\n              type=\"checkbox\"\n              id=\"dataProcessingConsent\"\n              checked={data.dataProcessingConsent || false}\n              onChange={(e) => handleFieldChange('dataProcessingConsent', e.target.checked)}\n              className=\"mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n              required\n            />\n            <div>\n              <label htmlFor=\"dataProcessingConsent\" className=\"text-sm font-medium text-gray-700\">\n                Procesamiento de Datos *\n              </label>\n              <p className=\"text-xs text-gray-600 mt-1\">\n                Autorizo el procesamiento de mis datos para la prestación de servicios médicos y administrativos.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex justify-between pt-6\">\n        <button\n          onClick={onBack}\n          className=\"px-6 py-2 rounded-lg text-gray-700 bg-gray-200 hover:bg-gray-300 transition-all\"\n        >\n          Anterior\n        </button>\n        <button\n          onClick={onComplete}\n          disabled={!canComplete}\n          className=\"px-6 py-2 rounded-lg text-white bg-gradient-to-r from-fuchsia-500 to-blue-500 disabled:opacity-50 disabled:cursor-not-allowed hover:from-fuchsia-600 hover:to-blue-600 transition-all\"\n        >\n          Completar Registro\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default LocationDataStep; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/_deprecated/features_onboarding/steps/PersonalDataStep.backup.20250823-223203.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[70,73],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[70,73],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[110,113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[110,113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[292,295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[292,295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\ninterface PersonalDataStepProps {\n  data: any;\n  onUpdate: (field: string, value: any) => void;\n  onNext: () => void;\n}\n\nconst PersonalDataStep: React.FC<PersonalDataStepProps> = ({ data, onUpdate, onNext }) => {\n  const handleFieldChange = (field: string, value: any) => {\n    onUpdate(field, value);\n  };\n\n  const canProceed = data.firstName && data.lastName && data.email && data.licenseNumber;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Datos Personales</h2>\n        <p className=\"text-gray-600\">Información básica y licencia profesional</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Primer Nombre *\n          </label>\n          <input\n            type=\"text\"\n            value={data.firstName || ''}\n            onChange={(e) => handleFieldChange('firstName', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Segundo Nombre\n          </label>\n          <input\n            type=\"text\"\n            value={data.secondName || ''}\n            onChange={(e) => handleFieldChange('secondName', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Primer Apellido *\n          </label>\n          <input\n            type=\"text\"\n            value={data.lastName || ''}\n            onChange={(e) => handleFieldChange('lastName', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Segundo Apellido\n          </label>\n          <input\n            type=\"text\"\n            value={data.secondLastName || ''}\n            onChange={(e) => handleFieldChange('secondLastName', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Email *\n          </label>\n          <input\n            type=\"email\"\n            value={data.email || ''}\n            onChange={(e) => handleFieldChange('email', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Teléfono\n          </label>\n          <input\n            type=\"tel\"\n            value={data.phone || ''}\n            onChange={(e) => handleFieldChange('phone', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Número de Licencia/Colegiado *\n          </label>\n          <input\n            type=\"text\"\n            value={data.licenseNumber || ''}\n            onChange={(e) => handleFieldChange('licenseNumber', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            placeholder=\"Ej: 12345-67890 o COL-12345\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            País de Licencia *\n          </label>\n          <select\n            value={data.country || ''}\n            onChange={(e) => handleFieldChange('country', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            required\n          >\n            <option value=\"\">Selecciona un país</option>\n            <option value=\"ES\">España</option>\n            <option value=\"MX\">México</option>\n            <option value=\"AR\">Argentina</option>\n            <option value=\"CO\">Colombia</option>\n            <option value=\"CL\">Chile</option>\n            <option value=\"PE\">Perú</option>\n            <option value=\"US\">Estados Unidos</option>\n            <option value=\"GB\">Reino Unido</option>\n            <option value=\"DE\">Alemania</option>\n            <option value=\"FR\">Francia</option>\n          </select>\n        </div>\n      </div>\n\n      <div className=\"flex justify-end pt-6\">\n        <button\n          onClick={onNext}\n          disabled={!canProceed}\n          className=\"px-6 py-2 rounded-lg text-white bg-gradient-to-r from-fuchsia-500 to-blue-500 disabled:opacity-50 disabled:cursor-not-allowed hover:from-fuchsia-600 hover:to-blue-600 transition-all\"\n        >\n          Siguiente\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default PersonalDataStep; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/_deprecated/features_onboarding/steps/PersonalDataStep.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[70,73],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[70,73],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[110,113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[110,113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[292,295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[292,295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\ninterface PersonalDataStepProps {\n  data: any;\n  onUpdate: (field: string, value: any) => void;\n  onNext: () => void;\n}\n\nconst PersonalDataStep: React.FC<PersonalDataStepProps> = ({ data, onUpdate, onNext }) => {\n  const handleFieldChange = (field: string, value: any) => {\n    onUpdate(field, value);\n  };\n\n  // ✅ Solo datos personales ahora\n  const canProceed = Boolean(\n    (data.firstName || '').trim() &&\n    (data.lastName || '').trim() &&\n    (data.email || '').trim()\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Datos Personales</h2>\n        <p className=\"text-gray-600\">Información básica de contacto</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Primer Nombre *</label>\n          <input\n            type=\"text\"\n            value={data.firstName || ''}\n            onChange={(e) => handleFieldChange('firstName', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Segundo Nombre</label>\n          <input\n            type=\"text\"\n            value={data.secondName || ''}\n            onChange={(e) => handleFieldChange('secondName', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Primer Apellido *</label>\n          <input\n            type=\"text\"\n            value={data.lastName || ''}\n            onChange={(e) => handleFieldChange('lastName', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Segundo Apellido</label>\n          <input\n            type=\"text\"\n            value={data.secondLastName || ''}\n            onChange={(e) => handleFieldChange('secondLastName', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Email *</label>\n          <input\n            type=\"email\"\n            value={data.email || ''}\n            onChange={(e) => handleFieldChange('email', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Teléfono</label>\n          <input\n            type=\"tel\"\n            value={data.phone || ''}\n            onChange={(e) => handleFieldChange('phone', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n        </div>\n      </div>\n\n      <div className=\"flex justify-end pt-6\">\n        <button\n          onClick={onNext}\n          disabled={!canProceed}\n          className=\"px-6 py-2 rounded-lg text-white bg-gradient-to-r from-fuchsia-500 to-blue-500 disabled:opacity-50 disabled:cursor-not-allowed hover:from-fuchsia-600 hover:to-blue-600 transition-all\"\n        >\n          Siguiente\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default PersonalDataStep;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/_deprecated/features_onboarding/steps/ProfessionalDataStep.backup.20250823-223212.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[74,77],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[74,77],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[114,117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[114,117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[334,337],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[334,337],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\ninterface ProfessionalDataStepProps {\n  data: any;\n  onUpdate: (field: string, value: any) => void;\n  onNext: () => void;\n  onBack: () => void;\n}\n\nconst ProfessionalDataStep: React.FC<ProfessionalDataStepProps> = ({ data, onUpdate, onNext, onBack }) => {\n  const handleFieldChange = (field: string, value: any) => {\n    onUpdate(field, value);\n  };\n\n  const canProceed = data.profession && data.specialty && data.yearsOfExperience > 0;\n\n  const professionalTitles = [\n    'Fisioterapeuta',\n    'Médico',\n    'Enfermero/a',\n    'Psicólogo/a',\n    'Terapeuta Ocupacional',\n    'Logopeda',\n    'Nutricionista',\n    'Osteópata',\n    'Quiropráctico',\n    'Masajista Terapéutico',\n    'Entrenador Personal',\n    'Otro'\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Datos Profesionales</h2>\n        <p className=\"text-gray-600\">Profesión, especialidad y experiencia</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Profesión *\n          </label>\n          <select\n            value={data.profession || ''}\n            onChange={(e) => handleFieldChange('profession', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            required\n          >\n            <option value=\"\">Selecciona tu profesión</option>\n            {professionalTitles.map((title) => (\n              <option key={title} value={title}>\n                {title}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Especialidad *\n          </label>\n          <input\n            type=\"text\"\n            value={data.specialty || ''}\n            onChange={(e) => handleFieldChange('specialty', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            placeholder=\"Ej: Fisioterapia Deportiva, Psicología Clínica\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Años de Experiencia *\n          </label>\n          <input\n            type=\"number\"\n            min=\"0\"\n            max=\"50\"\n            value={data.yearsOfExperience || ''}\n            onChange={(e) => handleFieldChange('yearsOfExperience', parseInt(e.target.value) || 0)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Certificaciones\n          </label>\n          <input\n            type=\"text\"\n            value={data.certifications || ''}\n            onChange={(e) => handleFieldChange('certifications', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            placeholder=\"Ej: Certificación en Terapia Manual\"\n          />\n        </div>\n      </div>\n\n      <div className=\"flex justify-between pt-6\">\n        <button\n          onClick={onBack}\n          className=\"px-6 py-2 rounded-lg text-gray-700 bg-gray-200 hover:bg-gray-300 transition-all\"\n        >\n          Anterior\n        </button>\n        <button\n          onClick={onNext}\n          disabled={!canProceed}\n          className=\"px-6 py-2 rounded-lg text-white bg-gradient-to-r from-fuchsia-500 to-blue-500 disabled:opacity-50 disabled:cursor-not-allowed hover:from-fuchsia-600 hover:to-blue-600 transition-all\"\n        >\n          Siguiente\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfessionalDataStep; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/_deprecated/features_onboarding/steps/ProfessionalDataStep.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[74,77],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[74,77],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[114,117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[114,117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[334,337],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[334,337],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\ninterface ProfessionalDataStepProps {\n  data: any;\n  onUpdate: (field: string, value: any) => void;\n  onNext: () => void;\n  onBack: () => void;\n}\n\nconst ProfessionalDataStep: React.FC<ProfessionalDataStepProps> = ({ data, onUpdate, onNext, onBack }) => {\n  const handleFieldChange = (field: string, value: any) => {\n    onUpdate(field, value);\n  };\n\n  // ✅ Requeridos profesionales + licencia y país\n  const canProceed = Boolean(\n    (data.profession || '').trim() &&\n    (data.specialty || '').trim() &&\n    Number(data.yearsOfExperience) > 0 &&\n    (data.licenseNumber || '').trim() &&\n    (data.country || '').trim()\n  );\n\n  const professionalTitles = [\n    'Fisioterapeuta','Médico','Enfermero/a','Psicólogo/a','Terapeuta Ocupacional',\n    'Logopeda','Nutricionista','Osteópata','Quiropráctico','Masajista Terapéutico',\n    'Entrenador Personal','Otro'\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Datos Profesionales</h2>\n        <p className=\"text-gray-600\">Profesión, licencia y experiencia</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Profesión *</label>\n        <select\n            value={data.profession || ''}\n            onChange={(e) => handleFieldChange('profession', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            required\n          >\n            <option value=\"\">Selecciona tu profesión</option>\n            {professionalTitles.map((title) => (\n              <option key={title} value={title}>{title}</option>\n            ))}\n          </select>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Especialidad *</label>\n          <input\n            type=\"text\"\n            value={data.specialty || ''}\n            onChange={(e) => handleFieldChange('specialty', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            placeholder=\"Ej: Fisioterapia Deportiva, Psicología Clínica\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Años de Experiencia *</label>\n          <input\n            type=\"number\"\n            min=\"0\"\n            max=\"50\"\n            value={data.yearsOfExperience ?? ''}\n            onChange={(e) => handleFieldChange('yearsOfExperience', parseInt(e.target.value) || 0)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            required\n          />\n        </div>\n\n        {/* ✅ Aquí van los campos que antes estaban en Datos Personales */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Número de Licencia/Colegiado *</label>\n          <input\n            type=\"text\"\n            value={data.licenseNumber || ''}\n            onChange={(e) => handleFieldChange('licenseNumber', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            placeholder=\"Ej: 12345-67890 o COL-12345\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">País de Licencia *</label>\n          <select\n            value={data.country || ''}\n            onChange={(e) => handleFieldChange('country', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            required\n          >\n            <option value=\"\">Selecciona un país</option>\n            <option value=\"ES\">España</option>\n            <option value=\"MX\">México</option>\n            <option value=\"AR\">Argentina</option>\n            <option value=\"CO\">Colombia</option>\n            <option value=\"CL\">Chile</option>\n            <option value=\"PE\">Perú</option>\n            <option value=\"US\">Estados Unidos</option>\n            <option value=\"GB\">Reino Unido</option>\n            <option value=\"DE\">Alemania</option>\n            <option value=\"FR\">Francia</option>\n          </select>\n        </div>\n\n        <div className=\"md:col-span-2\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Certificaciones</label>\n          <input\n            type=\"text\"\n            value={data.certifications || ''}\n            onChange={(e) => handleFieldChange('certifications', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            placeholder=\"Ej: Certificación en Terapia Manual\"\n          />\n        </div>\n      </div>\n\n      <div className=\"flex justify-between pt-6\">\n        <button\n          onClick={onBack}\n          className=\"px-6 py-2 rounded-lg text-gray-700 bg-gray-200 hover:bg-gray-300 transition-all\"\n        >\n          Anterior\n        </button>\n        <button\n          onClick={onNext}\n          disabled={!canProceed}\n          className=\"px-6 py-2 rounded-lg text-white bg-gradient-to-r from-fuchsia-500 to-blue-500 disabled:opacity-50 disabled:cursor-not-allowed hover:from-fuchsia-600 hover:to-blue-600 transition-all\"\n        >\n          Siguiente\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfessionalDataStep;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/analytics/events.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":4,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":4,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[141,195],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":16,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":16,"endColumn":36},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":17,"column":23,"nodeType":"MemberExpression","messageId":"unexpected","endLine":17,"endColumn":34},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":18,"column":52,"nodeType":"MemberExpression","messageId":"unexpected","endLine":18,"endColumn":63},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[812,866],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export async function logAction(action: string, path: string, data?: unknown): Promise<void> {\n  try {\n    // Log básico para desarrollo\n    console.log(`[Analytics] ${action} en ${path}`, data);\n    \n    // Aquí se implementaría el logging real a Firebase Analytics\n    // Por ahora solo es un placeholder\n  } catch (error) {\n    console.warn('[Analytics] Error logging action:', error);\n  }\n}\n\nexport function useSessionTracking() {\n  // Hook placeholder para tracking de sesión\n  return {\n    startSession: () => console.log('[Analytics] Session started'),\n    endSession: () => console.log('[Analytics] Session ended'),\n    trackEvent: (event: string, data?: unknown) => console.log(`[Analytics] Event: ${event}`, data)\n  };\n}\n\nexport function logRouteView(route: string, data?: unknown): void {\n  try {\n    console.log(`[Analytics] Route view: ${route}`, data);\n    // Aquí se implementaría el logging real de navegación\n  } catch (error) {\n    console.warn('[Analytics] Error logging route view:', error);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/ActionBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/AuditWidget.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAuditLogs'. Either include it or remove the dependency array.","line":35,"column":6,"nodeType":"ArrayExpression","endLine":35,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [isVisible, user, filter, fetchAuditLogs]","fix":{"range":[907,932],"text":"[isVisible, user, filter, fetchAuditLogs]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { getFirestore, collection, query, where, orderBy, limit, getDocs, Timestamp } from 'firebase/firestore';\n\nimport { useAuth } from '../hooks/useAuth';\n\ninterface AuditLogEntry {\n  id: string;\n  action: string;\n  userId: string;\n  timestamp: Timestamp;\n  status: 'success' | 'error';\n  details?: Record<string, unknown>;\n  error?: string;\n}\n\ninterface AuditWidgetProps {\n  isVisible: boolean;\n  onClose: () => void;\n}\n\nexport const AuditWidget: React.FC<AuditWidgetProps> = ({ isVisible, onClose }) => {\n  const { user } = useAuth();\n  const [logs, setLogs] = useState<AuditLogEntry[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [filter, setFilter] = useState({\n    action: '',\n    status: '',\n    dateRange: '24h' as '24h' | '7d' | '30d'\n  });\n\n  useEffect(() => {\n    if (isVisible && user) {\n      fetchAuditLogs();\n    }\n  }, [isVisible, user, filter]);\n\n  const fetchAuditLogs = async () => {\n    if (!user) return;\n\n    setLoading(true);\n    try {\n      const db = getFirestore();\n      \n      // Calcular rango de fechas\n      const now = new Date();\n                        const startDate = new Date();\n      \n      switch (filter.dateRange) {\n        case '24h':\n          startDate.setHours(now.getHours() - 24);\n          break;\n        case '7d':\n          startDate.setDate(now.getDate() - 7);\n          break;\n        case '30d':\n          startDate.setDate(now.getDate() - 30);\n          break;\n      }\n\n      // Construir query\n      let q = query(\n        collection(db, 'audit_logs'),\n        where('timestamp', '>=', startDate),\n        orderBy('timestamp', 'desc'),\n        limit(50)\n      );\n\n      if (filter.action) {\n        q = query(q, where('action', '==', filter.action));\n      }\n\n      if (filter.status) {\n        q = query(q, where('status', '==', filter.status));\n      }\n\n      const snapshot = await getDocs(q);\n      const logsData = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as AuditLogEntry[];\n\n      setLogs(logsData);\n    } catch (error) {\n      console.error('Error fetching audit logs:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatTimestamp = (timestamp: Timestamp) => {\n    const date = timestamp.toDate();\n    return date.toLocaleString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getActionIcon = (action: string) => {\n    switch (action) {\n      case 'assistant_query':\n        return 'IA';\n      case 'assistant_data_lookup':\n        return 'SEARCH';\n      case 'create_patient':\n        return 'PATIENT';\n      case 'create_appointment':\n        return 'APPOINTMENT';\n      case 'create_note':\n        return 'NOTE';\n      default:\n        return 'INFO';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    return status === 'success' ? 'text-green-600' : 'text-red-600';\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\n      <div className=\"bg-white rounded-xl shadow-soft max-w-6xl w-full mx-4 max-h-[90vh] overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-slate-200\">\n          <h2 className=\"text-xl font-semibold text-slate-900\">Widget de Auditoría</h2>\n          <button\n            onClick={onClose}\n            className=\"text-slate-400 hover:text-slate-600 transition-colors\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* Filtros */}\n        <div className=\"p-6 border-b border-slate-200 bg-slate-50\">\n          <div className=\"flex gap-4 items-center\">\n            <div>\n              <label htmlFor=\"action-filter\" className=\"block text-sm font-medium text-slate-700 mb-1\">Acción</label>\n              <select\n                id=\"action-filter\"\n                value={filter.action}\n                onChange={(e) => setFilter(prev => ({ ...prev, action: e.target.value }))}\n                className=\"px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-in-500\"\n              >\n                <option value=\"\">Todas las acciones</option>\n                <option value=\"assistant_query\">Consulta IA</option>\n                <option value=\"assistant_data_lookup\">Búsqueda de datos</option>\n                <option value=\"create_patient\">Crear paciente</option>\n                <option value=\"create_appointment\">Crear cita</option>\n                <option value=\"create_note\">Crear nota</option>\n              </select>\n            </div>\n\n            <div>\n              <label htmlFor=\"status-filter\" className=\"block text-sm font-medium text-slate-700 mb-1\">Estado</label>\n              <select\n                id=\"status-filter\"\n                value={filter.status}\n                onChange={(e) => setFilter(prev => ({ ...prev, status: e.target.value }))}\n                className=\"px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-in-500\"\n              >\n                <option value=\"\">Todos los estados</option>\n                <option value=\"success\">Éxito</option>\n                <option value=\"error\">Error</option>\n              </select>\n            </div>\n\n            <div>\n              <label htmlFor=\"date-range-filter\" className=\"block text-sm font-medium text-slate-700 mb-1\">Rango</label>\n              <select\n                id=\"date-range-filter\"\n                value={filter.dateRange}\n                onChange={(e) => setFilter(prev => ({ ...prev, dateRange: e.target.value as '24h' | '7d' | '30d' }))}\n                className=\"px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-in-500\"\n              >\n                <option value=\"24h\">Últimas 24h</option>\n                <option value=\"7d\">Últimos 7 días</option>\n                <option value=\"30d\">Últimos 30 días</option>\n              </select>\n            </div>\n\n            <button\n              onClick={fetchAuditLogs}\n              disabled={loading}\n              className=\"px-4 py-2 bg-brand-in-500 text-white rounded-lg hover:bg-brand-in-600 disabled:opacity-50\"\n            >\n              {loading ? 'Cargando...' : 'Actualizar'}\n            </button>\n          </div>\n        </div>\n\n        {/* Contenido */}\n        <div className=\"p-6 overflow-auto max-h-[60vh]\">\n          {loading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-brand-in-500 mx-auto\"></div>\n              <p className=\"mt-2 text-slate-500\">Cargando logs de auditoría...</p>\n            </div>\n          ) : logs.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-slate-500\">No se encontraron logs de auditoría</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {logs.map((log) => (\n                <div key={log.id} className=\"border border-slate-200 rounded-lg p-4 hover:bg-slate-50\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <span className=\"text-2xl\">{getActionIcon(log.action)}</span>\n                      <div>\n                        <h4 className=\"font-medium text-slate-900\">{log.action}</h4>\n                        <p className=\"text-sm text-slate-500\">Usuario: {log.userId}</p>\n                        <p className=\"text-sm text-slate-500\">\n                          {formatTimestamp(log.timestamp)}\n                        </p>\n                      </div>\n                    </div>\n                    <span className={`font-medium ${getStatusColor(log.status)}`}>\n                      {log.status === 'success' ? '✅' : '❌'}\n                    </span>\n                  </div>\n                  \n                  {log.details && (\n                    <div className=\"mt-3 p-3 bg-slate-100 rounded-lg\">\n                      <p className=\"text-sm text-slate-700\">\n                        <strong>Detalles:</strong> {JSON.stringify(log.details, null, 2)}\n                      </p>\n                    </div>\n                  )}\n                  \n                  {log.error && (\n                    <div className=\"mt-3 p-3 bg-red-50 border border-red-200 rounded-lg\">\n                      <p className=\"text-sm text-red-700\">\n                        <strong>Error:</strong> {log.error}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"p-6 border-t border-slate-200 bg-slate-50\">\n          <div className=\"flex justify-between items-center\">\n            <p className=\"text-sm text-slate-500\">\n              Mostrando {logs.length} logs de auditoría\n            </p>\n            <button\n              onClick={onClose}\n              className=\"px-4 py-2 bg-slate-600 text-white rounded-lg hover:bg-slate-700\"\n            >\n              Cerrar\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/AuthGuard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/CaptureWorkspace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/CompetencySuggestionsIntegrator.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3011,3266],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from 'react';\n\nimport { useCompetencySuggestions, UseCompetencySuggestionsConfig } from '../hooks/useCompetencySuggestions';\nimport { CompetencySuggestion } from '../services/CompetencySuggestionService';\n\ninterface CompetencySuggestionsIntegratorProps {\n  config: UseCompetencySuggestionsConfig;\n  transcript?: string;\n  soapData?: Record<string, unknown>;\n  onSuggestionsGenerated?: (suggestions: CompetencySuggestion[]) => void;\n  onCriticalSuggestions?: (suggestions: CompetencySuggestion[]) => void;\n  children?: React.ReactNode;\n  enableRealTimeAnalysis?: boolean;\n}\n\n/**\n * Componente que integra sugerencias de competencias profesionales\n * en el flujo de trabajo existente de forma transparente\n */\nexport const CompetencySuggestionsIntegrator: React.FC<CompetencySuggestionsIntegratorProps> = ({\n  config,\n  transcript,\n  soapData,\n  onSuggestionsGenerated,\n  onCriticalSuggestions,\n  children,\n  enableRealTimeAnalysis = true\n}) => {\n  const {\n    suggestions,\n    isLoading,\n    error,\n    statistics,\n    analyzeTranscription,\n    analyzeSOAP,\n    generatePreventiveSuggestions,\n    getCriticalSuggestions\n  } = useCompetencySuggestions(config);\n\n  const lastTranscriptRef = useRef<string>('');\n  const lastSoapDataRef = useRef<Record<string, unknown> | null>(null);\n\n  // Analizar transcripción cuando cambie\n  useEffect(() => {\n    if (transcript && transcript !== lastTranscriptRef.current && enableRealTimeAnalysis) {\n      lastTranscriptRef.current = transcript;\n      \n      analyzeTranscription(transcript).then(newSuggestions => {\n        if (onSuggestionsGenerated && newSuggestions.length > 0) {\n          onSuggestionsGenerated(newSuggestions);\n        }\n      });\n    }\n  }, [transcript, analyzeTranscription, onSuggestionsGenerated, enableRealTimeAnalysis]);\n\n  // Analizar SOAP cuando cambie\n  useEffect(() => {\n    if (soapData && JSON.stringify(soapData) !== JSON.stringify(lastSoapDataRef.current)) {\n      lastSoapDataRef.current = soapData;\n      \n      analyzeSOAP(soapData).then(newSuggestions => {\n        if (onSuggestionsGenerated && newSuggestions.length > 0) {\n          onSuggestionsGenerated(newSuggestions);\n        }\n      });\n    }\n  }, [soapData, analyzeSOAP, onSuggestionsGenerated]);\n\n  // Generar sugerencias preventivas al montar\n  useEffect(() => {\n    generatePreventiveSuggestions().then(preventiveSuggestions => {\n      if (onSuggestionsGenerated && preventiveSuggestions.length > 0) {\n        onSuggestionsGenerated(preventiveSuggestions);\n      }\n    });\n  }, [generatePreventiveSuggestions, onSuggestionsGenerated]);\n\n  // Notificar sugerencias críticas\n  useEffect(() => {\n    const criticalSuggestions = getCriticalSuggestions();\n    if (onCriticalSuggestions && criticalSuggestions.length > 0) {\n      onCriticalSuggestions(criticalSuggestions);\n    }\n  }, [suggestions, onCriticalSuggestions, getCriticalSuggestions]);\n\n  // Log silencioso para auditoría\n  useEffect(() => {\n    if (suggestions.length > 0) {\n      console.log('🔒 CompetencySuggestionsIntegrator:', {\n        totalSuggestions: suggestions.length,\n        region: config.region,\n        geolocationSpecific: statistics.geolocationSpecific,\n        criticalCount: getCriticalSuggestions().length\n      });\n    }\n  }, [suggestions, statistics, config.region, getCriticalSuggestions]);\n\n  // Renderizar children sin interferir en la UI\n  return (\n    <>\n      {children}\n      \n      {/* Indicador de carga discreto (solo en desarrollo) */}\n      {process.env.NODE_ENV === 'development' && isLoading && (\n        <div className=\"fixed bottom-4 right-4 bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-xs opacity-75\">\n          Verificando competencias...\n        </div>\n      )}\n      \n      {/* Indicador de error discreto (solo en desarrollo) */}\n      {process.env.NODE_ENV === 'development' && error && (\n        <div className=\"fixed bottom-4 right-4 bg-red-100 text-red-800 px-3 py-1 rounded-full text-xs opacity-75\">\n          Error: {error}\n        </div>\n      )}\n    </>\n  );\n};\n\n/**\n * Hook para usar el integrador de sugerencias de competencias\n */\nexport const useCompetencyIntegrator = (config: UseCompetencySuggestionsConfig) => {\n  const {\n    suggestions,\n    isLoading,\n    error,\n    statistics,\n    getCriticalSuggestions,\n    getGeolocationSpecificSuggestions,\n    getStandardSuggestions\n  } = useCompetencySuggestions(config);\n\n  return {\n    // Estado\n    suggestions,\n    isLoading,\n    error,\n    statistics,\n\n    // Métodos de filtrado\n    getCriticalSuggestions,\n    getGeolocationSpecificSuggestions,\n    getStandardSuggestions,\n\n    // Componente integrador\n    Integrator: ({ children, ...props }: Omit<CompetencySuggestionsIntegratorProps, 'config'>) => (\n      <CompetencySuggestionsIntegrator config={config} {...props}>\n        {children}\n      </CompetencySuggestionsIntegrator>\n    )\n  };\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/FloatingAssistant.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/LegalChecklist.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/LegalConsentStatus.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":151,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":151,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5602,5652],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🏛️ Legal Consent Status Component - AiDuxCare V.2\n * Componente para mostrar el estado del consentimiento legal\n * \n * @version 1.0.0\n * @author CTO/Implementador Jefe\n */\n\nimport React, { useState, useEffect } from 'react';\n\nimport { legalConsentService, type LegalConsent } from '../services/legalConsentService';\n\ninterface LegalConsentStatusProps {\n  showDetails?: boolean;\n  onConsentChange?: (hasConsent: boolean) => void;\n}\n\nexport const LegalConsentStatus: React.FC<LegalConsentStatusProps> = ({\n  showDetails = false,\n  onConsentChange\n}) => {\n  const [consent, setConsent] = useState<LegalConsent | null>(null);\n  const [hasValidConsent, setHasValidConsent] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const checkConsent = () => {\n      try {\n        const currentConsent = legalConsentService.getCurrentConsent();\n        const isValid = legalConsentService.hasValidConsent();\n        \n        setConsent(currentConsent);\n        setHasValidConsent(isValid);\n        onConsentChange?.(isValid);\n      } catch (error) {\n        console.error('Error al verificar consentimiento:', error);\n        setHasValidConsent(false);\n        onConsentChange?.(false);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkConsent();\n  }, [onConsentChange]);\n\n  const handleRevokeConsent = async () => {\n    if (!consent?.userId) return;\n\n    try {\n      await legalConsentService.revokeConsent(consent.userId);\n      setConsent(null);\n      setHasValidConsent(false);\n      onConsentChange?.(false);\n      alert('Consentimiento revocado exitosamente');\n    } catch (error) {\n      console.error('Error al revocar consentimiento:', error);\n      alert('Error al revocar el consentimiento');\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-4\">\n        <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\n        <span className=\"ml-2 text-sm text-gray-600\">Verificando consentimiento...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">Estado del Consentimiento Legal</h3>\n        <div className={`px-3 py-1 rounded-full text-xs font-medium ${\n          hasValidConsent \n            ? 'bg-green-100 text-green-800' \n            : 'bg-red-100 text-red-800'\n        }`}>\n          {hasValidConsent ? '✅ Válido' : '❌ Pendiente'}\n        </div>\n      </div>\n\n      {hasValidConsent && consent && (\n        <div className=\"space-y-3\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"font-medium text-gray-700\">Fecha de Consentimiento:</span>\n              <p className=\"text-gray-600\">\n                {consent.consentTimestamp?.toLocaleDateString('es-ES', {\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric',\n                  hour: '2-digit',\n                  minute: '2-digit'\n                })}\n              </p>\n            </div>\n            <div>\n              <span className=\"font-medium text-gray-700\">Versión:</span>\n              <p className=\"text-gray-600\">{consent.version}</p>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <h4 className=\"font-medium text-gray-900\">Consentimientos Aceptados:</h4>\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center space-x-2\">\n                <div className={`w-3 h-3 rounded-full ${\n                  consent.termsAccepted ? 'bg-green-500' : 'bg-red-500'\n                }`}></div>\n                <span className=\"text-sm text-gray-700\">Términos y Condiciones</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className={`w-3 h-3 rounded-full ${\n                  consent.privacyAccepted ? 'bg-green-500' : 'bg-red-500'\n                }`}></div>\n                <span className=\"text-sm text-gray-700\">Política de Privacidad</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className={`w-3 h-3 rounded-full ${\n                  consent.medicalDisclaimerAccepted ? 'bg-green-500' : 'bg-red-500'\n                }`}></div>\n                <span className=\"text-sm text-gray-700\">Disclaimer Médico</span>\n              </div>\n            </div>\n          </div>\n\n          {showDetails && (\n            <div className=\"mt-4 pt-4 border-t border-gray-200\">\n              <h4 className=\"font-medium text-gray-900 mb-2\">Detalles Técnicos:</h4>\n              <div className=\"text-xs text-gray-600 space-y-1\">\n                <p><strong>User Agent:</strong> {consent.userAgent}</p>\n                <p><strong>Session ID:</strong> {consent.sessionId || 'N/A'}</p>\n                <p><strong>IP Address:</strong> {consent.ipAddress || 'N/A'}</p>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex justify-between items-center pt-4 border-t border-gray-200\">\n            <button\n              onClick={handleRevokeConsent}\n              className=\"px-4 py-2 text-sm text-red-600 hover:text-red-800 hover:bg-red-50 rounded-md transition-colors\"\n            >\n              Revocar Consentimiento\n            </button>\n            \n            <button\n              onClick={() => {\n                const report = legalConsentService.generateConsentReport();\n  console.log('Reporte de consentimiento:', report);\n                alert('Reporte generado. Revisa la consola para más detalles.');\n              }}\n              className=\"px-4 py-2 text-sm text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-md transition-colors\"\n            >\n              Generar Reporte\n            </button>\n          </div>\n        </div>\n      )}\n\n      {!hasValidConsent && (\n        <div className=\"text-center py-6\">\n          <div className=\"text-4xl mb-4\">⚠️</div>\n          <h4 className=\"text-lg font-medium text-gray-900 mb-2\">\n            Consentimiento Legal Requerido\n          </h4>\n          <p className=\"text-sm text-gray-600 mb-4\">\n            Para usar AiDuxCare, debe aceptar los términos y condiciones legales.\n          </p>\n          <div className=\"bg-yellow-50 p-3 rounded-lg\">\n            <p className=\"text-xs text-yellow-800\">\n              <strong>Importante:</strong> El consentimiento es obligatorio para cumplir \n              con las regulaciones médicas y de privacidad.\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/OrganizationNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/PromoteToProButton.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1575,1661],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handlePromoteToPro'. Either include it or remove the dependency array.","line":52,"column":6,"nodeType":"ArrayExpression","endLine":52,"endColumn":52,"suggestions":[{"desc":"Update the dependencies array to be: [handlePromoteToPro, promoteToProOnReconnect, targetTranscription]","fix":{"range":[1839,1885],"text":"[handlePromoteToPro, promoteToProOnReconnect, targetTranscription]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2818,2889],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\n\nimport { useAiModeStore, useLocalTranscriptions, usePromoteToProOnReconnect } from '../stores/aiModeStore';\nimport { LocalTranscription } from '../stores/aiModeStore';\n\ninterface PromoteToProButtonProps {\n  transcriptionId?: string;\n  onPromote?: (proTranscription: ProTranscriptionResult) => void;\n  className?: string;\n}\n\ninterface ProTranscriptionResult {\n  id: string;\n  originalText: string;\n  proText: string;\n  confidence: number;\n  improvements: string[];\n  processingTime: number;\n  timestamp: Date;\n}\n\nexport const PromoteToProButton: React.FC<PromoteToProButtonProps> = ({\n  transcriptionId,\n  onPromote,\n  className = ''\n}) => {\n  const [isPromoting, setIsPromoting] = useState(false);\n  const [promotionResult, setPromotionResult] = useState<ProTranscriptionResult | null>(null);\n  const [showDiff, setShowDiff] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const localTranscriptions = useLocalTranscriptions();\n  const promoteToProOnReconnect = usePromoteToProOnReconnect();\n  const { addPendingUpload, removePendingUpload } = useAiModeStore();\n\n  // Detectar transcripción específica o usar la más reciente\n  const targetTranscription = transcriptionId \n    ? localTranscriptions.find(t => t.id === transcriptionId)\n    : localTranscriptions[localTranscriptions.length - 1];\n\n  // Auto-promoción al reconectar (si está habilitada)\n  useEffect(() => {\n    if (promoteToProOnReconnect && targetTranscription && navigator.onLine) {\n      const handleOnline = () => {\n        console.log('Promote to Pro: Conexión restaurada, iniciando promoción automática...');\n        handlePromoteToPro();\n      };\n\n      window.addEventListener('online', handleOnline);\n      return () => window.removeEventListener('online', handleOnline);\n    }\n  }, [promoteToProOnReconnect, targetTranscription]);\n\n  // Función principal de promoción\n  const handlePromoteToPro = async () => {\n    if (!targetTranscription) {\n      setError('No hay transcripción disponible para promocionar');\n      return;\n    }\n\n    setIsPromoting(true);\n    setError(null);\n\n    try {\n      // Agregar a cola de uploads pendientes\n      const pendingUpload = {\n        id: crypto.randomUUID(),\n        transcriptionId: targetTranscription.id,\n        timestamp: new Date(),\n        retryCount: 0,\n        maxRetries: 3\n      };\n\n      addPendingUpload(pendingUpload);\n\n      // Simular llamada al servidor (en implementación real, usar endpoint real)\n      const result = await promoteTranscriptionToPro(targetTranscription);\n\n      // Remover de cola de pendientes\n      removePendingUpload(pendingUpload.id);\n\n      setPromotionResult(result);\n      \n      // Notificar al componente padre\n      if (onPromote) {\n        onPromote(result);\n      }\n\n      console.log('Promote to Pro: Transcripción promocionada exitosamente');\n\n    } catch (error) {\n      console.error('Promote to Pro: Error en promoción:', error);\n      setError(error instanceof Error ? error.message : 'Error desconocido en promoción');\n    } finally {\n      setIsPromoting(false);\n    }\n  };\n\n  // Simular promoción al servidor (placeholder)\n  const promoteTranscriptionToPro = async (transcription: LocalTranscription): Promise<ProTranscriptionResult> => {\n    // En implementación real, llamar al endpoint de Functions\n    // Por ahora, simular procesamiento\n    \n    await new Promise(resolve => setTimeout(resolve, 1500));\n\n    // Simular mejoras de IA Pro\n    const improvements = [\n      'Terminología médica corregida',\n      'Estructura SOAP aplicada',\n      'Entidades clínicas identificadas',\n      'Confianza aumentada del 65% al 92%'\n    ];\n\n    return {\n      id: transcription.id,\n      originalText: transcription.text,\n      proText: transcription.text.replace(\n        '[Audio capturado - modo offline]',\n        'Paciente refiere dolor lumbar de 3 días de evolución, con irradiación a miembro inferior derecho. No hay antecedentes de trauma. El dolor se agrava con la sedestación prolongada y mejora con el decúbito lateral.'\n      ),\n      confidence: 0.92,\n      improvements,\n      processingTime: 1500,\n      timestamp: new Date()\n    };\n  };\n\n  // Renderizar diff entre versión local y Pro\n  const renderDiff = () => {\n    if (!promotionResult) return null;\n\n    return (\n      <div className=\"mt-4 p-4 bg-gray-50 rounded-lg border\">\n        <h4 className=\"font-semibold text-gray-800 mb-3\">Comparación Local vs Pro</h4>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <h5 className=\"text-sm font-medium text-gray-600 mb-2\">Local Draft</h5>\n            <div className=\"p-3 bg-red-50 border border-red-200 rounded text-sm text-gray-700\">\n              {promotionResult.originalText}\n            </div>\n          </div>\n          \n          <div>\n            <h5 className=\"text-sm font-medium text-gray-600 mb-2\">Clinically Verified</h5>\n            <div className=\"p-3 bg-green-50 border border-green-200 rounded text-sm text-gray-700\">\n              {promotionResult.proText}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-4\">\n          <h5 className=\"text-sm font-medium text-gray-600 mb-2\">Mejoras aplicadas:</h5>\n          <ul className=\"list-disc list-inside text-sm text-gray-700 space-y-1\">\n            {promotionResult.improvements.map((improvement, index) => (\n              <li key={index} className=\"text-green-700\">{improvement}</li>\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"mt-4 text-xs text-gray-500\">\n          Procesado en {promotionResult.processingTime}ms • Confianza: {Math.round(promotionResult.confidence * 100)}%\n        </div>\n      </div>\n    );\n  };\n\n  // No mostrar si no hay transcripciones locales\n  if (!targetTranscription) {\n    return null;\n  }\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Botón principal */}\n      <button\n        onClick={handlePromoteToPro}\n        disabled={isPromoting}\n        className={`\n          px-4 py-2 rounded-lg font-medium transition-all duration-200\n          ${isPromoting\n            ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n            : 'bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:from-blue-600 to-blue-700 hover:shadow-lg'\n          }\n          disabled:opacity-50 disabled:cursor-not-allowed\n        `}\n      >\n        {isPromoting ? (\n          <span className=\"flex items-center space-x-2\">\n            <svg className=\"animate-spin h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\">\n              <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" />\n              <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\n            </svg>\n            <span>Promocionando...</span>\n          </span>\n        ) : (\n          <span className=\"flex items-center space-x-2\">\n            <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n            </svg>\n            <span>Actualizar con IA Pro</span>\n          </span>\n        )}\n      </button>\n\n      {/* Estado de la transcripción */}\n      <div className=\"text-sm text-gray-600\">\n        <div className=\"flex items-center space-x-2\">\n          <span className={`inline-block w-2 h-2 rounded-full ${\n            targetTranscription.confidence > 0.7 ? 'bg-green-400' : 'bg-yellow-400'\n          }`} />\n          <span>\n            Local STT • \n            Confianza: {Math.round(targetTranscription.confidence * 100)}%\n          </span>\n        </div>\n        <div className=\"text-xs text-gray-500 mt-1\">\n          {targetTranscription.timestamp.toLocaleString()}\n        </div>\n      </div>\n\n      {/* Error */}\n      {error && (\n        <div className=\"p-3 bg-red-50 border border-red-200 rounded text-sm text-red-700\">\n          {error}\n        </div>\n      )}\n\n      {/* Resultado de promoción */}\n      {promotionResult && (\n        <div>\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-gray-800\">Promoción Completada</h3>\n            <button\n              onClick={() => setShowDiff(!showDiff)}\n              className=\"text-sm text-blue-600 hover:text-blue-800\"\n            >\n              {showDiff ? 'Ocultar' : 'Mostrar'} comparación\n            </button>\n          </div>\n          \n          {showDiff && renderDiff()}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PromoteToProButton;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/RealTimeAudioCapture.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":36,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":36,"endColumn":41}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\n\nimport { AudioCaptureServiceReal, CaptureSession, CaptureStatus } from '../services/AudioCaptureServiceReal';\nimport { TranscriptionSegment } from '../core/audio/AudioCaptureService';\nimport { WebSpeechSTTService } from '../services/WebSpeechSTTService';\n\ninterface RealTimeAudioCaptureProps {\n  onCaptureComplete?: (segments: TranscriptionSegment[]) => void;\n  onTranscriptionUpdate?: (segment: TranscriptionSegment) => void;\n  language?: 'es' | 'en';\n  className?: string;\n}\n\ninterface SessionStats {\n  segmentsCount: number;\n  duration: number;\n  wordsTranscribed: number;\n  averageConfidence: number;\n  cost: number;\n}\n\nconst RealTimeAudioCapture: React.FC<RealTimeAudioCaptureProps> = ({\n  onCaptureComplete,\n  onTranscriptionUpdate,\n  language = 'es',\n  className = ''\n}) => {\n  const [isSupported, setIsSupported] = useState<boolean>(true);\n  const [captureStatus, setCaptureStatus] = useState<CaptureStatus>('idle');\n  const [, setCurrentSession] = useState<CaptureSession | null>(null);\n  const [transcriptionSegments, setTranscriptionSegments] = useState<TranscriptionSegment[]>([]);\n  const [sessionStats, setSessionStats] = useState<SessionStats | null>(null);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  \n  const audioCaptureRef = useRef<AudioCaptureServiceReal | null>(null);\n  const statsIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Inicializar servicio de captura\n  useEffect(() => {\n    audioCaptureRef.current = new AudioCaptureServiceReal({\n      language,\n      onTranscriptionUpdate: (segment) => {\n        setTranscriptionSegments(prev => {\n          const existingIndex = prev.findIndex(s => s.id === segment.id);\n          if (existingIndex !== -1) {\n            const updated = [...prev];\n            updated[existingIndex] = segment;\n            return updated;\n          }\n          return [...prev, segment];\n        });\n        onTranscriptionUpdate?.(segment);\n      },\n      onError: (error) => {\n        setErrorMessage(error);\n        setCaptureStatus('error');\n      },\n      onStatusChange: (status) => {\n        setCaptureStatus(status);\n      }\n    });\n\n    // Verificar soporte del navegador\n    setIsSupported(audioCaptureRef.current.isSupported());\n\n    return () => {\n      // Cleanup al desmontar\n      if (audioCaptureRef.current) {\n        audioCaptureRef.current.cleanup();\n      }\n      if (statsIntervalRef.current) {\n        clearInterval(statsIntervalRef.current);\n      }\n    };\n  }, [language, onTranscriptionUpdate]);\n\n  // Actualizar estadísticas en tiempo real\n  useEffect(() => {\n    if (captureStatus === 'recording' && audioCaptureRef.current) {\n      statsIntervalRef.current = setInterval(() => {\n        const stats = audioCaptureRef.current?.getSessionStats();\n        if (stats) {\n          setSessionStats(stats);\n        }\n      }, 1000);\n    } else if (statsIntervalRef.current) {\n      clearInterval(statsIntervalRef.current);\n      statsIntervalRef.current = null;\n    }\n\n    return () => {\n      if (statsIntervalRef.current) {\n        clearInterval(statsIntervalRef.current);\n      }\n    };\n  }, [captureStatus]);\n\n  const handleStartCapture = async () => {\n    if (!audioCaptureRef.current) return;\n\n    try {\n      setErrorMessage('');\n      setTranscriptionSegments([]);\n      setSessionStats(null);\n      \n      const session = await audioCaptureRef.current.startCapture();\n      setCurrentSession(session);\n    } catch (error) {\n      const errorMsg = error instanceof Error ? error.message : 'Error desconocido';\n      setErrorMessage(errorMsg);\n      setCaptureStatus('error');\n    }\n  };\n\n  const handleStopCapture = async () => {\n    if (!audioCaptureRef.current) return;\n\n    try {\n      const finalSegments = await audioCaptureRef.current.stopCapture();\n      setCurrentSession(prev => prev ? { ...prev, status: 'idle' } : null);\n      onCaptureComplete?.(finalSegments);\n      \n      // Mantener estadísticas finales\n      const finalStats = audioCaptureRef.current.getSessionStats();\n      if (finalStats) {\n        setSessionStats(finalStats);\n      }\n    } catch (error) {\n      const errorMsg = error instanceof Error ? error.message : 'Error deteniendo captura';\n      setErrorMessage(errorMsg);\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (captureStatus) {\n      case 'idle':\n        return '⏸️';\n      case 'requesting_permission':\n        return '🔄';\n      case 'recording':\n        return '🔴';\n      case 'stopping':\n        return '⏹️';\n      case 'error':\n        return '❌';\n      default:\n        return '❓';\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (captureStatus) {\n      case 'idle':\n        return 'text-gray-600';\n      case 'requesting_permission':\n        return 'text-blue-600';\n      case 'recording':\n        return 'text-red-600';\n      case 'stopping':\n        return 'text-orange-600';\n      case 'error':\n        return 'text-red-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  const getActorBadgeColor = (actor: string) => {\n    switch (actor) {\n      case 'profesional':\n        return 'bg-blue-100 text-blue-800';\n      case 'paciente':\n        return 'bg-green-100 text-green-800';\n      case 'acompañante':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getConfidenceColor = (confidence: string) => {\n    switch (confidence) {\n      case 'entendido':\n        return 'text-green-600';\n      case 'poco_claro':\n        return 'text-yellow-600';\n      case 'no_reconocido':\n        return 'text-red-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  if (!isSupported) {\n    const compatibility = WebSpeechSTTService.getBrowserCompatibility();\n    return (\n      <div className={`p-6 bg-yellow-50 border border-yellow-200 rounded-lg ${className}`}>\n        <div className=\"flex items-center space-x-3 mb-4\">\n          <span className=\"text-2xl\">⚠️</span>\n          <h3 className=\"text-lg font-semibold text-yellow-800\">\n            Navegador No Compatible\n          </h3>\n        </div>\n        \n        <div className=\"space-y-3 text-sm text-yellow-700\">\n          <p>\n            <strong>Tu navegador:</strong> {compatibility.browserName}\n          </p>\n          <p>\n            <strong>Estado:</strong> {compatibility.isSupported ? 'Soporte limitado' : 'No soportado'}\n          </p>\n          <p>\n            <strong>Recomendación:</strong> {compatibility.recommendedAction}\n          </p>\n        </div>\n\n        <div className=\"mt-4 p-3 bg-white rounded border\">\n          <h4 className=\"font-medium text-yellow-800 mb-2\">✅ Navegadores Compatibles:</h4>\n          <ul className=\"text-sm text-yellow-700 space-y-1\">\n            <li>• Google Chrome (recomendado)</li>\n            <li>• Microsoft Edge</li>\n            <li>• Firefox (funcionalidad limitada)</li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`bg-white rounded-lg shadow-lg border border-gray-200 ${className}`}>\n      {/* Header con controles principales */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <span className=\"text-2xl\">🎤</span>\n            <div>\n              <h2 className=\"text-lg font-semibold text-gray-900\">\n                Captura de Audio en Tiempo Real\n              </h2>\n              <p className=\"text-sm text-gray-500\">\n                STT gratuito con Web Speech API - Costo: $0.00\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <span className={`text-lg ${getStatusColor()}`}>\n              {getStatusIcon()}\n            </span>\n            <span className={`text-sm font-medium ${getStatusColor()}`}>\n              {audioCaptureRef.current?.getStatusMessage() || 'Inicializando...'}\n            </span>\n          </div>\n        </div>\n\n        {/* Controles de captura */}\n        <div className=\"flex items-center space-x-3\">\n          {captureStatus === 'idle' ? (\n            <button\n              onClick={handleStartCapture}\n              className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center space-x-2\"\n            >\n              <span>🎙️</span>\n              <span>Iniciar Captura</span>\n            </button>\n          ) : (\n            <button\n              onClick={handleStopCapture}\n              disabled={captureStatus === 'stopping' || captureStatus === 'requesting_permission'}\n              className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n            >\n              <span>⏹️</span>\n              <span>Detener Captura</span>\n            </button>\n          )}\n\n          <select\n            value={language}\n            onChange={(e) => {\n              const newLang = e.target.value as 'es' | 'en';\n              audioCaptureRef.current?.setLanguage(newLang);\n            }}\n            disabled={captureStatus === 'recording'}\n            className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm disabled:opacity-50\"\n            aria-label=\"Seleccionar idioma de transcripción\"\n          >\n            <option value=\"es\">🇪🇸 Español</option>\n            <option value=\"en\">🇺🇸 English</option>\n          </select>\n        </div>\n\n        {/* Error message */}\n        {errorMessage && (\n          <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-red-500\">❌</span>\n              <span className=\"text-sm text-red-700\">{errorMessage}</span>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Estadísticas de sesión */}\n      {sessionStats && (\n        <div className=\"p-4 bg-gray-50 border-b border-gray-200\">\n          <h3 className=\"text-sm font-medium text-gray-700 mb-2\">📊 Estadísticas de Sesión</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 text-sm\">\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-lg text-blue-600\">{sessionStats.segmentsCount}</div>\n              <div className=\"text-gray-600\">Segmentos</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-lg text-green-600\">{sessionStats.duration}s</div>\n              <div className=\"text-gray-600\">Duración</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-lg text-purple-600\">{sessionStats.wordsTranscribed}</div>\n              <div className=\"text-gray-600\">Palabras</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-lg text-orange-600\">{Math.round(sessionStats.averageConfidence * 100)}%</div>\n              <div className=\"text-gray-600\">Confianza</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-lg text-emerald-600\">${sessionStats.cost.toFixed(2)}</div>\n              <div className=\"text-gray-600\">Costo</div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Transcripción en tiempo real */}\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-medium text-gray-900\">\n            📝 Transcripción en Tiempo Real\n          </h3>\n          <span className=\"text-sm text-gray-500\">\n            {transcriptionSegments.length} segmentos\n          </span>\n        </div>\n\n        <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n          {transcriptionSegments.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              {captureStatus === 'recording' ? (\n                <div className=\"flex items-center justify-center space-x-2\">\n                  <span className=\"animate-pulse\">🎤</span>\n                  <span>Esperando audio...</span>\n                </div>\n              ) : (\n                <span>No hay transcripción disponible</span>\n              )}\n            </div>\n          ) : (\n            transcriptionSegments.map((segment) => (\n              <div \n                key={segment.id}\n                className=\"p-3 bg-gray-50 rounded-lg border border-gray-200 hover:shadow-sm transition-shadow\"\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${getActorBadgeColor(segment.actor)}`}>\n                      {segment.actor}\n                    </span>\n                    <span className={`text-xs font-medium ${getConfidenceColor(segment.confidence)}`}>\n                      {segment.confidence}\n                    </span>\n                  </div>\n                  <span className=\"text-xs text-gray-500\">\n                    {new Date(segment.timestamp).toLocaleTimeString()}\n                  </span>\n                </div>\n                <p className=\"text-sm text-gray-800 leading-relaxed\">\n                  {segment.content}\n                </p>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RealTimeAudioCapture; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/TranscriptionArea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/branding/AiDuxCareLogo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/evidence/EvidencePanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/professional/AudioFileUpload.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":82,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 📁 Professional Audio File Upload - Carga de Archivos de Audio\n * Componente para subir archivos de audio pregrabados para el workflow clínico\n * Tarea 1.1.1 del Roadmap MVP \"Escucha Activa Clínica\"\n */\n\nimport React, { useState, useCallback, useRef } from 'react';\n\nimport Button from '../ui/button';\n\ninterface AudioFileUploadProps {\n  onFileSelect: (file: File) => void;\n  onUploadComplete?: (audioBlob: Blob, fileName: string) => void;\n  isProcessing?: boolean;\n  className?: string;\n  maxFileSizeMB?: number;\n  acceptedFormats?: string[];\n}\n\ninterface FileInfo {\n  file: File;\n  duration?: number;\n  size: string;\n  type: string;\n  validationStatus: 'valid' | 'invalid' | 'validating';\n  errorMessage?: string;\n}\n\nexport const AudioFileUpload: React.FC<AudioFileUploadProps> = ({\n  onFileSelect,\n  onUploadComplete,\n  isProcessing = false,\n  className = '',\n  maxFileSizeMB = 50, // 50MB máximo por defecto\n  acceptedFormats = ['.mp3', '.wav', '.m4a', '.ogg', '.webm']\n}) => {\n  const [selectedFile, setSelectedFile] = useState<FileInfo | null>(null);\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [audioPreviewUrl, setAudioPreviewUrl] = useState<string | null>(null);\n  \n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  /**\n   * Valida el archivo de audio seleccionado\n   */\n  const validateAudioFile = useCallback(async (file: File): Promise<FileInfo> => {\n    const fileInfo: FileInfo = {\n      file,\n      size: formatFileSize(file.size),\n      type: file.type || 'Desconocido',\n      validationStatus: 'validating'\n    };\n\n    // Validar tamaño\n    if (file.size > maxFileSizeMB * 1024 * 1024) {\n      return {\n        ...fileInfo,\n        validationStatus: 'invalid',\n        errorMessage: `El archivo excede el tamaño máximo de ${maxFileSizeMB}MB`\n      };\n    }\n\n    // Validar formato\n    const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();\n    if (!acceptedFormats.includes(fileExtension)) {\n      return {\n        ...fileInfo,\n        validationStatus: 'invalid',\n        errorMessage: `Formato no soportado. Use: ${acceptedFormats.join(', ')}`\n      };\n    }\n\n    // Validar que es un archivo de audio válido\n    try {\n      const duration = await getAudioDuration(file);\n      return {\n        ...fileInfo,\n        duration,\n        validationStatus: 'valid'\n      };\n    } catch (error) {\n      return {\n        ...fileInfo,\n        validationStatus: 'invalid',\n        errorMessage: 'No se pudo procesar el archivo de audio'\n      };\n    }\n  }, [maxFileSizeMB, acceptedFormats]);\n\n  /**\n   * Obtiene la duración del archivo de audio\n   */\n  const getAudioDuration = (file: File): Promise<number> => {\n    return new Promise((resolve, reject) => {\n      const audio = new Audio();\n      const url = URL.createObjectURL(file);\n      \n      audio.addEventListener('loadedmetadata', () => {\n        URL.revokeObjectURL(url);\n        resolve(audio.duration);\n      });\n      \n      audio.addEventListener('error', () => {\n        URL.revokeObjectURL(url);\n        reject(new Error('Error al cargar el archivo de audio'));\n      });\n      \n      audio.src = url;\n    });\n  };\n\n  /**\n   * Formatea el tamaño del archivo\n   */\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  /**\n   * Formatea la duración en formato mm:ss\n   */\n  const formatDuration = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  /**\n   * Maneja la selección de archivo\n   */\n  const handleFileSelect = useCallback(async (file: File) => {\n    const validatedFile = await validateAudioFile(file);\n    setSelectedFile(validatedFile);\n\n    if (validatedFile.validationStatus === 'valid') {\n      // Crear URL para preview\n      const previewUrl = URL.createObjectURL(file);\n      setAudioPreviewUrl(previewUrl);\n      \n      // Notificar al padre\n      onFileSelect(file);\n    } else {\n      setAudioPreviewUrl(null);\n    }\n  }, [validateAudioFile, onFileSelect]);\n\n  /**\n   * Maneja el cambio en el input de archivo\n   */\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      handleFileSelect(file);\n    }\n  }, [handleFileSelect]);\n\n  /**\n   * Maneja el drag & drop\n   */\n  const handleDragEnter = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(false);\n  }, []);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  }, []);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(false);\n\n    const files = Array.from(e.dataTransfer.files);\n    const audioFile = files.find(file => \n      file.type.startsWith('audio/') || \n      acceptedFormats.some(format => file.name.toLowerCase().endsWith(format))\n    );\n\n    if (audioFile) {\n      handleFileSelect(audioFile);\n    }\n  }, [acceptedFormats, handleFileSelect]);\n\n  /**\n   * Abre el selector de archivos\n   */\n  const openFileSelector = useCallback(() => {\n    fileInputRef.current?.click();\n  }, []);\n\n  /**\n   * Procesa el archivo seleccionado\n   */\n  const processSelectedFile = useCallback(() => {\n    if (selectedFile?.validationStatus === 'valid') {\n      const blob = new Blob([selectedFile.file], { type: selectedFile.file.type });\n      onUploadComplete?.(blob, selectedFile.file.name);\n    }\n  }, [selectedFile, onUploadComplete]);\n\n  /**\n   * Limpia la selección actual\n   */\n  const clearSelection = useCallback(() => {\n    setSelectedFile(null);\n    if (audioPreviewUrl) {\n      URL.revokeObjectURL(audioPreviewUrl);\n      setAudioPreviewUrl(null);\n    }\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  }, [audioPreviewUrl]);\n\n  return (\n    <div className={`bg-white rounded-lg shadow-sm border border-gray-200 p-6 ${className}`}>\n      \n      {/* Header */}\n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-semibold text-aidux-blue-slate mb-2\">\n          📁 Carga de Archivo de Audio\n        </h3>\n        <p className=\"text-sm text-gray-600\">\n          Sube un archivo de audio pregrabado para procesamiento con IA\n        </p>\n      </div>\n\n      {/* Área de carga */}\n      <div \n        className={`border-2 border-dashed rounded-lg p-8 text-center transition-all ${\n          isDragOver \n            ? 'border-aidux-coral bg-coral-50' \n            : selectedFile?.validationStatus === 'valid'\n            ? 'border-aidux-mint-green bg-mint-50'\n            : selectedFile?.validationStatus === 'invalid'\n            ? 'border-red-300 bg-red-50'\n            : 'border-gray-300 hover:border-aidux-coral hover:bg-gray-50'\n        }`}\n        onDragEnter={handleDragEnter}\n        onDragLeave={handleDragLeave}\n        onDragOver={handleDragOver}\n        onDrop={handleDrop}\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept={acceptedFormats.join(',')}\n          onChange={handleInputChange}\n          className=\"hidden\"\n          disabled={isProcessing}\n          aria-label=\"Seleccionar archivo de audio\"\n          title=\"Seleccionar archivo de audio para procesar\"\n        />\n\n        {!selectedFile ? (\n          <>\n            <div className=\"text-4xl mb-4\">🎵</div>\n            <div className=\"mb-4\">\n              <h4 className=\"text-lg font-medium text-gray-900 mb-2\">\n                Arrastra tu archivo de audio aquí\n              </h4>\n              <p className=\"text-sm text-gray-600 mb-4\">\n                o haz clic para seleccionar un archivo\n              </p>\n            </div>\n            \n            <Button\n              onClick={openFileSelector}\n              disabled={isProcessing}\n              className=\"mb-4\"\n              variant=\"outline\"\n            >\n              📂 Seleccionar Archivo\n            </Button>\n            \n            <div className=\"text-xs text-gray-500 space-y-1\">\n              <div>Formatos soportados: {acceptedFormats.join(', ')}</div>\n              <div>Tamaño máximo: {maxFileSizeMB}MB</div>\n            </div>\n          </>\n        ) : (\n          <div className=\"text-left\">\n            {/* Información del archivo */}\n            <div className=\"flex items-start justify-between mb-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"text-2xl\">\n                  {selectedFile.validationStatus === 'valid' ? '✅' : \n                   selectedFile.validationStatus === 'invalid' ? '❌' : '⏳'}\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-gray-900 truncate max-w-xs\">\n                    {selectedFile.file.name}\n                  </h4>\n                  <div className=\"text-sm text-gray-600 space-x-4\">\n                    <span>{selectedFile.size}</span>\n                    <span>{selectedFile.type}</span>\n                    {selectedFile.duration && (\n                      <span>{formatDuration(selectedFile.duration)}</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              <Button\n                onClick={clearSelection}\n                variant=\"outline\"\n                className=\"text-xs\"\n                disabled={isProcessing}\n              >\n                ✕\n              </Button>\n            </div>\n\n            {/* Estado de validación */}\n            {selectedFile.validationStatus === 'invalid' && selectedFile.errorMessage && (\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-3 mb-4\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-red-500\">❌</span>\n                  <span className=\"text-sm text-red-700\">{selectedFile.errorMessage}</span>\n                </div>\n              </div>\n            )}\n\n            {selectedFile.validationStatus === 'valid' && (\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-3 mb-4\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-green-500\">✅</span>\n                  <span className=\"text-sm text-green-700\">Archivo válido - Listo para procesar</span>\n                </div>\n              </div>\n            )}\n\n                         {/* Preview del audio */}\n             {audioPreviewUrl && selectedFile.validationStatus === 'valid' && (\n               <div className=\"bg-gray-50 rounded-lg p-3 mb-4\">\n                 <div className=\"block text-xs font-medium text-gray-700 mb-2\">\n                   Vista previa:\n                 </div>\n                 <audio\n                   ref={audioRef}\n                   controls\n                   src={audioPreviewUrl}\n                   className=\"w-full\"\n                   preload=\"metadata\"\n                   aria-label={`Vista previa del archivo de audio: ${selectedFile.file.name}`}\n                 >\n                   <track kind=\"captions\" srcLang=\"es\" label=\"Sin subtítulos disponibles\" />\n                   Tu navegador no soporta el elemento de audio.\n                 </audio>\n               </div>\n             )}\n\n            {/* Botón de procesamiento */}\n            {selectedFile.validationStatus === 'valid' && onUploadComplete && (\n              <div className=\"flex justify-center\">\n                <Button\n                  onClick={processSelectedFile}\n                  disabled={isProcessing}\n                  className=\"flex items-center gap-2\"\n                >\n                  {isProcessing ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                      Procesando...\n                    </>\n                  ) : (\n                    <>\n                      🚀 Procesar Audio\n                    </>\n                  )}\n                </Button>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Información técnica */}\n      <div className=\"mt-4 flex justify-center text-xs text-gray-500\">\n        <span>🔒 Los archivos se procesan localmente con total privacidad</span>\n      </div>\n    </div>\n  );\n};\n\nexport default AudioFileUpload; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/professional/EnhancedAudioCapture.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":28,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsSupported' is assigned a value but never used.","line":82,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setPermissionStatus' is assigned a value but never used.","line":83,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":47},{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":90,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":90,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'detectSpeaker' is assigned a value but never used.","line":100,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":22}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare function requestMicrophonePermission(): Promise<MediaStream>;\ntype SpeechCtor = new () => ISpeechRecognition;\n\ninterface ISpeechRecognition {\n  lang: string;\n  interimResults: boolean;\n  continuous?: boolean;\n  onresult: (e: SpeechRecognitionEvent) => void;\n  onerror: (e: SpeechRecognitionErrorEvent) => void;\n  start(): void;\n  stop(): void;\n  abort(): void;\n}\n\nexport function initializeRecognition(): ISpeechRecognition {\n  const w = window as Window & {\n    webkitSpeechRecognition?: SpeechCtor;\n    SpeechRecognition?: SpeechCtor;\n  };\n  const Ctor = w.SpeechRecognition ?? w.webkitSpeechRecognition;\n  if (!Ctor) {\n    throw new Error('Speech recognition not supported');\n  }\n  const rec = new Ctor();\n  rec.interimResults = true;\n  return rec;\n}\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\n\n// Tipos para Web Speech API\ninterface SpeechRecognitionEvent extends Event {\n  resultIndex: number;\n  results: SpeechRecognitionResultList;\n}\n\ninterface SpeechRecognitionResultList {\n  readonly length: number;\n  item(index: number): SpeechRecognitionResult;\n  [index: number]: SpeechRecognitionResult;\n}\n\ninterface SpeechRecognitionResult {\n  readonly length: number;\n  item(index: number): SpeechRecognitionAlternative;\n  [index: number]: SpeechRecognitionAlternative;\n  isFinal: boolean;\n}\n\ninterface SpeechRecognitionAlternative {\n  transcript: string;\n  confidence: number;\n}\n\ninterface SpeechRecognitionErrorEvent extends Event {\n  error: string;\n  message: string;\n}\n\ninterface AudioSegment {\n  id: string;\n  content: string;\n  confidence: number;\n  isFinal: boolean;\n  timestamp: Date;\n  speaker?: 'patient' | 'professional';\n}\n\ninterface EnhancedAudioCaptureProps {\n  onTranscriptionComplete: (segments: AudioSegment[]) => void;\n  onTranscriptionUpdate?: (segments: AudioSegment[]) => void;\n  language?: 'es' | 'en';\n  className?: string;\n}\n\nexport const EnhancedAudioCapture: React.FC<EnhancedAudioCaptureProps> = ({\n  onTranscriptionComplete,\n  onTranscriptionUpdate,\n  language = 'es',\n  className = ''\n}) => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [isSupported, setIsSupported] = useState(true);\n  const [permissionStatus, setPermissionStatus] = useState<'granted' | 'denied' | 'pending'>('pending');\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [segments, setSegments] = useState<AudioSegment[]>([]);\n  const [error, setError] = useState<string>('');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const recognitionRef = useRef<unknown>(null);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const mediaStreamRef = useRef<MediaStream | null>(null);\n\n  // Verificar soporte del navegador\n  useEffect(() => {\n  if (!isSupported) return;\n  // TODO: put your recognition setup & cleanup here\n}, [isSupported, language, onTranscriptionUpdate]);\n\n  // Detectar hablante basado en contenido\n  const detectSpeaker = (text: string): 'patient' | 'professional' => {\n    const patientPatterns = [\n      /me duele/i, /siento/i, /tengo/i, /padezco/i, /sufro/i,\n      /no puedo/i, /me molesta/i, /me preocupa/i, /me siento/i\n    ];\n    \n    const professionalPatterns = [\n      /observo/i, /evalúo/i, /diagnóstico/i, /tratamiento/i,\n      /recomiendo/i, /prescribo/i, /examino/i, /analizo/i\n    ];\n\n    const patientMatches = patientPatterns.filter(pattern => pattern.test(text)).length;\n    const professionalMatches = professionalPatterns.filter(pattern => pattern.test(text)).length;\n\n    return patientMatches > professionalMatches ? 'patient' : 'professional';\n  };\n\n  // Iniciar grabación\n  const startRecording = async () => {\n    if (isRecording) return;\n\n    try {\n      setError('');\n      setSegments([]);\n      setRecordingTime(0);\n\n      // Solicitar permisos\n      const stream = await requestMicrophonePermission();\n      if (!stream) return;\n\n      // Inicializar reconocimiento\n      const recognition = initializeRecognition();\n      if (!recognition) {\n        setError('No se pudo inicializar el reconocimiento de voz');\n        return;\n      }\n\n      recognitionRef.current = recognition;\n\n      // Iniciar reconocimiento\n      recognition.start();\n\n      // Iniciar timer\n      timerRef.current = setInterval(() => {\n        setRecordingTime(prev => prev + 1);\n      }, 1000);\n\n    } catch (error) {\n      console.error('Error al iniciar grabación:', error);\n      setError('Error al iniciar la grabación');\n    }\n  };\n\n  // Detener grabación\n  const stopRecording = () => {\n    if (!isRecording) return;\n\n    try {\n      if (recognitionRef.current) {\n        (recognitionRef.current as { stop(): void }).stop();\n      }\n\n      if (mediaStreamRef.current) {\n        mediaStreamRef.current.getTracks().forEach(track => track.stop());\n        mediaStreamRef.current = null;\n      }\n\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n\n      setIsRecording(false);\n      setIsProcessing(true);\n\n      // Simular procesamiento final\n      setTimeout(() => {\n        const finalSegments = segments.filter(s => s.isFinal);\n        onTranscriptionComplete(finalSegments);\n        setIsProcessing(false);\n      }, 1000);\n\n    } catch (error) {\n      console.error('Error al detener grabación:', error);\n      setError('Error al detener la grabación');\n    }\n  };\n\n  // Formatear tiempo\n  const formatTime = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Limpiar transcripción\n  const clearTranscription = () => {\n    setSegments([]);\n    setError('');\n  };\n\n  if (!isSupported) {\n    return (\n      <div className={`bg-white border rounded-lg p-6 text-center ${className}`} style={{ borderColor: '#BDC3C7' }}>\n        <svg className=\"w-12 h-12 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" style={{ color: '#E74C3C' }}>\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"/>\n        </svg>\n        <h3 className=\"font-medium text-sm mb-2\" style={{ color: '#2C3E50' }}>\n          Navegador no compatible\n        </h3>\n          <p className=\"text-xs\" style={{ color: '#BDC3C7' }}>\n            Este navegador no soporta reconocimiento de voz.\n          </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`bg-white border rounded-lg shadow-sm ${className}`} style={{ borderColor: '#BDC3C7' }}>\n      {/* Header */}\n      <div className=\"p-4 border-b\" style={{ borderColor: '#BDC3C7' }}>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className={`w-3 h-3 rounded-full ${isRecording ? 'bg-red-500 animate-pulse' : 'bg-gray-300'}`}></div>\n            <h3 className=\"font-medium text-sm\" style={{ color: '#2C3E50' }}>\n              Captura de Audio\n            </h3>\n          </div>\n          <div className=\"text-sm font-mono\" style={{ color: '#BDC3C7' }}>\n            {formatTime(recordingTime)}\n          </div>\n        </div>\n      </div>\n\n      {/* Status */}\n      <div className=\"p-4 border-b\" style={{ borderColor: '#BDC3C7' }}>\n        {permissionStatus === 'pending' && (\n          <div className=\"text-center\">\n            <p className=\"text-sm mb-3\" style={{ color: '#2C3E50' }}>\n              Se requiere acceso al micrófono\n            </p>\n            <button\n              onClick={requestMicrophonePermission}\n              className=\"px-4 py-2 bg-blue-500 text-white rounded-lg text-sm hover:bg-blue-600 transition-colors\"\n            >\n              Permitir Micrófono\n            </button>\n          </div>\n        )}\n\n        {permissionStatus === 'denied' && (\n          <div className=\"text-center\">\n            <p className=\"text-sm mb-3\" style={{ color: '#E74C3C' }}>\n              Acceso al micrófono denegado\n            </p>\n            <p className=\"text-xs\" style={{ color: '#BDC3C7' }}>\n              Por favor, habilita el micrófono en la configuración del navegador\n            </p>\n          </div>\n        )}\n\n        {error && (\n          <div className=\"text-center\">\n            <p className=\"text-sm\" style={{ color: '#E74C3C' }}>\n              {error}\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Controls */}\n      <div className=\"p-4 border-b\" style={{ borderColor: '#BDC3C7' }}>\n        <div className=\"flex space-x-3\">\n          {!isRecording ? (\n            <button\n              onClick={startRecording}\n              disabled={permissionStatus !== 'granted'}\n              className=\"flex-1 px-4 py-3 bg-green-500 text-white rounded-lg font-medium hover:bg-green-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              <div className=\"flex items-center justify-center space-x-2\">\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"/>\n                </svg>\n                <span>Iniciar Grabación</span>\n              </div>\n            </button>\n          ) : (\n            <button\n              onClick={stopRecording}\n              className=\"flex-1 px-4 py-3 bg-red-500 text-white rounded-lg font-medium hover:bg-red-600 transition-colors\"\n            >\n              <div className=\"flex items-center justify-center space-x-2\">\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4z\"/>\n                </svg>\n                <span>Detener Grabación</span>\n              </div>\n            </button>\n          )}\n\n          {segments.length > 0 && (\n            <button\n              onClick={clearTranscription}\n              className=\"px-4 py-3 border rounded-lg text-sm hover:bg-gray-50 transition-colors\"\n              style={{ borderColor: '#BDC3C7', color: '#2C3E50' }}\n            >\n              Limpiar\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Transcription */}\n      <div className=\"p-4\">\n        <h4 className=\"font-medium text-sm mb-3\" style={{ color: '#2C3E50' }}>\n          Transcripción en Tiempo Real\n        </h4>\n        \n        {segments.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <svg className=\"w-12 h-12 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" style={{ color: '#BDC3C7' }}>\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"/>\n            </svg>\n            <p className=\"text-sm\" style={{ color: '#BDC3C7' }}>\n              {isRecording ? 'Habla ahora...' : 'Inicia la grabación para comenzar'}\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n            {segments.map((segment) => (\n              <div\n                key={segment.id}\n                className={`p-3 rounded-lg border ${\n                  segment.isFinal ? 'bg-white' : 'bg-yellow-50'\n                }`}\n                style={{ borderColor: segment.isFinal ? '#BDC3C7' : '#F59E0B' }}\n              >\n                <div className=\"flex items-start justify-between mb-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`w-2 h-2 rounded-full ${\n                      segment.speaker === 'patient' ? 'bg-blue-400' : 'bg-green-400'\n                    }`}></div>\n                    <span className=\"text-xs font-medium\" style={{ color: '#BDC3C7' }}>\n                      {segment.speaker === 'patient' ? 'Paciente' : 'Profesional'}\n                    </span>\n                    {!segment.isFinal && (\n                      <span className=\"text-xs px-2 py-1 rounded-full bg-yellow-100 text-yellow-800\">\n                        En progreso\n                      </span>\n                    )}\n                  </div>\n                  <span className=\"text-xs\" style={{ color: '#BDC3C7' }}>\n                    {segment.timestamp.toLocaleTimeString()}\n                  </span>\n                </div>\n                <p className=\"text-sm\" style={{ color: '#2C3E50' }}>\n                  {segment.content}\n                </p>\n                {segment.isFinal && (\n                  <div className=\"mt-2 text-xs\" style={{ color: '#BDC3C7' }}>\n                    Confianza: {Math.round(segment.confidence * 100)}%\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n\n        {isProcessing && (\n          <div className=\"mt-4 text-center\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <div className=\"w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\n              <span className=\"text-sm\" style={{ color: '#2C3E50' }}>\n                Procesando transcripción...\n              </span>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n}\nexport default EnhancedAudioCapture; \n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/professional/ProfessionalAudioCapture.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":27,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🎤 Professional Audio Capture - Captura de Audio Real\n * Componente para capturar audio en tiempo real para el workflow clínico\n */\n\nimport React, { useState, useCallback, useRef } from 'react';\n\nimport Button from '../ui/button';\n\ninterface ProfessionalAudioCaptureProps {\n  onRecordingComplete: (audioBlob: Blob) => void;\n  isProcessing?: boolean;\n  className?: string;\n}\n\nexport const ProfessionalAudioCapture: React.FC<ProfessionalAudioCaptureProps> = ({\n  onRecordingComplete,\n  isProcessing = false,\n  className = ''\n}) => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [audioPermission, setAudioPermission] = useState<'granted' | 'denied' | 'pending'>('pending');\n  \n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioChunksRef = useRef<Blob[]>([]);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n  /**\n   * Solicita permisos de micrófono\n   */\n  const requestMicrophonePermission = useCallback(async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      setAudioPermission('granted');\n      return stream;\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      setAudioPermission('denied');\n      return null;\n    }\n  }, []);\n\n  /**\n   * Inicia la grabación\n   */\n  const startRecording = useCallback(async () => {\n    const stream = await requestMicrophonePermission();\n    if (!stream) return;\n\n    audioChunksRef.current = [];\n    setRecordingTime(0);\n\n    const mediaRecorder = new MediaRecorder(stream);\n    mediaRecorderRef.current = mediaRecorder;\n\n    mediaRecorder.ondataavailable = (event) => {\n      if (event.data.size > 0) {\n        audioChunksRef.current.push(event.data);\n      }\n    };\n\n    mediaRecorder.onstop = () => {\n      const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });\n      onRecordingComplete(audioBlob);\n      \n      // Detener todas las pistas de audio\n      stream.getTracks().forEach(track => track.stop());\n    };\n\n    mediaRecorder.start(100); // Grabar en chunks de 100ms\n    setIsRecording(true);\n\n    // Iniciar timer\n    timerRef.current = setInterval(() => {\n      setRecordingTime(prev => prev + 1);\n    }, 1000);\n  }, [onRecordingComplete, requestMicrophonePermission]);\n\n  /**\n   * Detiene la grabación\n   */\n  const stopRecording = useCallback(() => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      \n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n    }\n  }, [isRecording]);\n\n  /**\n   * Formatea el tiempo de grabación\n   */\n  const formatTime = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  /**\n   * Simula una grabación para testing (fallback si no hay micrófono)\n   */\n  const simulateRecording = useCallback(() => {\n    setIsRecording(true);\n    setRecordingTime(0);\n    \n    // Simular grabación de 3 segundos\n    const timer = setInterval(() => {\n      setRecordingTime(prev => {\n        if (prev >= 3) {\n          clearInterval(timer);\n          setIsRecording(false);\n          \n          // Crear blob simulado\n          const simulatedBlob = new Blob(['simulated audio'], { type: 'audio/wav' });\n          onRecordingComplete(simulatedBlob);\n          \n          return 0;\n        }\n        return prev + 1;\n      });\n    }, 1000);\n  }, [onRecordingComplete]);\n\n  return (\n    <div className={`bg-white rounded-lg shadow-sm border border-gray-200 p-6 ${className}`}>\n      <div className=\"flex flex-col items-center\">\n        \n        {/* Estado del Micrófono */}\n        <div className=\"mb-4\">\n          {audioPermission === 'pending' && (\n            <div className=\"text-center\">\n              <div className=\"text-yellow-600 mb-2\">🎤 Acceso al micrófono requerido</div>\n              <Button\n                onClick={requestMicrophonePermission}\n                variant=\"outline\"\n                className=\"text-sm\"\n              >\n                Permitir Micrófono\n              </Button>\n            </div>\n          )}\n          \n          {audioPermission === 'denied' && (\n            <div className=\"text-center\">\n              <div className=\"text-red-600 mb-2\">❌ Micrófono no disponible</div>\n              <Button\n                onClick={simulateRecording}\n                variant=\"secondary\"\n                className=\"text-sm\"\n                disabled={isRecording || isProcessing}\n              >\n                🎬 Usar Demo Simulado\n              </Button>\n            </div>\n          )}\n          \n          {audioPermission === 'granted' && (\n            <div className=\"text-center\">\n              <div className=\"text-green-600 mb-2\">✅ Micrófono listo</div>\n            </div>\n          )}\n        </div>\n\n        {/* Control de Grabación Principal */}\n        <div className=\"flex flex-col items-center mb-4\">\n          {!isRecording ? (\n            <Button\n              onClick={audioPermission === 'granted' ? startRecording : simulateRecording}\n              disabled={isProcessing}\n              className={`w-32 h-32 rounded-full text-white text-xl font-bold shadow-lg transition-all ${\n                isProcessing \n                  ? 'bg-gray-400 cursor-not-allowed' \n                  : 'bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 transform hover:scale-105'\n              }`}\n            >\n              {isProcessing ? (\n                <div className=\"flex flex-col items-center\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white mb-2\"></div>\n                  <span className=\"text-sm\">Procesando...</span>\n                </div>\n              ) : (\n                <>\n                  🎙️\n                  <br />\n                  <span className=\"text-sm\">Iniciar</span>\n                </>\n              )}\n            </Button>\n          ) : (\n            <div className=\"flex flex-col items-center\">\n              <Button\n                onClick={stopRecording}\n                className=\"w-32 h-32 rounded-full bg-gradient-to-r from-red-600 to-red-700 text-white text-xl font-bold shadow-lg animate-pulse\"\n              >\n                ⏹️\n                <br />\n                <span className=\"text-sm\">Detener</span>\n              </Button>\n              \n              <div className=\"mt-4 text-center\">\n                <div className=\"text-2xl font-bold text-red-600 mb-1\">\n                  {formatTime(recordingTime)}\n                </div>\n                <div className=\"text-sm text-gray-600\">Grabando sesión clínica...</div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Estado de Procesamiento */}\n        {isProcessing && (\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 w-full\">\n            <div className=\"flex items-center justify-center gap-3\">\n              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\n              <div className=\"text-blue-800\">\n                <div className=\"font-medium\">Procesando Audio...</div>\n                <div className=\"text-sm text-blue-600\">\n                  STT → NLP → Entidades → SOAP → Agentes\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Instrucciones */}\n        <div className=\"mt-4 bg-gray-50 rounded-lg p-4 w-full\">\n          <h4 className=\"text-sm font-medium text-gray-900 mb-2\">💡 Instrucciones de Uso</h4>\n          <ul className=\"text-xs text-gray-600 space-y-1\">\n            <li>• Hable claramente y a volumen normal</li>\n            <li>• Identifique si habla el profesional o paciente</li>\n            <li>• Evite ruidos de fondo excesivos</li>\n            <li>• La transcripción aparecerá automáticamente</li>\n          </ul>\n        </div>\n\n        {/* Información Técnica */}\n        <div className=\"mt-4 flex justify-center w-full text-xs text-gray-500\">\n          <span>🔒 Audio procesado localmente con total privacidad</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfessionalAudioCapture; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/professional/ProfessionalRoleSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/professional/VirtualAssistant.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/testing/PromptTestingWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/wizard/CountryCodeSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/wizard/EmailRecoveryModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/wizard/GeolocationPermission.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":13,"column":37,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":42},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[726,790],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[815,896],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'requestGeolocationPermission'. Either include it or remove the dependency array.","line":29,"column":6,"nodeType":"ArrayExpression","endLine":29,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, requestGeolocationPermission]","fix":{"range":[946,954],"text":"[isOpen, requestGeolocationPermission]"}}]},{"ruleId":"no-undef","severity":2,"message":"'PermissionName' is not defined.","line":47,"column":36,"nodeType":"Identifier","messageId":"undef","endLine":47,"endColumn":50},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1920,1986],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[{"ruleId":"react/prop-types","severity":2,"message":"'isOpen' is missing in props validation","line":14,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":14,"endColumn":9,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react/prop-types","severity":2,"message":"'onClose' is missing in props validation","line":15,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":15,"endColumn":10,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react/prop-types","severity":2,"message":"'onLocationDetected' is missing in props validation","line":16,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":16,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react/prop-types","severity":2,"message":"'onManualSelection' is missing in props validation","line":17,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":17,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable react/prop-types */\nimport { useState, useEffect } from 'react';\n\nimport { GeolocationData } from '../../services/geolocationService';\n\ninterface GeolocationPermissionProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onLocationDetected: (location: GeolocationData) => void;\n  onManualSelection: () => void;\n}\n\nexport const GeolocationPermission: React.FC<GeolocationPermissionProps> = ({\n  isOpen,\n  onClose,\n  onLocationDetected,\n  onManualSelection\n}) => {\n  const [permissionStatus, setPermissionStatus] = useState<'requesting' | 'granted' | 'denied' | 'error'>('requesting');\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  // Debug: Log cuando cambie isOpen\n  useEffect(() => {\n    console.log('GeolocationPermission - isOpen cambió a:', isOpen);\n    if (isOpen) {\n      console.log('GeolocationPermission - Activando geolocalización automáticamente');\n      requestGeolocationPermission();\n    }\n  }, [isOpen]);\n\n  const requestGeolocationPermission = async () => {\n    try {\n      setPermissionStatus('requesting');\n      setErrorMessage('');\n\n      // Verificar si el navegador soporta geolocalización\n      if (!navigator.geolocation) {\n        setPermissionStatus('error');\n        setErrorMessage('Tu navegador no soporta geolocalización');\n        return;\n      }\n\n      // Verificar permisos usando la API de Permisos si está disponible\n      if ('permissions' in navigator) {\n        try {\n          const permission = await (navigator as Navigator & { permissions?: Permissions }).permissions?.query({ \n            name: 'geolocation' as PermissionName \n          });\n          \n          if (permission?.state === 'denied') {\n            setPermissionStatus('denied');\n            setErrorMessage('Permiso de geolocalización denegado. Por favor, habilítalo en la configuración de tu navegador.');\n            return;\n          }\n        } catch (error) {\n          console.log('No se pudo verificar el estado de permisos:', error);\n        }\n      }\n\n      // Solicitar ubicación\n      navigator.geolocation.getCurrentPosition(\n        async () => {\n          try {\n            // Usar el servicio de geolocalización para obtener datos completos\n            const geolocationService = (await import('../../services/geolocationService')).geolocationService;\n            const locationData = await geolocationService.detectLocation();\n            \n            if (locationData) {\n              setPermissionStatus('granted');\n              onLocationDetected(locationData);\n              onClose();\n            } else {\n              setPermissionStatus('error');\n              setErrorMessage('No se pudo obtener la información de ubicación completa');\n            }\n          } catch (error) {\n            console.error('Error al obtener datos de ubicación:', error);\n            setPermissionStatus('error');\n            setErrorMessage('Error al procesar la información de ubicación');\n          }\n        },\n        (error) => {\n          console.error('Error de geolocalización:', error);\n          \n          switch (error.code) {\n            case error.PERMISSION_DENIED:\n              setPermissionStatus('denied');\n              setErrorMessage('Permiso de geolocalización denegado. Por favor, habilítalo en la configuración de tu navegador.');\n              break;\n            case error.POSITION_UNAVAILABLE:\n              setPermissionStatus('error');\n              setErrorMessage('La información de ubicación no está disponible en este momento.');\n              break;\n            case error.TIMEOUT:\n              setPermissionStatus('error');\n              setErrorMessage('Se agotó el tiempo de espera para obtener la ubicación.');\n              break;\n            default:\n              setPermissionStatus('error');\n              setErrorMessage('Error desconocido al obtener la ubicación.');\n          }\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 60000\n        }\n      );\n    } catch (error) {\n      console.error('Error al solicitar permisos:', error);\n      setPermissionStatus('error');\n      setErrorMessage('Error al solicitar permisos de geolocalización');\n    }\n  };\n\n  const handleManualSelection = () => {\n    onManualSelection();\n    onClose();\n  };\n\n  const handleRetry = () => {\n    requestGeolocationPermission();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n        <h2 className=\"text-xl font-semibold mb-4\">Permiso de Ubicación</h2>\n        \n        {permissionStatus === 'requesting' && (\n          <div className=\"text-center py-8\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">Solicitando permiso de ubicación...</p>\n          </div>\n        )}\n\n        {permissionStatus === 'granted' && (\n          <div className=\"text-center py-8\">\n            <div className=\"text-green-600 text-6xl mb-4\">✓</div>\n            <p className=\"text-gray-600\">¡Ubicación detectada exitosamente!</p>\n          </div>\n        )}\n\n        {permissionStatus === 'denied' && (\n          <div className=\"py-4\">\n            <div className=\"text-red-600 text-6xl mb-4 text-center\">⚠</div>\n            <p className=\"text-gray-700 mb-4\">{errorMessage}</p>\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-3 mb-4\">\n              <p className=\"text-sm text-yellow-800\">\n                <strong>Para habilitar la geolocalización:</strong>\n                <br />1. Haz clic en el candado en la barra de direcciones\n                <br />2. Cambia &quot;Ubicación&quot; a &quot;Permitir&quot;\n                <br />3. Recarga la página\n              </p>\n            </div>\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={handleRetry}\n                className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n              >\n                Reintentar\n              </button>\n              <button\n                onClick={handleManualSelection}\n                className=\"flex-1 px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700\"\n              >\n                Selección Manual\n              </button>\n            </div>\n          </div>\n        )}\n\n        {permissionStatus === 'error' && (\n          <div className=\"py-4\">\n            <div className=\"text-red-600 text-6xl mb-4 text-center\">❌</div>\n            <p className=\"text-gray-700 mb-4\">{errorMessage}</p>\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={handleRetry}\n                className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n              >\n                Reintentar\n              </button>\n              <button\n                onClick={handleManualSelection}\n                className=\"flex-1 px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700\"\n              >\n                Selección Manual\n              </button>\n            </div>\n          </div>\n        )}\n\n        <div className=\"mt-6 text-center\">\n          <button\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700 underline\"\n          >\n            Cerrar\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/wizard/GeolocationPermissionModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/wizard/LegalComplianceModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/wizard/LocationAwarenessModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isSelectedCountryData' is assigned a value but never used.","line":3,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":3,"column":132,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":135,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[172,175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[172,175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":37,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":37,"endColumn":15}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\n\nconst isSelectedCountryData = (x: unknown): x is SelectedCountryData => typeof x === 'object' && x !== null && 'location' in (x as any);\n\nexport type CountryMeta = {\n  code: string;         // ISO-2 o equivalente\n  name: string;         // nombre legible\n  gdpr?: boolean;\n  hipaa?: boolean;\n  dataRetention?: number; // días\n};\n\nexport type SelectedCountryData = {\n  location: { city?: string; region?: string; country?: string };\n  explanation?: string;\n};\n\ntype Props = {\n  isOpen: boolean;\n  onClose: () => void;\n  onLocationSelected: (countryCode: string) => void;\n  onUseCurrentLocation: () => void;\n};\n\nconst COUNTRIES: CountryMeta[] = [\n  { code: 'es', name: 'España', gdpr: true, dataRetention: 365 },\n  { code: 'us', name: 'Estados Unidos', hipaa: true, dataRetention: 180 },\n  { code: 'uk', name: 'Reino Unido', gdpr: true, dataRetention: 365 },\n  { code: 'cl', name: 'Chile', dataRetention: 180 },\n];\n\nexport default function LocationAwarenessModal({\n  isOpen,\n  onClose,\n  onLocationSelected,\n  onUseCurrentLocation,\n}: Props): JSX.Element | null {\n  const selectedCountryData: SelectedCountryData | null = null;\n\n  const complianceNote = useMemo(() => {\n    return 'Las normativas y retención de datos varían por país.';\n  }, []);\n\n  if (!isOpen) return null;\n\n  return (\n    <div role=\"dialog\" aria-modal=\"true\" className=\"fixed inset-0 bg-black/40 flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-lg shadow-lg w-full max-w-lg\">\n        <div className=\"p-4 border-b\">\n          <h2 className=\"text-lg font-semibold\">Selecciona tu país</h2>\n        </div>\n\n        <div className=\"p-4 space-y-3\">\n          {COUNTRIES.map((country) => (\n            <button\n              key={country.code}\n              type=\"button\"\n              onClick={() => onLocationSelected(country.code)}\n              className=\"w-full text-left border rounded-md p-3 hover:bg-gray-50\"\n            >\n              <div className=\"font-medium text-gray-900\">{country.name}</div>\n              <div className=\"text-xs text-gray-600\">\n                {country.gdpr && 'GDPR'} {country.hipaa && 'HIPAA'}\n                {typeof country.dataRetention === 'number' && (\n                  <span className=\"ml-2\">· Retención: {country.dataRetention} días</span>\n                )}\n              </div>\n            </button>\n          ))}\n\n          <div className=\"text-xs text-gray-500\">{complianceNote}</div>\n\n          {selectedCountryData && (\n            <div className=\"mt-2 text-sm text-gray-700\">\n              Datos fiduciarios para {(selectedCountryData as SelectedCountryData | undefined)?.location?.country}\n              <div className=\"text-xs text-gray-500\">\n                {(selectedCountryData as SelectedCountryData | undefined)?.location?.city}, {(selectedCountryData as SelectedCountryData | undefined)?.location?.region}\n              </div>\n              <div className=\"mt-1\">{(selectedCountryData as SelectedCountryData | undefined)?.explanation}</div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"p-4 border-t flex gap-2 justify-end\">\n          <button type=\"button\" onClick={onUseCurrentLocation} className=\"px-3 py-2 rounded-md border\">\n            Usar mi ubicación actual\n          </button>\n          <button type=\"button\" onClick={onClose} className=\"px-3 py-2 rounded-md bg-gray-900 text-white\">\n            Cerrar\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/wizard/LocationDataStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/wizard/PersonalDataStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/wizard/PhoneInput.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":13,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":21,"column":45,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":50},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":26,"column":47,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":52}],"suppressedMessages":[{"ruleId":"react/prop-types","severity":2,"message":"'value' is missing in props validation","line":14,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":14,"endColumn":8,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react/prop-types","severity":2,"message":"'countryCode' is missing in props validation","line":15,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":15,"endColumn":14,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react/prop-types","severity":2,"message":"'onChange' is missing in props validation","line":16,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":16,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react/prop-types","severity":2,"message":"'onCountryChange' is missing in props validation","line":17,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":17,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react/prop-types","severity":2,"message":"'error' is missing in props validation","line":18,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":18,"endColumn":8,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react/prop-types","severity":2,"message":"'disabled' is missing in props validation","line":19,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":19,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable react/prop-types */\nimport { useCallback } from 'react';\n\ninterface PhoneInputProps {\n  value: string;\n  countryCode: string;\n  onChange: (phone: string) => void;\n  onCountryChange: (code: string) => void;\n  error?: string;\n  disabled?: boolean;\n}\n\nexport const PhoneInput: React.FC<PhoneInputProps> = ({\n  value,\n  countryCode,\n  onChange,\n  onCountryChange,\n  error,\n  disabled = false\n}) => {\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const phone = e.target.value.replace(/\\D/g, ''); // Solo números\n    onChange(phone);\n  }, [onChange]);\n\n  const handleCountryChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\n    onCountryChange(e.target.value);\n  }, [onCountryChange]);\n\n  return (\n    <div className=\"space-y-2\">\n      <label htmlFor=\"phone-input\" className=\"block text-sm font-medium text-gray-700\">\n        Teléfono *\n      </label>\n      \n      <div className=\"flex gap-3\">\n        {/* Código de país - proporción más equilibrada */}\n        <select\n          id=\"country-code-select\"\n          value={countryCode}\n          onChange={handleCountryChange}\n          disabled={disabled}\n          className=\"w-20 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed text-sm text-center font-medium\"\n        >\n          <option value=\"+34\">+34</option>\n          <option value=\"+1\">+1</option>\n          <option value=\"+44\">+44</option>\n          <option value=\"+33\">+33</option>\n          <option value=\"+49\">+49</option>\n          <option value=\"+39\">+39</option>\n          <option value=\"+31\">+31</option>\n          <option value=\"+32\">+32</option>\n          <option value=\"+351\">+351</option>\n          <option value=\"+34\">+34</option>\n        </select>\n        \n        {/* Campo del número - proporción más equilibrada */}\n        <input\n          id=\"phone-input\"\n          type=\"tel\"\n          value={value || ''}\n          onChange={handlePhoneChange}\n          disabled={disabled}\n          className=\"w-40 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed text-sm\"\n          placeholder=\"XXX XXX XXX\"\n        />\n      </div>\n      \n      {error && (\n        <p className=\"text-sm text-red-600\">{error}</p>\n      )}\n      \n      <p className=\"text-xs text-gray-500\">\n        Solo números, sin espacios ni caracteres especiales\n      </p>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/wizard/ProfessionalDataStep.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1231,1305],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * ProfessionalDataStep - Paso 2 del Wizard de Registro\n * Datos Profesionales (6 campos obligatorios del .md)\n * Incluye Universidad/Institución como especifica el .md\n * \n * @version 1.0.0\n * @author AiDuxCare Development Team\n */\n\nimport React, { useState, useEffect } from 'react';\n\nimport { ProfessionalData, professionalTitles } from '../../types/wizard';\nimport { useProfessionalProfile, ProfessionalProfile } from '../../context/ProfessionalProfileContext';\n\ninterface ProfessionalDataStepProps {\n  data: ProfessionalData;\n  errors: Record<string, string>;\n  onFieldChange: (field: string, value: string) => void;\n}\n\nexport const ProfessionalDataStep: React.FC<ProfessionalDataStepProps> = ({\n  data,\n  errors,\n  onFieldChange\n}) => {\n  const { updateWizardData } = useProfessionalProfile();\n  const [showOtherUniversity, setShowOtherUniversity] = useState(false);\n  const [showOtherSpecialty, setShowOtherSpecialty] = useState(false);\n\n  // Mapear campos del wizard a campos del contexto\n  const handleFieldChangeWithContext = (field: string, value: string) => {\n    // Solo logear cambios importantes, no cada letra\n    if (field === 'professionalTitle' || field === 'specialty' || field === 'licenseNumber') {\n      console.log(`ProfessionalDataStep - Campo cambiado: ${field} = ${value}`);\n    }\n    \n    // Mapear campos del wizard a campos del contexto\n    const fieldMapping: Record<string, keyof ProfessionalProfile> = {\n      professionalTitle: 'professionalTitle',\n      specialty: 'specialty',\n      university: 'university',\n      licenseNumber: 'licenseNumber',\n      workplace: 'workplace',\n      experienceYears: 'experienceYears'\n    };\n\n    const contextField = fieldMapping[field];\n    if (contextField) {\n      updateWizardData(contextField, value);\n    }\n    \n    // También llamar al callback original para mantener compatibilidad\n    onFieldChange(field, value);\n  };\n\n  // Universidades predefinidas\n  const universities = [\n    { value: 'universidad-complutense-madrid', label: 'Universidad Complutense de Madrid' },\n    { value: 'universidad-autonoma-madrid', label: 'Universidad Autónoma de Madrid' },\n    { value: 'universidad-carlos-iii', label: 'Universidad Carlos III de Madrid' },\n    { value: 'universidad-politecnica-madrid', label: 'Universidad Politécnica de Madrid' },\n    { value: 'universidad-rey-juan-carlos', label: 'Universidad Rey Juan Carlos' },\n    { value: 'universidad-alcala', label: 'Universidad de Alcalá' },\n    { value: 'universidad-barcelona', label: 'Universidad de Barcelona' },\n    { value: 'universidad-valencia', label: 'Universidad de Valencia' },\n    { value: 'universidad-sevilla', label: 'Universidad de Sevilla' },\n    { value: 'universidad-granada', label: 'Universidad de Granada' },\n    { value: 'universidad-salamanca', label: 'Universidad de Salamanca' },\n    { value: 'universidad-navarra', label: 'Universidad de Navarra' },\n    { value: 'universidad-pompeu-fabra', label: 'Universidad Pompeu Fabra' },\n    { value: 'universidad-pais-vasco', label: 'Universidad del País Vasco' },\n    { value: 'universidad-zaragoza', label: 'Universidad de Zaragoza' },\n    { value: 'otro', label: 'Otra universidad' }\n  ];\n\n  // Especialidades por título profesional\n  const getSpecialtiesByTitle = (title: string) => {\n    if (title === 'Dr.' || title === 'Dra.') {\n      return [\n        { value: 'medicina-general', label: 'Medicina General' },\n        { value: 'cardiologia', label: 'Cardiología' },\n        { value: 'dermatologia', label: 'Dermatología' },\n        { value: 'endocrinologia', label: 'Endocrinología' },\n        { value: 'gastroenterologia', label: 'Gastroenterología' },\n        { value: 'ginecologia', label: 'Ginecología' },\n        { value: 'neurologia', label: 'Neurología' },\n        { value: 'oncologia', label: 'Oncología' },\n        { value: 'ortopedia', label: 'Ortopedia' },\n        { value: 'pediatria', label: 'Pediatría' },\n        { value: 'psiquiatria', label: 'Psiquiatría' },\n        { value: 'radiologia', label: 'Radiología' },\n        { value: 'traumatologia', label: 'Traumatología' },\n        { value: 'urologia', label: 'Urología' },\n        { value: 'otro', label: 'Otra especialidad' }\n      ];\n    } else if (title === 'FT.') {\n      return [\n        { value: 'fisioterapia-deportiva', label: 'Fisioterapia Deportiva' },\n        { value: 'fisioterapia-ortopedica', label: 'Fisioterapia Ortopédica' },\n        { value: 'fisioterapia-neurologica', label: 'Fisioterapia Neurológica' },\n        { value: 'fisioterapia-respiratoria', label: 'Fisioterapia Respiratoria' },\n        { value: 'fisioterapia-pediatrica', label: 'Fisioterapia Pediátrica' },\n        { value: 'fisioterapia-geriatrica', label: 'Fisioterapia Geriátrica' },\n        { value: 'fisioterapia-vestibular', label: 'Fisioterapia Vestibular' },\n        { value: 'fisioterapia-pelvica', label: 'Fisioterapia Pélvica' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else if (title === 'Ps.') {\n      return [\n        { value: 'psicologia-clinica', label: 'Psicología Clínica' },\n        { value: 'psicologia-infantil', label: 'Psicología Infantil' },\n        { value: 'psicologia-deportiva', label: 'Psicología Deportiva' },\n        { value: 'psicologia-laboral', label: 'Psicología Laboral' },\n        { value: 'psicologia-forense', label: 'Psicología Forense' },\n        { value: 'psicologia-social', label: 'Psicología Social' },\n        { value: 'psicologia-educativa', label: 'Psicología Educativa' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else if (title === 'Nat.') {\n      return [\n        { value: 'naturopatia-general', label: 'Naturopatía General' },\n        { value: 'naturopatia-nutricional', label: 'Naturopatía Nutricional' },\n        { value: 'naturopatia-herbal', label: 'Naturopatía Herbal' },\n        { value: 'naturopatia-homeopatica', label: 'Naturopatía Homeopática' },\n        { value: 'naturopatia-acupuntura', label: 'Naturopatía con Acupuntura' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else if (title === 'Pod.') {\n      return [\n        { value: 'podologia-general', label: 'Podología General' },\n        { value: 'podologia-quirurgica', label: 'Podología Quirúrgica' },\n        { value: 'podologia-deportiva', label: 'Podología Deportiva' },\n        { value: 'podologia-ortopedica', label: 'Podología Ortopédica' },\n        { value: 'podologia-geriatrica', label: 'Podología Geriátrica' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else if (title === 'Nut.') {\n      return [\n        { value: 'nutricion-clinica', label: 'Nutrición Clínica' },\n        { value: 'nutricion-deportiva', label: 'Nutrición Deportiva' },\n        { value: 'nutricion-pediatrica', label: 'Nutrición Pediátrica' },\n        { value: 'nutricion-geriatrica', label: 'Nutrición Geriátrica' },\n        { value: 'nutricion-oncologica', label: 'Nutrición Oncológica' },\n        { value: 'nutricion-vegetariana', label: 'Nutrición Vegetariana/Vegana' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else if (title === 'TO.') {\n      return [\n        { value: 'terapia-ocupacional-pediatrica', label: 'Terapia Ocupacional Pediátrica' },\n        { value: 'terapia-ocupacional-geriatrica', label: 'Terapia Ocupacional Geriátrica' },\n        { value: 'terapia-ocupacional-neurologica', label: 'Terapia Ocupacional Neurológica' },\n        { value: 'terapia-ocupacional-ortopedica', label: 'Terapia Ocupacional Ortopédica' },\n        { value: 'terapia-ocupacional-mental', label: 'Terapia Ocupacional en Salud Mental' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else if (title === 'Log.') {\n      return [\n        { value: 'logopedia-infantil', label: 'Logopedia Infantil' },\n        { value: 'logopedia-adultos', label: 'Logopedia en Adultos' },\n        { value: 'logopedia-neurologica', label: 'Logopedia Neurológica' },\n        { value: 'logopedia-geriatrica', label: 'Logopedia Geriátrica' },\n        { value: 'logopedia-educativa', label: 'Logopedia Educativa' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else if (title === 'Opt.') {\n      return [\n        { value: 'optica-general', label: 'Óptica General' },\n        { value: 'optica-contactologia', label: 'Contactología' },\n        { value: 'optica-baja-vision', label: 'Baja Visión' },\n        { value: 'optica-pediatrica', label: 'Óptica Pediátrica' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else if (title === 'Bio.') {\n      return [\n        { value: 'biologia-clinica', label: 'Biología Clínica' },\n        { value: 'biologia-molecular', label: 'Biología Molecular' },\n        { value: 'biologia-genetica', label: 'Genética' },\n        { value: 'biologia-microbiologia', label: 'Microbiología' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else if (title === 'Qui.') {\n      return [\n        { value: 'quiropractica-general', label: 'Quiropraxia General' },\n        { value: 'quiropractica-deportiva', label: 'Quiropraxia Deportiva' },\n        { value: 'quiropractica-pediatrica', label: 'Quiropraxia Pediátrica' },\n        { value: 'quiropractica-geriatrica', label: 'Quiropraxia Geriátrica' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else {\n      return [\n        { value: 'area-general', label: 'Área General' },\n        { value: 'especializacion-avanzada', label: 'Especialización Avanzada' },\n        { value: 'investigacion', label: 'Investigación' },\n        { value: 'docencia', label: 'Docencia' },\n        { value: 'administracion-sanitaria', label: 'Administración Sanitaria' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    }\n  };\n\n  const experienceLevels = [\n    { value: '0-2', label: '0-2 años' },\n    { value: '3-5', label: '3-5 años' },\n    { value: '6-10', label: '6-10 años' },\n    { value: '11-15', label: '11-15 años' },\n    { value: '16-20', label: '16-20 años' },\n    { value: '20+', label: 'Más de 20 años' }\n  ];\n\n  useEffect(() => {\n    // Mostrar campo \"otro\" para universidad si se selecciona\n    setShowOtherUniversity(data.university === 'otro');\n    \n    // Mostrar campo \"otro\" para especialidad si se selecciona\n    setShowOtherSpecialty(data.specialty === 'otro');\n  }, [data.university, data.specialty]);\n\n  const handleUniversityChange = (value: string) => {\n    handleFieldChangeWithContext('university', value);\n    if (value !== 'otro') {\n      handleFieldChangeWithContext('universityOther', '');\n    }\n  };\n\n  const handleSpecialtyChange = (value: string) => {\n    handleFieldChangeWithContext('specialty', value);\n    if (value !== 'otro') {\n      handleFieldChangeWithContext('specialtyOther', '');\n    }\n  };\n\n  return (\n    <>\n      {/* Formulario con Grid Simétrico Perfecto */}\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          \n          {/* Fila 1: Título Profesional y Especialidad */}\n          <div className=\"form-group\">\n            <label htmlFor=\"professionalTitle\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Título Profesional *\n            </label>\n            <select \n              id=\"professionalTitle\"\n              value={data.professionalTitle} \n              onChange={(e) => handleFieldChangeWithContext('professionalTitle', e.target.value)} \n              className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.professionalTitle ? 'border-red-300' : 'border-gray-200'}`}\n            >\n              <option value=\"\">Selecciona tu título</option>\n              {professionalTitles.map((title: string) => (\n                <option key={title} value={title}>\n                  {title}\n                </option>\n              ))}\n            </select>\n            {errors.professionalTitle && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.professionalTitle}</p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"specialty\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              {data.professionalTitle === 'Dr.' || data.professionalTitle === 'Dra.' \n                ? 'Especialidad *' \n                : 'Área de Expertiz'}\n            </label>\n            <select \n              id=\"specialty\"\n              value={data.specialty} \n              onChange={(e) => handleSpecialtyChange(e.target.value)} \n              className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.specialty ? 'border-red-300' : 'border-gray-200'} ${!data.professionalTitle ? 'opacity-50 cursor-not-allowed' : ''}`}\n              disabled={!data.professionalTitle}\n            >\n              <option value=\"\">\n                {data.professionalTitle === 'Dr.' || data.professionalTitle === 'Dra.' \n                  ? 'Selecciona tu especialidad' \n                  : 'Selecciona tu área'}\n              </option>\n              {data.professionalTitle && getSpecialtiesByTitle(data.professionalTitle).map((specialty) => (\n                <option key={specialty.value} value={specialty.value}>\n                  {specialty.label}\n                </option>\n              ))}\n            </select>\n            {errors.specialty && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.specialty}</p>\n            )}\n          </div>\n          \n          {/* Campo \"otro\" para especialidad - Ancho completo */}\n          {showOtherSpecialty && (\n            <div className=\"form-group md:col-span-2\">\n              <label htmlFor=\"specialtyOther\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                {data.professionalTitle === 'Dr.' || data.professionalTitle === 'Dra.' \n                  ? 'Especifica tu especialidad *' \n                  : 'Especifica tu área de expertiz *'}\n              </label>\n              <input \n                id=\"specialtyOther\"\n                type=\"text\" \n                value={data.specialtyOther || ''} \n                onChange={(e) => handleFieldChangeWithContext('specialtyOther', e.target.value)} \n                className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.specialtyOther ? 'border-red-300' : 'border-gray-200'}`}\n                placeholder={\n                  data.professionalTitle === 'Dr.' || data.professionalTitle === 'Dra.' \n                    ? 'Ej: Medicina Interna, Cirugía Vascular...' \n                    : 'Ej: Terapia Manual, Rehabilitación Deportiva...'\n                }\n              />\n              {errors.specialtyOther && (\n                <p className=\"text-sm text-red-600 mt-1\">{errors.specialtyOther}</p>\n              )}\n            </div>\n          )}\n          \n          {/* Fila 2: Universidad y Licencia */}\n          <div className=\"form-group\">\n            <label htmlFor=\"university\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Universidad/Institución *\n            </label>\n            <select \n              id=\"university\"\n              value={data.university} \n              onChange={(e) => handleUniversityChange(e.target.value)} \n              className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.university ? 'border-red-300' : 'border-gray-200'}`}\n            >\n              <option value=\"\">Selecciona tu universidad</option>\n              {universities.map((university) => (\n                <option key={university.value} value={university.value}>\n                  {university.label}\n                </option>\n              ))}\n            </select>\n            {errors.university && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.university}</p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"licenseNumber\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Número de Licencia/Colegiado *\n            </label>\n            <input \n              id=\"licenseNumber\"\n              type=\"text\" \n              value={data.licenseNumber} \n              onChange={(e) => handleFieldChangeWithContext('licenseNumber', e.target.value)} \n              className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.licenseNumber ? 'border-red-300' : 'border-gray-200'}`}\n              placeholder=\"Tu número de licencia\"\n            />\n            {errors.licenseNumber && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.licenseNumber}</p>\n            )}\n          </div>\n          \n          {/* Campo \"otro\" para universidad - Ancho completo */}\n          {showOtherUniversity && (\n            <div className=\"form-group md:col-span-2\">\n              <label htmlFor=\"universityOther\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Especifica tu universidad *\n              </label>\n              <input \n                id=\"universityOther\"\n                type=\"text\" \n                value={data.universityOther || ''} \n                onChange={(e) => handleFieldChangeWithContext('universityOther', e.target.value)} \n                className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.universityOther ? 'border-red-300' : 'border-gray-200'}`}\n                placeholder=\"Ej: Universidad de [Ciudad], Instituto [Nombre]...\"\n              />\n              {errors.universityOther && (\n                <p className=\"text-sm text-red-600 mt-1\">{errors.universityOther}</p>\n              )}\n            </div>\n          )}\n          \n          {/* Fila 3: Centro de Trabajo y Años de Experiencia */}\n          <div className=\"form-group\">\n            <label htmlFor=\"workplace\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Centro de Trabajo\n            </label>\n            <input \n              id=\"workplace\"\n              type=\"text\" \n              value={data.workplace} \n              onChange={(e) => handleFieldChangeWithContext('workplace', e.target.value)} \n              className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.workplace ? 'border-red-300' : 'border-gray-200'}`}\n              placeholder=\"Ej: Clínica, Hospital, Consulta particular...\"\n            />\n            {errors.workplace && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.workplace}</p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"experienceYears\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Años de Experiencia *\n            </label>\n            <select \n              id=\"experienceYears\"\n              value={data.experienceYears} \n              onChange={(e) => handleFieldChangeWithContext('experienceYears', e.target.value)} \n              className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.experienceYears ? 'border-red-300' : 'border-gray-200'}`}\n            >\n              <option value=\"\">Selecciona tus años de experiencia</option>\n              {experienceLevels.map((level) => (\n                <option key={level.value} value={level.value}>\n                  {level.label}\n                </option>\n              ))}\n            </select>\n            {errors.experienceYears && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.experienceYears}</p>\n            )}\n          </div>\n          \n          {/* Información adicional - Ancho completo */}\n          <div className=\"form-group md:col-span-2\">\n            <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <svg className=\"h-5 w-5 text-gray-600 mt-0.5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n                <div>\n                  <p className=\"text-sm text-gray-600\">\n                    Esta información nos ayuda a personalizar tu experiencia y asegurar que cumples con los requisitos profesionales para el uso de AiDuxCare.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/config/env.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2665,2742],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":94,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":94,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2745,2815],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2818,2898],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2937,3008],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3011,3082],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3085,3150],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3153,3224],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3324,3361],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":108,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Variables de entorno para AiDuxCare V.2\n * Centraliza todas las configuraciones del sistema\n */\n\n// Variables de Supabase\nexport const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || '';\nexport const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || '';\n\n// Variables de APIs de IA\nexport const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY || '';\nexport const HUGGINGFACE_API_KEY = import.meta.env.VITE_HUGGINGFACE_API_KEY || '';\n\n// Variables de entorno de la aplicación\nexport const APP_ENVIRONMENT = import.meta.env.VITE_APP_ENVIRONMENT || 'development';\n\n// Configuración de Ollama (local)\nconst OLLAMA_DEFAULT_URL = 'http://localhost:11434';\nconst OLLAMA_DEFAULT_MODEL = 'llama3.1:8b-instruct';\n\n// Configuración del AiDux Assistant\nexport const AIDUX_ASSISTANT_PROVIDER = import.meta.env.VITE_AIDUX_ASSISTANT_PROVIDER || 'local';\nexport const AIDUX_ASSISTANT_BASE_URL = import.meta.env.VITE_AIDUX_ASSISTANT_BASE_URL || OLLAMA_DEFAULT_URL;\nexport const AIDUX_ASSISTANT_MODEL = import.meta.env.VITE_AIDUX_ASSISTANT_MODEL || OLLAMA_DEFAULT_MODEL;\nexport const AIDUX_ASSISTANT_TIMEOUT = parseInt(import.meta.env.VITE_AIDUX_ASSISTANT_TIMEOUT || '10000'); // 10 segundos\n\n/**\n * Configuración completa del entorno\n */\nexport const ENV_CONFIG = {\n  // Base de datos\n  supabase: {\n    url: SUPABASE_URL,\n    anonKey: SUPABASE_ANON_KEY\n  },\n  \n  // APIs de IA\n  ai: {\n    openai: {\n      apiKey: OPENAI_API_KEY\n    },\n    huggingface: {\n      apiKey: HUGGINGFACE_API_KEY\n    },\n    ollama: {\n      url: OLLAMA_DEFAULT_URL,\n      model: OLLAMA_DEFAULT_MODEL\n    }\n  },\n\n  // AiDux Assistant\n  assistant: {\n    provider: AIDUX_ASSISTANT_PROVIDER,\n    baseUrl: AIDUX_ASSISTANT_BASE_URL,\n    model: AIDUX_ASSISTANT_MODEL,\n    timeout: AIDUX_ASSISTANT_TIMEOUT,\n    isLocal: AIDUX_ASSISTANT_PROVIDER === 'local',\n    isCloud: AIDUX_ASSISTANT_PROVIDER === 'cloud'\n  },\n  \n  // Configuración de la aplicación\n  app: {\n    environment: APP_ENVIRONMENT,\n    isDevelopment: APP_ENVIRONMENT === 'development',\n    isProduction: APP_ENVIRONMENT === 'production'\n  }\n};\n\n/**\n * Validar que las variables de entorno críticas estén configuradas\n */\nexport function validateEnvironment(): {\n  isValid: boolean;\n  missingVars: string[];\n} {\n  const required = [\n    { key: 'VITE_SUPABASE_URL', value: SUPABASE_URL },\n    { key: 'VITE_SUPABASE_ANON_KEY', value: SUPABASE_ANON_KEY }\n  ];\n\n  const missing = required\n    .filter(({ value }) => !value)\n    .map(({ key }) => key);\n\n  return {\n    isValid: missing.length === 0,\n    missingVars: missing\n  };\n}\n\n// Log de diagnóstico en desarrollo\nif (typeof window !== 'undefined' && import.meta.env.DEV) {\n  console.log('⚠️ Información de configuración (solo visible en desarrollo):');\n  console.log(`- SUPABASE_URL: ${SUPABASE_URL ? 'OK ✅' : 'MISSING ❌'}`);\n  console.log(`- SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY ? 'OK ✅' : 'MISSING ❌'}`);\n  \n  // Configuración del Assistant\n  console.log(`- AIDUX_ASSISTANT_PROVIDER: ${AIDUX_ASSISTANT_PROVIDER}`);\n  console.log(`- AIDUX_ASSISTANT_BASE_URL: ${AIDUX_ASSISTANT_BASE_URL}`);\n  console.log(`- AIDUX_ASSISTANT_MODEL: ${AIDUX_ASSISTANT_MODEL}`);\n  console.log(`- AIDUX_ASSISTANT_TIMEOUT: ${AIDUX_ASSISTANT_TIMEOUT}ms`);\n  \n  // Intentar validar la URL\n  if (SUPABASE_URL) {\n    try {\n      new URL(SUPABASE_URL);\n      console.log('- URL format: VALID ✅');\n    } catch (e) {\n      console.error('- URL format: INVALID ❌ - La URL de Supabase no es válida');\n    }\n  }\n}\n\nexport default ENV_CONFIG;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/config/featureFlags.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/context/AuthContext.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1879,1936],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2408,2438],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3019,3079],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":124,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":124,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3577,3632],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":147,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":147,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4214,4269],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":149,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":149,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4297,4335],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":162,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":162,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"info"},"fix":{"range":[4846,4916],"text":""},"desc":"Remove the console.info()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { \n  User, \n  signInWithEmailAndPassword, \n  createUserWithEmailAndPassword, \n  signOut, \n  onAuthStateChanged, \n  sendPasswordResetEmail,\n  AuthError \n} from 'firebase/auth';\n\nimport { auth } from '../lib/firebase';\n\nexport interface RegisterData {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  professionalTitle: string;\n  specialty: string;\n  university: string;\n  licenseNumber: string;\n  experienceYears: string;\n  workplace?: string;\n}\n\nexport interface AuthContextType {\n  /** Usuario actual autenticado */\n  user: User | null;\n  /** Indica si está cargando el estado de autenticación */\n  loading: boolean;\n  /** Indica si hay un error de autenticación */\n  error: string | null;\n  /** Método para iniciar sesión */\n  login: (email: string, password: string) => Promise<void>;\n  /** Método para cerrar sesión */\n  logout: () => Promise<void>;\n  /** Método para registrar usuario */\n  register: (data: RegisterData) => Promise<void>;\n  /** Método para recuperar contraseña */\n  recoverPassword: (email: string) => Promise<void>;\n  /** Método para limpiar errores */\n  clearError: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const login = async (email: string, password: string): Promise<void> => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      setUser(userCredential.user);\n      \n      console.log('Login exitoso:', userCredential.user.email);\n    } catch (error) {\n      const authError = error as AuthError;\n      const errorMessage = getAuthErrorMessage(authError.code);\n      setError(errorMessage);\n      console.error('Error en login:', authError);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      await signOut(auth);\n      setUser(null);\n      \n      console.log('Logout exitoso');\n    } catch (error) {\n      const authError = error as AuthError;\n      const errorMessage = getAuthErrorMessage(authError.code);\n      setError(errorMessage);\n      console.error('Error en logout:', authError);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (data: RegisterData): Promise<void> => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const userCredential = await createUserWithEmailAndPassword(auth, data.email, data.password);\n      setUser(userCredential.user);\n      \n      console.log('Registro exitoso:', userCredential.user.email);\n    } catch (error) {\n      const authError = error as AuthError;\n      const errorMessage = getAuthErrorMessage(authError.code);\n      setError(errorMessage);\n      console.error('Error en registro:', authError);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const recoverPassword = async (email: string): Promise<void> => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      await sendPasswordResetEmail(auth, email);\n      \n      console.log('Email de recuperación enviado a:', email);\n    } catch (error) {\n      const authError = error as AuthError;\n      const errorMessage = getAuthErrorMessage(authError.code);\n      setError(errorMessage);\n      console.error('Error en recuperación de contraseña:', authError);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const clearError = (): void => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, \n      (currentUser) => {\n        setUser(currentUser);\n        setLoading(false);\n        \n        if (currentUser) {\n          console.log('Usuario autenticado:', currentUser.email);\n        } else {\n          console.log('Usuario no autenticado');\n        }\n      },\n      async (error) => {\n        // Handler robusto para errores de refresh token (403/securetoken)\n        console.warn('Auth state change error:', error);\n        \n        const authError = error as { code?: string; message?: string };\n        if (authError.code === 'auth/network-request-failed' || \n            authError.code === 'auth/too-many-requests' ||\n            authError.message?.includes('403') ||\n            authError.message?.includes('securetoken')) {\n          \n          console.info('Detectado error de refresh token, limpiando estado...');\n          try {\n            await signOut(auth);\n            setUser(null);\n          } catch (signOutError) {\n            console.warn('Error al limpiar estado:', signOutError);\n          }\n        }\n        \n        setLoading(false);\n      }\n    );\n\n    return () => unsubscribe();\n  }, []);\n\n  const value: AuthContextType = {\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    register,\n    recoverPassword,\n    clearError,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n/**\n * Hook para usar el contexto de autenticación\n */\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  \n  if (context === undefined) {\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\n  }\n  \n  return context;\n};\n\n/**\n * Convierte códigos de error de Firebase a mensajes legibles en español\n */\nconst getAuthErrorMessage = (errorCode: string): string => {\n  const errorMessages: Record<string, string> = {\n    'auth/user-not-found': 'No existe una cuenta con este email',\n    'auth/wrong-password': 'Contraseña incorrecta',\n    'auth/invalid-email': 'Email inválido',\n    'auth/weak-password': 'La contraseña debe tener al menos 6 caracteres',\n    'auth/email-already-in-use': 'Ya existe una cuenta con este email',\n    'auth/too-many-requests': 'Demasiados intentos fallidos. Intenta más tarde',\n    'auth/user-disabled': 'Esta cuenta ha sido deshabilitada',\n    'auth/operation-not-allowed': 'Esta operación no está permitida',\n    'auth/invalid-credential': 'Credenciales inválidas',\n    'auth/network-request-failed': 'Error de conexión. Verifica tu internet',\n    'auth/user-token-expired': 'Sesión expirada. Inicia sesión nuevamente',\n    'auth/requires-recent-login': 'Se requiere autenticación reciente para esta operación',\n  };\n\n  return errorMessages[errorCode] || 'Error de autenticación desconocido';\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/context/ProfessionalProfileContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProfile'. Either include it or remove the dependency array.","line":200,"column":6,"nodeType":"ArrayExpression","endLine":200,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadProfile, user.uid]","fix":{"range":[6015,6026],"text":"[loadProfile, user.uid]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'updateHeartbeat'. Either include it or remove the dependency array.","line":213,"column":6,"nodeType":"ArrayExpression","endLine":213,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [profile, updateHeartbeat]","fix":{"range":[6319,6328],"text":"[profile, updateHeartbeat]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState, useRef } from 'react';\nimport { \n  getFirestore, \n  doc, \n  getDoc, \n  setDoc, \n  updateDoc, \n  serverTimestamp,\n  Timestamp \n} from 'firebase/firestore';\n\nimport { useAuth } from './AuthContext';\n\nexport interface ProfessionalProfile {\n  uid: string;\n  email: string;\n  displayName?: string;\n  fullName?: string;\n  role?: 'physio' | 'admin' | 'assistant';\n  specialty?: string;\n  professionalTitle?: string;\n  university?: string;\n  licenseNumber?: string;\n  workplace?: string;\n  experienceYears?: string;\n  clinic?: { \n    name?: string; \n    city?: string; \n    country?: string \n  };\n  timezone?: string;\n  languages?: string[];\n  phone?: string;\n  country?: string;\n  province?: string;\n  city?: string;\n  consentGranted?: boolean;\n  preferredSalutation?: string; // p.ej. \"FT.\"\n  lastNamePreferred?: string;   // p.ej. \"Sobarzo\"\n  createdAt: Timestamp;\n  lastLoginAt?: Timestamp;\n  lastSeenAt?: Timestamp;\n  preferences?: { \n    theme: 'inside' | 'outside'; \n    density: 'comfortable' | 'compact' \n  };\n  registrationStatus?: 'incomplete' | 'complete';\n}\n\ninterface ProfessionalProfileContextType {\n  profile?: ProfessionalProfile;\n  loading: boolean;\n  error?: Error;\n  updateProfile: (updates: Partial<ProfessionalProfile>) => Promise<void>;\n  refreshProfile: () => Promise<void>;\n  updateWizardData: (field: keyof ProfessionalProfile, value: unknown) => Promise<void>;\n  setCurrentStep: (step: number) => void;\n}\n\nconst ProfessionalProfileContext = createContext<ProfessionalProfileContextType | undefined>(undefined);\n\nexport const useProfessionalProfile = () => {\n  const context = useContext(ProfessionalProfileContext);\n  if (context === undefined) {\n    throw new Error('useProfessionalProfile must be used within a ProfessionalProfileProvider');\n  }\n  return context;\n};\n\ninterface ProfessionalProfileProviderProps {\n  children: React.ReactNode;\n}\n\nexport const ProfessionalProfileProvider: React.FC<ProfessionalProfileProviderProps> = ({ children }) => {\n  const { user, loading: authLoading } = useAuth();\n  const [profile, setProfile] = useState<ProfessionalProfile | undefined>(undefined);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | undefined>(undefined);\n  const heartbeatRef = useRef<ReturnType<typeof setInterval>>();\n  const [/* currentStep */, setCurrentStepState] = useState<number>(0);\n  const db = getFirestore();\n\n  // Función para obtener zona horaria por defecto\n  const getDefaultTimezone = (): string => {\n    return Intl.DateTimeFormat().resolvedOptions().timeZone;\n  };\n\n  // Función para crear perfil inicial\n  const createInitialProfile = async (uid: string, email: string): Promise<ProfessionalProfile> => {\n    const initialProfile: ProfessionalProfile = {\n      uid,\n      email,\n      displayName: user?.displayName || undefined,\n      role: 'physio',\n      timezone: getDefaultTimezone(),\n      languages: ['es'],\n      preferredSalutation: 'FT.',\n      lastNamePreferred: user?.displayName?.split(' ').slice(-1)[0] ?? undefined,\n      createdAt: serverTimestamp() as Timestamp,\n      lastLoginAt: serverTimestamp() as Timestamp,\n      lastSeenAt: serverTimestamp() as Timestamp,\n      preferences: {\n        theme: 'inside',\n        density: 'comfortable'\n      }\n    };\n\n    await setDoc(doc(db, 'users', uid), initialProfile);\n    return initialProfile;\n  };\n\n  // Función para cargar perfil desde Firestore\n  const loadProfile = async (uid: string): Promise<void> => {\n    try {\n      setLoading(true);\n      setError(undefined);\n\n      const userDoc = await getDoc(doc(db, 'users', uid));\n      \n      if (userDoc.exists()) {\n        const userData = userDoc.data() as ProfessionalProfile;\n        setProfile(userData);\n        \n        // Actualizar lastLoginAt\n        await updateDoc(doc(db, 'users', uid), {\n          lastLoginAt: serverTimestamp()\n        });\n      } else {\n        // Crear perfil inicial\n        const initialProfile = await createInitialProfile(uid, user?.email || '');\n        setProfile(initialProfile);\n      }\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Error desconocido al cargar perfil');\n      setError(error);\n      console.error('Error cargando perfil profesional:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Función para actualizar perfil\n  const updateProfile = async (updates: Partial<ProfessionalProfile>): Promise<void> => {\n    if (!user?.uid) return;\n\n    try {\n      const userRef = doc(db, 'users', user.uid);\n      await updateDoc(userRef, {\n        ...updates,\n        lastSeenAt: serverTimestamp()\n      });\n\n      // Actualizar estado local\n      setProfile(prev => prev ? { ...prev, ...updates } : undefined);\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Error al actualizar perfil');\n      setError(error);\n      throw error;\n    }\n  };\n\n  // Soporte para wizard (compatibilidad con componentes existentes)\n  const updateWizardData = async (field: keyof ProfessionalProfile, value: unknown): Promise<void> => {\n    await updateProfile({ [field]: value } as Partial<ProfessionalProfile>);\n  };\n\n  const setCurrentStep = (step: number): void => {\n    setCurrentStepState(step);\n  };\n\n  // Función para refrescar perfil\n  const refreshProfile = async (): Promise<void> => {\n    if (user?.uid) {\n      await loadProfile(user.uid);\n    }\n  };\n\n  // Función para heartbeat (actualizar lastSeenAt)\n  const updateHeartbeat = async (): Promise<void> => {\n    if (!user?.uid || !profile) return;\n\n    try {\n      await updateDoc(doc(db, 'users', user.uid), {\n        lastSeenAt: serverTimestamp()\n      });\n    } catch (err) {\n      console.warn('Error en heartbeat:', err);\n    }\n  };\n\n  // Efecto para cargar perfil cuando cambia el usuario\n  useEffect(() => {\n    if (user?.uid) {\n      loadProfile(user.uid);\n    } else {\n      setProfile(undefined);\n      setLoading(false);\n      setError(undefined);\n    }\n  }, [user?.uid]);\n\n  // Efecto para heartbeat cada 60 segundos\n  useEffect(() => {\n    if (profile) {\n      heartbeatRef.current = setInterval(updateHeartbeat, 60000); // 60 segundos\n    }\n\n    return () => {\n      if (heartbeatRef.current) {\n        clearInterval(heartbeatRef.current);\n      }\n    };\n  }, [profile]);\n\n  const value: ProfessionalProfileContextType = {\n    profile,\n    loading,\n    error,\n    updateProfile,\n    refreshProfile,\n    updateWizardData,\n    setCurrentStep\n  };\n\n  return (\n    <ProfessionalProfileContext.Provider value={value}>\n      {authLoading ? <>{children}</> : children}\n    </ProfessionalProfileContext.Provider>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/agent/AgentExplainer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/agent/ClinicalAgent.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/agent/ContextDiff.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/agent/LLMAdapter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/ai/ModelSelector.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/ai/PromptFactory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/assistant/__tests__/assistantAdapter.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/assistant/__tests__/extractEntities.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/assistant/__tests__/rails.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/assistant/assistantAdapter.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'httpsCallable' is defined but never used.","line":1,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'connectFunctionsEmulator' is defined but never used.","line":1,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAuth' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'logAction' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'localRoute' is defined but never used.","line":6,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockDataLookup' is assigned a value but never used.","line":29,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_params' is defined but never used.","line":29,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":54},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":30,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":30,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"info"},"fix":{"range":[942,1008],"text":""},"desc":"Remove the console.info()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockLLMQuery' is assigned a value but never used.","line":46,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"info"},"fix":{"range":[1795,1858],"text":""},"desc":"Remove the console.info()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getFirebaseFunctions' is assigned a value but never used.","line":59,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":27}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getFunctions, httpsCallable, connectFunctionsEmulator } from 'firebase/functions';\nimport { getAuth } from 'firebase/auth';\n\nimport { logAction } from '../../analytics/events';\n\nimport { routeQuery as localRoute } from './dataLookup';\n\nexport type DataIntent = 'age' | 'mri' | 'todayAppointments' | 'pendingNotes';\n\nexport type AssistantRoute = { \n  type: 'data' | 'llm' | 'both' | 'free'; \n  dataIntent?: DataIntent; \n  entities: Record<string, string>;\n  confidence: number;\n};\n\nexport type AssistantResult = {\n  ok: boolean;\n  routeType: 'data' | 'llm' | 'both';\n  answerMarkdown?: string;\n  data?: unknown;\n  entities?: unknown[];\n  error?: string;\n  tookMs: number;\n  confidence: number;\n};\n\n// Mocks temporales para cuando las Functions no estén disponibles\nconst mockDataLookup = async (intent: string, _params: Record<string, unknown>): Promise<{ ok: boolean; answerMarkdown: string; data?: Record<string, unknown> }> => {\n  console.info('[Assistant] Usando mock para data lookup:', intent);\n  \n  switch (intent) {\n    case 'todayAppointments':\n      return { ok: true, answerMarkdown: 'Tienes 2 citas programadas para hoy.', data: { count: 2 } };\n    case 'pendingNotes':\n      return { ok: true, answerMarkdown: 'Tienes 3 notas clínicas pendientes de revisión.', data: { total: 3 } };\n    case 'age':\n      return { ok: true, answerMarkdown: 'El paciente tiene 35 años.', data: { age: 35 } };\n    case 'mri':\n      return { ok: true, answerMarkdown: 'Última resonancia: 15/08/2024 - Sin hallazgos significativos.', data: { date: '2024-08-15' } };\n    default:\n      return { ok: false, answerMarkdown: 'Intención no soportada.' };\n  }\n};\n\nconst mockLLMQuery = async (input: string): Promise<{ ok: boolean; answerMarkdown: string; entities: Record<string, unknown>[] }> => {\n  console.info('[Assistant] Usando mock para LLM query:', input);\n  \n  return {\n    ok: true,\n    answerMarkdown: `Respuesta simulada para: \"${input}\". Esta es una respuesta de prueba mientras se configuran las Functions.`,\n    entities: [\n      { type: 'medication', name: 'Ibuprofeno', dosage: '400mg', frequency: 'c/8h' }\n    ]\n  };\n};\n\n// Configuración de Firebase Functions\nconst getFirebaseFunctions = () => {\n  try {\n    // Usar región por defecto correcta para UAT\n    const region = 'europe-west1';\n    const functions = getFunctions();\n    \n    // Configurar región\n    functions.region = region;\n    \n    // Conectar a emuladores en desarrollo\n  } catch (err) {\n    console.error(\"assistantAdapter error:\", err);\n  }\n}\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/assistant/dataLookup.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_patientId' is defined but never used.","line":25,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_patientId' is defined but never used.","line":32,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":49}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export function routeQuery(input: string): string {\n  const query = input.toLowerCase();\n  \n  // Detectar intenciones basadas en keywords\n  if (query.includes('edad') || query.includes('años') || query.includes('age')) {\n    return 'data:age';\n  }\n  \n  if (query.includes('resonancia') || query.includes('mri') || query.includes('rmn')) {\n    return 'data:mri';\n  }\n  \n  if (query.includes('citas') || query.includes('agenda') || query.includes('appointments')) {\n    return 'data:appointments';\n  }\n  \n  if (query.includes('notas') || query.includes('pendientes') || query.includes('notes')) {\n    return 'data:notes';\n  }\n  \n  // Por defecto, tratar como consulta de datos\n  return 'data:unknown';\n}\n\nexport async function lookupPatientAge(_patientId?: string): Promise<{ answerMarkdown: string }> {\n  // Placeholder para lookup de edad del paciente\n  return {\n    answerMarkdown: `Edad del paciente: [Función en desarrollo]`\n  };\n}\n\nexport async function lookupLatestMRI(_patientId?: string): Promise<{ answerMarkdown: string }> {\n  // Placeholder para lookup de última resonancia\n  return {\n    answerMarkdown: `Última resonancia: [Función en desarrollo]`\n  };\n}\n\nexport async function lookupPendingNotes(): Promise<{ answerMarkdown: string }> {\n  // Placeholder para lookup de notas pendientes\n  return {\n    answerMarkdown: `Notas pendientes: [Función en desarrollo]`\n  };\n}\n\nexport async function lookupTodayAppointments(): Promise<{ answerMarkdown: string }> {\n  // Placeholder para lookup de citas de hoy\n  return {\n    answerMarkdown: `Citas de hoy: [Función en desarrollo]`\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/assistant/entities.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/assistant/extractEntities.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/assistant/rails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/audio/AudioCaptureService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1050,1112],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":57,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":57,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1373,1435],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Tipo para el actor en la transcripción\n */\nexport type TranscriptionActor = 'profesional' | 'paciente' | 'acompañante';\n\n/**\n * Estado de confianza en la transcripción\n */\nexport type TranscriptionConfidence = 'entendido' | 'poco_claro' | 'no_reconocido';\n\n/**\n * Interfaz para un segmento de transcripción\n */\nexport interface TranscriptionSegment {\n  id: string;\n  timestamp: string;\n  actor: TranscriptionActor;\n  content: string;\n  confidence: TranscriptionConfidence;\n  approved?: boolean;\n  edited?: boolean;\n}\n\n/**\n * Servicio para la captura y procesamiento de audio en consultas médicas\n */\nexport class AudioCaptureService {\n  private isCapturing: boolean = false;\n  private transcriptionSegments: TranscriptionSegment[] = [];\n  private captureStartTime: number | null = null;\n\n  /**\n   * Inicia la captura de audio (simulado)\n   */\n  public startCapture(): void {\n    if (this.isCapturing) {\n      return;\n    }\n    \n    this.isCapturing = true;\n    this.captureStartTime = Date.now();\n    this.transcriptionSegments = [];\n    \n    console.log('AudioCaptureService: Captura de audio iniciada');\n  }\n\n  /**\n   * Detiene la captura de audio y retorna la transcripción simulada\n   */\n  public stopCapture(): TranscriptionSegment[] {\n    if (!this.isCapturing) {\n      return [];\n    }\n    \n    this.isCapturing = false;\n    this.captureStartTime = null;\n    console.log('AudioCaptureService: Captura de audio detenida');\n    \n    // Simular una demora para imitar el procesamiento de audio\n    // En una implementación real, esto sería asíncrono con una API real\n    \n    // Devolver los datos de transcripción simulados\n    return [];\n  }\n\n  /**\n   * Obtiene el estado actual de captura\n   */\n  public isCurrentlyCapturing(): boolean {\n    return this.isCapturing;\n  }\n\n  /**\n   * Genera contenido clínico estructurado a partir de transcripciones aprobadas\n   * @param approvedSegments Segmentos de transcripción aprobados\n   * @returns Contenido estructurado para EMR\n   */\n  public generateClinicalContent(approvedSegments: TranscriptionSegment[]): string {\n    if (approvedSegments.length === 0) {\n      return '';\n    }\n\n    const profesionalSegments = approvedSegments.filter(s => s.actor === 'profesional');\n    const pacienteSegments = approvedSegments.filter(s => s.actor === 'paciente');\n    const acompañanteSegments = approvedSegments.filter(s => s.actor === 'acompañante');\n\n    let content = '🔊 **Resumen de consulta (transcripción asistida)**\\n\\n';\n\n    if (profesionalSegments.length > 0) {\n      content += '**Profesional sanitario:**\\n';\n      profesionalSegments.forEach(s => {\n        content += `- ${s.content}\\n`;\n      });\n      content += '\\n';\n    }\n\n    if (pacienteSegments.length > 0) {\n      content += '**Paciente:**\\n';\n      pacienteSegments.forEach(s => {\n        content += `- ${s.content}\\n`;\n      });\n      content += '\\n';\n    }\n\n    if (acompañanteSegments.length > 0) {\n      content += '**Acompañante:**\\n';\n      acompañanteSegments.forEach(s => {\n        content += `- ${s.content}\\n`;\n      });\n    }\n\n    return content;\n  }\n}\n\n// Exportar una instancia singleton para uso en toda la aplicación\nexport const audioCaptureService = new AudioCaptureService(); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/audit/AuditAlertService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/audit/AuditPerformanceOptimizer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/audit/ClinicalAuditHook.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/audit/FirestoreAuditLogger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/auth/UserContext.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'authService' object construction makes the dependencies of useCallback Hook (at line 50) change on every render. To fix this, wrap the initialization of 'authService' in its own useMemo() Hook.","line":35,"column":9,"nodeType":"VariableDeclarator","endLine":35,"endColumn":48},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'authService' object construction makes the dependencies of useEffect Hook (at line 62) change on every render. To fix this, wrap the initialization of 'authService' in its own useMemo() Hook.","line":35,"column":9,"nodeType":"VariableDeclarator","endLine":35,"endColumn":48},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1809,1902],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\n\nimport { FirestoreAuditLogger } from '../audit/FirestoreAuditLogger';\n\nimport { FirebaseAuthService, UserProfile, AuthSession } from './firebaseAuthService';\n\ninterface UserContextType {\n  user: UserProfile | null;\n  isLoading: boolean;\n  error: string | null;\n  logout: () => Promise<void>;\n  refreshProfile: () => Promise<void>;\n  hasRole: (requiredRoles: string | string[]) => boolean;\n}\n\nconst initialUserContext: UserContextType = {\n  user: null,\n  isLoading: false,\n  error: null,\n  logout: async () => {},\n  refreshProfile: async () => {},\n  hasRole: () => false\n};\n\nconst UserContext = createContext<UserContextType>(initialUserContext);\n\ninterface UserProviderProps {\n  children: React.ReactNode;\n}\n\nexport const UserProvider: React.FC<UserProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<UserProfile | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const authService = new FirebaseAuthService();\n\n  // Cargar usuario y perfil al montar\n  const loadUser = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const session: AuthSession = await authService.getCurrentSession();\n      setUser(session.user);\n    } catch (err) {\n      setError((err as Error).message);\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [authService]);\n\n  useEffect(() => {\n    loadUser();\n    // TEMPORALMENTE DESHABILITADO: Causa loop infinito\n    // const unsubscribe = authService.onAuthStateChange((session) => {\n    //   setUser(session.user);\n    // });\n    // return () => unsubscribe();\n    \n    // SOLUCIÓN TEMPORAL: Solo cargar usuario inicial\n    console.log('🔍 [DEBUG] UserContext: Listener de autenticación deshabilitado temporalmente');\n  }, [loadUser, authService]);\n\n  const logout = async () => {\n    setIsLoading(true);\n    try {\n      // Registrar evento de auditoría antes del logout\n      if (user) {\n        await FirestoreAuditLogger.logEvent({\n          type: 'logout_success',\n          userId: user.id,\n          userRole: user.role,\n          metadata: {\n            logoutMethod: 'manual',\n            sessionDuration: user.lastLoginAt ? Date.now() - user.lastLoginAt.getTime() : null\n          }\n        });\n      }\n      \n      await authService.signOut();\n      setUser(null);\n    } catch (err) {\n      // Registrar evento de auditoría en caso de error\n      if (user) {\n        await FirestoreAuditLogger.logEvent({\n          type: 'logout_failed',\n          userId: user.id,\n          userRole: user.role,\n          metadata: {\n            error: (err as Error).message,\n            logoutMethod: 'manual'\n          }\n        });\n      }\n      setError((err as Error).message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const refreshProfile = async () => {\n    await loadUser();\n  };\n\n  const hasRole = (requiredRoles: string | string[]) => {\n    if (!user || !user.role) return false;\n    if (Array.isArray(requiredRoles)) {\n      return requiredRoles.includes(user.role);\n    }\n    return user.role === requiredRoles;\n  };\n\n  return (\n    <UserContext.Provider value={{ user, isLoading, error, logout, refreshProfile, hasRole }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useUser = (): UserContextType => {\n  const context = useContext(UserContext);\n  if (!context) {\n    throw new Error('useUser must be used within a UserProvider');\n  }\n  return context;\n};\n\nexport default UserContext; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/auth/firebaseAuthService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/auth/firebaseAuthService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1838,1902],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2555,2693],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":114,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":114,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3048,3127],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":143,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":143,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4018,4159],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":160,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":160,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4431,4483],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":188,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":188,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5426,5486],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":225,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":225,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":267,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":267,"endColumn":25}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🔥 Firebase Auth Service - Migración desde Supabase\n * FASE 0.5: ESTABILIZACIÓN FINAL DE INFRAESTRUCTURA\n * \n * Servicio de autenticación completo usando Firebase Auth\n * Reemplaza completamente Supabase Auth para migración total\n */\n\nimport { getAuth, Auth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut as firebaseSignOut, onAuthStateChanged, User as FirebaseUser, UserCredential, AuthError } from 'firebase/auth';\nimport { Firestore, doc, setDoc, getDoc, updateDoc } from 'firebase/firestore';\n\nimport { app, db } from '../firebase/firebaseClient';\n\n// Eliminar inicialización directa:\n// const app: FirebaseApp = initializeApp(firebaseConfig);\n// const auth: Auth = getAuth(app);\n// const db: Firestore = getFirestore(app);\n\n// Tipos de usuario\nexport interface UserProfile {\n  id: string;\n  email: string;\n  name: string;\n  role: 'OWNER' | 'PHYSICIAN' | 'ADMIN';\n  specialization?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  mfaEnabled: boolean;\n  lastLoginAt?: Date;\n  emailVerified: boolean; // NUEVO\n}\n\nexport interface AuthSession {\n  user: UserProfile | null;\n  loading: boolean;\n  error: string | null;\n}\n\n// Roles y permisos\nconst ROLES = {\n  OWNER: {\n    level: 3,\n    permissions: ['all'] as string[]\n  },\n  ADMIN: {\n    level: 2,\n    permissions: ['manage_users', 'view_analytics', 'manage_content'] as string[]\n  },\n  PHYSICIAN: {\n    level: 1,\n    permissions: ['manage_patients', 'create_visits', 'view_own_data'] as string[]\n  }\n} as const;\n\n/**\n * Servicio de autenticación Firebase\n */\nexport class FirebaseAuthService {\n  private auth: Auth;\n  private db: Firestore;\n\n  constructor() {\n    this.auth = getAuth(app);\n    this.db = db;\n  }\n\n  /**\n   * Iniciar sesión con email y contraseña\n   */\n  async signIn(email: string, password: string): Promise<UserProfile> {\n    try {\n      console.log('🔥 Firebase Auth: Iniciando sesión...', { email });\n      \n      const userCredential: UserCredential = await signInWithEmailAndPassword(\n        this.auth, \n        email, \n        password\n      );\n\n      const firebaseUser = userCredential.user;\n      \n      // Obtener perfil del usuario desde Firestore\n      const userProfile = await this.getUserProfile(firebaseUser.uid);\n      \n      if (!userProfile) {\n        throw new Error('Perfil de usuario no encontrado');\n      }\n\n      // Validar email verificado\n      if (!userProfile.emailVerified) {\n        throw new Error('Email no verificado');\n      }\n\n      // Actualizar último login\n      await this.updateLastLogin(firebaseUser.uid);\n\n      console.log('✅ Firebase Auth: Sesión iniciada exitosamente', { \n        userId: userProfile.id, \n        role: userProfile.role \n      });\n\n      return userProfile;\n    } catch (error) {\n      console.error('❌ Firebase Auth: Error al iniciar sesión', error);\n      throw this.handleAuthError(error as AuthError);\n    }\n  }\n\n  /**\n   * Registrar nuevo usuario\n   */\n  async signUp(email: string, password: string, name: string, specialization?: string): Promise<UserProfile> {\n    try {\n      console.log('🔥 Firebase Auth: Registrando nuevo usuario...', { email, name });\n      \n      const userCredential: UserCredential = await createUserWithEmailAndPassword(\n        this.auth, \n        email, \n        password\n      );\n\n      const firebaseUser = userCredential.user;\n      \n      // Determinar rol basado en el nombre (Mauricio = OWNER)\n      const role = this.determineUserRole(name);\n      \n      // Crear perfil de usuario en Firestore\n      const isSuperUser = firebaseUser.email === 'mauricio@aiduxcare.com';\n      const userProfile: UserProfile = {\n        id: firebaseUser.uid,\n        email: firebaseUser.email!,\n        name: firebaseUser.displayName || '',\n        role: isSuperUser ? 'OWNER' : role,\n        specialization: specialization,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        mfaEnabled: false,\n        emailVerified: firebaseUser.emailVerified\n      };\n\n      await this.createUserProfile(userProfile);\n\n      console.log('✅ Firebase Auth: Usuario registrado exitosamente', { \n        userId: userProfile.id, \n        role: userProfile.role \n      });\n\n      return userProfile;\n    } catch (error) {\n      console.error('❌ Firebase Auth: Error al registrar usuario', error);\n      throw this.handleAuthError(error as AuthError);\n    }\n  }\n\n  /**\n   * Cerrar sesión\n   */\n  async signOut(): Promise<void> {\n    try {\n      console.log('🔥 Firebase Auth: Cerrando sesión...');\n      \n      // Obtener usuario actual antes de cerrar sesión\n      const currentUser = this.auth.currentUser;\n      let userProfile: UserProfile | null = null;\n      \n      if (currentUser) {\n        userProfile = await this.getUserProfile(currentUser.uid);\n      }\n      \n      await firebaseSignOut(this.auth);\n      \n      // Registrar evento de logout exitoso\n      if (userProfile) {\n        // Import estático para optimizar bundle\n        const { FirestoreAuditLogger } = await import(/* webpackChunkName: \"audit\" */ '../audit/FirestoreAuditLogger');\n        await FirestoreAuditLogger.logEvent({\n          type: 'logout_success',\n          userId: userProfile.id,\n          userRole: userProfile.role,\n          metadata: { \n            email: userProfile.email,\n            sessionDuration: userProfile.lastLoginAt ? \n              Date.now() - userProfile.lastLoginAt.getTime() : null\n          },\n        });\n      }\n      \n      console.log('✅ Firebase Auth: Sesión cerrada exitosamente');\n    } catch (error) {\n      console.error('❌ Firebase Auth: Error al cerrar sesión', error);\n      \n      // Registrar evento de logout fallido\n      try {\n        const { FirestoreAuditLogger } = await import('../audit/FirestoreAuditLogger');\n        await FirestoreAuditLogger.logEvent({\n          type: 'logout_failed',\n          userId: 'unknown',\n          userRole: 'unknown',\n          metadata: { error: (error as Error).message },\n        });\n      } catch (auditError) {\n        console.error('Error registrando logout fallido:', auditError);\n      }\n      \n      throw this.handleAuthError(error as AuthError);\n    }\n  }\n\n  /**\n   * Obtener sesión actual\n   */\n  async getCurrentSession(): Promise<AuthSession> {\n    return new Promise((resolve) => {\n      const unsubscribe = onAuthStateChanged(\n        this.auth,\n        async (firebaseUser: FirebaseUser | null) => {\n          if (firebaseUser) {\n            try {\n              const userProfile = await this.getUserProfile(firebaseUser.uid);\n              resolve({\n                user: userProfile,\n                loading: false,\n                error: null\n              });\n            } catch (error) {\n              resolve({\n                user: null,\n                loading: false,\n                error: 'Error al cargar perfil de usuario'\n              });\n            }\n          } else {\n            resolve({\n              user: null,\n              loading: false,\n              error: null\n            });\n          }\n          unsubscribe();\n        },\n        (error) => {\n          resolve({\n            user: null,\n            loading: false,\n            error: error.message\n          });\n        }\n      );\n    });\n  }\n\n  /**\n   * Escuchar cambios en el estado de autenticación\n   */\n  onAuthStateChange(callback: (session: AuthSession) => void): () => void {\n    return onAuthStateChanged(\n      this.auth,\n      async (firebaseUser: FirebaseUser | null) => {\n        if (firebaseUser) {\n          try {\n            const userProfile = await this.getUserProfile(firebaseUser.uid);\n            callback({\n              user: userProfile,\n              loading: false,\n              error: null\n            });\n          } catch (error) {\n            callback({\n              user: null,\n              loading: false,\n              error: 'Error al cargar perfil de usuario'\n            });\n          }\n        } else {\n          callback({\n            user: null,\n            loading: false,\n            error: null\n          });\n        }\n      },\n      (error) => {\n        callback({\n          user: null,\n          loading: false,\n          error: error.message\n        });\n      }\n    );\n  }\n\n  /**\n   * Reenviar correo de verificación a un usuario dado su email\n   */\n  async sendVerificationEmail(email: string): Promise<void> {\n    // Buscar usuario autenticado actual\n    const user = this.auth.currentUser;\n    if (!user || user.email !== email) {\n      throw new Error('Debes iniciar sesión para reenviar el correo de verificación.');\n    }\n    if (user.emailVerified) {\n      throw new Error('El email ya está verificado.');\n    }\n    await (user as FirebaseUser & { sendEmailVerification: () => Promise<void> }).sendEmailVerification();\n  }\n\n  /**\n   * Obtener perfil de usuario desde Firestore\n   */\n  private async getUserProfile(userId: string): Promise<UserProfile | null> {\n    try {\n      const userDoc = doc(this.db, 'users', userId);\n      const userSnapshot = await getDoc(userDoc);\n      \n      if (userSnapshot.exists()) {\n        const data = userSnapshot.data();\n        const isSuperUser = data.email === 'mauricio@aiduxcare.com';\n        const userProfile: UserProfile = {\n          id: userId,\n          email: data.email,\n          name: data.name,\n          role: isSuperUser ? 'OWNER' : data.role,\n          specialization: data.specialization,\n          createdAt: data.createdAt.toDate(),\n          updatedAt: data.updatedAt.toDate(),\n          mfaEnabled: data.mfaEnabled || false,\n          lastLoginAt: data.lastLoginAt?.toDate(),\n          emailVerified: data.emailVerified || false\n        };\n        return userProfile;\n      }\n      \n      return null;\n    } catch (error: unknown) {\n      console.error('Error al obtener perfil de usuario:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Crear perfil de usuario en Firestore\n   */\n  private async createUserProfile(userProfile: UserProfile): Promise<void> {\n    try {\n      const userDoc = doc(this.db, 'users', userProfile.id);\n      await setDoc(userDoc, {\n        email: userProfile.email,\n        name: userProfile.name,\n        role: userProfile.role,\n        specialization: userProfile.specialization,\n        createdAt: userProfile.createdAt,\n        updatedAt: userProfile.updatedAt,\n        mfaEnabled: userProfile.mfaEnabled,\n        emailVerified: userProfile.emailVerified\n      });\n    } catch (error: unknown) {\n      console.error('Error al crear perfil de usuario:', error);\n      throw new Error('Error al crear perfil de usuario');\n    }\n  }\n\n  /**\n   * Actualizar último login\n   */\n  private async updateLastLogin(userId: string): Promise<void> {\n    try {\n      const userDoc = doc(this.db, 'users', userId);\n      await updateDoc(userDoc, {\n        lastLoginAt: new Date()\n      });\n    } catch (error: unknown) {\n      console.error('Error al actualizar último login:', error);\n    }\n  }\n\n  /**\n   * Determinar rol de usuario basado en el nombre\n   */\n  private determineUserRole(name: string): 'OWNER' | 'PHYSICIAN' | 'ADMIN' {\n    const normalizedName = name.toLowerCase().trim();\n    \n    // Mauricio Sobarzo = OWNER\n    if (normalizedName.includes('mauricio') || normalizedName.includes('sobarzo')) {\n      return 'OWNER';\n    }\n    \n    // Por defecto, PHYSICIAN\n    return 'PHYSICIAN';\n  }\n\n  /**\n   * Manejar errores de autenticación\n   */\n  private handleAuthError(error: AuthError): Error {\n    switch (error.code) {\n      case 'auth/user-not-found':\n        return new Error('Usuario no encontrado');\n      case 'auth/wrong-password':\n        return new Error('Contraseña incorrecta');\n      case 'auth/email-already-in-use':\n        return new Error('El email ya está registrado');\n      case 'auth/weak-password':\n        return new Error('La contraseña es demasiado débil');\n      case 'auth/invalid-email':\n        return new Error('Email inválido');\n      case 'auth/too-many-requests':\n        return new Error('Demasiados intentos. Intenta más tarde');\n      default:\n        return new Error('Error de autenticación: ' + error.message);\n    }\n  }\n\n  /**\n   * Verificar si el usuario tiene permisos\n   */\n  hasPermission(user: UserProfile, permission: string): boolean {\n    const userRole = ROLES[user.role];\n    return userRole.permissions.includes('all') || userRole.permissions.includes(permission);\n  }\n\n  /**\n   * Obtener nivel de rol del usuario\n   */\n  getRoleLevel(user: UserProfile): number {\n    return ROLES[user.role].level;\n  }\n}\n\n// Instancia singleton\nexport const firebaseAuthService = new FirebaseAuthService();\n\n// Exportar para compatibilidad\nexport default firebaseAuthService; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/auth/supabaseClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/clinical/taxonomies.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/components/Layout.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1820,1869],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3052,3103],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":71,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":71,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3260,3312],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useState } from 'react';\nimport { Outlet, Link, useLocation } from 'react-router-dom';\n\nimport { AiDuxCareLogo } from '../../components/branding/AiDuxCareLogo';\nimport { ProfessionalRoleSelector, ProfessionalRole } from '../../components/professional/ProfessionalRoleSelector';\nimport { EnhancedAudioCapture } from '../../components/professional/EnhancedAudioCapture';\nimport OrganizationNavigation from '../../components/OrganizationNavigation';\n\nconst Layout = () => {\n  const [userMenuOpen, setUserMenuOpen] = useState(false);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [rightPanelCollapsed, setRightPanelCollapsed] = useState(false);\n  const [selectedRole, setSelectedRole] = useState<ProfessionalRole>('fisioterapeuta');\n  const [activeTool, setActiveTool] = useState('assistant');\n  const location = useLocation();\n  \n  // LIMPIO: Solo navegación esencial\n  const navigation = [\n    { name: 'Captura', href: '/professional-workflow', icon: 'microphone' },\n    { name: 'Pacientes', href: '/patients', icon: 'users' },\n    { name: 'Notas', href: '/notes', icon: 'document' },\n  ];\n\n  // Herramientas del panel derecho\n  const tools = [\n    { id: 'assistant', name: 'Asistente IA', icon: 'brain', active: activeTool === 'assistant' },\n    { id: 'audio', name: 'Captura Audio', icon: 'microphone', active: activeTool === 'audio' },\n    { id: 'history', name: 'Historial', icon: 'clock', active: activeTool === 'history' },\n    { id: 'settings', name: 'Configuración', icon: 'settings', active: activeTool === 'settings' },\n  ];\n\n  const isActive = (href: string) => location.pathname === href;\n\n  const handleRoleChange = (role: ProfessionalRole) => {\n    setSelectedRole(role);\n    // Aquí se puede agregar lógica adicional cuando cambie el rol\n    console.log('Rol profesional cambiado a:', role);\n  };\n\n  const handleToolChange = (toolId: string) => {\n    setActiveTool(toolId);\n  };\n\n  const renderRightPanelContent = () => {\n    switch (activeTool) {\n      case 'assistant':\n        return (\n          <div className=\"h-full flex items-center justify-center\">\n            <div className=\"text-center\">\n              <svg className=\"w-12 h-12 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" style={{ color: '#BDC3C7' }}>\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"/>\n              </svg>\n              <p className=\"text-sm\" style={{ color: '#BDC3C7' }}>\n                Asistente IA\n              </p>\n              <p className=\"text-xs mt-1\" style={{ color: '#BDC3C7' }}>\n                Próximamente\n              </p>\n            </div>\n          </div>\n        );\n      case 'audio':\n        return (\n          <EnhancedAudioCapture\n            onTranscriptionComplete={(segments) => {\n              console.log('Transcripción completada:', segments);\n              // Aquí se puede integrar con el sistema de notas o historial\n            }}\n            onTranscriptionUpdate={(segments) => {\n              console.log('Transcripción actualizada:', segments);\n            }}\n            className=\"h-full\"\n          />\n        );\n      case 'history':\n        return (\n          <div className=\"h-full flex items-center justify-center\">\n            <div className=\"text-center\">\n              <svg className=\"w-12 h-12 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" style={{ color: '#BDC3C7' }}>\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n              </svg>\n              <p className=\"text-sm\" style={{ color: '#BDC3C7' }}>\n                Historial de sesiones\n              </p>\n              <p className=\"text-xs mt-1\" style={{ color: '#BDC3C7' }}>\n                Próximamente\n              </p>\n            </div>\n          </div>\n        );\n      case 'settings':\n        return (\n          <div className=\"h-full flex items-center justify-center\">\n            <div className=\"text-center\">\n              <svg className=\"w-12 h-12 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" style={{ color: '#BDC3C7' }}>\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"/>\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"/>\n              </svg>\n              <p className=\"text-sm\" style={{ color: '#BDC3C7' }}>\n                Configuración\n              </p>\n              <p className=\"text-xs mt-1\" style={{ color: '#BDC3C7' }}>\n                Próximamente\n              </p>\n            </div>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\" style={{ backgroundColor: '#F7F7F7' }}>\n      {/* Organization Navigation */}\n      <OrganizationNavigation />\n      \n      {/* Top Navigation - Header Fijo */}\n      <header className=\"bg-white border-b flex-shrink-0\" style={{ borderColor: '#BDC3C7' }}>\n        <div className=\"max-w-full mx-auto px-4 sm:px-6 lg:px-8 py-3 flex items-center justify-between\">\n          {/* Logo y Toggle Sidebar */}\n          <div className=\"flex items-center space-x-4\">\n            <button\n              onClick={() => setSidebarCollapsed(!sidebarCollapsed)}\n              className=\"p-2 rounded-md hover:bg-gray-100 transition-colors\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" style={{ color: '#2C3E50' }}>\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 6h16M4 12h16M4 18h16\"/>\n              </svg>\n            </button>\n            <AiDuxCareLogo size=\"sm\" showText={true} />\n          </div>\n\n          {/* Navigation Central */}\n          <nav className=\"hidden md:flex space-x-6\">\n            {navigation.map((item) => (\n              <Link\n                key={item.name}\n                to={item.href}\n                className={`flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${\n                  isActive(item.href)\n                    ? 'text-white shadow-md'\n                    : 'text-gray-600 hover:bg-gray-100'\n                }`}\n                style={{\n                  backgroundColor: isActive(item.href) ? '#5DA5A3' : 'transparent',\n                  color: isActive(item.href) ? 'white' : '#2C3E50',\n                  fontFamily: 'Inter, sans-serif'\n                }}\n              >\n                {item.icon === 'microphone' && (\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"/>\n                  </svg>\n                )}\n                {item.icon === 'users' && (\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z\"/>\n                  </svg>\n                )}\n                {item.icon === 'document' && (\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"/>\n                  </svg>\n                )}\n                <span>{item.name}</span>\n              </Link>\n            ))}\n          </nav>\n\n          {/* User Menu y Toggle Right Panel */}\n          <div className=\"flex items-center space-x-3\">\n            <button\n              onClick={() => setRightPanelCollapsed(!rightPanelCollapsed)}\n              className=\"p-2 rounded-md hover:bg-gray-100 transition-colors\"\n            >\n              <div className=\"w-8 h-8 rounded-full flex items-center justify-center\" style={{ backgroundColor: '#A8E6CF' }}>\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" style={{ color: '#2C3E50' }}>\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"/>\n                </svg>\n              </div>\n              <span className=\"hidden md:block font-medium\" style={{ color: '#2C3E50', fontFamily: 'Inter, sans-serif' }}>\n                Usuario\n              </span>\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" style={{ color: '#BDC3C7' }}>\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 9l-7 7-7-7\"/>\n              </svg>\n            </button>            <div className=\"relative\">\n              <button\n                onClick={() => setUserMenuOpen(!userMenuOpen)}\n                className=\"flex items-center space-x-3 text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-400\"\n              >\n                <div className=\"w-8 h-8 rounded-full flex items-center justify-center\" style={{ backgroundColor: '#A8E6CF' }}>\n                  <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" style={{ color: '#2C3E50' }}>\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"/>\n                  </svg>\n                </div>\n                <span className=\"hidden md:block font-medium\" style={{ color: '#2C3E50', fontFamily: 'Inter, sans-serif' }}>\n                  Usuario\n                </span>\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" style={{ color: '#BDC3C7' }}>\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 9l-7 7-7-7\"/>\n                </svg>\n              </button>\n              {userMenuOpen && (\n                <div className=\"absolute right-0 mt-2 w-56 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5\">\n                  <div className=\"py-1\">\n                    <div className=\"px-4 py-2 text-sm border-b\" style={{ color: '#2C3E50', borderColor: '#BDC3C7' }}>\n                      <div className=\"font-medium\">Usuario</div>\n                      <div style={{ color: '#BDC3C7' }}>Profesional</div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content Area - 3 Paneles Horizontales */}\n      <div className=\"flex-1 flex overflow-hidden\">\n        {/* Panel Izquierdo - Sidebar */}\n        <div \n          className={`bg-white border-r transition-all duration-300 ease-in-out ${\n            sidebarCollapsed ? 'w-16' : 'w-64'\n          }`}\n          style={{ borderColor: '#BDC3C7' }}\n        >\n          <div className=\"p-4\">\n            {!sidebarCollapsed && (\n              <>\n                {/* Selector de Rol Profesional */}\n                <div className=\"mb-6\">\n                  <h3 className=\"text-sm font-semibold text-gray-600 mb-3\">ROL PROFESIONAL</h3>\n                  <ProfessionalRoleSelector\n                    selectedRole={selectedRole}\n                    onRoleChange={handleRoleChange}\n                  />\n                </div>\n\n                <div className=\"mb-6\">\n                  <h3 className=\"text-sm font-semibold text-gray-600 mb-3\">CONTROLES RÁPIDOS</h3>\n                  <div className=\"space-y-2\">\n                    <button className=\"w-full text-left px-3 py-2 rounded-lg text-sm hover:bg-gray-50 transition-colors\" style={{ color: '#2C3E50' }}>\n                      <div className=\"flex items-center space-x-2\">\n                        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"/>\n                        </svg>\n                        <span>Nueva Sesión</span>\n                      </div>\n                    </button>\n                    <button className=\"w-full text-left px-3 py-2 rounded-lg text-sm hover:bg-gray-50 transition-colors\" style={{ color: '#2C3E50' }}>\n                      <div className=\"flex items-center space-x-2\">\n                        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"/>\n                        </svg>\n                        <span>Plantillas</span>\n                      </div>\n                    </button>\n                    <button className=\"w-full text-left px-3 py-2 rounded-lg text-sm hover:bg-gray-50 transition-colors\" style={{ color: '#2C3E50' }}>\n                      <div className=\"flex items-center space-x-2\">\n                        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"/>\n                        </svg>\n                        <span>Calendario</span>\n                      </div>\n                    </button>\n                  </div>\n                </div>\n              </>\n            )}\n            \n            {!sidebarCollapsed && (\n              <div>\n                <h3 className=\"text-sm font-semibold text-gray-600 mb-3\">ESTADO DEL SISTEMA</h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-gray-500\">IA Local</span>\n                    <div className=\"w-2 h-2 rounded-full bg-green-400\"></div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-gray-500\">Audio</span>\n                    <div className=\"w-2 h-2 rounded-full bg-green-400\"></div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-gray-500\">Base de Datos</span>\n                    <div className=\"w-2 h-2 rounded-full bg-green-400\"></div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Panel Central - Contenido Principal */}\n        <div className=\"flex-1 flex flex-col overflow-hidden\">\n          <main className=\"flex-1 overflow-auto p-6\">\n            <Outlet />\n          </main>\n        </div>\n\n        {/* Panel Derecho - Información/Estado */}\n        <div \n          className={`bg-white border-l transition-all duration-300 ease-in-out ${\n            rightPanelCollapsed ? 'w-16' : 'w-80'\n          }`}\n          style={{ borderColor: '#BDC3C7' }}\n        >\n          {!rightPanelCollapsed && (\n            <>\n              {/* Tool Selector */}\n              <div className=\"p-4 border-b\" style={{ borderColor: '#BDC3C7' }}>\n                <h3 className=\"text-sm font-semibold text-gray-600 mb-3\">HERRAMIENTAS</h3>\n                <div className=\"space-y-2\">\n                  {tools.map((tool) => (\n                    <button\n                      key={tool.id}\n                      onClick={() => handleToolChange(tool.id)}\n                      className={`w-full text-left px-3 py-2 rounded-lg text-sm transition-colors ${\n                        tool.active \n                          ? 'bg-blue-50 text-blue-700' \n                          : 'hover:bg-gray-50'\n                      }`}\n                      style={{ color: tool.active ? '#1E40AF' : '#2C3E50' }}\n                    >\n                      <div className=\"flex items-center space-x-2\">\n                        {tool.icon === 'brain' && (\n                          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"/>\n                          </svg>\n                        )}\n                        {tool.icon === 'clock' && (\n                          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n                          </svg>\n                        )}\n                        {tool.icon === 'settings' && (\n                          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"/>\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"/>\n                          </svg>\n                        )}\n                        <span>{tool.name}</span>\n                      </div>\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Tool Content */}\n              <div className=\"flex-1 h-full\">\n                {renderRightPanelContent()}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Layout; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/config/env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/constants/analytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/dataSources/AuditedPatientDataSource.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/dataSources/AuditedVisitDataSource.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/dataSources/FormDataSource.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/dataSources/SuggestionFeedbackDataSource.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/dataSources/patientDataSourceFirestore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/dataSources/visitDataSourceFirestore.singleton.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/dataSources/visitDataSourceFirestore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":54,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { collection, doc, getDoc, getDocs, updateDoc, deleteDoc, Firestore, query, where, addDoc } from 'firebase/firestore';\n\nimport { db } from '../firebase/firebaseClient';\nimport { Visit, VisitSchema } from '../domain/visitType';\n\nexport class VisitDataSourceFirestore {\n  private db: Firestore;\n  constructor(firestore?: Firestore) {\n    this.db = firestore || db;\n  }\n\n  private get visitsCollection() {\n    return collection(this.db, 'visits');\n  }\n\n  /**\n   * Obtiene todas las visitas de un paciente\n   */\n  async getAllVisitsByPatient(patientId: string): Promise<Visit[]> {\n    const q = query(this.visitsCollection, where('patient_id', '==', patientId));\n    const snapshot = await getDocs(q);\n    const visits: Visit[] = [];\n    snapshot.forEach(docSnap => {\n      const data = docSnap.data();\n      try {\n        visits.push(VisitSchema.parse({\n          ...data,\n          id: docSnap.id,\n          created_at: data.created_at?.toString() || '',\n          updated_at: data.updated_at?.toString() || ''\n        }));\n      } catch (e) {\n        console.error(`Validation error for visit ${docSnap.id}:`, e);\n      }\n    });\n    return visits;\n  }\n\n  /**\n   * Obtiene una visita por su ID\n   */\n  async getVisitById(visitId: string): Promise<Visit | null> {\n    const visitDoc = doc(this.visitsCollection, visitId);\n    const docSnap = await getDoc(visitDoc);\n    if (!docSnap.exists()) return null;\n    const data = docSnap.data();\n    try {\n      return VisitSchema.parse({\n        ...data,\n        id: docSnap.id,\n        created_at: data.created_at?.toString() || '',\n        updated_at: data.updated_at?.toString() || ''\n      });\n    } catch (e) {\n      // Manejo de error estándar\n      return null;\n    }\n  }\n\n  /**\n   * Crea una nueva visita\n   */\n  async createVisit(visitData: Omit<Visit, 'id' | 'created_at' | 'updated_at'>, patientId: string): Promise<Visit> {\n    const now = new Date().toISOString();\n    const visit: Omit<Visit, 'id'> = {\n      ...visitData,\n      patient_id: patientId,\n      created_at: now,\n      updated_at: now\n    };\n    const docRef = await addDoc(this.visitsCollection, visit);\n    return {\n      ...visit,\n      id: docRef.id\n    } as Visit;\n  }\n\n  /**\n   * Actualiza una visita existente\n   */\n  async updateVisit(visitId: string, visitData: Partial<Omit<Visit, 'id' | 'created_at' | 'updated_at'>>): Promise<Visit> {\n    const visitDoc = doc(this.visitsCollection, visitId);\n    const now = new Date().toISOString();\n    await updateDoc(visitDoc, { ...visitData, updated_at: now });\n    const updatedSnap = await getDoc(visitDoc);\n    if (!updatedSnap.exists()) throw new Error('Visita no encontrada');\n    const data = updatedSnap.data();\n    return VisitSchema.parse({\n      ...data,\n      id: updatedSnap.id,\n      created_at: data.created_at?.toString() || '',\n      updated_at: data.updated_at?.toString() || ''\n    });\n  }\n\n  /**\n   * Elimina una visita\n   */\n  async deleteVisit(visitId: string): Promise<boolean> {\n    const visitDoc = doc(this.visitsCollection, visitId);\n    await deleteDoc(visitDoc);\n    return true;\n  }\n}\n// Instancia singleton para producción: ver visitDataSourceFirestore.singleton.ts ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/domain/organizationType.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/domain/patientType.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":303,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8047,8050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8047,8050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/domain/professionalType.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/domain/visitType.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/emr/MedicationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/emr/SoapNoteService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/emr/__tests__/medications.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/__tests__/__fixtures__/internal.mock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/__tests__/adapters.integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":172,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5687,5690],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5687,5690],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":261,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":261,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9426,9503],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":328,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":328,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12405,12408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12405,12408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":344,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12863,12866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12863,12866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview FHIR Adapters Integration Tests - End-to-End\n * @version 1.0.0\n * @author AiDuxCare Development Team\n * \n * These tests verify the complete round-trip: internal → toFhir → validate → makeBundle → fromFhir → internal\n * Including profile validation (CA Core / US Core) and deterministic UUID references.\n */\n\nimport { describe, it, expect } from 'vitest';\n\nimport { \n  toFhir, \n  toFhirEncounter, \n  toFhirObservation,\n  fromFhir, \n  validate, \n  makeBundle \n} from '../index';\n\n// Test data fixtures\nconst testPatient = {\n  id: 'patient-123',\n  firstName: 'Juan',\n  lastName: 'Pérez',\n  dateOfBirth: '1985-03-15',\n  gender: 'male' as const,\n  email: 'juan.perez@email.com',\n  phone: '+34 600 123 456',\n  address: {\n    street: 'Calle Mayor 123',\n    city: 'Madrid',\n    state: 'Madrid',\n    zipCode: '28001',\n    country: 'US'\n  },\n  medicalRecordNumber: 'MRN-001',\n  insuranceNumber: 'INS-001',\n  ssn: '12345678A',\n  isActive: true\n};\n\nconst testPatientCA = {\n  id: 'patient-ca-123',\n  firstName: 'Marie',\n  lastName: 'Dubois',\n  dateOfBirth: '1985-03-15',\n  gender: 'female' as const,\n  email: 'marie.dubois@email.com',\n  phone: '+1 514 600 1234',\n  address: {\n    street: '123 Main Street',\n    city: 'Montreal',\n    state: 'Quebec',\n    zipCode: 'H2X 1Y7',\n    country: 'CA'\n  },\n  medicalRecordNumber: 'MRN-CA-001',\n  insuranceNumber: 'INS-CA-001',\n  ssn: '123456789',\n  isActive: true\n};\n\nconst testEncounter = {\n  id: 'encounter-456',\n  patientId: 'patient-123',\n  startDate: '2024-12-19T10:00:00Z',\n  endDate: '2024-12-19T11:00:00Z',\n  type: 'emergency' as const,\n  status: 'completed' as const,\n  reason: 'Dolor agudo en el pecho',\n  providerId: 'provider-789',\n  location: 'Urgencias Hospital Central'\n};\n\nconst testObservation = {\n  id: 'observation-789',\n  patientId: 'patient-123',\n  encounterId: 'encounter-456',\n  type: 'vital_signs' as const,\n  value: 120,\n  unit: 'mmHg',\n  date: '2024-12-19T10:15:00Z',\n  category: 'vital-signs',\n  code: '85354-9',\n  codeSystem: 'http://loinc.org',\n  displayName: 'Blood pressure systolic',\n  status: 'final',\n  effectiveDate: '2024-12-19T10:15:00Z'\n};\n\ndescribe('FHIR Adapters Integration - End-to-End', () => {\n  describe('Patient Round-Trip', () => {\n    it('should preserve critical data in Patient round-trip without loss', () => {\n      // Internal → FHIR\n      const fhirPatient = toFhir(testPatient, { profile: 'US_CORE' });\n      \n      // Validate FHIR resource\n      const validationResult = validate(fhirPatient, 'US_CORE');\n      expect(validationResult.isValid).toBe(true);\n      \n      // FHIR → Internal\n      const restoredPatient = fromFhir(fhirPatient);\n      \n      // Verify critical data preservation\n      expect(restoredPatient.id).toBe(testPatient.id);\n      expect(restoredPatient.firstName).toBe(testPatient.firstName);\n      expect(restoredPatient.lastName).toBe(testPatient.lastName);\n      expect(restoredPatient.dateOfBirth).toBe(testPatient.dateOfBirth);\n      expect(restoredPatient.gender).toBe(testPatient.gender);\n      expect(restoredPatient.email).toBe(testPatient.email);\n      expect(restoredPatient.phone).toBe(testPatient.phone);\n      expect(restoredPatient.address?.city).toBe(testPatient.address.city);\n      expect(restoredPatient.address?.country).toBe(testPatient.address.country);\n      expect(restoredPatient.medicalRecordNumber).toBe(testPatient.medicalRecordNumber);\n    });\n\n    it('should work with CA Core profile', () => {\n      const fhirPatient = toFhir(testPatientCA, { profile: 'CA_CORE' });\n      const validationResult = validate(fhirPatient, 'CA_CORE');\n      expect(validationResult.isValid).toBe(true);\n      \n      const restoredPatient = fromFhir(fhirPatient);\n      expect(restoredPatient.id).toBe(testPatientCA.id);\n      expect(restoredPatient.firstName).toBe(testPatientCA.firstName);\n    });\n  });\n\n  describe('Encounter Round-Trip with Class Mapping', () => {\n    it('should map emergency → EMER class correctly', () => {\n      const fhirEncounter = toFhirEncounter(testEncounter, { profile: 'US_CORE' });\n      \n      // Verify class mapping\n      expect(fhirEncounter.class?.code).toBe('EMER');\n      expect(fhirEncounter.class?.display).toBe('Emergency');\n      expect(fhirEncounter.class?.system).toBe('http://terminology.hl7.org/CodeSystem/v3-ActCode');\n      \n      // Validate\n      const validationResult = validate(fhirEncounter, 'US_CORE');\n      expect(validationResult.isValid).toBe(true);\n      \n      // Round-trip\n      const restoredEncounter = fromFhir(fhirEncounter);\n      expect(restoredEncounter.id).toBe(testEncounter.id);\n      expect(restoredEncounter.type).toBe(testEncounter.type);\n      expect(restoredEncounter.reason).toBe(testEncounter.reason);\n    });\n\n    it('should map different encounter types correctly', () => {\n      const encounterTypes = [\n        { type: 'inpatient' as const, expectedClass: 'IMP' },\n        { type: 'outpatient' as const, expectedClass: 'AMB' },\n        { type: 'home' as const, expectedClass: 'HH' },\n        { type: 'virtual' as const, expectedClass: 'VR' }\n      ];\n\n      encounterTypes.forEach(({ type, expectedClass }) => {\n        const testEnc = { ...testEncounter, type };\n        const fhirEncounter = toFhirEncounter(testEnc, { profile: 'US_CORE' });\n        \n        expect(fhirEncounter.class?.code).toBe(expectedClass);\n        \n        // Should validate successfully\n        const validationResult = validate(fhirEncounter, 'US_CORE');\n        expect(validationResult.isValid).toBe(true);\n      });\n    });\n\n    it('should fail validation for malformed encounter', () => {\n      const malformedEncounter = {\n        ...testEncounter,\n        type: 'invalid_type' as any\n      };\n\n      expect(() => {\n        toFhirEncounter(malformedEncounter, { profile: 'US_CORE' });\n      }).toThrow();\n    });\n  });\n\n  describe('Observation Round-Trip', () => {\n    it('should preserve vital signs data correctly', () => {\n      const fhirObservation = toFhirObservation(testObservation, { profile: 'US_CORE' });\n      \n      // Validate\n      const validationResult = validate(fhirObservation, 'US_CORE');\n      expect(validationResult.isValid).toBe(true);\n      \n      // Round-trip\n      const restoredObservation = fromFhir(fhirObservation);\n      expect(restoredObservation.id).toBe(testObservation.id);\n      expect(restoredObservation.value).toBe(testObservation.value);\n      expect(restoredObservation.unit).toBe(testObservation.unit);\n      expect(restoredObservation.category).toBe(testObservation.category);\n      expect(restoredObservation.code).toBe(testObservation.code);\n    });\n\n    it('should handle text observations correctly', () => {\n      const textObservation = {\n        ...testObservation,\n        type: 'text' as const,\n        textValue: 'Paciente presenta dolor agudo en región lumbar',\n        value: undefined,\n        unit: undefined\n      };\n\n      const fhirObservation = toFhirObservation(textObservation, { profile: 'US_CORE' });\n      const validationResult = validate(fhirObservation, 'US_CORE');\n      expect(validationResult.isValid).toBe(true);\n      \n      const restoredObservation = fromFhir(fhirObservation);\n      expect(restoredObservation.textValue).toBe(textObservation.textValue);\n    });\n  });\n\n  describe('Bundle Operations with Validation', () => {\n    it('should create valid bundle with all resources', () => {\n      // Convert all resources to FHIR\n      const fhirPatient = toFhir(testPatient, { profile: 'US_CORE' });\n      const fhirEncounter = toFhirEncounter(testEncounter, { profile: 'US_CORE' });\n      const fhirObservation = toFhirObservation(testObservation, { profile: 'US_CORE' });\n      \n      // Validate individual resources\n      expect(validate(fhirPatient, 'US_CORE').isValid).toBe(true);\n      expect(validate(fhirEncounter, 'US_CORE').isValid).toBe(true);\n      expect(validate(fhirObservation, 'US_CORE').isValid).toBe(true);\n      \n      // Create bundle\n      const bundle = makeBundle([fhirPatient, fhirEncounter, fhirObservation], 'US_CORE');\n      \n      expect(bundle.resourceType).toBe('Bundle');\n      expect(bundle.type).toBe('document');\n      expect(bundle.entry).toHaveLength(3);\n      \n      // Verify bundle entries reference the correct resources\n      const patientEntry = bundle.entry?.find(e => e.resource?.resourceType === 'Patient');\n      const encounterEntry = bundle.entry?.find(e => e.resource?.resourceType === 'Encounter');\n      const observationEntry = bundle.entry?.find(e => e.resource?.resourceType === 'Observation');\n      \n      expect(patientEntry).toBeDefined();\n      expect(encounterEntry).toBeDefined();\n      expect(observationEntry).toBeDefined();\n    });\n\n    it('should fail bundle creation if any resource fails validation', () => {\n      const validPatient = toFhir(testPatient, { profile: 'US_CORE' });\n      \n      // Create a valid FHIR encounter but with invalid class code that will fail validation\n      const fhirEncounter = toFhirEncounter(testEncounter, { profile: 'US_CORE' });\n      const invalidFhirEncounter = {\n        ...fhirEncounter,\n        class: {\n          system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n          code: 'INVALID_CODE', // This will fail validation\n          display: 'Invalid Display'\n        }\n      };\n\n      // Debug: Check what the validation actually returns\n      const validationResult = validate(invalidFhirEncounter, 'US_CORE');\n      console.log('Validation result:', JSON.stringify(validationResult, null, 2));\n      \n      // This should fail validation\n      expect(validationResult.isValid).toBe(false);\n      expect(validationResult.errors.length).toBeGreaterThan(0);\n\n      // Bundle creation should also fail\n      expect(() => {\n        makeBundle([validPatient, invalidFhirEncounter], 'US_CORE');\n      }).toThrow();\n    });\n\n    it('should work with CA Core profile', () => {\n      const fhirPatient = toFhir(testPatientCA, { profile: 'CA_CORE' });\n      const fhirEncounter = toFhirEncounter(testEncounter, { profile: 'CA_CORE' });\n      \n      const bundle = makeBundle([fhirPatient, fhirEncounter], 'CA_CORE');\n      expect(bundle.resourceType).toBe('Bundle');\n      expect(bundle.type).toBe('document');\n    });\n  });\n\n  describe('Deterministic UUID References', () => {\n    it('should generate deterministic UUIDs for references', () => {\n      const fhirEncounter = toFhirEncounter(testEncounter, { profile: 'US_CORE' });\n      \n      // Check that references use literal format (Patient/patient-123)\n      if (fhirEncounter.subject?.reference) {\n        expect(fhirEncounter.subject.reference).toMatch(/^Patient\\//);\n      }\n      if (fhirEncounter.encounter?.reference) {\n        expect(fhirEncounter.encounter.reference).toMatch(/^Encounter\\//);\n      }\n    });\n\n    it('should maintain referential integrity in round-trip', () => {\n      const fhirPatient = toFhir(testPatient, { profile: 'US_CORE' });\n      const fhirEncounter = toFhirEncounter(testEncounter, { profile: 'US_CORE' });\n      const fhirObservation = toFhirObservation(testObservation, { profile: 'US_CORE' });\n      \n      // Create bundle\n      const bundle = makeBundle([fhirPatient, fhirEncounter, fhirObservation], 'US_CORE');\n      \n      // Extract resources from bundle\n      const patientFromBundle = bundle.entry?.find(e => e.resource?.resourceType === 'Patient')?.resource;\n      const encounterFromBundle = bundle.entry?.find(e => e.resource?.resourceType === 'Encounter')?.resource;\n      const observationFromBundle = bundle.entry?.find(e => e.resource?.resourceType === 'Observation')?.resource;\n      \n      expect(patientFromBundle).toBeDefined();\n      expect(encounterFromBundle).toBeDefined();\n      expect(observationFromBundle).toBeDefined();\n      \n      // Round-trip should preserve references\n      const restoredPatient = fromFhir(patientFromBundle!);\n      const restoredEncounter = fromFhir(encounterFromBundle!);\n      const restoredObservation = fromFhir(observationFromBundle!);\n      \n      expect(restoredPatient.id).toBe(testPatient.id);\n      expect(restoredEncounter.id).toBe(testEncounter.id);\n      expect(restoredObservation.id).toBe(testObservation.id);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should fail validation with clear error messages for invalid resources', () => {\n      const invalidPatient = {\n        ...testPatient,\n        gender: 'invalid_gender' as any\n      };\n\n      expect(() => {\n        toFhir(invalidPatient, { profile: 'US_CORE' });\n      }).toThrow();\n    });\n\n    it('should fail bundle creation with clear error for invalid entries', () => {\n      const validPatient = toFhir(testPatient, { profile: 'US_CORE' });\n      const invalidResource = {\n        resourceType: 'InvalidResource',\n        id: 'invalid-123'\n      };\n\n      expect(() => {\n        makeBundle([validPatient, invalidResource as any], 'US_CORE');\n      }).toThrow();\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/__tests__/adapters.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4591,4594],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4591,4594],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":528,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":528,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17336,17339],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17336,17339],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":540,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":540,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17692,17695],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17692,17695],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\n\nimport { \n  convertPatientToFhir, \n  convertEncounterToFhir, \n  convertObservationToFhir,\n  convertClinicalAnalysisToFhir,\n  type InternalPatient,\n  type InternalEncounter,\n  type InternalObservation\n} from '../adapters/internalToFhir';\nimport { \n  convertFhirToPatient, \n  convertFhirToEncounter, \n  convertFhirToObservation,\n  convertFhirToClinicalData,\n  validateFhirResource\n} from '../adapters/fhirToInternal';\nimport type { FhirPatient, FhirEncounter, FhirObservation } from '../types';\n\ndescribe('FHIR Adapters - Internal to FHIR Conversion', () => {\n  describe('convertPatientToFhir', () => {\n    it('should convert internal patient to FHIR Patient', () => {\n      const internalPatient: InternalPatient = {\n        id: 'patient-123',\n        firstName: 'John',\n        lastName: 'Doe',\n        dateOfBirth: '1990-01-01',\n        gender: 'male',\n        phone: '+1-555-123-4567',\n        email: 'john.doe@email.com',\n        address: {\n          street: '123 Main St',\n          city: 'Anytown',\n          state: 'ST',\n          zipCode: '12345',\n          country: 'US'\n        },\n        ssn: '123-45-6789',\n        isActive: true\n      };\n\n      const fhirPatient = convertPatientToFhir(internalPatient);\n\n      expect(fhirPatient.resourceType).toBe('Patient');\n      expect(fhirPatient.id).toBe('patient-123');\n      expect(fhirPatient.active).toBe(true);\n      expect(fhirPatient.name?.[0]?.family).toBe('Doe');\n      expect(fhirPatient.name?.[0]?.given).toEqual(['John']);\n      expect(fhirPatient.birthDate).toBe('1990-01-01');\n      expect(fhirPatient.gender).toBe('male');\n      expect(fhirPatient.telecom?.[0]?.value).toBe('+1-555-123-4567');\n      expect(fhirPatient.telecom?.[1]?.value).toBe('john.doe@email.com');\n      expect(fhirPatient.address?.[0]?.line).toEqual(['123 Main St']);\n      expect(fhirPatient.address?.[0]?.city).toBe('Anytown');\n      expect(fhirPatient.identifier?.[0]?.value).toBe('123-45-6789');\n    });\n\n    it('should include CA Core profile when specified', () => {\n      const internalPatient: InternalPatient = {\n        id: 'patient-123',\n        firstName: 'Jane',\n        lastName: 'Smith',\n        dateOfBirth: '1985-05-15',\n        gender: 'female',\n        isActive: true\n      };\n\n      const fhirPatient = convertPatientToFhir(internalPatient, { profile: 'ca-core' });\n\n      expect(fhirPatient.meta?.profile).toContain('http://hl7.org/fhir/StructureDefinition/ca-core-patient');\n    });\n\n    it('should include US Core profile when specified', () => {\n      const internalPatient: InternalPatient = {\n        id: 'patient-123',\n        firstName: 'Bob',\n        lastName: 'Johnson',\n        dateOfBirth: '1975-12-20',\n        gender: 'male',\n        isActive: true\n      };\n\n      const fhirPatient = convertPatientToFhir(internalPatient, { profile: 'us-core' });\n\n      expect(fhirPatient.meta?.profile).toContain('http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient');\n    });\n  });\n\n  describe('convertEncounterToFhir', () => {\n    it('should convert internal encounter to FHIR Encounter', () => {\n      const internalEncounter: InternalEncounter = {\n        id: 'encounter-123',\n        patientId: 'patient-123',\n        startDate: '2025-01-20T09:00:00Z',\n        endDate: '2025-01-20T10:00:00Z',\n        type: 'ambulatory',\n        status: 'finished',\n        reason: 'Annual checkup',\n        providerId: 'provider-456'\n      };\n\n      const fhirEncounter = convertEncounterToFhir(internalEncounter);\n\n      expect(fhirEncounter.resourceType).toBe('Encounter');\n      expect(fhirEncounter.id).toBe('encounter-123');\n      expect(fhirEncounter.status).toBe('finished');\n      expect(fhirEncounter.class.code).toBe('AMB');\n      expect(fhirEncounter.subject?.reference).toBe('Patient/patient-123');\n      expect(fhirEncounter.period?.start).toBe('2025-01-20T09:00:00Z');\n      expect(fhirEncounter.period?.end).toBe('2025-01-20T10:00:00Z');\n      expect(fhirEncounter.reasonCode?.[0]?.text).toBe('Annual checkup');\n    });\n\n    it('should map encounter types correctly', () => {\n      const typeMappings = [\n        { internal: 'ambulatory', expected: 'AMB' },\n        { internal: 'emergency', expected: 'EMER' },\n        { internal: 'inpatient', expected: 'IMP' },\n        { internal: 'outpatient', expected: 'AMB' }\n      ];\n\n      typeMappings.forEach(({ internal, expected }) => {\n        const internalEncounter: InternalEncounter = {\n          id: 'test',\n          patientId: 'patient-123',\n          startDate: '2025-01-20T09:00:00Z',\n          type: internal as any,\n          status: 'finished',\n          providerId: 'provider-456'\n        };\n\n        const fhirEncounter = convertEncounterToFhir(internalEncounter);\n        expect(fhirEncounter.class.code).toBe(expected);\n      });\n    });\n  });\n\n  describe('convertObservationToFhir', () => {\n    it('should convert internal observation to FHIR Observation', () => {\n      const internalObservation: InternalObservation = {\n        id: 'obs-123',\n        patientId: 'patient-123',\n        encounterId: 'encounter-123',\n        type: 'vital_signs',\n        code: '8867-4',\n        codeSystem: 'http://loinc.org',\n        displayName: 'Heart rate',\n        value: 72,\n        unit: 'beats/min',\n        status: 'final',\n        effectiveDate: '2025-01-20T09:30:00Z',\n        category: 'vital-signs'\n      };\n\n      const fhirObservation = convertObservationToFhir(internalObservation);\n\n      expect(fhirObservation.resourceType).toBe('Observation');\n      expect(fhirObservation.id).toBe('obs-123');\n      expect(fhirObservation.status).toBe('final');\n      expect(fhirObservation.code.coding[0].code).toBe('8867-4');\n      expect(fhirObservation.code.coding[0].system).toBe('http://loinc.org');\n      expect(fhirObservation.code.coding[0].display).toBe('Heart rate');\n      expect(fhirObservation.subject?.reference).toBe('Patient/patient-123');\n      expect(fhirObservation.encounter?.reference).toBe('Encounter/encounter-123');\n      expect(fhirObservation.valueQuantity?.value).toBe(72);\n      expect(fhirObservation.valueQuantity?.unit).toBe('beats/min');\n      expect(fhirObservation.effectiveDateTime).toBe('2025-01-20T09:30:00Z');\n    });\n\n    it('should handle text observations correctly', () => {\n      const internalObservation: InternalObservation = {\n        id: 'obs-text-123',\n        patientId: 'patient-123',\n        type: 'text',\n        code: '75275-8',\n        codeSystem: 'http://loinc.org',\n        displayName: 'Pain assessment',\n        textValue: 'Moderate pain in lower back',\n        status: 'final',\n        effectiveDate: '2025-01-20T09:30:00Z'\n      };\n\n      const fhirObservation = convertObservationToFhir(internalObservation);\n\n      expect(fhirObservation.valueString).toBe('Moderate pain in lower back');\n      expect(fhirObservation.valueQuantity).toBeUndefined();\n    });\n\n    it('should categorize vital signs correctly', () => {\n      const internalObservation: InternalObservation = {\n        id: 'vital-123',\n        patientId: 'patient-123',\n        type: 'vital_signs',\n        code: '85354-9',\n        codeSystem: 'http://loinc.org',\n        displayName: 'Blood pressure',\n        value: 120,\n        unit: 'mmHg',\n        status: 'final',\n        effectiveDate: '2025-01-20T09:30:00Z',\n        category: 'vital-signs'\n      };\n\n      const fhirObservation = convertObservationToFhir(internalObservation);\n\n      expect(fhirObservation.category?.[0]?.coding[0]?.code).toBe('vital-signs');\n      expect(fhirObservation.category?.[0]?.coding[0]?.system).toBe('http://terminology.hl7.org/CodeSystem/observation-category');\n    });\n  });\n\n  describe('convertClinicalAnalysisToFhir', () => {\n    it('should convert clinical analysis result to FHIR bundle', () => {\n      const clinicalResult = {\n        patient: {\n          id: 'patient-123',\n          firstName: 'John',\n          lastName: 'Doe',\n          dateOfBirth: '1990-01-01',\n          gender: 'male',\n          isActive: true\n        },\n        encounter: {\n          id: 'encounter-123',\n          patientId: 'patient-123',\n          startDate: '2025-01-20T09:00:00Z',\n          type: 'ambulatory',\n          status: 'finished',\n          providerId: 'provider-456'\n        },\n        observations: [\n          {\n            id: 'obs-123',\n            patientId: 'patient-123',\n            encounterId: 'encounter-123',\n            type: 'vital_signs',\n            code: '8867-4',\n            codeSystem: 'http://loinc.org',\n            displayName: 'Heart rate',\n            value: 72,\n            unit: 'beats/min',\n            status: 'final',\n            effectiveDate: '2025-01-20T09:30:00Z'\n          }\n        ]\n      };\n\n      const fhirBundle = convertClinicalAnalysisToFhir(clinicalResult);\n\n      expect(fhirBundle.patient.resourceType).toBe('Patient');\n      expect(fhirBundle.encounter.resourceType).toBe('Encounter');\n      expect(fhirBundle.observations).toHaveLength(1);\n      expect(fhirBundle.observations[0].resourceType).toBe('Observation');\n    });\n  });\n});\n\ndescribe('FHIR Adapters - FHIR to Internal Conversion', () => {\n  describe('convertFhirToPatient', () => {\n    it('should convert FHIR Patient to internal patient', () => {\n      const fhirPatient: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123',\n        active: true,\n        name: [\n          {\n            use: 'official',\n            family: 'Doe',\n            given: ['John']\n          }\n        ],\n        gender: 'male',\n        birthDate: '1990-01-01',\n        telecom: [\n          {\n            system: 'phone',\n            value: '+1-555-123-4567',\n            use: 'home'\n          },\n          {\n            system: 'email',\n            value: 'john.doe@email.com',\n            use: 'home'\n          }\n        ],\n        address: [\n          {\n            use: 'home',\n            type: 'physical',\n            line: ['123 Main St'],\n            city: 'Anytown',\n            state: 'ST',\n            postalCode: '12345',\n            country: 'US'\n          }\n        ],\n        identifier: [\n          {\n            system: 'http://hl7.org/fhir/sid/us-ssn',\n            value: '123-45-6789'\n          }\n        ]\n      };\n\n      const internalPatient = convertFhirToPatient(fhirPatient);\n\n      expect(internalPatient.id).toBe('patient-123');\n      expect(internalPatient.firstName).toBe('John');\n      expect(internalPatient.lastName).toBe('Doe');\n      expect(internalPatient.dateOfBirth).toBe('1990-01-01');\n      expect(internalPatient.gender).toBe('male');\n      expect(internalPatient.phone).toBe('+1-555-123-4567');\n      expect(internalPatient.email).toBe('john.doe@email.com');\n      expect(internalPatient.address?.street).toBe('123 Main St');\n      expect(internalPatient.address?.city).toBe('Anytown');\n      expect(internalPatient.ssn).toBe('123-45-6789');\n      expect(internalPatient.isActive).toBe(true);\n    });\n  });\n\n  describe('convertFhirToEncounter', () => {\n    it('should convert FHIR Encounter to internal encounter', () => {\n      const fhirEncounter: FhirEncounter = {\n        resourceType: 'Encounter',\n        id: 'encounter-123',\n        status: 'finished',\n        class: {\n          system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n          code: 'AMB',\n          display: 'Ambulatory'\n        },\n        subject: {\n          reference: 'Patient/patient-123'\n        },\n        period: {\n          start: '2025-01-20T09:00:00Z',\n          end: '2025-01-20T10:00:00Z'\n        },\n        reasonCode: [\n          {\n            text: 'Annual checkup'\n          }\n        ]\n      };\n\n      const internalEncounter = convertFhirToEncounter(fhirEncounter);\n\n      expect(internalEncounter.id).toBe('encounter-123');\n      expect(internalEncounter.patientId).toBe('patient-123');\n      expect(internalEncounter.startDate).toBe('2025-01-20T09:00:00Z');\n      expect(internalEncounter.endDate).toBe('2025-01-20T10:00:00Z');\n      expect(internalEncounter.type).toBe('ambulatory');\n      expect(internalEncounter.status).toBe('finished');\n      expect(internalEncounter.reason).toBe('Annual checkup');\n    });\n  });\n\n  describe('convertFhirToObservation', () => {\n    it('should convert FHIR Observation to internal observation', () => {\n      const fhirObservation: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'obs-123',\n        status: 'final',\n        code: {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '8867-4',\n              display: 'Heart rate'\n            }\n          ]\n        },\n        subject: {\n          reference: 'Patient/patient-123'\n        },\n        encounter: {\n          reference: 'Encounter/encounter-123'\n        },\n        valueQuantity: {\n          value: 72,\n          unit: 'beats/min',\n          system: 'http://unitsofmeasure.org',\n          code: '/min'\n        },\n        effectiveDateTime: '2025-01-20T09:30:00Z',\n        category: [\n          {\n            coding: [\n              {\n                system: 'http://terminology.hl7.org/CodeSystem/observation-category',\n                code: 'vital-signs',\n                display: 'Vital Signs'\n              }\n            ]\n          }\n        ]\n      };\n\n      const internalObservation = convertFhirToObservation(fhirObservation);\n\n      expect(internalObservation.id).toBe('obs-123');\n      expect(internalObservation.patientId).toBe('patient-123');\n      expect(internalObservation.encounterId).toBe('encounter-123');\n      expect(internalObservation.type).toBe('vital_signs');\n      expect(internalObservation.code).toBe('8867-4');\n      expect(internalObservation.codeSystem).toBe('http://loinc.org');\n      expect(internalObservation.displayName).toBe('Heart rate');\n      expect(internalObservation.value).toBe(72);\n      expect(internalObservation.unit).toBe('beats/min');\n      expect(internalObservation.status).toBe('final');\n      expect(internalObservation.effectiveDate).toBe('2025-01-20T09:30:00Z');\n      expect(internalObservation.category).toBe('vital-signs');\n    });\n\n    it('should handle text observations correctly', () => {\n      const fhirObservation: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'obs-text-123',\n        status: 'final',\n        code: {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '75275-8',\n              display: 'Pain assessment'\n            }\n          ]\n        },\n        subject: {\n          reference: 'Patient/patient-123'\n        },\n        valueString: 'Moderate pain in lower back',\n        effectiveDateTime: '2025-01-20T09:30:00Z'\n      };\n\n      const internalObservation = convertFhirToObservation(fhirObservation);\n\n      expect(internalObservation.textValue).toBe('Moderate pain in lower back');\n      expect(internalObservation.value).toBeUndefined();\n      expect(internalObservation.unit).toBeUndefined();\n    });\n  });\n\n  describe('convertFhirToClinicalData', () => {\n    it('should convert FHIR bundle to internal clinical data', () => {\n      const fhirResources = {\n        patient: {\n          resourceType: 'Patient',\n          id: 'patient-123',\n          active: true,\n          name: [\n            {\n              use: 'official',\n              family: 'Doe',\n              given: ['John']\n            }\n          ]\n        } as FhirPatient,\n        encounter: {\n          resourceType: 'Encounter',\n          id: 'encounter-123',\n          status: 'finished',\n          class: {\n            system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n            code: 'AMB',\n            display: 'Ambulatory'\n          },\n          subject: {\n            reference: 'Patient/patient-123'\n          }\n        } as FhirEncounter,\n        observations: [\n          {\n            resourceType: 'Observation',\n            id: 'obs-123',\n            status: 'final',\n            code: {\n              coding: [\n                {\n                  system: 'http://loinc.org',\n                  code: '8867-4',\n                  display: 'Heart rate'\n                }\n              ]\n            },\n            subject: {\n              reference: 'Patient/patient-123'\n            },\n            valueQuantity: {\n              value: 72,\n              unit: 'beats/min'\n            }\n          } as FhirObservation\n        ]\n      };\n\n      const internalData = convertFhirToClinicalData(fhirResources);\n\n      expect(internalData.patient.id).toBe('patient-123');\n      expect(internalData.encounter.id).toBe('encounter-123');\n      expect(internalData.observations).toHaveLength(1);\n      expect(internalData.observations[0].id).toBe('obs-123');\n    });\n  });\n\n  describe('validateFhirResource', () => {\n    it('should validate valid FHIR resources', () => {\n      const validPatient: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123',\n        active: true,\n        name: [{\n          family: 'Doe',\n          given: ['John']\n        }]\n      };\n\n      const result = validateFhirResource(validPatient);\n\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should detect invalid resource types', () => {\n      const invalidResource = {\n        resourceType: 'InvalidResource',\n        id: 'test-123'\n      } as any;\n\n      const result = validateFhirResource(invalidResource);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('Unsupported resource type: InvalidResource');\n    });\n\n    it('should detect missing required fields', () => {\n      const invalidPatient = {\n        resourceType: 'Patient',\n        // Missing id\n      } as any;\n\n      const result = validateFhirResource(invalidPatient);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('Missing required field: id');\n    });\n  });\n});\n\ndescribe('FHIR Adapters - Round-trip Tests', () => {\n  it('should convert Patient internal → FHIR → internal without data loss', () => {\n    const originalPatient: InternalPatient = {\n      id: 'patient-123',\n      firstName: 'John',\n      lastName: 'Doe',\n      dateOfBirth: '1990-01-01',\n      gender: 'male',\n      phone: '+1-555-123-4567',\n      email: 'john.doe@email.com',\n      address: {\n        street: '123 Main St',\n        city: 'Anytown',\n        state: 'ST',\n        zipCode: '12345',\n        country: 'US'\n      },\n      ssn: '123-45-6789',\n      isActive: true\n    };\n\n    const fhirPatient = convertPatientToFhir(originalPatient);\n    const roundTripPatient = convertFhirToPatient(fhirPatient);\n\n    expect(roundTripPatient.id).toBe(originalPatient.id);\n    expect(roundTripPatient.firstName).toBe(originalPatient.firstName);\n    expect(roundTripPatient.lastName).toBe(originalPatient.lastName);\n    expect(roundTripPatient.dateOfBirth).toBe(originalPatient.dateOfBirth);\n    expect(roundTripPatient.gender).toBe(originalPatient.gender);\n    expect(roundTripPatient.phone).toBe(originalPatient.phone);\n    expect(roundTripPatient.email).toBe(originalPatient.email);\n    expect(roundTripPatient.address?.street).toBe(originalPatient.address?.street);\n    expect(roundTripPatient.address?.city).toBe(originalPatient.address?.city);\n    expect(roundTripPatient.ssn).toBe(originalPatient.ssn);\n    expect(roundTripPatient.isActive).toBe(originalPatient.isActive);\n  });\n\n  it('should convert Encounter internal → FHIR → internal without data loss', () => {\n    const originalEncounter: InternalEncounter = {\n      id: 'encounter-123',\n      patientId: 'patient-123',\n      startDate: '2025-01-20T09:00:00Z',\n      endDate: '2025-01-20T10:00:00Z',\n      type: 'ambulatory',\n      status: 'finished',\n      reason: 'Annual checkup',\n      providerId: 'provider-456'\n    };\n\n    const fhirEncounter = convertEncounterToFhir(originalEncounter);\n    const roundTripEncounter = convertFhirToEncounter(fhirEncounter);\n\n    expect(roundTripEncounter.id).toBe(originalEncounter.id);\n    expect(roundTripEncounter.patientId).toBe(originalEncounter.patientId);\n    expect(roundTripEncounter.startDate).toBe(originalEncounter.startDate);\n    expect(roundTripEncounter.endDate).toBe(originalEncounter.endDate);\n    expect(roundTripEncounter.type).toBe(originalEncounter.type);\n    expect(roundTripEncounter.status).toBe(originalEncounter.status);\n    expect(roundTripEncounter.reason).toBe(originalEncounter.reason);\n    expect(roundTripEncounter.providerId).toBe(originalEncounter.providerId);\n  });\n\n  it('should convert Observation internal → FHIR → internal without data loss', () => {\n    const originalObservation: InternalObservation = {\n      id: 'obs-123',\n      patientId: 'patient-123',\n      encounterId: 'encounter-123',\n      type: 'vital_signs',\n      code: '8867-4',\n      codeSystem: 'http://loinc.org',\n      displayName: 'Heart rate',\n      value: 72,\n      unit: 'beats/min',\n      status: 'final',\n      effectiveDate: '2025-01-20T09:30:00Z',\n      category: 'vital-signs'\n    };\n\n    const fhirObservation = convertObservationToFhir(originalObservation);\n    const roundTripObservation = convertFhirToObservation(fhirObservation);\n\n    expect(roundTripObservation.id).toBe(originalObservation.id);\n    expect(roundTripObservation.patientId).toBe(originalObservation.patientId);\n    expect(roundTripObservation.encounterId).toBe(originalObservation.encounterId);\n    expect(roundTripObservation.type).toBe(originalObservation.type);\n    expect(roundTripObservation.code).toBe(originalObservation.code);\n    expect(roundTripObservation.codeSystem).toBe(originalObservation.codeSystem);\n    expect(roundTripObservation.displayName).toBe(originalObservation.displayName);\n    expect(roundTripObservation.value).toBe(originalObservation.value);\n    expect(roundTripObservation.unit).toBe(originalObservation.unit);\n    expect(roundTripObservation.status).toBe(originalObservation.status);\n    expect(roundTripObservation.effectiveDate).toBe(originalObservation.effectiveDate);\n    expect(roundTripObservation.category).toBe(originalObservation.category);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/__tests__/contracts.public-api.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/__tests__/fhirTypes.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/__tests__/snapshots/encounter.snapshot.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/__tests__/snapshots/patient.snapshot.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/__tests__/validators.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":195,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5717,5720],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5717,5720],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":293,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":293,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8845,8848],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8845,8848],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\n\nimport {\n  validateCaCorePatient,\n  validateCaCoreEncounter,\n  validateCaCoreObservation,\n  validateCaCoreBundle\n} from '../validators/caCoreValidator';\nimport {\n  validateUsCorePatient,\n  validateUsCoreEncounter,\n  validateUsCoreObservation,\n  validateUsCoreBundle\n} from '../validators/usCoreValidator';\nimport type { FhirPatient, FhirEncounter, FhirObservation } from '../types';\n\ndescribe('CA Core Validator', () => {\n  describe('validateCaCorePatient', () => {\n    it('should validate a compliant CA Core Patient', () => {\n      const compliantPatient: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123',\n        active: true,\n        name: [\n          {\n            use: 'official',\n            family: 'Doe',\n            given: ['John']\n          }\n        ],\n        gender: 'male',\n        birthDate: '1990-01-01',\n        identifier: [\n          {\n            system: 'http://hl7.org/fhir/sid/ca-hin',\n            value: 'CA123456789'\n          }\n        ]\n      };\n\n      const result = validateCaCorePatient(compliantPatient);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should detect missing required fields for CA Core', () => {\n      const nonCompliantPatient: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123'\n        // Missing required fields\n      };\n\n      const result = validateCaCorePatient(nonCompliantPatient);\n\n      expect(result.valid).toBe(false);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors.length).toBeGreaterThan(0);\n      expect(result.errors.some(e => e.message.includes('name'))).toBe(true);\n      expect(result.errors.some(e => e.message.includes('gender'))).toBe(true);\n    });\n\n    it('should validate Canadian Health Information Number (HIN)', () => {\n      const patientWithHIN: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123',\n        active: true,\n        name: [\n          {\n            use: 'official',\n            family: 'Smith',\n            given: ['Jane']\n          }\n        ],\n        gender: 'female',\n        identifier: [\n          {\n            system: 'http://hl7.org/fhir/sid/ca-hin',\n            value: 'CA987654321'\n          }\n        ]\n      };\n\n      const result = validateCaCorePatient(patientWithHIN);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should warn about missing address information', () => {\n      const patientWithoutAddress: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123',\n        active: true,\n        name: [\n          {\n            use: 'official',\n            family: 'Johnson',\n            given: ['Bob']\n          }\n        ],\n        gender: 'male'\n      };\n\n      const result = validateCaCorePatient(patientWithoutAddress);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should validate address country format', () => {\n      const patientWithUSAddress: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123',\n        active: true,\n        name: [\n          {\n            use: 'official',\n            family: 'Wilson',\n            given: ['Alice']\n          }\n        ],\n        gender: 'female',\n        address: [\n          {\n            line: ['123 Main St'],\n            city: 'Toronto',\n            state: 'ON',\n            postalCode: 'M5V 3A8',\n            country: 'US'\n          }\n        ]\n      };\n\n      const result = validateCaCorePatient(patientWithUSAddress);\n\n      expect(result.valid).toBe(false);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors.some(e => e.message.includes('Canadian address format'))).toBe(true);\n    });\n  });\n\n  describe('validateCaCoreEncounter', () => {\n    it('should validate a compliant CA Core Encounter', () => {\n      const compliantEncounter: FhirEncounter = {\n        resourceType: 'Encounter',\n        id: 'encounter-123',\n        status: 'finished',\n        class: {\n          system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n          code: 'AMB',\n          display: 'Ambulatory'\n        },\n        subject: {\n          reference: 'Patient/patient-123',\n          display: 'John Doe'\n        },\n        period: {\n          start: '2023-01-01T10:00:00Z',\n          end: '2023-01-01T11:00:00Z'\n        }\n      };\n\n      const result = validateCaCoreEncounter(compliantEncounter);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should detect missing required fields for CA Core Encounter', () => {\n      const nonCompliantEncounter: FhirEncounter = {\n        resourceType: 'Encounter',\n        id: 'encounter-123'\n        // Missing required fields\n      };\n\n      const result = validateCaCoreEncounter(nonCompliantEncounter);\n\n      expect(result.valid).toBe(false);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors.length).toBeGreaterThan(0);\n      expect(result.errors.some(e => e.message.includes('status'))).toBe(true);\n      expect(result.errors.some(e => e.message.includes('class'))).toBe(true);\n      expect(result.errors.some(e => e.message.includes('subject'))).toBe(true);\n    });\n\n    it('should validate encounter status values', () => {\n      const encounterWithInvalidStatus: FhirEncounter = {\n        resourceType: 'Encounter',\n        id: 'encounter-123',\n        status: 'invalid-status' as any,\n        class: {\n          system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n          code: 'AMB',\n          display: 'Ambulatory'\n        },\n        subject: {\n          reference: 'Patient/patient-123'\n        }\n      };\n\n      const result = validateCaCoreEncounter(encounterWithInvalidStatus);\n\n      expect(result.valid).toBe(false);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors.some(e => e.message.includes('status'))).toBe(true);\n    });\n\n    it('should validate subject reference format', () => {\n      const encounterWithInvalidSubject: FhirEncounter = {\n        resourceType: 'Encounter',\n        id: 'encounter-123',\n        status: 'finished',\n        class: {\n          system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n          code: 'AMB',\n          display: 'Ambulatory'\n        },\n        subject: {\n          reference: 'InvalidReference',\n          display: 'Invalid Reference'\n        }\n      };\n\n      const result = validateCaCoreEncounter(encounterWithInvalidSubject);\n\n      expect(result.valid).toBe(false);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors.some(e => e.message.includes('Patient/'))).toBe(true);\n    });\n  });\n\n  describe('validateCaCoreObservation', () => {\n    it('should validate a compliant CA Core Observation', () => {\n      const compliantObservation: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'observation-123',\n        status: 'final',\n        code: {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '8302-2',\n              display: 'Body height'\n            }\n          ],\n          text: 'Body height'\n        },\n        subject: {\n          reference: 'Patient/patient-123',\n          display: 'John Doe'\n        },\n        valueQuantity: {\n          value: 175,\n          unit: 'cm',\n          system: 'http://unitsofmeasure.org',\n          code: 'cm'\n        }\n      };\n\n      const result = validateCaCoreObservation(compliantObservation);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should detect missing required fields for CA Core Observation', () => {\n      const nonCompliantObservation: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'observation-123'\n        // Missing required fields\n      };\n\n      const result = validateCaCoreObservation(nonCompliantObservation);\n\n      expect(result.valid).toBe(false);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors.length).toBeGreaterThan(0);\n      expect(result.errors.some(e => e.message.includes('status'))).toBe(true);\n      expect(result.errors.some(e => e.message.includes('code'))).toBe(true);\n      expect(result.errors.some(e => e.message.includes('subject'))).toBe(true);\n    });\n\n    it('should validate observation status values', () => {\n      const observationWithInvalidStatus: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'observation-123',\n        status: 'invalid-status' as any,\n        code: {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '8302-2',\n              display: 'Body height'\n            }\n          ]\n        },\n        subject: {\n          reference: 'Patient/patient-123'\n        }\n      };\n\n      const result = validateCaCoreObservation(observationWithInvalidStatus);\n\n      expect(result.valid).toBe(false);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors.some(e => e.message.includes('status'))).toBe(true);\n    });\n\n    it('should validate observation value structure', () => {\n      const observationWithoutValue: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'observation-123',\n        status: 'final',\n        code: {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '8302-2',\n              display: 'Body height'\n            }\n          ]\n        },\n        subject: {\n          reference: 'Patient/patient-123'\n        }\n        // Missing value\n      };\n\n      const result = validateCaCoreObservation(observationWithoutValue);\n\n      expect(result.valid).toBe(false);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors.some(e => e.message.includes('value'))).toBe(true);\n    });\n  });\n\n  describe('validateCaCoreBundle', () => {\n    it('should validate a complete CA Core compliant bundle', () => {\n      const bundle = {\n        patient: {\n          resourceType: 'Patient',\n          id: 'patient-123',\n          name: [\n            {\n              family: 'Doe',\n              given: ['John']\n            }\n          ],\n          gender: 'male'\n        } as FhirPatient,\n        encounter: {\n          resourceType: 'Encounter',\n          id: 'encounter-123',\n          status: 'finished',\n          class: {\n            system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n            code: 'AMB',\n            display: 'Ambulatory'\n          },\n          subject: {\n            reference: 'Patient/patient-123'\n          }\n        } as FhirEncounter,\n        observations: [\n          {\n            resourceType: 'Observation',\n            id: 'observation-123',\n            status: 'final',\n            code: {\n              coding: [\n                {\n                  system: 'http://loinc.org',\n                  code: '8302-2',\n                  display: 'Body height'\n                }\n              ]\n            },\n            subject: {\n              reference: 'Patient/patient-123'\n            },\n            valueQuantity: {\n              value: 175,\n              unit: 'cm'\n            }\n          } as FhirObservation\n        ]\n      };\n\n      const result = validateCaCoreBundle(bundle);\n\n      expect(result.overallValid).toBe(true);\n      expect(result.patientValidation?.valid).toBe(true);\n      expect(result.encounterValidation?.valid).toBe(true);\n      expect(result.observationValidations?.[0].valid).toBe(true);\n      expect(result.summary.totalResources).toBe(3);\n      expect(result.summary.validResources).toBe(3);\n    });\n  });\n});\n\ndescribe('US Core Validator', () => {\n  describe('validateUsCorePatient', () => {\n    it('should validate a compliant US Core Patient', () => {\n      const compliantPatient: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123',\n        active: true,\n        name: [\n          {\n            use: 'official',\n            family: 'Doe',\n            given: ['John']\n          }\n        ],\n        gender: 'male',\n        birthDate: '1990-01-01',\n        identifier: [\n          {\n            system: 'http://hl7.org/fhir/sid/us-ssn',\n            value: '123-45-6789'\n          }\n        ]\n      };\n\n      const result = validateUsCorePatient(compliantPatient);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('US_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should detect missing required fields for US Core', () => {\n      const nonCompliantPatient: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123'\n        // Missing required fields\n      };\n\n      const result = validateUsCorePatient(nonCompliantPatient);\n\n      expect(result.valid).toBe(false);\n      expect(result.profile).toBe('US_CORE');\n      expect(result.errors.length).toBeGreaterThan(0);\n      expect(result.errors.some(e => e.message.includes('name'))).toBe(true);\n      expect(result.errors.some(e => e.message.includes('gender'))).toBe(true);\n    });\n\n    it('should validate US address format', () => {\n      const patientWithUSAddress: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123',\n        active: true,\n        name: [\n          {\n            use: 'official',\n            family: 'Smith',\n            given: ['Jane']\n          }\n        ],\n        gender: 'female',\n        address: [\n          {\n            line: ['123 Main St'],\n            city: 'New York',\n            state: 'NY',\n            postalCode: '10001',\n            country: 'US'\n          }\n        ]\n      };\n\n      const result = validateUsCorePatient(patientWithUSAddress);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('US_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n  });\n\n  describe('validateUsCoreEncounter', () => {\n    it('should validate a compliant US Core Encounter', () => {\n      const compliantEncounter: FhirEncounter = {\n        resourceType: 'Encounter',\n        id: 'encounter-123',\n        status: 'finished',\n        class: {\n          system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n          code: 'AMB',\n          display: 'Ambulatory'\n        },\n        subject: {\n          reference: 'Patient/patient-123',\n          display: 'John Doe'\n        }\n      };\n\n      const result = validateUsCoreEncounter(compliantEncounter);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('US_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n  });\n\n  describe('validateUsCoreObservation', () => {\n    it('should validate a compliant US Core Observation', () => {\n      const compliantObservation: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'observation-123',\n        status: 'final',\n        code: {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '8302-2',\n              display: 'Body height'\n            }\n          ]\n        },\n        subject: {\n          reference: 'Patient/patient-123',\n          display: 'John Doe'\n        },\n        valueQuantity: {\n          value: 175,\n          unit: 'cm',\n          system: 'http://unitsofmeasure.org',\n          code: 'cm'\n        }\n      };\n\n      const result = validateUsCoreObservation(compliantObservation);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('US_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should validate vital signs observations with LOINC coding', () => {\n      const vitalSignsObservation: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'observation-123',\n        status: 'final',\n        category: [\n          {\n            coding: [\n              {\n                system: 'http://terminology.hl7.org/CodeSystem/observation-category',\n                code: 'vital-signs',\n                display: 'Vital Signs'\n              }\n            ]\n          }\n        ],\n        code: {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '8302-2',\n              display: 'Body height'\n            }\n          ]\n        },\n        subject: {\n          reference: 'Patient/patient-123'\n        },\n        valueQuantity: {\n          value: 175,\n          unit: 'cm'\n        }\n      };\n\n      const result = validateUsCoreObservation(vitalSignsObservation);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('US_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n  });\n\n  describe('validateUsCoreBundle', () => {\n    it('should validate a complete US Core compliant bundle', () => {\n      const bundle = {\n        patient: {\n          resourceType: 'Patient',\n          id: 'patient-123',\n          name: [\n            {\n              family: 'Doe',\n              given: ['John']\n            }\n          ],\n          gender: 'male'\n        } as FhirPatient,\n        encounter: {\n          resourceType: 'Encounter',\n          id: 'encounter-123',\n          status: 'finished',\n          class: {\n            system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n            code: 'AMB',\n            display: 'Ambulatory'\n          },\n          subject: {\n            reference: 'Patient/patient-123'\n          }\n        } as FhirEncounter,\n        observations: [\n          {\n            resourceType: 'Observation',\n            id: 'observation-123',\n            status: 'final',\n            code: {\n              coding: [\n                {\n                  system: 'http://loinc.org',\n                  code: '8302-2',\n                  display: 'Body height'\n                }\n              ]\n            },\n            subject: {\n              reference: 'Patient/patient-123'\n            },\n            valueQuantity: {\n              value: 175,\n              unit: 'cm'\n            }\n          } as FhirObservation\n        ]\n      };\n\n      const result = validateUsCoreBundle(bundle);\n\n      expect(result.overallValid).toBe(true);\n      expect(result.patientValidation?.valid).toBe(true);\n      expect(result.encounterValidation?.valid).toBe(true);\n      expect(result.observationValidations?.[0].valid).toBe(true);\n      expect(result.summary.totalResources).toBe(3);\n      expect(result.summary.validResources).toBe(3);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/adapters/fhirToInternal.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/adapters/internalToFhir.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/tests/utils.test.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'FhirBundle' is not defined.","line":120,"column":69,"nodeType":"Identifier","messageId":"undef","endLine":120,"endColumn":79},{"ruleId":"no-undef","severity":2,"message":"'FhirBundle' is not defined.","line":137,"column":78,"nodeType":"Identifier","messageId":"undef","endLine":137,"endColumn":88}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\n\nimport {\n  createFhirBundle,\n  createClinicalDataBundle,\n  extractBundleResources,\n  validateFhirBundle,\n  bundleToClinicalData,\n  exportFhirBundle\n} from '../utils/bundleUtils';\nimport {\n  validateFhirJson,\n  parseFhirResource,\n  validateFhirProfile,\n  createValidationError,\n  formatValidationErrors,\n  isFhirJson,\n  getFhirResourceType\n} from '../utils/jsonUtils';\nimport type { FhirPatient, FhirEncounter, FhirObservation } from '../types';\n\ndescribe('FHIR Bundle Utils', () => {\n  const mockPatient: FhirPatient = {\n    resourceType: 'Patient',\n    id: 'patient-123',\n    identifier: [{ system: 'http://example.com/patients', value: '123' }],\n    name: [{ use: 'official', text: 'John Doe' }],\n    active: true\n  };\n\n  const mockEncounter: FhirEncounter = {\n    resourceType: 'Encounter',\n    id: 'encounter-456',\n    status: 'finished',\n    class: { system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode', code: 'AMB', display: 'Ambulatory' },\n    subject: { reference: 'Patient/patient-123' }\n  };\n\n  const mockObservation: FhirObservation = {\n    resourceType: 'Observation',\n    id: 'observation-789',\n    status: 'final',\n    code: { system: 'http://loinc.org', code: '8867-4', display: 'Heart rate' },\n    subject: { reference: 'Patient/patient-123' },\n    valueQuantity: { value: 72, unit: 'beats/min', system: 'http://unitsofmeasure.org', code: '/min' }\n  };\n\n  describe('createFhirBundle', () => {\n    it('should create a basic FHIR bundle', () => {\n      const bundle = createFhirBundle([mockPatient, mockEncounter, mockObservation]);\n      \n      expect(bundle.resourceType).toBe('Bundle');\n      expect(bundle.type).toBe('collection');\n      expect(bundle.entry).toHaveLength(3);\n      expect(bundle.total).toBe(3);\n    });\n\n    it('should create bundle with custom options', () => {\n      const bundle = createFhirBundle([mockPatient], {\n        type: 'document',\n        profile: 'us-core',\n        includeMeta: true\n      });\n      \n      expect(bundle.type).toBe('document');\n      expect(bundle.meta?.profile).toContain('us-core');\n    });\n\n    it('should generate unique bundle IDs', () => {\n      const bundle1 = createFhirBundle([mockPatient]);\n      const bundle2 = createFhirBundle([mockPatient]);\n      \n      expect(bundle1.id).not.toBe(bundle2.id);\n    });\n  });\n\n  describe('createClinicalDataBundle', () => {\n    it('should create clinical data bundle', () => {\n      const clinicalData = {\n        patient: mockPatient,\n        encounter: mockEncounter,\n        observations: [mockObservation]\n      };\n      \n      const bundle = createClinicalDataBundle(clinicalData);\n      \n      expect(bundle.type).toBe('document');\n      expect(bundle.entry).toHaveLength(3);\n    });\n  });\n\n  describe('extractBundleResources', () => {\n    it('should extract resources by type', () => {\n      const bundle = createFhirBundle([mockPatient, mockEncounter, mockObservation]);\n      const extracted = extractBundleResources(bundle);\n      \n      expect(extracted.patients).toHaveLength(1);\n      expect(extracted.encounters).toHaveLength(1);\n      expect(extracted.observations).toHaveLength(1);\n      expect(extracted.other).toHaveLength(0);\n    });\n  });\n\n  describe('validateFhirBundle', () => {\n    it('should validate valid bundle', () => {\n      const bundle = createFhirBundle([mockPatient, mockEncounter]);\n      const result = validateFhirBundle(bundle);\n      \n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should detect invalid bundle structure', () => {\n      const invalidBundle = {\n        resourceType: 'Bundle',\n        id: 'invalid-bundle'\n        // Missing required fields\n      };\n      \n      const result = validateFhirBundle(invalidBundle as unknown as FhirBundle);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('Bundle type is required');\n    });\n\n    it('should validate bundle entries', () => {\n      const bundleWithInvalidEntry = {\n        resourceType: 'Bundle',\n        id: 'test-bundle',\n        type: 'collection',\n        entry: [\n          { resource: mockPatient },\n          { resource: { ...mockEncounter, id: undefined } } // Missing ID\n        ]\n      };\n      \n      const result = validateFhirBundle(bundleWithInvalidEntry as unknown as FhirBundle);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('Entry 1: Encounter missing ID');\n    });\n  });\n\n  describe('bundleToClinicalData', () => {\n    it('should convert valid bundle to clinical data', () => {\n      const bundle = createClinicalDataBundle({\n        patient: mockPatient,\n        encounter: mockEncounter,\n        observations: [mockObservation]\n      });\n      \n      const clinicalData = bundleToClinicalData(bundle);\n      \n      expect(clinicalData).not.toBeNull();\n      expect(clinicalData?.patient.id).toBe('patient-123');\n      expect(clinicalData?.encounter.id).toBe('encounter-456');\n      expect(clinicalData?.observations).toHaveLength(1);\n    });\n\n    it('should return null for incomplete bundle', () => {\n      const incompleteBundle = createFhirBundle([mockPatient]); // Missing encounter\n      const clinicalData = bundleToClinicalData(incompleteBundle);\n      \n      expect(clinicalData).toBeNull();\n    });\n  });\n\n  describe('exportFhirBundle', () => {\n    it('should export bundle as JSON string', () => {\n      const bundle = createFhirBundle([mockPatient]);\n      const exported = exportFhirBundle(bundle, { prettyPrint: false });\n      \n      expect(typeof exported).toBe('string');\n      expect(exported).toContain('\"resourceType\":\"Bundle\"');\n    });\n\n    it('should respect export options', () => {\n      const bundle = createFhirBundle([mockPatient]);\n      const exported = exportFhirBundle(bundle, { prettyPrint: false });\n      \n      expect(exported).not.toContain('\\n');\n    });\n  });\n});\n\ndescribe('FHIR JSON Utils', () => {\n  const validPatientJson = JSON.stringify({\n    resourceType: 'Patient',\n    id: 'patient-123',\n    name: [{ text: 'John Doe' }]\n  });\n\n  const invalidJson = '{ invalid json }';\n  const wrongTypeJson = JSON.stringify({\n    resourceType: 'Encounter',\n    id: 'encounter-123'\n  });\n\n  describe('validateFhirJson', () => {\n    it('should validate valid FHIR JSON', () => {\n      const result = validateFhirJson(validPatientJson);\n      \n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n      expect(result.parsedData).toBeDefined();\n    });\n\n    it('should detect invalid JSON syntax', () => {\n      const result = validateFhirJson(invalidJson);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('Invalid JSON syntax');\n    });\n\n    it('should validate expected resource type', () => {\n      const result = validateFhirJson(validPatientJson, 'Patient');\n      \n      expect(result.isValid).toBe(true);\n    });\n\n    it('should detect resource type mismatch', () => {\n      const result = validateFhirJson(wrongTypeJson, 'Patient');\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain(\"Expected resourceType 'Patient', got 'Encounter'\");\n    });\n\n    it('should validate required fields', () => {\n      const incompleteJson = JSON.stringify({\n        resourceType: 'Patient'\n        // Missing id\n      });\n      \n      const result = validateFhirJson(incompleteJson);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('Missing required field: id');\n    });\n  });\n\n  describe('parseFhirResource', () => {\n    it('should parse valid Patient resource', () => {\n      const result = parseFhirResource(validPatientJson, 'Patient');\n      \n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.resource.resourceType).toBe('Patient');\n        expect(result.resource.id).toBe('patient-123');\n      }\n    });\n\n    it('should handle parsing errors', () => {\n      const result = parseFhirResource(invalidJson, 'Patient');\n      \n      expect(result.success).toBe(false);\n      expect(result.errors).toContain('Invalid JSON syntax');\n    });\n\n    it('should handle type mismatch', () => {\n      const result = parseFhirResource(wrongTypeJson, 'Patient');\n      \n      expect(result.success).toBe(false);\n      expect(result.errors).toContain('Type mismatch: expected Patient, got Encounter');\n    });\n  });\n\n  describe('validateFhirProfile', () => {\n    it('should validate CA Core profile', () => {\n      const result = validateFhirProfile(validPatientJson, 'ca-core');\n      \n      expect(result.compliance.caCore).toBeDefined();\n      expect(result.timestamp).toBeDefined();\n    });\n\n    it('should validate US Core profile', () => {\n      const result = validateFhirProfile(validPatientJson, 'us-core');\n      \n      expect(result.compliance.usCore).toBeDefined();\n      expect(result.timestamp).toBeDefined();\n    });\n\n    it('should handle invalid JSON in profile validation', () => {\n      const result = validateFhirProfile(invalidJson, 'ca-core');\n      \n      expect(result.isValid).toBe(false);\n      expect(result.compliance.caCore).toBe(false);\n      expect(result.compliance.usCore).toBe(false);\n    });\n  });\n\n  describe('createValidationError', () => {\n    it('should create validation error with all fields', () => {\n      const error = createValidationError(\n        'missing_required_field',\n        'name',\n        'Name is required',\n        'error',\n        'Add at least one name',\n        'patient-123',\n        'Patient'\n      );\n      \n      expect(error.type).toBe('missing_required_field');\n      expect(error.field).toBe('name');\n      expect(error.message).toBe('Name is required');\n      expect(error.severity).toBe('error');\n      expect(error.suggestion).toBe('Add at least one name');\n      expect(error.resourceId).toBe('patient-123');\n      expect(error.resourceType).toBe('Patient');\n    });\n  });\n\n  describe('formatValidationErrors', () => {\n    it('should format single error', () => {\n      const errors = [\n        createValidationError('missing_required_field', 'name', 'Name is required')\n      ];\n      \n      const formatted = formatValidationErrors(errors);\n      \n      expect(formatted).toContain('[ERROR] name: Name is required');\n    });\n\n    it('should format multiple errors', () => {\n      const errors = [\n        createValidationError('missing_required_field', 'name', 'Name is required'),\n        createValidationError('missing_required_field', 'id', 'ID is required')\n      ];\n      \n      const formatted = formatValidationErrors(errors);\n      \n      expect(formatted).toContain('name: Name is required');\n      expect(formatted).toContain('id: ID is required');\n    });\n\n    it('should handle empty errors array', () => {\n      const formatted = formatValidationErrors([]);\n      \n      expect(formatted).toBe('No validation errors found.');\n    });\n  });\n\n  describe('isFhirJson', () => {\n    it('should return true for valid FHIR JSON', () => {\n      expect(isFhirJson(validPatientJson)).toBe(true);\n    });\n\n    it('should return false for invalid JSON', () => {\n      expect(isFhirJson(invalidJson)).toBe(false);\n    });\n\n    it('should return false for non-FHIR JSON', () => {\n      const nonFhirJson = JSON.stringify({ name: 'John', age: 30 });\n      expect(isFhirJson(nonFhirJson)).toBe(false);\n    });\n  });\n\n  describe('getFhirResourceType', () => {\n    it('should extract resource type from valid JSON', () => {\n      const resourceType = getFhirResourceType(validPatientJson);\n      \n      expect(resourceType).toBe('Patient');\n    });\n\n    it('should return null for invalid JSON', () => {\n      const resourceType = getFhirResourceType(invalidJson);\n      \n      expect(resourceType).toBeNull();\n    });\n\n    it('should handle JSON without resourceType', () => {\n      const noResourceTypeJson = JSON.stringify({ id: '123', name: 'John' });\n      const resourceType = getFhirResourceType(noResourceTypeJson);\n      \n      expect(resourceType).toBeNull();\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/types/fhirBundle.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/types/fhirEncounter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/types/fhirObservation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/types/fhirPatient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/types/public/index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'ValidationResult' is not defined.","line":74,"column":68,"nodeType":"Identifier","messageId":"undef","endLine":74,"endColumn":84},{"ruleId":"no-undef","severity":2,"message":"'FhirBundle' is not defined.","line":77,"column":71,"nodeType":"Identifier","messageId":"undef","endLine":77,"endColumn":81}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview FHIR Public Types - Stable API Contract\n * @version 1.0.0\n * @author AiDuxCare Development Team\n * @compliance FHIR R4 + CA Core + US Core\n * \n * This file contains ONLY the stable types that form part of the external API contract.\n * Internal types and implementation details are NOT exposed here.\n */\n\n// Core FHIR Resource Types\nexport type {\n  FhirResource,\n  FhirPatient,\n  FhirEncounter,\n  FhirObservation\n} from '../index';\n\n// Validation Result Types\nexport type {\n  ValidationResult,\n  BundleValidationResult,\n  ValidationError,\n  ValidationOptions\n} from '../validation';\n\n// Bundle Types\nexport type {\n  FhirBundle,\n  BundleEntry,\n  BundleType\n} from '../fhirBundle';\n\n// Constants\nexport { VITAL_SIGNS_CODES } from '../fhirObservation';\nexport { FHIR_CONSTANTS } from '../index';\n\n// Public API Types\nexport interface FhirConversionOptions {\n  profile: 'CA_CORE' | 'US_CORE';\n  includeMeta?: boolean;\n  strictValidation?: boolean;\n}\n\nexport interface FhirValidationOptions {\n  profile: 'CA_CORE' | 'US_CORE';\n  strictMode?: boolean;\n  includeWarnings?: boolean;\n}\n\nexport interface FhirBundleOptions {\n  type: 'document' | 'message' | 'transaction' | 'transaction-response' | 'batch' | 'batch-response' | 'history' | 'searchset' | 'collection';\n  profile: 'CA_CORE' | 'US_CORE';\n  includeMeta?: boolean;\n}\n\n// Public API Function Signatures\nexport interface FhirPublicAPI {\n  // Conversion functions\n  toFhir: {\n    patient: (patient: unknown, options: FhirConversionOptions) => unknown;\n    encounter: (encounter: unknown, options: FhirConversionOptions) => unknown;\n    observation: (observation: unknown, options: FhirConversionOptions) => unknown;\n  };\n  \n  // Conversion from FHIR\n  fromFhir: {\n    patient: (resource: unknown) => unknown;\n    encounter: (resource: unknown) => unknown;\n    observation: (resource: unknown) => unknown;\n  };\n  \n  // Validation functions\n  validate: (resource: unknown, profile: 'CA_CORE' | 'US_CORE') => ValidationResult;\n  \n  // Bundle operations\n  makeBundle: (entries: unknown[], profile: 'CA_CORE' | 'US_CORE') => FhirBundle;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/types/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/utils/bundleUtils.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is assigned a value but never used.","line":117,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":10,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/utils/jsonUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":17,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'FhirResource' is not defined.","line":66,"column":45,"nodeType":"Identifier","messageId":"undef","endLine":66,"endColumn":57}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// import type { /* FhirResource, */ FhirPatient, FhirEncounter, FhirObservation } from '../types';\nimport type { ValidationResult, ValidationError, ValidationErrorType } from '../types/validation';\n\n/**\n * Validates FHIR JSON structure and basic syntax\n */\nexport function validateFhirJson(\n  jsonString: string,\n  expectedResourceType?: 'Patient' | 'Encounter' | 'Observation' | 'Bundle'\n): { isValid: boolean; errors: string[]; parsedData?: unknown } {\n  const errors: string[] = [];\n  \n  // Basic JSON syntax validation\n  let parsedData: unknown;\n  try {\n    parsedData = JSON.parse(jsonString);\n  } catch (error) {\n    errors.push('Invalid JSON syntax');\n    return { isValid: false, errors };\n  }\n  \n  // Basic FHIR resource validation\n  if (!parsedData || typeof parsedData !== 'object') {\n    errors.push('Parsed data must be an object');\n    return { isValid: false, errors };\n  }\n  \n  if (!parsedData.resourceType) {\n    errors.push('Missing required field: resourceType');\n    return { isValid: false, errors };\n  }\n  \n  if (typeof parsedData.resourceType !== 'string') {\n    errors.push('resourceType must be a string');\n    return { isValid: false, errors };\n  }\n  \n  // Check if resourceType matches expected type\n  if (expectedResourceType && parsedData.resourceType !== expectedResourceType) {\n    errors.push(`Expected resourceType '${expectedResourceType}', got '${parsedData.resourceType}'`);\n  }\n  \n  // Validate resourceType is a known FHIR resource\n  const validResourceTypes = ['Patient', 'Encounter', 'Observation', 'Bundle', 'Organization', 'Practitioner'];\n  if (!validResourceTypes.includes(parsedData.resourceType)) {\n    errors.push(`Unknown resourceType: '${parsedData.resourceType}'`);\n  }\n  \n  // Basic ID validation\n  if (!parsedData.id) {\n    errors.push('Missing required field: id');\n  } else if (typeof parsedData.id !== 'string') {\n    errors.push('id must be a string');\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors,\n    parsedData: errors.length === 0 ? parsedData : undefined\n  };\n}\n\n/**\n * Parses FHIR JSON and returns typed resource\n */\nexport function parseFhirResource<T extends FhirResource>(\n  jsonString: string,\n  resourceType: T['resourceType']\n): { success: true; resource: T } | { success: false; errors: string[] } {\n  const validation = validateFhirJson(jsonString);\n  \n  if (!validation.isValid) {\n    return { success: false, errors: validation.errors };\n  }\n  \n  const parsedData = validation.parsedData!;\n  \n  // Type guard validation\n  if (parsedData.resourceType !== resourceType) {\n    return { \n      success: false, \n      errors: [`Type mismatch: expected ${resourceType}, got ${parsedData.resourceType}`] \n    };\n  }\n  \n  return { success: true, resource: parsedData as T };\n}\n\n/**\n * Validates FHIR JSON against specific profile requirements\n */\nexport function validateFhirProfile(\n  jsonString: string,\n  profile: 'ca-core' | 'us-core'\n): ValidationResult {\n  const validation = validateFhirJson(jsonString);\n  \n  if (!validation.isValid) {\n    return {\n      isValid: false,\n      errors: validation.errors,\n      warnings: [],\n      compliance: { caCore: false, usCore: false },\n      timestamp: new Date().toISOString()\n    };\n  }\n  \n  const parsedData = validation.parsedData!;\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  \n  // Profile-specific validation\n  if (profile === 'ca-core') {\n    const caCoreValidation = validateCaCoreProfile(parsedData);\n    errors.push(...caCoreValidation.errors);\n    warnings.push(...caCoreValidation.warnings);\n  } else if (profile === 'us-core') {\n    const usCoreValidation = validateUsCoreProfile(parsedData);\n    errors.push(...usCoreValidation.errors);\n    warnings.push(...usCoreValidation.warnings);\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n    compliance: {\n      caCore: profile === 'ca-core' && errors.length === 0,\n      usCore: profile === 'us-core' && errors.length === 0\n    },\n    timestamp: new Date().toISOString()\n  };\n}\n\n/**\n * Validates resource against CA Core profile requirements\n */\nfunction validateCaCoreProfile(resource: unknown): { errors: string[]; warnings: string[] } {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  \n  // CA Core specific validation rules\n  if (resource.resourceType === 'Patient') {\n    if (!resource.identifier || resource.identifier.length === 0) {\n      errors.push('CA Core Patient: At least one identifier is required');\n    }\n    \n    if (!resource.name || resource.name.length === 0) {\n      errors.push('CA Core Patient: At least one name is required');\n    }\n  }\n  \n  if (resource.resourceType === 'Encounter') {\n    if (!resource.status) {\n      errors.push('CA Core Encounter: Status is required');\n    }\n    \n    if (!resource.class) {\n      errors.push('CA Core Encounter: Class is required');\n    }\n  }\n  \n  if (resource.resourceType === 'Observation') {\n    if (!resource.status) {\n      errors.push('CA Core Observation: Status is required');\n    }\n    \n    if (!resource.code) {\n      errors.push('CA Core Observation: Code is required');\n    }\n  }\n  \n  return { errors, warnings };\n}\n\n/**\n * Validates resource against US Core profile requirements\n */\nfunction validateUsCoreProfile(resource: unknown): { errors: string[]; warnings: string[] } {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  \n  // US Core specific validation rules\n  if (resource.resourceType === 'Patient') {\n    if (!resource.birthDate) {\n      errors.push('US Core Patient: Birth date is required');\n    }\n    \n    if (!resource.identifier || resource.identifier.length === 0) {\n      errors.push('US Core Patient: At least one identifier is required');\n    }\n  }\n  \n  if (resource.resourceType === 'Encounter') {\n    if (!resource.status) {\n      errors.push('US Core Encounter: Status is required');\n    }\n    \n    if (!resource.subject) {\n      errors.push('US Core Encounter: Subject reference is required');\n    }\n  }\n  \n  if (resource.resourceType === 'Observation') {\n    if (!resource.status) {\n      errors.push('US Core Observation: Status is required');\n    }\n    \n    if (!resource.code) {\n      errors.push('US Core Observation: Code is required');\n    }\n    \n    if (!resource.subject) {\n      errors.push('US Core Observation: Subject reference is required');\n    }\n  }\n  \n  return { errors, warnings };\n}\n\n/**\n * Creates a detailed validation error\n */\nexport function createValidationError(\n  type: ValidationErrorType,\n  field: string,\n  message: string,\n  severity: 'error' | 'warning' = 'error',\n  suggestion?: string,\n  resourceId?: string,\n  resourceType?: string\n): ValidationError {\n  return {\n    type,\n    field,\n    message,\n    severity,\n    suggestion,\n    resourceId,\n    resourceType\n  };\n}\n\n/**\n * Formats validation errors for human-readable output\n */\nexport function formatValidationErrors(errors: ValidationError[]): string {\n  if (errors.length === 0) {\n    return 'No validation errors found.';\n  }\n  \n  return errors.map(error => {\n    let formatted = `[${error.severity.toUpperCase()}] ${error.field}: ${error.message}`;\n    \n    if (error.suggestion) {\n      formatted += `\\n  Suggestion: ${error.suggestion}`;\n    }\n    \n    if (error.resourceId) {\n      formatted += `\\n  Resource ID: ${error.resourceId}`;\n    }\n    \n    return formatted;\n  }).join('\\n\\n');\n}\n\n/**\n * Checks if a JSON string contains valid FHIR data\n */\nexport function isFhirJson(jsonString: string): boolean {\n  try {\n    const parsed = JSON.parse(jsonString);\n    if (!parsed || typeof parsed !== 'object') {\n      return false;\n    }\n    if (!parsed.resourceType || typeof parsed.resourceType !== 'string') {\n      return false;\n    }\n    if (!parsed.id || typeof parsed.id !== 'string') {\n      return false;\n    }\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Extracts resource type from FHIR JSON string without full parsing\n */\nexport function getFhirResourceType(jsonString: string): string | null {\n  try {\n    // Quick regex to extract resourceType without full JSON parsing\n    const match = jsonString.match(/\"resourceType\"\\s*:\\s*\"([^\"]+)\"/);\n    return match ? match[1] : null;\n  } catch {\n    return null;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/utils/uuidUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/validators/caCoreValidator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/validators/usCoreValidator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/firebase/firebaseClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/hooks/useOrganization.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'auth' and 'loadOrganizationData'. Either include them or remove the dependency array.","line":101,"column":6,"nodeType":"ArrayExpression","endLine":101,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [auth, loadOrganizationData]","fix":{"range":[3360,3362],"text":"[auth, loadOrganizationData]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":235,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":235,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7834,7888],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🏢 useOrganization Hook\n * Hook para gestionar organizaciones, miembros y permisos en el frontend\n */\n\nimport { useState, useEffect } from 'react';\nimport { getAuth, onAuthStateChanged, User } from 'firebase/auth';\n\nimport { OrganizationService } from '../services/OrganizationService';\nimport { \n  Organization, \n  OrganizationMember, \n  OrganizationInvitation,\n  UserCustomClaims,\n  hasPermission,\n  isOwnerOrAdmin,\n  isIndependentProfessional\n} from '../domain/organizationType';\n\ninterface UseOrganizationReturn {\n  // Estado de la organización\n  organization: Organization | null;\n  members: OrganizationMember[];\n  invitations: OrganizationInvitation[];\n  isLoading: boolean;\n  error: string | null;\n  \n  // Información del usuario actual\n  user: User | null;\n  userClaims: UserCustomClaims | null;\n  userRole: string | null;\n  userPermissions: string[];\n  isOwnerOrAdmin: boolean;\n  isIndependent: boolean;\n  \n  // Funciones de gestión\n  createOrganization: (data: Omit<Organization, 'id' | 'metadata'>) => Promise<void>;\n  updateOrganization: (updates: Partial<Organization>) => Promise<void>;\n  addMember: (email: string, role: 'ADMIN' | 'MEMBER') => Promise<void>;\n  inviteMember: (email: string, role: string) => Promise<void>;\n  removeMember: (memberId: string) => Promise<void>;\n  updateMemberRole: (memberId: string, newRole: 'ADMIN' | 'MEMBER') => Promise<void>;\n  createInvitation: (email: string, role: 'ADMIN' | 'MEMBER') => Promise<void>;\n  acceptInvitation: (invitationToken: string) => Promise<void>;\n  \n  // Funciones de verificación de permisos\n  canManageTeam: boolean;\n  canManagePatients: boolean;\n  canViewAuditLogs: boolean;\n  canExportData: boolean;\n  canManageBilling: boolean;\n  canAccessAnalytics: boolean;\n  canInviteMembers: boolean;\n  canRemoveMembers: boolean;\n  \n  // Funciones de utilidad\n  refreshData: () => Promise<void>;\n  clearError: () => void;\n}\n\nexport function useOrganization(): UseOrganizationReturn {\n  const auth = getAuth();\n  const organizationService = new OrganizationService();\n  \n  // Estado local\n  const [user, setUser] = useState<User | null>(null);\n  const [userClaims, setUserClaims] = useState<UserCustomClaims | null>(null);\n  const [organization, setOrganization] = useState<Organization | null>(null);\n  const [members, setMembers] = useState<OrganizationMember[]>([]);\n  const [invitations, setInvitations] = useState<OrganizationInvitation[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Escuchar cambios de autenticación\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      setUser(firebaseUser);\n      \n      if (firebaseUser) {\n        // Obtener custom claims del usuario\n        const token = await firebaseUser.getIdTokenResult();\n        const claims = token.claims as UserCustomClaims;\n        setUserClaims(claims);\n        \n        // Cargar datos de organización si pertenece a una\n        if (claims?.organizationId) {\n          await loadOrganizationData(claims.organizationId);\n        } else {\n          setIsLoading(false);\n        }\n      } else {\n        setUserClaims(null);\n        setOrganization(null);\n        setMembers([]);\n        setInvitations([]);\n        setIsLoading(false);\n      }\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  const loadOrganizationData = async (organizationId: string) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const [orgData, membersData, invitationsData] = await Promise.all([\n        organizationService.getOrganization(organizationId),\n        organizationService.getOrganizationMembers(organizationId),\n        organizationService.getPendingInvitations(organizationId)\n      ]);\n\n      setOrganization(orgData);\n      setMembers(membersData);\n      setInvitations(invitationsData);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Error cargando datos de la organización');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Extraer información del usuario\n  const userRole = userClaims?.role || null;\n  const userPermissions = userClaims?.permissions || [];\n  const isOwnerOrAdminUser = isOwnerOrAdmin(userClaims || {});\n  const isIndependent = isIndependentProfessional(userClaims || {});\n\n  // Funciones de gestión de organización\n  const createOrganization = async (data: Omit<Organization, 'id' | 'metadata'>) => {\n    if (!user) throw new Error('Usuario no autenticado');\n\n    try {\n      setError(null);\n      const newOrganization = await organizationService.createOrganization(data, user.uid);\n      setOrganization(newOrganization);\n      \n      // Recargar datos\n      if (newOrganization) {\n        await loadOrganizationData(newOrganization.id);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Error creando organización');\n      throw err;\n    }\n  };\n\n  const updateOrganization = async (updates: Partial<Organization>) => {\n    if (!organization || !user) throw new Error('No autorizado');\n\n    try {\n      setError(null);\n      await organizationService.updateOrganization(organization.id, updates, user.uid);\n      \n      // Actualizar estado local\n      setOrganization(prev => prev ? { ...prev, ...updates } : null);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Error actualizando organización');\n      throw err;\n    }\n  };\n\n  const addMember = async (email: string, role: 'ADMIN' | 'MEMBER') => {\n    if (!organization || !user) throw new Error('No autorizado');\n\n    try {\n      setError(null);\n      const invitation = await organizationService.createInvitation({\n        organizationId: organization.id,\n        email,\n        role,\n        invitedBy: user.uid,\n        invitedAt: new Date(),\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 días\n        invitationToken: generateInvitationToken(),\n        status: 'PENDING'\n      }, user.uid);\n\n      // Actualizar lista de invitaciones\n      setInvitations(prev => [...prev, invitation]);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Error invitando miembro');\n      throw err;\n    }\n  };\n\n  const removeMember = async (memberId: string) => {\n    if (!organization || !user) throw new Error('No autorizado');\n\n    try {\n      setError(null);\n      await organizationService.removeMember(organization.id, memberId, user.uid);\n      \n      // Actualizar lista de miembros\n      setMembers(prev => prev.filter(member => member.id !== memberId));\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Error removiendo miembro');\n      throw err;\n    }\n  };\n\n  const updateMemberRole = async (memberId: string, newRole: 'ADMIN' | 'MEMBER') => {\n    if (!organization || !user) throw new Error('No autorizado');\n\n    try {\n      setError(null);\n      await organizationService.updateMember(organization.id, memberId, { role: newRole }, user.uid);\n      \n      // Actualizar estado local\n      setMembers(prev => prev.map(member => \n        member.id === memberId ? { ...member, role: newRole } : member\n      ));\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Error actualizando rol');\n      throw err;\n    }\n  };\n\n  const createInvitation = async (email: string, role: 'ADMIN' | 'MEMBER') => {\n    return addMember(email, role); // Alias para addMember\n  };\n\n  const inviteMember = async (email: string, role: string) => {\n    return addMember(email, role as 'ADMIN' | 'MEMBER'); // Alias para addMember\n  };\n\n  const acceptInvitation = async (invitationToken: string) => {\n    if (!user) throw new Error('Usuario no autenticado');\n\n    try {\n      setError(null);\n      // Esta función se implementaría con Firebase Functions\n      // Por ahora solo simulamos la aceptación\n      console.log('Accepting invitation:', invitationToken);\n      \n      // Recargar datos después de aceptar\n      if (userClaims?.organizationId) {\n        await loadOrganizationData(userClaims.organizationId);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Error aceptando invitación');\n      throw err;\n    }\n  };\n\n  // Funciones de utilidad\n  const refreshData = async () => {\n    if (userClaims?.organizationId) {\n      await loadOrganizationData(userClaims.organizationId);\n    }\n  };\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  // Verificaciones de permisos\n  const canManageTeam = hasPermission(userClaims || {}, 'team:manage');\n  const canManagePatients = hasPermission(userClaims || {}, 'patients:manage');\n  const canViewAuditLogs = hasPermission(userClaims || {}, 'audit:view');\n  const canExportData = hasPermission(userClaims || {}, 'data:export');\n  const canManageBilling = hasPermission(userClaims || {}, 'billing:manage');\n  const canAccessAnalytics = hasPermission(userClaims || {}, 'analytics:view');\n  const canInviteMembers = hasPermission(userClaims || {}, 'team:manage');\n  const canRemoveMembers = hasPermission(userClaims || {}, 'team:manage');\n\n  return {\n    // Estado\n    organization,\n    members,\n    invitations,\n    isLoading,\n    error,\n    \n    // Información del usuario\n    user,\n    userClaims,\n    userRole,\n    userPermissions,\n    isOwnerOrAdmin: isOwnerOrAdminUser,\n    isIndependent,\n    \n    // Funciones de gestión\n    createOrganization,\n    updateOrganization,\n    addMember,\n    inviteMember,\n    removeMember,\n    updateMemberRole,\n    createInvitation,\n    acceptInvitation,\n    \n    // Permisos\n    canManageTeam,\n    canManagePatients,\n    canViewAuditLogs,\n    canExportData,\n    canManageBilling,\n    canAccessAnalytics,\n    canInviteMembers,\n    canRemoveMembers,\n    \n    // Utilidades\n    refreshData,\n    clearError\n  };\n}\n\n// Función auxiliar para generar tokens de invitación\nfunction generateInvitationToken(): string {\n  return Math.random().toString(36).substring(2, 15) + \n         Math.random().toString(36).substring(2, 15);\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/mcp/MCPContextBuilder.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"debug"},"fix":{"range":[1098,1178],"text":""},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { MCPContext, MCPContextSchema } from './schema';\n\n/**\n * Tipo para los datos de memoria utilizados internamente\n */\ntype MemoryData = {\n  source: string;\n  data: Array<Record<string, unknown>>;\n};\n\n/**\n * Construye un contexto MCP completo combinando diferentes tipos de memoria\n * @param contextualMemory Memoria contextual de la visita\n * @param persistentMemory Memoria persistente del usuario\n * @param semanticMemory Memoria semántica del usuario\n * @returns Contexto MCP validado\n */\nexport function buildMCPContext(\n  contextualMemory: MemoryData,\n  persistentMemory: MemoryData,\n  semanticMemory: MemoryData\n): MCPContext {\n  // Combinar las diferentes memorias en un único objeto de contexto\n  const context = {\n    contextual: contextualMemory,\n    persistent: persistentMemory,\n    semantic: semanticMemory\n  };\n\n  // Validar el contexto construido con el esquema definido usando safeParse\n  const validationResult = MCPContextSchema.safeParse(context);\n  \n  if (!validationResult.success) {\n    console.warn(\"[MCP] Zod validation failed:\", validationResult.error.format());\n    console.debug(\"[MCP] Invalid data received:\", JSON.stringify(context, null, 2));\n    \n    // Intentamos devolver el contexto original aunque tenga errores\n    // para evitar pérdida silenciosa de datos\n    return context as MCPContext;\n  }\n  \n  return validationResult.data;\n} \n\n/**\n * Recupera el contexto MCP asociado a una visita clínica.\n * Usado para poblar el visor MCP en VisitDetailPage.\n */\nexport async function getContextFromVisit(): Promise<MCPContext> {\n  // TODO: Migrar a fuente Firestore. MCPDataSourceSupabase es legacy y debe eliminarse tras migración total.\n  // const [contextual, persistent, semantic] = await Promise.all([\n  //   getContextualMemory(visitId),\n  //   getPersistentMemory(patientId),\n  //   getSemanticMemory()\n  // ]);\n\n  // return {\n  //   contextual: {\n  //     source: 'supabase',\n  //     data: contextual\n  //   },\n  //   persistent: {\n  //     source: 'supabase',\n  //     data: persistent\n  //   },\n  //   semantic: {\n  //     source: 'supabase',\n  //     data: semantic\n  //   }\n  // };\n  // Placeholder for Firestore data retrieval\n  return {\n    contextual: {\n      source: 'placeholder',\n      data: []\n    },\n    persistent: {\n      source: 'placeholder',\n      data: []\n    },\n    semantic: {\n      source: 'placeholder',\n      data: []\n    }\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/mcp/MCPManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/mcp/RAGMedicalMCP.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3087,3143],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":146,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":146,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4740,4824],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":336,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":336,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11124,11196],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":385,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":385,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12862,12954],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * \n * 🧬 AiDuxCare - RAG Medical MCP\n * Model Context Protocol especializado en Retrieval Augmented Generation\n * para fuentes de conocimiento médico (PubMed, guidelines, evidence-based protocols)\n */\n\nimport { MCPMemoryBlock } from './schema';\n\n// === INTERFACES RAG MÉDICO ===\n\nexport interface MedicalDocument {\n  id: string;\n  title: string;\n  abstract: string;\n  authors: string[];\n  journal: string;\n  publication_date: string;\n  doi?: string;\n  pmid?: string; // PubMed ID\n  keywords: string[];\n  medical_specialty: MedicalSpecialty[];\n  evidence_level: EvidenceLevel;\n  content_type: 'research_paper' | 'clinical_guideline' | 'systematic_review' | 'meta_analysis' | 'case_study';\n  source: 'pubmed' | 'cochrane' | 'uptodate' | 'nice_guidelines' | 'local_library';\n}\n\nexport interface ChunkedDocument {\n  chunk_id: string;\n  document_id: string;\n  content: string;\n  chunk_index: number;\n  total_chunks: number;\n  tokens: number;\n  embedding?: number[]; // Vector embedding\n  metadata: {\n    section_type: 'abstract' | 'introduction' | 'methods' | 'results' | 'discussion' | 'conclusion';\n    page?: number;\n    confidence_score?: number;\n  };\n}\n\nexport interface RAGQueryResult {\n  query: string;\n  relevant_chunks: ChunkedDocument[];\n  medical_context: string;\n  confidence_score: number;\n  citations: CitationReference[];\n  processing_time_ms: number;\n}\n\nexport interface CitationReference {\n  document_id: string;\n  title: string;\n  authors: string;\n  journal: string;\n  year: string;\n  doi?: string;\n  pmid?: string;\n  relevance_score: number;\n}\n\nexport type MedicalSpecialty = \n  | 'fisioterapia' \n  | 'medicina_fisica' \n  | 'reumatologia' \n  | 'neurologia' \n  | 'ortopedia' \n  | 'medicina_deportiva'\n  | 'medicina_interna'\n  | 'general';\n\nexport type EvidenceLevel = \n  | 'level_1' // Systematic reviews, Meta-analyses\n  | 'level_2' // Randomized controlled trials\n  | 'level_3' // Cohort studies\n  | 'level_4' // Case-control studies\n  | 'level_5' // Case series, Expert opinion\n  | 'guideline' // Clinical guidelines\n  | 'consensus'; // Expert consensus\n\n// === SERVICIOS DE BÚSQUEDA ===\n\n/**\n * Servicio para búsqueda en PubMed via API gratuita\n */\nexport class PubMedSearchService {\n  private static readonly BASE_URL = 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils';\n  private static readonly EMAIL = 'aiduxcare@domain.com'; // Requerido por NCBI\n  \n  /**\n   * Busca artículos relevantes en PubMed\n   */\n  static async searchArticles(query: string, specialty: MedicalSpecialty, maxResults: number = 10): Promise<MedicalDocument[]> {\n    try {\n      // Construir query especializada para fisioterapia\n      const specializedQuery = this.buildSpecializedQuery(query, specialty);\n      \n      // Búsqueda en PubMed\n      const searchUrl = `${this.BASE_URL}/esearch.fcgi?db=pubmed&term=${encodeURIComponent(specializedQuery)}&retmax=${maxResults}&retmode=json&email=${this.EMAIL}`;\n      \n      const searchResponse = await fetch(searchUrl);\n      const searchData = await searchResponse.json();\n      \n      if (!searchData.esearchresult?.idlist?.length) {\n        console.log('No se encontraron artículos para:', query);\n        return [];\n      }\n      \n      // Obtener detalles de los artículos\n      const ids = searchData.esearchresult.idlist.join(',');\n      const detailsUrl = `${this.BASE_URL}/esummary.fcgi?db=pubmed&id=${ids}&retmode=json&email=${this.EMAIL}`;\n      \n      const detailsResponse = await fetch(detailsUrl);\n      const detailsData = await detailsResponse.json();\n      \n      // Convertir a formato interno\n      const documents: MedicalDocument[] = [];\n      \n      for (const uid of searchData.esearchresult.idlist) {\n        const article = detailsData.result[uid];\n        if (article) {\n          try {\n            documents.push({\n              id: `pubmed_${uid}`,\n              title: article.title || '',\n              abstract: await this.getAbstract(uid), // Obtener abstract separadamente\n              authors: article.authors?.map((a: { name: string }) => a.name) || [],\n              journal: article.fulljournalname || article.source || '',\n              publication_date: article.pubdate || '',\n              doi: article.doi || undefined,\n              pmid: uid,\n              keywords: this.extractKeywords(article.title),\n              medical_specialty: [specialty],\n              evidence_level: this.determineEvidenceLevel(article.title),\n              content_type: this.determineContentType(article.pubtype),\n              source: 'pubmed'\n            });\n          } catch (articleError) {\n            console.warn(`⚠️ Error procesando artículo ${uid}:`, articleError);\n            // Continuar con el siguiente artículo\n          }\n        }\n      }\n      \n      console.log(`✅ Encontrados ${documents.length} artículos en PubMed para: ${query}`);\n      return documents;\n      \n    } catch (error) {\n      console.error('Error buscando en PubMed:', error);\n      return [];\n    }\n  }\n  \n  /**\n   * Obtiene el abstract completo de un artículo\n   */\n  private static async getAbstract(pmid: string): Promise<string> {\n    try {\n      const abstractUrl = `${this.BASE_URL}/efetch.fcgi?db=pubmed&id=${pmid}&retmode=xml&email=${this.EMAIL}`;\n      const response = await fetch(abstractUrl);\n      const xmlText = await response.text();\n      \n      // Extraer abstract del XML (simplificado)\n      const abstractMatch = xmlText.match(/<AbstractText[^>]*>(.*?)<\\/AbstractText>/s);\n      return abstractMatch ? abstractMatch[1].replace(/<[^>]*>/g, '') : '';\n      \n    } catch (error) {\n      console.error(`Error obteniendo abstract para PMID ${pmid}:`, error);\n      return '';\n    }\n  }\n  \n  /**\n   * Construye query especializada según la especialidad médica\n   */\n  private static buildSpecializedQuery(query: string, specialty: MedicalSpecialty): string {\n    const specialtyTerms: Record<MedicalSpecialty, string[]> = {\n      fisioterapia: ['physical therapy', 'physiotherapy', 'rehabilitation', 'manual therapy'],\n      medicina_fisica: ['physical medicine', 'rehabilitation medicine', 'PM&R'],\n      reumatologia: ['rheumatology', 'arthritis', 'autoimmune'],\n      neurologia: ['neurology', 'neurological', 'brain', 'nervous system'],\n      ortopedia: ['orthopedics', 'orthopedic', 'bone', 'joint'],\n      medicina_deportiva: ['sports medicine', 'athletic', 'exercise'],\n      medicina_interna: ['internal medicine', 'general medicine'],\n      general: []\n    };\n    \n    const terms = specialtyTerms[specialty] || [];\n    const specialtyQuery = terms.length > 0 ? ` AND (${terms.map(t => `\"${t}\"`).join(' OR ')})` : '';\n    \n    return `${query}${specialtyQuery} AND (clinical trial OR systematic review OR meta-analysis OR randomized controlled trial)`;\n  }\n  \n  /**\n   * Extrae keywords relevantes del título\n   */\n  private static extractKeywords(title: string): string[] {\n    const commonKeywords = [\n      'pain', 'dolor', 'treatment', 'therapy', 'rehabilitation', 'exercise',\n      'manual', 'therapeutic', 'clinical', 'evidence', 'effectiveness',\n      'randomized', 'controlled', 'trial', 'systematic', 'review'\n    ];\n    \n    return commonKeywords.filter(keyword => \n      title.toLowerCase().includes(keyword.toLowerCase())\n    );\n  }\n  \n  /**\n   * Determina el nivel de evidencia basado en el tipo de publicación\n   */\n  private static determineEvidenceLevel(title: string): EvidenceLevel {\n    const titleLower = title.toLowerCase();\n    \n    if (titleLower.includes('systematic review') || titleLower.includes('meta-analysis')) {\n      return 'level_1';\n    }\n    if (titleLower.includes('randomized controlled trial') || titleLower.includes('rct')) {\n      return 'level_2';\n    }\n    if (titleLower.includes('cohort')) {\n      return 'level_3';\n    }\n    if (titleLower.includes('case-control')) {\n      return 'level_4';\n    }\n    if (titleLower.includes('guideline')) {\n      return 'guideline';\n    }\n    \n    return 'level_5'; // Default para case series, expert opinion\n  }\n  \n  /**\n   * Determina el tipo de contenido\n   */\n  private static determineContentType(pubTypes: string[] = []): MedicalDocument['content_type'] {\n    if (pubTypes.join(' ').toLowerCase().includes('systematic review')) return 'systematic_review';\n    if (pubTypes.join(' ').toLowerCase().includes('meta-analysis')) return 'meta_analysis';\n    if (pubTypes.join(' ').toLowerCase().includes('guideline')) return 'clinical_guideline';\n    if (pubTypes.join(' ').toLowerCase().includes('case report')) return 'case_study';\n    \n    return 'research_paper'; // Default\n  }\n}\n\n/**\n * Servicio de chunking inteligente para documentos médicos\n */\nexport class MedicalDocumentChunker {\n  \n  /**\n   * Divide un documento médico en chunks semánticamente coherentes\n   */\n  static chunkDocument(document: MedicalDocument): ChunkedDocument[] {\n    const chunks: ChunkedDocument[] = [];\n    \n    // Chunk 1: Abstract (siempre separado)\n    if (document.abstract) {\n      chunks.push({\n        chunk_id: `${document.id}_abstract`,\n        document_id: document.id,\n        content: document.abstract,\n        chunk_index: 0,\n        total_chunks: 0, // Se actualizará al final\n        tokens: this.estimateTokens(document.abstract),\n        metadata: {\n          section_type: 'abstract',\n          confidence_score: 1.0 // Abstract siempre tiene alta confianza\n        }\n      });\n    }\n    \n    // Chunk 2: Título + metadata como contexto\n    const metadataContent = `\nTitle: ${document.title}\nAuthors: ${document.authors.join(', ')}\nJournal: ${document.journal}\nYear: ${document.publication_date}\nEvidence Level: ${document.evidence_level}\nKeywords: ${document.keywords.join(', ')}\n    `.trim();\n    \n    chunks.push({\n      chunk_id: `${document.id}_metadata`,\n      document_id: document.id,\n      content: metadataContent,\n      chunk_index: 1,\n      total_chunks: 0,\n      tokens: this.estimateTokens(metadataContent),\n      metadata: {\n        section_type: 'introduction',\n        confidence_score: 0.8\n      }\n    });\n    \n    // Actualizar total_chunks\n    chunks.forEach(chunk => {\n      chunk.total_chunks = chunks.length;\n    });\n    \n    return chunks;\n  }\n  \n  /**\n   * Estimación simple de tokens (1 token ≈ 4 caracteres en inglés)\n   */\n  private static estimateTokens(text: string): number {\n    return Math.ceil(text.length / 4);\n  }\n}\n\n/**\n * MCP RAG Medical Knowledge Service\n */\nexport class RAGMedicalMCP {\n  private static documentsCache: Map<string, MedicalDocument> = new Map();\n  private static chunksCache: Map<string, ChunkedDocument[]> = new Map();\n  \n  /**\n   * Busca y procesa conocimiento médico relevante para una consulta clínica\n   */\n  static async retrieveRelevantKnowledge(\n    clinicalQuery: string, \n    specialty: MedicalSpecialty = 'fisioterapia',\n    maxResults: number = 5\n  ): Promise<RAGQueryResult> {\n    // Para testing, devolver datos simulados si no hay conexión a PubMed\n    if (process.env.NODE_ENV === 'test' || (typeof navigator !== 'undefined' && !navigator?.onLine)) {\n      return this.getMockResults(clinicalQuery, specialty, maxResults);\n    }\n    const startTime = Date.now();\n    \n    try {\n      console.log(`🔍 Buscando conocimiento médico para: \"${clinicalQuery}\"`);\n      \n      // 1. Buscar en PubMed\n      const documents = await PubMedSearchService.searchArticles(clinicalQuery, specialty, maxResults);\n      \n      if (documents.length === 0) {\n        return {\n          query: clinicalQuery,\n          relevant_chunks: [],\n          medical_context: 'No se encontró evidencia científica específica para esta consulta.',\n          confidence_score: 0.0,\n          citations: [],\n          processing_time_ms: Date.now() - startTime\n        };\n      }\n      \n      // 2. Procesar documentos en chunks\n      const allChunks: ChunkedDocument[] = [];\n      const citations: CitationReference[] = [];\n      \n      for (const doc of documents) {\n        // Cache del documento\n        this.documentsCache.set(doc.id, doc);\n        \n        // Generar chunks\n        const chunks = MedicalDocumentChunker.chunkDocument(doc);\n        this.chunksCache.set(doc.id, chunks);\n        \n        allChunks.push(...chunks);\n        \n        // Crear cita\n        citations.push({\n          document_id: doc.id,\n          title: doc.title,\n          authors: doc.authors.slice(0, 3).join(', ') + (doc.authors.length > 3 ? ' et al.' : ''),\n          journal: doc.journal,\n          year: doc.publication_date.split('-')[0] || '',\n          doi: doc.doi,\n          pmid: doc.pmid,\n          relevance_score: this.calculateRelevanceScore(doc, clinicalQuery)\n        });\n      }\n      \n      // 3. Construir contexto médico agregado\n      const medicalContext = this.buildMedicalContext(allChunks);\n      \n      // 4. Calcular confianza general\n      const confidenceScore = this.calculateOverallConfidence(documents, clinicalQuery);\n      \n      console.log(`✅ RAG completado: ${documents.length} documentos, ${allChunks.length} chunks`);\n      \n      return {\n        query: clinicalQuery,\n        relevant_chunks: allChunks.slice(0, 10), // Limitar top 10 chunks\n        medical_context: medicalContext,\n        confidence_score: confidenceScore,\n        citations: citations.sort((a, b) => b.relevance_score - a.relevance_score),\n        processing_time_ms: Date.now() - startTime\n      };\n      \n    } catch (error) {\n      console.error('Error en RAG Medical MCP:', error);\n      return {\n        query: clinicalQuery,\n        relevant_chunks: [],\n        medical_context: 'Error al acceder a las fuentes de conocimiento médico.',\n        confidence_score: 0.0,\n        citations: [],\n        processing_time_ms: Date.now() - startTime\n      };\n    }\n  }\n  \n  /**\n   * Genera bloques MCP a partir de resultados RAG\n   */\n  static convertToMCPBlocks(ragResult: RAGQueryResult): MCPMemoryBlock[] {\n    const blocks: MCPMemoryBlock[] = [];\n    \n    // Bloque principal con el contexto médico\n    blocks.push({\n      id: `rag_context_${Date.now()}`,\n      type: 'semantic',\n      content: `EVIDENCIA CIENTÍFICA PARA: \"${ragResult.query}\"\n\n${ragResult.medical_context}\n\nNIVEL DE CONFIANZA: ${Math.round(ragResult.confidence_score * 100)}%\nFUENTES CONSULTADAS: ${ragResult.citations.length} publicaciones científicas\nTIEMPO DE PROCESAMIENTO: ${ragResult.processing_time_ms}ms`,\n      created_at: new Date().toISOString()\n    });\n    \n    // Bloques individuales para los chunks más relevantes (top 3)\n    ragResult.relevant_chunks.slice(0, 3).forEach((chunk, index) => {\n      const citation = ragResult.citations.find(c => c.document_id === chunk.document_id);\n      \n      blocks.push({\n        id: `rag_chunk_${chunk.chunk_id}`,\n        type: 'semantic',\n        content: `FUENTE ${index + 1}: ${citation?.title || 'Documento médico'}\n\nAUTORES: ${citation?.authors || 'No especificado'}\nREVISTA: ${citation?.journal || 'No especificado'} (${citation?.year || ''})\n${citation?.pmid ? `PMID: ${citation.pmid}` : ''}\n\nCONTENIDO:\n${chunk.content}\n\nRELEVANCIA: ${Math.round((citation?.relevance_score || 0) * 100)}%`,\n        created_at: new Date().toISOString()\n      });\n    });\n    \n    return blocks;\n  }\n  \n  /**\n   * Construye contexto médico agregado\n   */\n  private static buildMedicalContext(chunks: ChunkedDocument[]): string {\n    if (chunks.length === 0) {\n      return 'No se encontró evidencia científica específica.';\n    }\n    \n    const abstractChunks = chunks.filter(c => c.metadata.section_type === 'abstract');\n    \n    if (abstractChunks.length === 0) {\n      return 'Evidencia científica disponible pero sin abstracts accesibles.';\n    }\n    \n    const summaries = abstractChunks.slice(0, 3).map((chunk, index) => {\n      const doc = this.documentsCache.get(chunk.document_id);\n      return `${index + 1}. ${doc?.title || 'Estudio'}: ${chunk.content.substring(0, 200)}...`;\n    });\n    \n    return `EVIDENCIA CIENTÍFICA RELACIONADA:\n\n${summaries.join('\\n\\n')}\n\nRECOMENDACIÓN: Considerar esta evidencia en el contexto clínico específico del paciente.`;\n  }\n  \n  /**\n   * Calcula score de relevancia\n   */\n  private static calculateRelevanceScore(doc: MedicalDocument, query: string): number {\n    let score = 0.5; // Base score\n    \n    const queryLower = query.toLowerCase();\n    const titleLower = doc.title.toLowerCase();\n    const abstractLower = doc.abstract.toLowerCase();\n    \n    // Bonus por coincidencias en título\n    if (titleLower.includes(queryLower)) score += 0.3;\n    \n    // Bonus por coincidencias en abstract\n    if (abstractLower.includes(queryLower)) score += 0.2;\n    \n    // Bonus por nivel de evidencia\n    switch (doc.evidence_level) {\n      case 'level_1': score += 0.2; break;\n      case 'level_2': score += 0.15; break;\n      case 'guideline': score += 0.1; break;\n      default: break;\n    }\n    \n    return Math.min(score, 1.0);\n  }\n  \n  /**\n   * Calcula confianza general\n   */\n  private static calculateOverallConfidence(docs: MedicalDocument[], query: string): number {\n    if (docs.length === 0) return 0.0;\n    \n    const avgRelevance = docs.reduce((sum, doc) => \n      sum + this.calculateRelevanceScore(doc, query), 0) / docs.length;\n    \n    const evidenceBonus = docs.some(d => d.evidence_level === 'level_1' || d.evidence_level === 'level_2') ? 0.1 : 0;\n    \n    return Math.min(avgRelevance + evidenceBonus, 1.0);\n  }\n\n  /**\n   * Genera resultados simulados para testing\n   */\n  private static getMockResults(\n    clinicalQuery: string, \n    specialty: MedicalSpecialty, \n    maxResults: number\n  ): RAGQueryResult {\n    const mockCitations: CitationReference[] = [\n      {\n        document_id: 'mock_001',\n        title: 'Evidence-based physical therapy for low back pain: A systematic review',\n        authors: 'Smith J, Johnson A, Brown M',\n        journal: 'Physical Therapy Journal',\n        year: '2024',\n        doi: '10.1000/mock.001',\n        pmid: '12345678',\n        relevance_score: 0.85\n      },\n      {\n        document_id: 'mock_002',\n        title: 'Clinical guidelines for physiotherapy management of musculoskeletal disorders',\n        authors: 'Garcia L, Rodriguez P, Martinez S',\n        journal: 'Journal of Physiotherapy',\n        year: '2023',\n        doi: '10.1000/mock.002',\n        pmid: '87654321',\n        relevance_score: 0.78\n      }\n    ];\n\n    return {\n      query: clinicalQuery,\n      relevant_chunks: [],\n      medical_context: `Contexto médico simulado para: ${clinicalQuery} en ${specialty}`,\n      confidence_score: 0.75,\n      citations: mockCitations.slice(0, maxResults),\n      processing_time_ms: 50\n    };\n  }\n}\n\n ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/mcp/components/MCPEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/mcp/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/mcp/schema.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":23,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":56,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":69,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":19}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2434,2437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2434,2437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2726,2729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2726,2729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\n\nimport { VisitSchema } from '../domain/visitType';\n\n/**\n * Tipos de memoria en el MCP\n */\nconst MemoryTypeEnum = z.enum(['contextual', 'persistent', 'semantic']);\n\n/**\n * Esquema para un bloque de memoria recuperado de fuentes de datos\n * Validación más robusta de fechas para prevenir errores en tests\n */\nexport const MCPMemoryBlockSchema = z.object({\n  id: z.string(),\n  // Mejoramos la validación de fechas para que sea más robusta en tests\n  created_at: z.string()\n    .refine(\n      (val: string) => {\n        try {\n          // Verificar si es un formato ISO válido\n          return !isNaN(new Date(val).getTime());\n        } catch (e) {\n          return false;\n        }\n      },\n      { message: \"Invalid datetime format\" }\n    ),\n  type: MemoryTypeEnum,\n  content: z.string(),\n  metadata: z.record(z.string(), z.unknown()).optional(),\n  visit_id: z.string().optional(),\n  patient_id: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  // Propiedad agregada para soporte de validación de bloques (no se persiste en esta versión)\n  validated: z.boolean().optional()\n});\n\n/**\n * Tipo para un bloque de memoria\n */\nexport type MCPMemoryBlock = z.infer<typeof MCPMemoryBlockSchema>;\n\n/**\n * Esquema para un elemento de memoria individual\n * Modificado para permitir que created_at se use como timestamp si no existe\n */\nconst MemoryItemSchema = z.object({\n  id: z.string(),\n  // Permitimos que timestamp sea opcional si existe created_at\n  timestamp: z.string()\n    .refine(\n      (val: string) => {\n        try {\n          return !isNaN(new Date(val).getTime());\n        } catch (e) {\n          return false;\n        }\n      },\n      { message: \"Invalid datetime format for timestamp\" }\n    )\n    .optional(),\n  // Agregamos created_at como campo opcional para compatibilidad\n  created_at: z.string()\n    .refine(\n      (val: string) => {\n        try {\n          return !isNaN(new Date(val).getTime());\n        } catch (e) {\n          return false;\n        }\n      },\n      { message: \"Invalid datetime format for created_at\" }\n    )\n    .optional(),\n  type: MemoryTypeEnum,\n  content: z.string(),\n  // Propiedad agregada para soporte de validación local (no persiste en versión actual)\n  validated: z.boolean().optional()\n})\n// Transformar los datos para agregar timestamp si no existe pero hay created_at\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n.transform((data: any) => {\n  if (!data.timestamp && data.created_at) {\n    return {\n      ...data,\n      timestamp: data.created_at\n    };\n  }\n  return data;\n})\n// Refinamiento para asegurar que hay al menos timestamp o created_at\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n.refine((data: any) => data.timestamp || data.created_at, {\n  message: \"Debe existir al menos 'timestamp' o 'created_at'\"\n});\n\n/**\n * Esquema para un conjunto de datos de memoria\n */\nconst MemoryDataSchema = z.object({\n  source: z.string(),\n  data: z.array(MemoryItemSchema)\n});\n\n/**\n * Esquema para validar la estructura del contexto MCP\n * Extendido para incluir los datos originales de la visita\n */\nexport const MCPContextSchema = z.object({\n  contextual: MemoryDataSchema,\n  persistent: MemoryDataSchema,\n  semantic: MemoryDataSchema,\n  // Campo opcional para almacenar los datos de la visita original\n  visitData: VisitSchema.optional()\n});\n\n/**\n * Tipo inferido del esquema MCPContext\n */\nexport type MCPContext = z.infer<typeof MCPContextSchema>; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/performance/WebVitalsService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1154,1321],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { onCLS, onINP, onFCP, onLCP, onTTFB, type Metric } from 'web-vitals';\n\n/**\n * Interfaz para métricas de performance\n */\nexport interface PerformanceMetric {\n  name: string;\n  value: number;\n  rating: 'good' | 'needs-improvement' | 'poor';\n  timestamp: number;\n  url: string;\n  id: string;\n}\n\n/**\n * Servicio para monitorear Web Vitals y enviar métricas de performance\n */\nexport class WebVitalsService {\n  private metrics: PerformanceMetric[] = [];\n  private onMetricCallback?: (metric: PerformanceMetric) => void;\n\n  /**\n   * Inicializa el monitoreo de Web Vitals\n   */\n  public initialize(onMetric?: (metric: PerformanceMetric) => void): void {\n    this.onMetricCallback = onMetric;\n\n    // Configurar el handler para todas las métricas\n    const reportHandler = (metric: Metric) => {\n      const performanceMetric: PerformanceMetric = {\n        name: metric.name,\n        value: metric.value,\n        rating: metric.rating,\n        timestamp: Date.now(),\n        url: window.location.href,\n        id: metric.id\n      };\n\n      this.metrics.push(performanceMetric);\n      \n      // Log para desarrollo\n      if (import.meta.env.DEV) {\n        console.log(`🎯 Web Vital: ${metric.name}`, {\n          value: Math.round(metric.value),\n          rating: metric.rating,\n          entries: metric.entries\n        });\n      }\n\n      // Callback personalizado\n      this.onMetricCallback?.(performanceMetric);\n    };\n\n    // Registrar todos los Web Vitals\n    onCLS(reportHandler);\n    onINP(reportHandler);\n    onFCP(reportHandler);\n    onLCP(reportHandler);\n    onTTFB(reportHandler);\n  }\n\n  /**\n   * Obtiene todas las métricas recolectadas\n   */\n  public getMetrics(): PerformanceMetric[] {\n    return [...this.metrics];\n  }\n\n  /**\n   * Obtiene métricas por tipo\n   */\n  public getMetricsByName(name: string): PerformanceMetric[] {\n    return this.metrics.filter(metric => metric.name === name);\n  }\n\n  /**\n   * Obtiene el promedio de una métrica específica\n   */\n  public getAverageMetric(name: string): number {\n    const metrics = this.getMetricsByName(name);\n    if (metrics.length === 0) return 0;\n    \n    const sum = metrics.reduce((total, metric) => total + metric.value, 0);\n    return sum / metrics.length;\n  }\n\n  /**\n   * Genera reporte de performance\n   */\n  public getPerformanceReport(): {\n    summary: Record<string, { average: number; latest: number; rating: string }>;\n    metrics: PerformanceMetric[];\n    timestamp: number;\n  } {\n    const metricsNames = ['CLS', 'INP', 'FCP', 'LCP', 'TTFB'];\n    const summary: Record<string, { average: number; latest: number; rating: string }> = {};\n\n    metricsNames.forEach(name => {\n      const metrics = this.getMetricsByName(name);\n      const latest = metrics[metrics.length - 1];\n      \n      summary[name] = {\n        average: Math.round(this.getAverageMetric(name)),\n        latest: latest ? Math.round(latest.value) : 0,\n        rating: latest?.rating || 'unknown'\n      };\n    });\n\n    return {\n      summary,\n      metrics: this.metrics,\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * Limpia todas las métricas\n   */\n  public clearMetrics(): void {\n    this.metrics = [];\n  }\n\n  /**\n   * Evalúa si la performance general es buena\n   */\n  public isPerformanceGood(): boolean {\n    const latestMetrics = ['CLS', 'INP', 'FCP', 'LCP', 'TTFB'].map(name => {\n      const metrics = this.getMetricsByName(name);\n      return metrics[metrics.length - 1];\n    }).filter(Boolean);\n\n    if (latestMetrics.length === 0) return true;\n\n    const goodMetrics = latestMetrics.filter(metric => metric.rating === 'good');\n    return goodMetrics.length / latestMetrics.length >= 0.8;\n  }\n}\n\n// Instancia singleton\nexport const webVitalsService = new WebVitalsService(); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/security/encryption.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/services/AuditedDataExportService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/services/DataExportService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/services/OrganizationService.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":378,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":378,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10796,10799],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10796,10799],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":511,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":511,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14841,14844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14841,14844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/services/PatientService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2393,2451],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":299,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":299,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8451,8514],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":360,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":360,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10076,10140],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":408,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":408,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11592,11595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11592,11595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":440,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":440,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12747,12750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12747,12750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":440,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":440,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12761,12764],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12761,12764],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":472,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":472,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13906,13909],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13906,13909],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🏥 Patient Service - Gestión de Pacientes\n * Cumple HIPAA/GDPR: Cifrado, auditoría, consentimiento explícito, trazabilidad completa\n */\n\nimport { \n  collection, \n  doc, \n  setDoc, \n  getDoc, \n  updateDoc, \n  query, \n  where, \n  getDocs,\n  orderBy,\n  limit\n} from 'firebase/firestore';\n\nimport { db } from '../firebase/firebaseClient';\nimport { FirestoreAuditLogger } from '../audit/FirestoreAuditLogger';\nimport { \n  Patient, \n  ClinicalVisit,\n  generatePatientId,\n  validatePatientProfile,\n  needsFollowUp\n} from '../domain/patientType';\nimport { encryptMetadata, decryptMetadata } from '../security/encryption';\n\nexport class PatientService {\n  private static collectionName = 'patients';\n\n  /**\n   * Crear paciente con auditoría completa\n   */\n  static async createPatient(\n    patient: Omit<Patient, 'id' | 'metadata'>,\n    createdBy: string\n  ): Promise<string> {\n    try {\n      // Validar paciente antes de crear\n      const validation = validatePatientProfile(patient as Patient);\n      if (!validation.isValid) {\n        throw new Error(`Paciente inválido: ${validation.errors.join(', ')}`);\n      }\n\n      // Cifrar datos sensibles\n      const encryptedPatient = await this.encryptSensitiveData(patient);\n\n      // Crear metadata\n      const metadata = {\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy,\n        version: 1,\n        isActive: true\n      };\n\n      // Generar ID único\n      const patientId = generatePatientId(\n        patient.professionalId,\n        patient.personalInfo.firstName,\n        patient.personalInfo.lastName\n      );\n\n      // Guardar en Firestore\n      const docRef = doc(db, this.collectionName, patientId);\n      await setDoc(docRef, {\n        ...encryptedPatient,\n        id: patientId,\n        metadata\n      });\n\n      // Registrar evento de auditoría\n      await FirestoreAuditLogger.logEvent({\n        type: 'patient_created',\n        userId: createdBy,\n        userRole: 'PHYSICIAN', // Asumimos que es un profesional médico\n        patientId,\n        metadata: {\n          patientId,\n          fullName: `${patient.personalInfo.firstName} ${patient.personalInfo.lastName}`,\n          age: new Date().getFullYear() - patient.personalInfo.dateOfBirth.getFullYear(),\n          primaryCondition: patient.medicalInfo.primaryCondition,\n          professionalId: patient.professionalId\n        }\n      });\n\n      console.log('✅ Paciente creado exitosamente:', patientId);\n      return patientId;\n\n    } catch (error) {\n      console.error('❌ Error al crear paciente:', error);\n      throw new Error(`Failed to create patient: ${error}`);\n    }\n  }\n\n  /**\n   * Obtener paciente por ID\n   */\n  static async getPatientById(patientId: string, requestingUserId: string): Promise<Patient | null> {\n    try {\n      const docRef = doc(db, this.collectionName, patientId);\n      const docSnap = await getDoc(docRef);\n\n      if (!docSnap.exists()) {\n        return null;\n      }\n\n      const data = docSnap.data();\n      \n      // Descifrar datos sensibles\n      const decryptedPatient = await this.decryptSensitiveData(data);\n\n      // Registrar acceso para auditoría\n      await FirestoreAuditLogger.logEvent({\n        type: 'patient_accessed',\n        userId: requestingUserId,\n        userRole: 'PHYSICIAN',\n        patientId,\n        metadata: {\n          patientId,\n          accessedBy: requestingUserId,\n          accessType: 'read'\n        }\n      });\n\n      return decryptedPatient as Patient;\n\n    } catch (error) {\n      console.error('❌ Error al obtener paciente:', error);\n      throw new Error(`Failed to get patient: ${error}`);\n    }\n  }\n\n  /**\n   * Obtener pacientes por profesional\n   */\n  static async getPatientsByProfessional(\n    professionalId: string,\n    requestingUserId: string,\n    options: {\n      limit?: number;\n      includeInactive?: boolean;\n      sortBy?: 'name' | 'lastVisit' | 'createdAt';\n    } = {}\n  ): Promise<Patient[]> {\n    try {\n      const { limit: limitCount = 50, includeInactive = false, sortBy = 'lastVisit' } = options;\n\n      let q = query(\n        collection(db, this.collectionName),\n        where('professionalId', '==', professionalId)\n      );\n\n      if (!includeInactive) {\n        q = query(q, where('metadata.isActive', '==', true));\n      }\n\n      // Ordenar por campo específico\n      switch (sortBy) {\n        case 'name':\n          q = query(q, orderBy('personalInfo.lastName'), orderBy('personalInfo.firstName'));\n          break;\n        case 'lastVisit':\n          q = query(q, orderBy('metadata.lastVisitDate', 'desc'));\n          break;\n        case 'createdAt':\n          q = query(q, orderBy('metadata.createdAt', 'desc'));\n          break;\n      }\n\n      q = query(q, limit(limitCount));\n\n      const querySnapshot = await getDocs(q);\n      \n      const patients = await Promise.all(\n        querySnapshot.docs.map(async (doc) => {\n          const data = doc.data();\n          const decryptedPatient = await this.decryptSensitiveData(data);\n          return decryptedPatient as Patient;\n        })\n      );\n\n      // Registrar acceso para auditoría\n      await FirestoreAuditLogger.logEvent({\n        type: 'patients_list_accessed',\n        userId: requestingUserId,\n        userRole: 'PHYSICIAN',\n        metadata: {\n          professionalId,\n          accessedBy: requestingUserId,\n          patientCount: patients.length,\n          includeInactive\n        }\n      });\n\n      return patients;\n\n    } catch (error) {\n      console.error('❌ Error al obtener pacientes por profesional:', error);\n      throw new Error(`Failed to get patients by professional: ${error}`);\n    }\n  }\n\n  /**\n   * Buscar pacientes por nombre\n   */\n  static async searchPatients(\n    professionalId: string,\n    searchTerm: string,\n    requestingUserId: string\n  ): Promise<Patient[]> {\n    try {\n      // Buscar por nombre o apellido (Firestore no soporta búsqueda de texto completo)\n      // Implementación básica - en producción usar Algolia o similar\n      const allPatients = await this.getPatientsByProfessional(professionalId, requestingUserId, { includeInactive: true });\n      \n      const searchLower = searchTerm.toLowerCase();\n      const filteredPatients = allPatients.filter(patient => {\n        const fullName = `${patient.personalInfo.firstName} ${patient.personalInfo.lastName}`.toLowerCase();\n        return fullName.includes(searchLower);\n      });\n\n      // Registrar búsqueda para auditoría\n      await FirestoreAuditLogger.logEvent({\n        type: 'patients_search',\n        userId: requestingUserId,\n        userRole: 'PHYSICIAN',\n        metadata: {\n          professionalId,\n          searchTerm,\n          resultsCount: filteredPatients.length\n        }\n      });\n\n      return filteredPatients;\n\n    } catch (error) {\n      console.error('❌ Error al buscar pacientes:', error);\n      throw new Error(`Failed to search patients: ${error}`);\n    }\n  }\n\n  /**\n   * Actualizar paciente\n   */\n  static async updatePatient(\n    patientId: string,\n    updates: Partial<Patient>,\n    updatedBy: string\n  ): Promise<void> {\n    try {\n      // Obtener paciente actual\n      const currentPatient = await this.getPatientById(patientId, updatedBy);\n      if (!currentPatient) {\n        throw new Error('Paciente no encontrado');\n      }\n\n      // Validar actualizaciones\n      const updatedPatient = { ...currentPatient, ...updates };\n      const validation = validatePatientProfile(updatedPatient);\n      if (!validation.isValid) {\n        throw new Error(`Paciente inválido después de actualización: ${validation.errors.join(', ')}`);\n      }\n\n      // Cifrar datos sensibles actualizados\n      const encryptedUpdates = await this.encryptSensitiveData(updates);\n\n      // Actualizar metadata\n      const metadata = {\n        ...currentPatient.metadata,\n        updatedAt: new Date(),\n        updatedBy,\n        version: currentPatient.metadata.version + 1\n      };\n\n      // Actualizar en Firestore\n      const docRef = doc(db, this.collectionName, patientId);\n      await updateDoc(docRef, {\n        ...encryptedUpdates,\n        metadata\n      });\n\n      // Registrar evento de auditoría\n      await FirestoreAuditLogger.logEvent({\n        type: 'patient_updated',\n        userId: updatedBy,\n        userRole: 'PHYSICIAN',\n        patientId,\n        metadata: {\n          patientId,\n          updatedBy,\n          updatedFields: Object.keys(updates),\n          version: metadata.version\n        }\n      });\n\n      console.log('✅ Paciente actualizado exitosamente:', patientId);\n\n    } catch (error) {\n      console.error('❌ Error al actualizar paciente:', error);\n      throw new Error(`Failed to update patient: ${error}`);\n    }\n  }\n\n  /**\n   * Agregar visita clínica\n   */\n  static async addClinicalVisit(\n    patientId: string,\n    visit: Omit<ClinicalVisit, 'id'>,\n    addedBy: string\n  ): Promise<string> {\n    try {\n      const visitId = `visit_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      const fullVisit: ClinicalVisit = {\n        ...visit,\n        id: visitId\n      };\n\n      // Obtener paciente actual\n      const patient = await this.getPatientById(patientId, addedBy);\n      if (!patient) {\n        throw new Error('Paciente no encontrado');\n      }\n\n      // Agregar visita al historial\n      const updatedVisits = [...patient.clinicalHistory.visits, fullVisit];\n      \n      // Actualizar última fecha de visita\n      await this.updatePatient(patientId, {\n        clinicalHistory: {\n          ...patient.clinicalHistory,\n          visits: updatedVisits\n        },\n        metadata: {\n          ...patient.metadata,\n          lastVisitDate: visit.date\n        }\n      }, addedBy);\n\n      // Registrar evento de auditoría\n      await FirestoreAuditLogger.logEvent({\n        type: 'clinical_visit_added',\n        userId: addedBy,\n        userRole: 'PHYSICIAN',\n        patientId,\n        visitId,\n        metadata: {\n          patientId,\n          visitId,\n          visitType: visit.type,\n          duration: visit.duration,\n          chiefComplaint: visit.chiefComplaint\n        }\n      });\n\n      console.log('✅ Visita clínica agregada exitosamente:', visitId);\n      return visitId;\n\n    } catch (error) {\n      console.error('❌ Error al agregar visita clínica:', error);\n      throw new Error(`Failed to add clinical visit: ${error}`);\n    }\n  }\n\n  /**\n   * Obtener pacientes que necesitan seguimiento\n   */\n  static async getPatientsNeedingFollowUp(\n    professionalId: string,\n    requestingUserId: string,\n    daysThreshold: number = 30\n  ): Promise<Patient[]> {\n    try {\n      const allPatients = await this.getPatientsByProfessional(professionalId, requestingUserId, { includeInactive: true });\n      \n      const patientsNeedingFollowUp = allPatients.filter(patient => \n        needsFollowUp(patient, daysThreshold)\n      );\n\n      // Registrar consulta para auditoría\n      await FirestoreAuditLogger.logEvent({\n        type: 'follow_up_patients_queried',\n        userId: requestingUserId,\n        userRole: 'PHYSICIAN',\n        metadata: {\n          professionalId,\n          daysThreshold,\n          patientsCount: patientsNeedingFollowUp.length\n        }\n      });\n\n      return patientsNeedingFollowUp;\n\n    } catch (error) {\n      console.error('❌ Error al obtener pacientes que necesitan seguimiento:', error);\n      throw new Error(`Failed to get patients needing follow-up: ${error}`);\n    }\n  }\n\n  /**\n   * Cifrar datos sensibles del paciente\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private static async encryptSensitiveData(patient: Partial<Patient>): Promise<any> {\n    const encryptedPatient = { ...patient };\n\n    // Cifrar información personal sensible\n    if (patient.personalInfo) {\n      encryptedPatient.personalInfo = {\n        ...patient.personalInfo,\n        email: patient.personalInfo.email ? await encryptMetadata(patient.personalInfo.email) : undefined,\n        phone: patient.personalInfo.phone ? await encryptMetadata(patient.personalInfo.phone) : undefined,\n        emergencyContact: patient.personalInfo.emergencyContact ? {\n          ...patient.personalInfo.emergencyContact,\n          phone: await encryptMetadata(patient.personalInfo.emergencyContact.phone)\n        } : undefined\n      };\n    }\n\n    // Cifrar información médica sensible\n    if (patient.medicalInfo) {\n      encryptedPatient.medicalInfo = {\n        ...patient.medicalInfo,\n        familyHistory: patient.medicalInfo.familyHistory ? \n          await encryptMetadata(patient.medicalInfo.familyHistory) : ''\n      };\n    }\n\n    return encryptedPatient;\n  }\n\n  /**\n   * Descifrar datos sensibles del paciente\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private static async decryptSensitiveData(data: any): Promise<any> {\n    const decryptedData = { ...data };\n\n    // Descifrar información personal sensible\n    if (data.personalInfo) {\n      decryptedData.personalInfo = {\n        ...data.personalInfo,\n        email: data.personalInfo.email ? await decryptMetadata(data.personalInfo.email) : undefined,\n        phone: data.personalInfo.phone ? await decryptMetadata(data.personalInfo.phone) : undefined,\n        emergencyContact: data.personalInfo.emergencyContact ? {\n          ...data.personalInfo.emergencyContact,\n          phone: await decryptMetadata(data.personalInfo.emergencyContact.phone)\n        } : undefined\n      };\n    }\n\n    // Descifrar información médica sensible\n    if (data.medicalInfo) {\n      decryptedData.medicalInfo = {\n        ...data.medicalInfo,\n        familyHistory: data.medicalInfo.familyHistory ? \n          await decryptMetadata(data.medicalInfo.familyHistory) : undefined\n      };\n    }\n\n    return decryptedData;\n  }\n\n  /**\n   * Exportar paciente para auditoría (sin datos sensibles)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static async exportPatientForAudit(patientId: string): Promise<any> {\n    try {\n      const patient = await this.getPatientById(patientId, 'AUDIT_SYSTEM');\n      if (!patient) {\n        throw new Error('Paciente no encontrado');\n      }\n\n      // Crear versión para auditoría sin datos sensibles\n      const auditPatient = {\n        id: patient.id,\n        professionalId: patient.professionalId,\n        personalInfo: {\n          firstName: patient.personalInfo.firstName,\n          lastName: patient.personalInfo.lastName,\n          dateOfBirth: patient.personalInfo.dateOfBirth,\n          gender: patient.personalInfo.gender,\n          address: patient.personalInfo.address\n        },\n        medicalInfo: {\n          primaryCondition: patient.medicalInfo.primaryCondition,\n          secondaryConditions: patient.medicalInfo.secondaryConditions,\n          allergies: patient.medicalInfo.allergies,\n          lifestyleFactors: patient.medicalInfo.lifestyleFactors\n        },\n        clinicalHistory: {\n          totalVisits: patient.clinicalHistory.visits.length,\n          totalAssessments: patient.clinicalHistory.assessments.length,\n          totalTreatments: patient.clinicalHistory.treatments.length\n        },\n        consent: patient.consent,\n        metadata: {\n          createdAt: patient.metadata.createdAt,\n          lastVisitDate: patient.metadata.lastVisitDate,\n          isActive: patient.metadata.isActive\n        }\n      };\n\n      return auditPatient;\n\n    } catch (error) {\n      console.error('❌ Error al exportar paciente para auditoría:', error);\n      throw new Error(`Failed to export patient for audit: ${error}`);\n    }\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/services/ProfessionalProfileService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":80,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":80,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2307,2375],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":210,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":210,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6084,6157],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":259,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7623,7626],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7623,7626],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":291,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":291,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8639,8642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8639,8642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":291,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":291,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8653,8656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8653,8656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":309,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":309,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9375,9378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9375,9378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":324,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9745,9748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9745,9748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🏥 Professional Profile Service - Gestión de Perfiles Profesionales\n * Cumple HIPAA/GDPR: Cifrado, auditoría, consentimiento explícito, trazabilidad completa\n */\n\nimport { \n  collection, \n  doc, \n  setDoc, \n  getDoc, \n  updateDoc, \n  query, \n  where, \n  getDocs\n} from 'firebase/firestore';\n\nimport { db } from '../firebase/firebaseClient';\nimport { FirestoreAuditLogger } from '../audit/FirestoreAuditLogger';\nimport { \n  ProfessionalProfile, \n  ProfessionalSpecialization, \n  SPECIALIZATIONS,\n  validateProfessionalProfile \n} from '../domain/professionalType';\nimport { encryptMetadata, decryptMetadata } from '../security/encryption';\n\nexport class ProfessionalProfileService {\n  private static collectionName = 'professional_profiles';\n\n  /**\n   * Crear perfil profesional con auditoría completa\n   */\n  static async createProfile(\n    profile: Omit<ProfessionalProfile, 'id' | 'metadata'>,\n    createdBy: string\n  ): Promise<string> {\n    try {\n      // Validar perfil antes de crear\n      const validation = validateProfessionalProfile(profile as ProfessionalProfile);\n      if (!validation.isValid) {\n        throw new Error(`Perfil inválido: ${validation.errors.join(', ')}`);\n      }\n\n      // Cifrar datos sensibles\n      const encryptedProfile = await this.encryptSensitiveData(profile);\n\n      // Crear metadata\n      const metadata = {\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy,\n        version: 1,\n        isActive: true\n      };\n\n      // Generar ID único\n      const profileId = `prof_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n      // Guardar en Firestore\n      const docRef = doc(db, this.collectionName, profileId);\n      await setDoc(docRef, {\n        ...encryptedProfile,\n        id: profileId,\n        metadata\n      });\n\n      // Registrar evento de auditoría\n      await FirestoreAuditLogger.logEvent({\n        type: 'professional_profile_created',\n        userId: createdBy,\n        userRole: profile.systemAccess.role,\n        metadata: {\n          profileId,\n          specialization: profile.professionalInfo.specialization.name,\n          country: profile.personalInfo.country,\n          licenseNumber: profile.personalInfo.licenseNumber.substring(0, 4) + '***' // Parcial para auditoría\n        }\n      });\n\n      console.log('✅ Perfil profesional creado exitosamente:', profileId);\n      return profileId;\n\n    } catch (error) {\n      console.error('❌ Error al crear perfil profesional:', error);\n      throw new Error(`Failed to create professional profile: ${error}`);\n    }\n  }\n\n  /**\n   * Obtener perfil profesional por ID\n   */\n  static async getProfileById(profileId: string, requestingUserId: string): Promise<ProfessionalProfile | null> {\n    try {\n      const docRef = doc(db, this.collectionName, profileId);\n      const docSnap = await getDoc(docRef);\n\n      if (!docSnap.exists()) {\n        return null;\n      }\n\n      const data = docSnap.data();\n      \n      // Descifrar datos sensibles\n      const decryptedProfile = await this.decryptSensitiveData(data);\n\n      // Registrar acceso para auditoría\n      await FirestoreAuditLogger.logEvent({\n        type: 'professional_profile_accessed',\n        userId: requestingUserId,\n        userRole: decryptedProfile.systemAccess.role,\n        metadata: {\n          profileId,\n          accessedBy: requestingUserId,\n          accessType: 'read'\n        }\n      });\n\n      return decryptedProfile as ProfessionalProfile;\n\n    } catch (error) {\n      console.error('❌ Error al obtener perfil profesional:', error);\n      throw new Error(`Failed to get professional profile: ${error}`);\n    }\n  }\n\n  /**\n   * Obtener perfil por userId (Firebase Auth)\n   */\n  static async getProfileByUserId(userId: string): Promise<ProfessionalProfile | null> {\n    try {\n      const q = query(\n        collection(db, this.collectionName),\n        where('userId', '==', userId),\n        where('metadata.isActive', '==', true)\n      );\n\n      const querySnapshot = await getDocs(q);\n      \n      if (querySnapshot.empty) {\n        return null;\n      }\n\n      const doc = querySnapshot.docs[0];\n      const data = doc.data();\n      \n      // Descifrar datos sensibles\n      const decryptedProfile = await this.decryptSensitiveData(data);\n\n      return decryptedProfile as ProfessionalProfile;\n\n    } catch (error) {\n      console.error('❌ Error al obtener perfil por userId:', error);\n      throw new Error(`Failed to get profile by userId: ${error}`);\n    }\n  }\n\n  /**\n   * Actualizar perfil profesional\n   */\n  static async updateProfile(\n    profileId: string,\n    updates: Partial<ProfessionalProfile>,\n    updatedBy: string\n  ): Promise<void> {\n    try {\n      // Obtener perfil actual\n      const currentProfile = await this.getProfileById(profileId, updatedBy);\n      if (!currentProfile) {\n        throw new Error('Perfil no encontrado');\n      }\n\n      // Validar actualizaciones\n      const updatedProfile = { ...currentProfile, ...updates };\n      const validation = validateProfessionalProfile(updatedProfile);\n      if (!validation.isValid) {\n        throw new Error(`Perfil inválido después de actualización: ${validation.errors.join(', ')}`);\n      }\n\n      // Cifrar datos sensibles actualizados\n      const encryptedUpdates = await this.encryptSensitiveData(updates);\n\n      // Actualizar metadata\n      const metadata = {\n        ...currentProfile.metadata,\n        updatedAt: new Date(),\n        updatedBy,\n        version: currentProfile.metadata.version + 1\n      };\n\n      // Actualizar en Firestore\n      const docRef = doc(db, this.collectionName, profileId);\n      await updateDoc(docRef, {\n        ...encryptedUpdates,\n        metadata\n      });\n\n      // Registrar evento de auditoría\n      await FirestoreAuditLogger.logEvent({\n        type: 'professional_profile_updated',\n        userId: updatedBy,\n        userRole: currentProfile.systemAccess.role,\n        metadata: {\n          profileId,\n          updatedBy,\n          updatedFields: Object.keys(updates),\n          version: metadata.version\n        }\n      });\n\n      console.log('✅ Perfil profesional actualizado exitosamente:', profileId);\n\n    } catch (error) {\n      console.error('❌ Error al actualizar perfil profesional:', error);\n      throw new Error(`Failed to update professional profile: ${error}`);\n    }\n  }\n\n  /**\n   * Obtener especializaciones disponibles\n   */\n  static async getAvailableSpecializations(): Promise<ProfessionalSpecialization[]> {\n    try {\n      // Por ahora retornamos las especializaciones predefinidas\n      // En el futuro esto podría venir de Firestore con configuración dinámica\n      return SPECIALIZATIONS;\n    } catch (error) {\n      console.error('❌ Error al obtener especializaciones:', error);\n      throw new Error(`Failed to get specializations: ${error}`);\n    }\n  }\n\n  /**\n   * Verificar si un profesional tiene permisos específicos\n   */\n  static async hasPermission(\n    profileId: string,\n    permission: string,\n    requestingUserId: string\n  ): Promise<boolean> {\n    try {\n      const profile = await this.getProfileById(profileId, requestingUserId);\n      if (!profile) {\n        return false;\n      }\n\n      return profile.systemAccess.permissions.includes(permission) || \n             profile.systemAccess.role === 'OWNER';\n\n    } catch (error) {\n      console.error('❌ Error al verificar permisos:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Cifrar datos sensibles del perfil\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private static async encryptSensitiveData(profile: Partial<ProfessionalProfile>): Promise<any> {\n    const encryptedProfile = { ...profile };\n\n    // Cifrar información personal sensible\n    if (profile.personalInfo) {\n      encryptedProfile.personalInfo = {\n        ...profile.personalInfo,\n        licenseNumber: await encryptMetadata(profile.personalInfo.licenseNumber),\n        phone: profile.personalInfo.phone ? await encryptMetadata(profile.personalInfo.phone) : undefined\n      };\n    }\n\n    // Cifrar certificaciones\n    if (profile.professionalInfo?.certifications) {\n      encryptedProfile.professionalInfo = {\n        ...profile.professionalInfo,\n        certifications: await Promise.all(\n          profile.professionalInfo.certifications.map(async (cert) => ({\n            ...cert,\n            credentialId: await encryptMetadata(cert.credentialId)\n          }))\n        )\n      };\n    }\n\n    return encryptedProfile;\n  }\n\n  /**\n   * Descifrar datos sensibles del perfil\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private static async decryptSensitiveData(data: any): Promise<any> {\n    const decryptedData = { ...data };\n\n    // Descifrar información personal sensible\n    if (data.personalInfo) {\n      decryptedData.personalInfo = {\n        ...data.personalInfo,\n        licenseNumber: await decryptMetadata(data.personalInfo.licenseNumber),\n        phone: data.personalInfo.phone ? await decryptMetadata(data.personalInfo.phone) : undefined\n      };\n    }\n\n    // Descifrar certificaciones\n    if (data.professionalInfo?.certifications) {\n      decryptedData.professionalInfo = {\n        ...data.professionalInfo,\n        certifications: await Promise.all(\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          data.professionalInfo.certifications.map(async (cert: any) => ({\n            ...cert,\n            credentialId: await decryptMetadata(cert.credentialId)\n          }))\n        )\n      };\n    }\n\n    return decryptedData;\n  }\n\n  /**\n   * Exportar perfil para auditoría (sin datos sensibles)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static async exportProfileForAudit(profileId: string): Promise<any> {\n    try {\n      const profile = await this.getProfileById(profileId, 'AUDIT_SYSTEM');\n      if (!profile) {\n        throw new Error('Perfil no encontrado');\n      }\n\n      // Crear versión para auditoría sin datos sensibles\n      const auditProfile = {\n        id: profile.id,\n        personalInfo: {\n          firstName: profile.personalInfo.firstName,\n          lastName: profile.personalInfo.lastName,\n          email: profile.personalInfo.email,\n          country: profile.personalInfo.country,\n          state: profile.personalInfo.state,\n          city: profile.personalInfo.city,\n          licenseNumber: '***' + profile.personalInfo.licenseNumber.slice(-4), // Solo últimos 4 dígitos\n          licenseExpiry: profile.personalInfo.licenseExpiry\n        },\n        professionalInfo: {\n          specialization: profile.professionalInfo.specialization.name,\n          yearsOfExperience: profile.professionalInfo.yearsOfExperience,\n          practiceType: profile.professionalInfo.practiceType,\n          languages: profile.professionalInfo.languages\n        },\n        compliance: profile.compliance,\n        systemAccess: {\n          role: profile.systemAccess.role,\n          lastLoginAt: profile.systemAccess.lastLoginAt\n        },\n        metadata: profile.metadata\n      };\n\n      return auditProfile;\n\n    } catch (error) {\n      console.error('❌ Error al exportar perfil para auditoría:', error);\n      throw new Error(`Failed to export profile for audit: ${error}`);\n    }\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/services/UsageAnalyticsService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":13,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":13,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[259,404],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"interface MetricData {\n  [key: string]: string | number | boolean;\n}\n\nexport const trackMetric = (\n  metricName: string,\n  userId: string,\n  visitId: string,\n  value: number,\n  metadata?: MetricData\n): void => {\n  // Implementación del tracking de métricas\n  console.log('Tracking metric:', {\n    metricName,\n    userId,\n    visitId,\n    value,\n    metadata,\n    timestamp: new Date().toISOString()\n  });\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/sttLocal/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1633,1636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1633,1636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2953,3008],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_audioBlob' is defined but never used.","line":167,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":167,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_audioBlob' is defined but never used.","line":183,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":183,"endColumn":49}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LocalTranscription } from '../../stores/aiModeStore';\n\nexport interface STTLocalConfig {\n  model: 'whisper-tiny' | 'vosk-small' | 'fallback';\n  enableSIMD: boolean;\n  enableWebGPU: boolean;\n  maxAudioDuration: number; // segundos\n  confidenceThreshold: number;\n}\n\nexport interface STTLocalResult {\n  text: string;\n  confidence: number;\n  processingTime: number;\n  model: string;\n  fallback: boolean;\n}\n\nexport interface STTLocalCapabilities {\n  wasmSupported: boolean;\n  simdSupported: boolean;\n  webGPUSupported: boolean;\n  modelsAvailable: string[];\n  maxAudioLength: number;\n}\n\n// Configuración por defecto\nconst DEFAULT_CONFIG: STTLocalConfig = {\n  model: 'fallback',\n  enableSIMD: false,\n  enableWebGPU: false,\n  maxAudioDuration: 300, // 5 minutos\n  confidenceThreshold: 0.7\n};\n\n// Detectar capacidades del navegador\nexport function detectSTTCapabilities(): STTLocalCapabilities {\n  const wasmSupported = typeof WebAssembly !== 'undefined';\n  const simdSupported = wasmSupported && WebAssembly.validate(new Uint8Array([0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00]));\n  const webGPUSupported = 'gpu' in navigator;\n  \n  const modelsAvailable = wasmSupported ? ['whisper-tiny', 'vosk-small'] : ['fallback'];\n  \n  return {\n    wasmSupported,\n    simdSupported,\n    webGPUSupported,\n    modelsAvailable,\n    maxAudioLength: wasmSupported ? 300 : 60 // 5 min con WASM, 1 min sin\n  };\n}\n\n// Clase principal de STT Local\nexport class STTLocalEngine {\n  public async getAudioInfo(blob: Blob): Promise<{ duration: number; sampleRate: number; channels: number }> {\n    // llama al método privado existente\n    return (this as any).validateAudio(blob);\n  }\n  private config: STTLocalConfig;\n  private capabilities: STTLocalCapabilities;\n  private isInitialized: boolean = false;\n  private currentModel: string | null = null;\n\n  constructor(config: Partial<STTLocalConfig> = {}) {\n    this.config = { ...DEFAULT_CONFIG, ...config };\n    this.capabilities = detectSTTCapabilities();\n    this.initialize();\n  }\n\n  private async initialize(): Promise<void> {\n    try {\n      if (!this.capabilities.wasmSupported) {\n        console.warn('STT Local: WebAssembly no soportado, usando modo fallback');\n        this.currentModel = 'fallback';\n        this.isInitialized = true;\n        return;\n      }\n\n      // Intentar cargar el modelo preferido\n      if (this.config.model !== 'fallback' && this.capabilities.modelsAvailable.includes(this.config.model)) {\n        await this.loadModel(this.config.model);\n      } else {\n        this.currentModel = 'fallback';\n      }\n\n      this.isInitialized = true;\n    } catch (error) {\n      console.error('STT Local: Error en inicialización:', error);\n      this.currentModel = 'fallback';\n      this.isInitialized = true;\n    }\n  }\n\n  private async loadModel(modelName: string): Promise<void> {\n    // Placeholder para carga de modelos WASM\n    // En implementación real, aquí se cargarían los archivos .wasm\n    console.log(`STT Local: Cargando modelo ${modelName}`);\n    \n    // Simular carga\n    await new Promise(resolve => setTimeout(resolve, 100));\n    this.currentModel = modelName;\n  }\n\n  // Método principal de transcripción\n  async transcribeLocal(audioBlob: Blob): Promise<STTLocalResult> {\n    if (!this.isInitialized) {\n      throw new Error('STT Local: Motor no inicializado');\n    }\n\n    const startTime = performance.now();\n    \n    try {\n      // Validar audio\n      const audioInfo = await this.validateAudio(audioBlob);\n      \n      if (audioInfo.duration > this.config.maxAudioDuration) {\n        throw new Error(`Audio demasiado largo: ${audioInfo.duration}s > ${this.config.maxAudioDuration}s`);\n      }\n\n      let result: STTLocalResult;\n\n      if (this.currentModel === 'fallback') {\n        result = await this.fallbackTranscription(audioBlob);\n      } else {\n        result = await this.wasmTranscription(audioBlob);\n      }\n\n      result.processingTime = performance.now() - startTime;\n      return result;\n\n    } catch (error) {\n      console.error('STT Local: Error en transcripción:', error);\n      // Fallback a captura sin transcripción\n      return {\n        text: '[Audio capturado - transcripción fallida]',\n        confidence: 0.0,\n        processingTime: performance.now() - startTime,\n        model: 'fallback',\n        fallback: true\n      };\n    }\n  }\n\n  private async validateAudio(audioBlob: Blob): Promise<{ duration: number; sampleRate: number; channels: number }> {\n    return new Promise((resolve, reject) => {\n      const audio = new Audio();\n      const url = URL.createObjectURL(audioBlob);\n      \n      audio.onloadedmetadata = () => {\n        URL.revokeObjectURL(url);\n        return {\n          duration: audio.duration,\n          sampleRate: 44100, // Valor por defecto\n          channels: 1 // Mono por defecto\n        };\n      };\n      \n      audio.onerror = () => {\n        URL.revokeObjectURL(url);\n        reject(new Error('No se pudo validar el audio'));\n      };\n      \n      audio.src = url;\n    });\n  }\n\n  private async wasmTranscription(_audioBlob: Blob): Promise<STTLocalResult> {\n    // Placeholder para transcripción WASM real\n    // En implementación real, aquí se procesaría con el modelo cargado\n    \n    // Simular procesamiento\n    await new Promise(resolve => setTimeout(resolve, 200));\n    \n    return {\n      text: '[Transcripción WASM - placeholder]',\n      confidence: 0.85,\n      processingTime: 0,\n      model: this.currentModel || 'unknown',\n      fallback: false\n    };\n  }\n\n  private async fallbackTranscription(_audioBlob: Blob): Promise<STTLocalResult> {\n    // Modo fallback: solo captura el audio\n    return {\n      text: '[Audio capturado - modo offline]',\n      confidence: 0.0,\n      processingTime: 0,\n      model: 'fallback',\n      fallback: true\n    };\n  }\n\n  // Métodos de utilidad\n  getCapabilities(): STTLocalCapabilities {\n    return { ...this.capabilities };\n  }\n\n  getConfig(): STTLocalConfig {\n    return { ...this.config };\n  }\n\n  updateConfig(newConfig: Partial<STTLocalConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n  }\n\n  isReady(): boolean {\n    return this.isInitialized;\n  }\n}\n\n// Instancia singleton para uso global\nexport const sttLocalEngine = new STTLocalEngine();\n\n// Función de conveniencia para uso directo\nexport async function transcribeLocal(audioBlob: Blob): Promise<STTLocalResult> {\n  return sttLocalEngine.transcribeLocal(audioBlob);\n}\n\n// Función para crear transcripción local\nexport async function createLocalTranscription(\n  audioBlob: Blob,\n  userId: string,\n  sessionId: string\n): Promise<LocalTranscription> {\n  const audioInfo = await sttLocalEngine.getAudioInfo(audioBlob);\n  const result = await transcribeLocal(audioBlob);\n\n  const transcription: LocalTranscription = {\n    id: crypto.randomUUID(),\n    audioBlob: result.fallback ? undefined : audioBlob,\n    text: result.text,\n    confidence: result.confidence,\n    timestamp: new Date(),\n    userId,\n    sessionId,\n    metadata: {\n      duration: audioInfo.duration,\n      sampleRate: audioInfo.sampleRate,\n      channels: audioInfo.channels,\n    },\n  };\n\n  return transcription;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/types/patient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/types/suggestions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/data/spanishCities.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/admin/AuditMetricsDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadMetrics'. Either include it or remove the dependency array.","line":60,"column":6,"nodeType":"ArrayExpression","endLine":60,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadMetrics, user]","fix":{"range":[1890,1896],"text":"[loadMetrics, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\n\nimport { useUser } from '../../core/auth/UserContext';\nimport { AuditPerformanceOptimizer } from '../../core/audit/AuditPerformanceOptimizer';\n\ninterface AuditMetrics {\n  totalEvents: number;\n  eventsByType: Record<string, number>;\n  eventsByUser: Record<string, number>;\n  eventsByHour: Record<string, number>;\n  topPatients: Array<{ patientId: string; accessCount: number }>;\n}\n\ninterface CriticalEvents {\n  failedLogins: number;\n  unauthorizedAccess: number;\n  dataExports: number;\n  logoutEvents: number;\n  patientDataAccess: number;\n  visitDataAccess: number;\n  suspiciousActivity: string[];\n}\n\nexport const AuditMetricsDashboard: React.FC = () => {\n  const { user, hasRole } = useUser();\n  const [metrics, setMetrics] = useState<AuditMetrics | null>(null);\n  const [criticalEvents, setCriticalEvents] = useState<CriticalEvents | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());\n\n  const loadMetrics = async () => {\n    if (!user || !hasRole(['ADMIN', 'OWNER'])) {\n      setError('Acceso denegado: Se requieren permisos de administrador');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    try {\n      const [metricsData, criticalData] = await Promise.all([\n        AuditPerformanceOptimizer.generateAuditMetrics(),\n        AuditPerformanceOptimizer.detectCriticalEvents()\n      ]);\n      \n      setMetrics(metricsData);\n      setCriticalEvents(criticalData);\n      setLastUpdate(new Date());\n    } catch (err) {\n      setError((err as Error).message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadMetrics();\n    const interval = setInterval(loadMetrics, 30000); // Actualizar cada 30 segundos\n    return () => clearInterval(interval);\n  }, [user]);\n\n  if (!user || !hasRole(['ADMIN', 'OWNER'])) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"max-w-md w-full bg-white rounded-lg shadow-lg p-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-red-600 mb-4\">Acceso Denegado</h1>\n            <p className=\"text-gray-600\">Se requieren permisos de administrador para acceder a este dashboard.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Dashboard de Métricas de Auditoría</h1>\n              <p className=\"mt-2 text-gray-600\">\n                Métricas en tiempo real del sistema de auditoría enterprise\n              </p>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm text-gray-500\">\n                Última actualización: {lastUpdate.toLocaleTimeString()}\n              </p>\n              <button\n                onClick={loadMetrics}\n                disabled={loading}\n                className=\"mt-2 px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:opacity-50\"\n              >\n                {loading ? 'Actualizando...' : 'Actualizar'}\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {error && (\n          <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg\">\n            <p className=\"text-red-600\">{error}</p>\n          </div>\n        )}\n\n        {loading && !metrics ? (\n          <div className=\"flex justify-center items-center py-12\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600\"></div>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Métricas Generales */}\n            <div className=\"lg:col-span-1\">\n              <div className=\"bg-white rounded-lg shadow p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Métricas Generales</h3>\n                \n                {metrics && (\n                  <div className=\"space-y-4\">\n                    <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                      <div className=\"text-3xl font-bold text-blue-600\">{metrics.totalEvents}</div>\n                      <div className=\"text-sm text-blue-700\">Total de Eventos</div>\n                    </div>\n                    \n                    <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                      <div className=\"text-3xl font-bold text-green-600\">\n                        {Object.keys(metrics.eventsByType).length}\n                      </div>\n                      <div className=\"text-sm text-green-700\">Tipos de Eventos</div>\n                    </div>\n                    \n                    <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                      <div className=\"text-3xl font-bold text-purple-600\">\n                        {Object.keys(metrics.eventsByUser).length}\n                      </div>\n                      <div className=\"text-sm text-purple-700\">Usuarios Activos</div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Eventos Críticos */}\n            <div className=\"lg:col-span-2\">\n              <div className=\"bg-white rounded-lg shadow p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Eventos Críticos (Últimas 24h)</h3>\n                \n                {criticalEvents && (\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-6\">\n                    <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-red-600\">{criticalEvents.failedLogins}</div>\n                      <div className=\"text-sm text-red-700\">Logins Fallidos</div>\n                    </div>\n                    \n                    <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-orange-600\">{criticalEvents.unauthorizedAccess}</div>\n                      <div className=\"text-sm text-orange-700\">Accesos No Autorizados</div>\n                    </div>\n                    \n                    <div className=\"text-center p-4 bg-yellow-50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-yellow-600\">{criticalEvents.dataExports}</div>\n                      <div className=\"text-sm text-yellow-700\">Exportaciones</div>\n                    </div>\n\n                    <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-blue-600\">{criticalEvents.logoutEvents}</div>\n                      <div className=\"text-sm text-blue-700\">Logouts</div>\n                    </div>\n\n                    <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-green-600\">{criticalEvents.patientDataAccess}</div>\n                      <div className=\"text-sm text-green-700\">Accesos Pacientes</div>\n                    </div>\n\n                    <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-purple-600\">{criticalEvents.visitDataAccess}</div>\n                      <div className=\"text-sm text-purple-700\">Accesos Visitas</div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Actividad Sospechosa */}\n                {criticalEvents?.suspiciousActivity && criticalEvents.suspiciousActivity.length > 0 && (\n                  <div className=\"mt-6\">\n                    <h4 className=\"text-md font-medium text-gray-900 mb-3\">Actividad Sospechosa</h4>\n                    <div className=\"space-y-2\">\n                      {criticalEvents.suspiciousActivity.map((activity, index) => (\n                        <div key={index} className=\"p-3 bg-red-50 border border-red-200 rounded-md\">\n                          <p className=\"text-sm text-red-700\">{activity}</p>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Eventos por Tipo */}\n            {metrics && (\n              <div className=\"lg:col-span-2\">\n                <div className=\"bg-white rounded-lg shadow p-6\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Eventos por Tipo</h3>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    {Object.entries(metrics.eventsByType)\n                      .sort(([,a], [,b]) => b - a)\n                      .slice(0, 8)\n                      .map(([type, count]) => (\n                        <div key={type} className=\"text-center p-3 bg-gray-50 rounded-lg\">\n                          <div className=\"text-lg font-semibold text-gray-900\">{count}</div>\n                          <div className=\"text-xs text-gray-600 truncate\">{type}</div>\n                        </div>\n                      ))}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Top Pacientes */}\n            {metrics && (\n              <div className=\"lg:col-span-1\">\n                <div className=\"bg-white rounded-lg shadow p-6\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Top Pacientes</h3>\n                  <div className=\"space-y-3\">\n                    {metrics.topPatients.slice(0, 5).map((patient, index) => (\n                      <div key={patient.patientId} className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center\">\n                          <span className=\"text-sm font-medium text-gray-900\">\n                            {index + 1}. {patient.patientId}\n                          </span>\n                        </div>\n                        <span className=\"text-sm text-gray-500\">{patient.accessCount} accesos</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/admin/AuditPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/analytics/AnalyticsDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadMetrics'. Either include it or remove the dependency array.","line":15,"column":6,"nodeType":"ArrayExpression","endLine":15,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [dateRange, loadMetrics]","fix":{"range":[513,524],"text":"[dateRange, loadMetrics]"}}]},{"ruleId":"no-unreachable","severity":2,"message":"Unreachable code.","line":277,"column":3,"nodeType":"VariableDeclaration","messageId":"unreachableCode","endLine":295,"endColumn":5}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\n\nimport { analyticsService, type DashboardMetrics } from '../../services/analyticsService';\n\nexport const AnalyticsDashboard: React.FC = () => {\n  const [metrics, setMetrics] = useState<DashboardMetrics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [dateRange, setDateRange] = useState({\n    start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 días atrás\n    end: new Date()\n  });\n\n  useEffect(() => {\n    loadMetrics();\n  }, [dateRange]);\n\n  const loadMetrics = async () => {\n    try {\n      setLoading(true);\n      const dashboardMetrics = await analyticsService.getDashboardMetrics(dateRange);\n      setMetrics(dashboardMetrics);\n    } catch (error) {\n      console.error('Error cargando métricas:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Cargando métricas de analítica...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!metrics) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p className=\"text-gray-600\">No se pudieron cargar las métricas</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Centro de Análisis Operativo y de Uso\n          </h1>\n          <p className=\"text-gray-600\">\n            Métricas en vivo del sistema AiDuxCare\n          </p>\n        </div>\n\n        {/* Date Range Selector */}\n        <div className=\"bg-white rounded-lg shadow p-4 mb-6\">\n          <div className=\"flex items-center space-x-4\">\n            <label htmlFor=\"dateRangeStart\" className=\"text-sm font-medium text-gray-700\">Rango de fechas:</label>\n            <input\n              id=\"dateRangeStart\"\n              type=\"date\"\n              value={dateRange.start.toISOString().split('T')[0]}\n              onChange={(e) => setDateRange(prev => ({\n                ...prev,\n                start: new Date(e.target.value)\n              }))}\n              className=\"border border-gray-300 rounded px-3 py-1\"\n            />\n            <span className=\"text-gray-500\">a</span>\n            <input\n              id=\"dateRangeEnd\"\n              type=\"date\"\n              value={dateRange.end.toISOString().split('T')[0]}\n              onChange={(e) => setDateRange(prev => ({\n                ...prev,\n                end: new Date(e.target.value)\n              }))}\n              className=\"border border-gray-300 rounded px-3 py-1\"\n            />\n            <button\n              onClick={loadMetrics}\n              className=\"px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700\"\n            >\n              Actualizar\n            </button>\n          </div>\n        </div>\n\n        {/* Metrics Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {/* Total Events */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <svg className=\"w-6 h-6 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n                </svg>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Eventos</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {metrics.usageByModule.reduce((sum, module) => sum + module.count, 0)}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Suggestions Acceptance Rate */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <svg className=\"w-6 h-6 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Aceptación Sugerencias</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {metrics.suggestionsMetrics.acceptanceRate.toFixed(1)}%\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Time Saved */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-yellow-100 rounded-lg\">\n                <svg className=\"w-6 h-6 text-yellow-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Tiempo Ahorrado</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {Math.round(metrics.timeMetrics.totalTimeSaved)} min\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Active Users */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-purple-100 rounded-lg\">\n                <svg className=\"w-6 h-6 text-purple-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z\" />\n                </svg>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Usuarios Activos</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {metrics.userMetrics.activeUsers}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Charts Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          {/* Usage by Module */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Uso por Módulo</h3>\n            <div className=\"space-y-3\">\n              {metrics.usageByModule.map((module) => (\n                <div key={module.module} className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium text-gray-700\">{module.module}</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-32 bg-gray-200 rounded-full h-2\">\n                      <div\n                        className=\"bg-purple-600 h-2 rounded-full\"\n                        style={{ width: `${module.percentage}%` }}\n                      ></div>\n                    </div>\n                    <span className=\"text-sm text-gray-500 w-12 text-right\">\n                      {module.count}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Usage by Specialty */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Uso por Especialidad</h3>\n            <div className=\"space-y-3\">\n              {metrics.userMetrics.usageBySpecialty.map((specialty) => (\n                <div key={specialty.specialty} className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium text-gray-700\">{specialty.specialty}</span>\n                  <span className=\"text-sm text-gray-500\">{specialty.count}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Detailed Metrics */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Suggestions Metrics */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Métricas de Sugerencias</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600\">Aceptadas</span>\n                <span className=\"text-sm font-medium text-green-600\">{metrics.suggestionsMetrics.accepted}%</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600\">Rechazadas</span>\n                <span className=\"text-sm font-medium text-red-600\">{metrics.suggestionsMetrics.rejected}%</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Time Metrics */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Métricas de Tiempo</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600\">Duración Promedio</span>\n                <span className=\"text-sm font-medium text-gray-900\">{metrics.timeMetrics.averageSessionDuration} min</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600\">Tiempo Ahorrado/Paciente</span>\n                <span className=\"text-sm font-medium text-gray-900\">{metrics.timeMetrics.timeSavedPerPatient} min</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Error Metrics */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Métricas de Errores</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600\">Total Errores</span>\n                <span className=\"text-sm font-medium text-red-600\">{metrics.errorMetrics.totalErrors}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600\">Tasa de Error</span>\n                <span className=\"text-sm font-medium text-red-600\">{metrics.errorMetrics.errorRate.toFixed(1)}%</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Export Section */}\n        <div className=\"mt-8 bg-white rounded-lg shadow p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Exportar Datos</h3>\n          <div className=\"flex space-x-4\">\n            <button\n              onClick={() => exportData('csv')}\n              className=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700\"\n            >\n              Exportar CSV\n            </button>\n            <button\n              onClick={() => exportData('json')}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n            >\n              Exportar JSON\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const exportData = async (format: 'csv' | 'json') => {\n    try {\n      const data = await analyticsService.exportAnalyticsData(dateRange, format);\n      \n      // Create download link\n      const blob = new Blob([data], { type: format === 'csv' ? 'text/csv' : 'application/json' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `analytics_${dateRange.start.toISOString().split('T')[0]}_${dateRange.end.toISOString().split('T')[0]}.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (error) {\n      console.error('Error exportando datos:', error);\n      alert('Error al exportar datos');\n    }\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/appointments/NewAppointmentModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/appointments/components/WeeklyAgenda.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/auth/LoginPage.tsx","messages":[{"ruleId":"no-restricted-imports","severity":2,"message":"'../../core/firebase/firebaseClient' import is restricted from being used by a pattern. Importa desde @/integrations/firebase en lugar de core/firebase directamente.","line":6,"column":1,"nodeType":"ImportDeclaration","messageId":"patternWithCustomMessage","endLine":6,"endColumn":58}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { getAuth } from 'firebase/auth';\n\nimport { app } from '../../core/firebase/firebaseClient';\n\nconst LoginPage: React.FC = () => {\n  const navigate = useNavigate();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const auth = getAuth(app);\n      await signInWithEmailAndPassword(auth, email, password);\n      navigate('/');\n    } catch (err) {\n      setError('Error de autenticación. Por favor verifica tus credenciales.');\n      console.error('Error de login:', err);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            AiDuxCare Login\n          </h2>\n        </div>\n        <form className=\"mt-8 space-y-6\" onSubmit={handleLogin}>\n          <div className=\"rounded-md shadow-sm -space-y-px\">\n            <div>\n              <label htmlFor=\"email-address\" className=\"sr-only\">\n                Email\n              </label>\n              <input\n                id=\"email-address\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                required\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"password\" className=\"sr-only\">\n                Contraseña\n              </label>\n              <input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                required\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Contraseña\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n            </div>\n          </div>\n\n          {error && (\n            <div className=\"text-red-500 text-sm text-center\">\n              {error}\n            </div>\n          )}\n\n          <div>\n            <button\n              type=\"submit\"\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n            >\n              Iniciar Sesión\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginPage;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/auth/ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/auth/RegisterPage 2.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/auth/RegisterPage.backup.20250823-211002.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/auth/RegisterPage.backup.20250823-215601.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/auth/RegisterPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/command-center/CommandCenterPage.tsx","messages":[{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\n\nimport { useAuth } from '../../hooks/useAuth';\nimport { Card } from '../../shared/ui';\nimport { FloatingAssistant } from '../../components/FloatingAssistant';\n\n// import { useUserProfile } from './hooks/useUserProfile';\nimport { logAction } from '../../analytics/events';\nimport NewAppointmentModal from '../appointments/NewAppointmentModal';\nimport PendingNotesModal from '../notes/PendingNotesModal';\nimport { AuditWidget } from '../../components/AuditWidget';\n\nimport { Greeting } from './components/Greeting';\nimport { usePendingNotesCount } from './hooks/usePendingNotesCount';\nimport { CreatePatientModal } from './components/CreatePatientModal';\n\nexport const CommandCenterPage: React.FC = () => {\n  const navigate = useNavigate();\n  const { user, logout } = useAuth();\n  const isAuthenticated = !!user;\n\n  // Estados para modales\n  const [showCreatePatient, setShowCreatePatient] = useState(false);\n  const [showNewAppt, setShowNewAppt] = useState(false);\n  const [showPendingNotes, setShowPendingNotes] = useState(false);\n  const [showAuditWidget, setShowAuditWidget] = useState(false);\n\n  // Hooks de datos reales\n  // const userProfile = useUserProfile(); // Saludo ahora lo maneja <Greeting/>\n  const pendingNotesCount = usePendingNotesCount();\n\n  // Redirigir si no está autenticado\n  if (!isAuthenticated) {\n    navigate('/login');\n    return null;\n  }\n\n  // Verificar si es admin (placeholder - implementar lógica real)\n  const isAdmin = user?.email?.includes('admin') || user?.uid === 'admin-uid';\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Encabezado personalizado */}\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"flex items-start justify-between mb-8\">\n          <header className=\"mb-2\">\n            <h1 className=\"sr-only\">Centro de Mando</h1>\n            <Greeting />\n          </header>\n          <div className=\"flex gap-3\">\n            {/* Botón de Auditoría solo para admins */}\n            {isAdmin && (\n              <button\n                onClick={() => { \n                  setShowAuditWidget(true); \n                  logAction('open_audit_widget', '/command-center'); \n                }}\n                className=\"bg-slate-600 hover:bg-slate-700 text-white font-medium px-6 py-3 rounded-lg transition-all duration-200 hover:shadow-lg transform hover:-translate-y-0.5\"\n              >\n                📊 Auditoría\n              </button>\n            )}\n            <button\n              onClick={async () => {\n                try {\n                  await logout();\n                  navigate('/login');\n                } catch (error) {\n                  console.error('Error al cerrar sesión:', error);\n                  // Fallback: navegación directa\n                  navigate('/login');\n                }\n              }}\n              className=\"bg-red-600 hover:bg-red-700 text-white font-medium px-6 py-3 rounded-lg transition-all duration-200 hover:shadow-lg transform hover:-translate-y-0.5\"\n            >\n              Cerrar Sesión\n            </button>\n          </div>\n        </div>\n\n        {/* 4 Botones Principales */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n          {/* Mis Citas de Hoy */}\n          <Link to=\"/appointments?scope=today\" className=\"block group\">\n            <Card className=\"p-6 rounded-[1rem] shadow-soft transition-all duration-200 hover:-translate-y-0.5 hover:shadow-lg cursor-pointer\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-brand-in-100 rounded-full flex items-center justify-center mr-4\">\n                    <svg className=\"w-6 h-6 text-brand-in-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                    </svg>\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-slate-900 mb-1\">Mis Citas de Hoy</h3>\n                    <p className=\"text-slate-500 text-sm\">Revisa y gestiona tu agenda</p>\n                  </div>\n                </div>\n                <span className=\"opacity-0 group-hover:opacity-100 transition-opacity text-brand-in-500 text-xl\">→</span>\n              </div>\n            </Card>\n          </Link>\n\n          {/* Nueva cita (sustituye card Pacientes) */}\n          <button \n            onClick={() => { setShowNewAppt(true); logAction('open_new_appointment', '/command-center'); }}\n            className=\"block group w-full\"\n          >\n            <Card className=\"p-6 rounded-[1rem] shadow-soft transition-all duration-200 hover:-translate-y-0.5 hover:shadow-lg cursor-pointer\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-brand-in-100 rounded-full flex items-center justify-center mr-4\">\n                    <svg className=\"w-6 h-6 text-brand-in-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n                    </svg>\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-slate-900 mb-1\">Nueva cita</h3>\n                    <p className=\"text-slate-500 text-sm\">Crea una cita buscando al paciente</p>\n                  </div>\n                </div>\n                <span className=\"opacity-0 group-hover:opacity-100 transition-opacity text-brand-in-500 text-xl\">→</span>\n              </div>\n            </Card>\n          </button>\n\n          {/* Notas Pendientes (abre modal) */}\n          <button onClick={() => { setShowPendingNotes(true); logAction('open_pending_notes', '/command-center'); }} className=\"block group w-full\">\n            <Card className=\"p-6 rounded-[1rem] shadow-soft transition-all duration-200 hover:-translate-y-0.5 hover:shadow-lg cursor-pointer\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-brand-in-100 rounded-full flex items-center justify-center mr-4\">\n                    <svg className=\"w-6 h-6 text-brand-in-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                    </svg>\n                  </div>\n                  <div>\n                    <div className=\"flex items-center mb-1\">\n                      <h3 className=\"text-lg font-semibold text-slate-900\">Notas pendientes</h3>\n                      <span className=\"min-w-[28px] h-6 rounded-full bg-slate-100 text-slate-700 text-xs flex items-center justify-center ml-2\">\n                        {pendingNotesCount.loading ? '...' : pendingNotesCount.error ? '--' : pendingNotesCount.data || 0}\n                      </span>\n                    </div>\n                    <p className=\"text-slate-500 text-sm\">Finaliza borradores y revisiones</p>\n                  </div>\n                </div>\n                <span className=\"opacity-0 group-hover:opacity-100 transition-opacity text-brand-in-500 text-xl\">→</span>\n              </div>\n            </Card>\n          </button>\n\n          {/* Crear Paciente */}\n          <button \n            onClick={() => { setShowCreatePatient(true); logAction('open_create_patient', '/command-center'); }}\n            className=\"block group w-full\"\n          >\n            <Card className=\"p-6 rounded-[1rem] shadow-soft transition-all duration-200 hover:-translate-y-0.5 hover:shadow-lg cursor-pointer\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-brand-in-100 rounded-full flex items-center justify-center mr-4\">\n                    <svg className=\"w-6 h-6 text-brand-in-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n                    </svg>\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-slate-900 mb-1\">Registrar un nuevo paciente</h3>\n                    <p className=\"text-slate-500 text-sm\">Alta rápida de un nuevo paciente</p>\n                  </div>\n                </div>\n                <span className=\"opacity-0 group-hover:opacity-100 transition-opacity text-brand-in-500 text-xl\">→</span>\n              </div>\n            </Card>\n          </button>\n        </div>\n\n        {/* Métricas rápidas eliminadas por simplicidad y evitar duplicación */}\n      </div>\n\n      {/* Modales */}\n      {showCreatePatient && (\n        <CreatePatientModal \n          isOpen={showCreatePatient}\n          onClose={() => setShowCreatePatient(false)}\n        />\n      )}\n\n      <NewAppointmentModal\n        open={showNewAppt}\n        onClose={()=>setShowNewAppt(false)}\n      />\n      <PendingNotesModal open={showPendingNotes} onClose={()=>setShowPendingNotes(false)} />\n\n      {/* Widget de Auditoría */}\n      <AuditWidget \n        isVisible={showAuditWidget}\n        onClose={() => setShowAuditWidget(false)}\n      />\n\n      {/* Asistente Flotante */}\n      <FloatingAssistant />\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/command-center/components/AppointmentCalendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/command-center/components/AppointmentForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/command-center/components/CreatePatientModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/command-center/components/Greeting.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":34,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Timestamp } from 'firebase/firestore';\n\nimport { useProfessionalProfile } from '../../../context/ProfessionalProfileContext';\n\ninterface GreetingProps {\n  className?: string;\n}\n\nexport const Greeting: React.FC<GreetingProps> = ({ className = '' }) => {\n  const { profile, loading } = useProfessionalProfile();\n\n  // Función para obtener saludo según la hora del día\n  const getSaludo = (now: Date): string => {\n    const h = now.getHours();\n    if (h < 12) return 'Buenos días';\n    if (h < 19) return 'Buenas tardes';\n    return 'Buenas noches';\n  };\n\n  // Función para formatear fecha de último acceso\n  const formatLastAccess = (timestamp: Date | Timestamp | undefined): string => {\n    if (!timestamp) return 'Primera vez';\n    \n    try {\n      const date = timestamp instanceof Date ? timestamp : timestamp.toDate();\n      return new Intl.DateTimeFormat('es-ES', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      }).format(date);\n    } catch (error) {\n      return 'Reciente';\n    }\n  };\n\n  // Función para obtener zona horaria\n  const getTimezone = (): string => {\n    if (profile?.timezone) {\n      return profile.timezone;\n    }\n    return Intl.DateTimeFormat().resolvedOptions().timeZone;\n  };\n\n  // Función para obtener nombre de visualización\n  const getDisplayName = (): string => {\n    if (profile?.preferredSalutation && profile?.lastNamePreferred) {\n      return `${profile.preferredSalutation} ${profile.lastNamePreferred}`;\n    }\n    if (profile?.displayName) return profile.displayName;\n    if (profile?.email) {\n      const emailName = profile.email.split('@')[0];\n      return emailName.charAt(0).toUpperCase() + emailName.slice(1);\n    }\n    return 'Usuario';\n  };\n\n  if (loading) {\n    return (\n      <div className={`animate-pulse ${className}`}>\n        <div className=\"h-7 bg-slate-200 rounded w-48 mb-2\"></div>\n        <div className=\"h-4 bg-slate-200 rounded w-64 mb-1\"></div>\n        <div className=\"h-4 bg-slate-200 rounded w-56\"></div>\n      </div>\n    );\n  }\n\n  if (!profile) {\n    return (\n      <div className={`text-slate-600 ${className}`}>\n        <h1 className=\"text-2xl font-semibold mb-1\">Centro de Mando</h1>\n        <p className=\"text-slate-500\">Cargando perfil...</p>\n      </div>\n    );\n  }\n\n  const saludo = getSaludo(new Date());\n  const displayName = getDisplayName();\n  const timezone = getTimezone();\n  const lastAccess = formatLastAccess(profile.lastLoginAt);\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      <h1 className=\"text-2xl font-semibold text-slate-900\">\n        {saludo}, {displayName}\n      </h1>\n      \n      <div className=\"space-y-1 text-slate-600\">\n        {profile.specialty && (\n          <p className=\"text-sm\">\n            {profile.specialty}\n            {profile.clinic?.city && ` • ${profile.clinic.city}`}\n            {profile.clinic?.country && `, ${profile.clinic.country}`}\n          </p>\n        )}\n        \n        <p className=\"text-sm\">\n          {profile.email}\n        </p>\n        \n        <p className=\"text-sm text-slate-500\">\n          Estás en tu espacio seguro. Último acceso: {lastAccess} ({timezone})\n        </p>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/command-center/components/PatientForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/command-center/components/PatientSummaryCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/command-center/components/PreferencesModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/command-center/hooks/useActivePatientsCount.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/command-center/hooks/useAppointmentSchedule.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/command-center/hooks/usePatientSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/command-center/hooks/usePendingNotesCount.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/command-center/hooks/useTodayAppointmentsCount.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/command-center/hooks/useUserProfile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/notes/PendingNotesModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/patient-dashboard/PatientDashboardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/patient-dashboard/components/LastTherapyCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/patient-dashboard/components/PatientHeaderCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/patient-dashboard/hooks/useActiveEpisode.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/patient-dashboard/hooks/useLastEncounter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/patient-dashboard/hooks/usePatientCore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/patient-dashboard/hooks/usePendingReportsCountByPatient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/patient/components/ClinicalFilters.tsx","messages":[{"ruleId":"no-redeclare","severity":2,"message":"'ClinicalFilters' is already defined.","line":26,"column":7,"nodeType":"Identifier","messageId":"redeclared","endLine":26,"endColumn":54}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nexport interface ClinicalFilters {\n  selectedFields: string[];\n  hasSummary: boolean;\n  dateRange: {\n    from: string;\n    to: string;\n  };\n}\n\ninterface ClinicalFiltersProps {\n  filters: ClinicalFilters;\n  onFiltersChange: (filters: ClinicalFilters) => void;\n  totalVisits: number;\n  filteredVisits: number;\n}\n\nconst AVAILABLE_FIELDS = [\n  { id: 'anamnesis', label: 'Anamnesis' },\n  { id: 'diagnostico', label: 'Diagnóstico' },\n  { id: 'plan', label: 'Plan' },\n  { id: 'evolucion', label: 'Evolución' }\n];\n\nconst ClinicalFilters: React.FC<ClinicalFiltersProps> = ({\n  filters,\n  onFiltersChange,\n  totalVisits,\n  filteredVisits\n}) => {\n  const handleFieldToggle = (fieldId: string) => {\n    const newFields = filters.selectedFields.includes(fieldId)\n      ? filters.selectedFields.filter(f => f !== fieldId)\n      : [...filters.selectedFields, fieldId];\n    \n    onFiltersChange({\n      ...filters,\n      selectedFields: newFields\n    });\n  };\n\n  const handleSummaryToggle = () => {\n    onFiltersChange({\n      ...filters,\n      hasSummary: !filters.hasSummary\n    });\n  };\n\n  const handleDateChange = (type: 'from' | 'to', value: string) => {\n    onFiltersChange({\n      ...filters,\n      dateRange: {\n        ...filters.dateRange,\n        [type]: value\n      }\n    });\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm p-4 mb-4\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h3 className=\"text-lg font-medium text-gray-900\">\n          Filtros Clínicos\n        </h3>\n        <span className=\"text-sm text-gray-600\">\n          Mostrando {filteredVisits} de {totalVisits} visitas\n        </span>\n      </div>\n\n      <div className=\"space-y-4\">\n        {/* Campos clínicos */}\n        <div>\n          <label htmlFor=\"fields-ia\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Campos Impactados por IA\n          </label>\n          <div className=\"flex flex-wrap gap-2\" id=\"fields-ia\">\n            {AVAILABLE_FIELDS.map(field => (\n              <button\n                key={field.id}\n                onClick={() => handleFieldToggle(field.id)}\n                className={`px-3 py-1 rounded-full text-sm font-medium transition-colors\n                  ${filters.selectedFields.includes(field.id)\n                    ? 'bg-blue-100 text-blue-800'\n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                  }`}\n              >\n                {field.label}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Resumen IA */}\n        <div className=\"flex items-center\">\n          <label htmlFor=\"hasSummary\" className=\"flex items-center cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              id=\"hasSummary\"\n              checked={filters.hasSummary}\n              onChange={handleSummaryToggle}\n              className=\"h-4 w-4 text-blue-600 rounded border-gray-300\"\n            />\n            <span className=\"ml-2 text-sm text-gray-700\">\n              Solo visitas con resumen clínico generado\n            </span>\n          </label>\n        </div>\n\n        {/* Rango de fechas */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label htmlFor=\"dateFrom\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Desde\n            </label>\n            <input\n              type=\"date\"\n              id=\"dateFrom\"\n              value={filters.dateRange.from}\n              onChange={(e) => handleDateChange('from', e.target.value)}\n              className=\"w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n            />\n          </div>\n          <div>\n            <label htmlFor=\"dateTo\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Hasta\n            </label>\n            <input\n              type=\"date\"\n              id=\"dateTo\"\n              value={filters.dateRange.to}\n              onChange={(e) => handleDateChange('to', e.target.value)}\n              className=\"w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ClinicalFilters; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/patient/components/VisitIndicators.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/patient/components/VisitRecordCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/hooks/useAnalytics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/hooks/useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/hooks/useCompetencySuggestions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/hooks/usePatientQuickSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/hooks/useProcessedEntities.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/hooks/useProfessionalProfile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/hooks/useSoapData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/hooks/useTranscript.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/integrations/firebase/firebase.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[431,434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[431,434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Safe Firebase Bridge – único punto de acceso a Auth usando src/lib/firebase.ts\n\nexport type FirebaseAuth = {\n  signInWithEmailAndPassword: (email: string, password: string) => Promise<void>;\n  signOut: () => Promise<void>;\n  currentUser: { uid: string; email: string } | null;\n};\n\n// Activación por entorno si alguna vez queremos deshabilitar (por ahora siempre true)\nexport const isFirebaseEnabled: boolean =\n  (import.meta as any)?.env?.VITE_FIREBASE_ENABLED !== 'false';\n\nimport { signInWithEmailAndPassword as _login, signOut as _logout } from 'firebase/auth';\n\nimport { auth } from '@/lib/firebase';\n\nconst realImpl: FirebaseAuth = {\n  signInWithEmailAndPassword: async (email: string, password: string) => {\n    await _login(auth, email, password);\n  },\n  signOut: async () => {\n    await _logout(auth);\n  },\n  get currentUser() {\n    const u = auth.currentUser;\n    return u ? { uid: u.uid, email: u.email || '' } : null;\n  },\n};\n\n// Si en algún momento se deshabilita Firebase, devolvemos un stub seguro.\nconst stubImpl: FirebaseAuth = {\n  signInWithEmailAndPassword: async () => { return; },\n  signOut: async () => { return; },\n  currentUser: null,\n};\n\nexport async function getAuthBridge(): Promise<FirebaseAuth> {\n  return isFirebaseEnabled ? realImpl : stubImpl;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/integrations/firebase/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/lib/analytics.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":17,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":17,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[433,488],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Servicio de analytics para tracking de eventos\n */\n\ninterface TrackEvent {\n  [key: string]: string | number | boolean | undefined;\n}\n\n/**\n * Registra un evento de analytics\n * @param eventName Nombre del evento\n * @param properties Propiedades adicionales del evento\n */\nexport const track = (eventName: string, properties?: TrackEvent): void => {\n  // En desarrollo, solo logueamos los eventos\n  if (import.meta.env.DEV) {\n  console.log('Analytics event:', eventName, properties);\n    return;\n  }\n\n  // TODO: Implementar integración real con servicio de analytics\n  // Por ahora es un stub\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/lib/firebase.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1797,1903],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1904,2002],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Configuración y inicialización de Firebase\n * @version 2.0.0 - Pipeline PROD sin emuladores\n * @author AiDuxCare Development Team\n */\n\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, setPersistence, browserLocalPersistence } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getFunctions } from 'firebase/functions';\n\n// GUARDRAILS: NO emuladores en PROD\nconst useEmulators = import.meta.env.VITE_USE_EMULATORS === 'true';\nconst envTarget = import.meta.env.VITE_ENV_TARGET || 'PROD';\n\n// BLOQUEO DE SEGURIDAD: Si es PROD, emuladores están PROHIBIDOS\nif (envTarget === 'PROD' && useEmulators) {\n  throw new Error(' SEGURIDAD: Emuladores PROHIBIDOS en PROD. VITE_USE_EMULATORS debe ser false');\n}\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\n// Validación de configuración\nif (!firebaseConfig.apiKey || !firebaseConfig.projectId) {\n  throw new Error(' CONFIGURACIÓN: VITE_FIREBASE_API_KEY y VITE_FIREBASE_PROJECT_ID son obligatorios');\n}\n\nconst app = initializeApp(firebaseConfig);\n\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\n\n// Inicialización condicional de Functions\nlet functions;\ntry {\n  functions = getFunctions(app, 'europe-west1');\n} catch (error) {\n  console.warn('⚠️ Firebase Functions no disponible:', error);\n  functions = null;\n}\n\nexport { functions };\n\n// PROD: Configurar persistencia local\nsetPersistence(auth, browserLocalPersistence);\n\n// Log de conexión con guardrails\nconsole.log(` Firebase conectado a ${useEmulators ? 'EMULADORES' : 'PROD'}: ${firebaseConfig.projectId}`);\nconsole.log(` Entorno: ${envTarget} | Emuladores: ${useEmulators ? 'PERMITIDOS' : 'BLOQUEADOS'}`);\n\n// BLOQUEO FINAL: Si es PROD, verificar que no hay conexiones a localhost\nif (envTarget === 'PROD') {\n  const currentUrl = window.location.href;\n  if (currentUrl.includes('localhost') || currentUrl.includes('127.0.0.1')) {\n    console.warn('⚠️ ADVERTENCIA: Ejecutando PROD en localhost. Verificar configuración.');\n  }\n}\n\nexport default app;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/lib/firebaseActionCode.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/lib/headless-ui.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/lib/ollama.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":186,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":186,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🤖 AiDuxCare - Cliente Ollama\n * Integración local LLM gratuita para procesamiento médico\n */\n\nexport interface OllamaResponse {\n  response: string;\n  tokens: number;\n  duration: number;\n  model: string;\n}\n\nexport interface OllamaStreamResponse {\n  model: string;\n  created_at: string;\n  response: string;\n  done: boolean;\n  context?: number[];\n  total_duration?: number;\n  load_duration?: number;\n  prompt_eval_count?: number;\n  prompt_eval_duration?: number;\n  eval_count?: number;\n  eval_duration?: number;\n}\n\nexport class OllamaClient {\n  private baseUrl: string;\n  private model: string;\n  private timeout: number;\n\n  constructor(\n    baseUrl = (typeof import.meta !== 'undefined' && import.meta.env?.VITE_OLLAMA_URL) || 'http://localhost:11434',\n    model = (typeof import.meta !== 'undefined' && import.meta.env?.VITE_OLLAMA_MODEL) || 'llama3.2:3b',\n    timeout = 30000\n  ) {\n    this.baseUrl = baseUrl;\n    this.model = model;\n    this.timeout = timeout;\n  }\n\n  /**\n   * Verifica si Ollama está disponible\n   */\n  async isAvailable(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/tags`, {\n        method: 'GET',\n        signal: AbortSignal.timeout(5000)\n      });\n      return response.ok;\n    } catch (error) {\n      console.warn('Ollama no disponible:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Lista modelos disponibles en Ollama\n   */\n  async listModels(): Promise<string[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/tags`);\n      const data: { models?: Array<{ name: string }> } = await response.json();\n      return data.models?.map((m) => m.name) || [];\n    } catch (error) {\n      console.error('Error listing models:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Genera completion simple\n   */\n  async generateCompletion(prompt: string, options?: {\n    temperature?: number;\n    max_tokens?: number;\n    top_p?: number;\n    stream?: boolean;\n    timeout?: number;\n  }): Promise<OllamaResponse> {\n    const requestBody = {\n      model: this.model,\n      prompt,\n      stream: false,\n      options: {\n        temperature: options?.temperature || 0.3,\n        top_p: options?.top_p || 0.9,\n        num_predict: options?.max_tokens || 2000,\n        stop: ['<|eot_id|>', '</s>']\n      }\n    };\n\n    try {\n      const startTime = Date.now();\n      const timeoutMs = options?.timeout || this.timeout;\n      \n      const response = await fetch(`${this.baseUrl}/api/generate`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestBody),\n        signal: AbortSignal.timeout(timeoutMs)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Ollama API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data: OllamaStreamResponse = await response.json();\n      const duration = Date.now() - startTime;\n\n      return {\n        response: data.response || '',\n        tokens: data.eval_count || 0,\n        duration,\n        model: data.model\n      };\n    } catch (error) {\n      console.error('Error en generateCompletion:', error);\n      throw new Error(`Falló la generación: ${error instanceof Error ? error.message : 'Error desconocido'}`);\n    }\n  }\n\n  /**\n   * Chat completion compatible con formato OpenAI\n   */\n  async chatCompletion(messages: Array<{\n    role: 'system' | 'user' | 'assistant';\n    content: string;\n  }>, options?: {\n    temperature?: number;\n    max_tokens?: number;\n  }): Promise<string> {\n    // Convertir mensajes a formato de prompt para Ollama\n    const prompt = this.formatMessagesToPrompt(messages);\n    \n    const result = await this.generateCompletion(prompt, options);\n    return result.response;\n  }\n\n  /**\n   * Formatea mensajes al estilo de prompt de Llama\n   */\n  private formatMessagesToPrompt(messages: Array<{\n    role: 'system' | 'user' | 'assistant';\n    content: string;\n  }>): string {\n    let prompt = '<|begin_of_text|>';\n    \n    for (const message of messages) {\n      switch (message.role) {\n        case 'system':\n          prompt += `<|start_header_id|>system<|end_header_id|>\\n\\n${message.content}<|eot_id|>`;\n          break;\n        case 'user':\n          prompt += `<|start_header_id|>user<|end_header_id|>\\n\\n${message.content}<|eot_id|>`;\n          break;\n        case 'assistant':\n          prompt += `<|start_header_id|>assistant<|end_header_id|>\\n\\n${message.content}<|eot_id|>`;\n          break;\n      }\n    }\n    \n    // Agregar inicio de respuesta del asistente\n    prompt += '<|start_header_id|>assistant<|end_header_id|>\\n\\n';\n    \n    return prompt;\n  }\n\n  /**\n   * Genera embedding (si el modelo lo soporta)\n   */\n  async generateEmbedding(text: string): Promise<number[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/embeddings`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          model: this.model,\n          prompt: text\n        })\n      });\n\n      const data = await response.json();\n      return data.embedding || [];\n    } catch (error) {\n      console.warn('Embeddings no soportados en este modelo');\n      return [];\n    }\n  }\n\n  /**\n   * Obtiene información del modelo actual\n   */\n  async getModelInfo(): Promise<{\n    name: string;\n    size: string;\n    family: string;\n    parameters: string;\n  } | null> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/show`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name: this.model })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        return {\n          name: data.details?.family || this.model,\n          size: data.details?.parameter_size || 'Unknown',\n          family: data.details?.format || 'Unknown',\n          parameters: data.details?.parameters || 'Unknown'\n        };\n      }\n      return null;\n    } catch (error) {\n      console.error('Error getting model info:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Health check completo\n   */\n  async healthCheck(): Promise<{\n    status: 'healthy' | 'unhealthy';\n    model: string;\n    version?: string;\n    latency_ms?: number;\n    error?: string;\n  }> {\n    try {\n      const startTime = Date.now();\n      \n      // Test básico de conectividad\n      const isAvailable = await this.isAvailable();\n      if (!isAvailable) {\n        return {\n          status: 'unhealthy',\n          model: this.model,\n          error: 'Ollama server not responding'\n        };\n      }\n\n      // Test de generación simple\n      await this.generateCompletion('Test', { max_tokens: 1 });\n      const latency = Date.now() - startTime;\n\n      return {\n        status: 'healthy',\n        model: this.model,\n        latency_ms: latency\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        model: this.model,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n}\n\n// Instancia global del cliente\nexport const ollamaClient = new OllamaClient();\n\n// Función de utilidad para verificar si Ollama está configurado\nexport const isOllamaConfigured = (): boolean => {\n  return (\n    import.meta.env.VITE_LLM_PROVIDER === 'ollama' &&\n    Boolean(import.meta.env.VITE_OLLAMA_URL) &&\n    Boolean(import.meta.env.VITE_OLLAMA_MODEL)\n  );\n};\n\n// Función de utilidad para obtener configuración\nexport const getOllamaConfig = () => ({\n  provider: import.meta.env.VITE_LLM_PROVIDER,\n  url: import.meta.env.VITE_OLLAMA_URL,\n  model: import.meta.env.VITE_OLLAMA_MODEL\n}); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/main.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":14,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":14,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[496,542],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":17,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":17,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[586,620],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './App';\nimport './index.css';\nimport { AuthProvider } from './context/AuthContext';\nimport { ProfessionalProfileProvider } from './context/ProfessionalProfileContext';\n\n// Service Worker solo en PRODUCCIÓN\nif ('serviceWorker' in navigator && import.meta.env.PROD) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/sw.js')\n      .then((registration) => {\n        console.log('✅ SW registrado:', registration);\n      })\n      .catch((error) => {\n        console.log('❌ SW falló:', error);\n      });\n  });\n}\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <AuthProvider>\n      <ProfessionalProfileProvider>\n        <App />\n      </ProfessionalProfileProvider>\n    </AuthProvider>\n  </StrictMode>,\n);","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/AILightDemoPage.simple.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/AILightDemoPage.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3248,3311],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":108,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":108,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3687,3733],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":114,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":114,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3849,3894],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\n\nimport { useAiModeStore, useOfflineMode, useAiLightLocalSTT, usePromoteToProOnReconnect } from '../stores/aiModeStore';\nimport { createLocalTranscription } from '../core/sttLocal';\nimport PromoteToProButton from '../components/PromoteToProButton';\n\nconst AILightDemoPage: React.FC = () => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);\n  const [transcription, setTranscription] = useState<string>('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [networkStatus, setNetworkStatus] = useState(navigator.onLine);\n\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioChunksRef = useRef<Blob[]>([]);\n\n  const { setFlag, addLocalTranscription } = useAiModeStore();\n  const offlineMode = useOfflineMode();\n  const aiLightLocalSTT = useAiLightLocalSTT();\n  const promoteToProOnReconnect = usePromoteToProOnReconnect();\n\n  // Monitorear estado de red\n  useEffect(() => {\n    const handleOnline = () => setNetworkStatus(true);\n    const handleOffline = () => setNetworkStatus(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Función para iniciar grabación\n  const startRecording = async () => {\n    try {\n      setError(null);\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      \n      mediaRecorderRef.current = new MediaRecorder(stream, {\n        mimeType: 'audio/webm;codecs=opus'\n      });\n\n      audioChunksRef.current = [];\n\n      mediaRecorderRef.current.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorderRef.current.onstop = async () => {\n        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });\n        setAudioBlob(audioBlob);\n        \n        if (aiLightLocalSTT) {\n          await processLocalTranscription(audioBlob);\n        }\n        \n        // Liberar stream\n        stream.getTracks().forEach(track => track.stop());\n      };\n\n      mediaRecorderRef.current.start();\n      setIsRecording(true);\n      \n    } catch (error) {\n      setError('Error accediendo al micrófono: ' + (error instanceof Error ? error.message : 'Error desconocido'));\n    }\n  };\n\n  // Función para detener grabación\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n\n  // Función para procesar transcripción local\n  const processLocalTranscription = async (audioBlob: Blob) => {\n    setIsProcessing(true);\n    try {\n      const userId = 'demo-user';\n      const sessionId = crypto.randomUUID();\n      \n      const localTranscription = await createLocalTranscription(audioBlob, userId, sessionId);\n      \n      addLocalTranscription(localTranscription);\n      setTranscription(localTranscription.text);\n      \n      console.log('Transcripción local creada:', localTranscription);\n      \n    } catch (error) {\n      setError('Error en transcripción local: ' + (error instanceof Error ? error.message : 'Error desconocido'));\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Función para simular desconexión de red\n  const simulateOffline = () => {\n    setFlag('offlineMode', true);\n    // En un entorno real, aquí se desconectaría la red\n    console.log('Modo offline simulado activado');\n  };\n\n  // Función para simular reconexión\n  const simulateOnline = () => {\n    setFlag('offlineMode', false);\n    console.log('Modo online simulado activado');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4\">\n        <div className=\"bg-white rounded-lg shadow-lg p-6 mb-6\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n            AI Light + Offline Mode Demo\n          </h1>\n          <p className=\"text-gray-600 mb-6\">\n            Demostración del módulo híbrido local/servidor para captura y transcripción de audio.\n          </p>\n\n          {/* Estado de la red */}\n          <div className=\"mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <span className={`inline-block w-3 h-3 rounded-full ${\n                  networkStatus ? 'bg-green-400' : 'bg-red-400'\n                }`} />\n                <span className=\"font-medium\">\n                  Estado de red: {networkStatus ? 'Online' : 'Offline'}\n                </span>\n              </div>\n              <div className=\"flex space-x-2\">\n                <button\n                  onClick={simulateOffline}\n                  className=\"px-3 py-1 text-sm bg-red-100 text-red-700 rounded hover:bg-red-200\"\n                >\n                  Simular Offline\n                </button>\n                <button\n                  onClick={simulateOnline}\n                  className=\"px-3 py-1 text-sm bg-green-100 text-green-700 rounded hover:bg-green-200\"\n                >\n                  Simular Online\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Controles de configuración */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n            <div className=\"flex items-center space-x-3\">\n              <input\n                type=\"checkbox\"\n                id=\"offlineMode\"\n                checked={offlineMode}\n                onChange={(e) => setFlag('offlineMode', e.target.checked)}\n                className=\"w-4 h-4 text-blue-600 rounded focus:ring-blue-500\"\n              />\n              <label htmlFor=\"offlineMode\" className=\"text-sm font-medium text-gray-700\">\n                Modo Offline\n              </label>\n            </div>\n\n            <div className=\"flex items-center space-x-3\">\n              <input\n                type=\"checkbox\"\n                id=\"aiLightLocalSTT\"\n                checked={aiLightLocalSTT}\n                onChange={(e) => setFlag('aiLightLocalSTT', e.target.checked)}\n                className=\"w-4 h-4 text-blue-600 rounded focus:ring-blue-500\"\n              />\n              <label htmlFor=\"aiLightLocalSTT\" className=\"text-sm font-medium text-gray-700\">\n                STT Local\n              </label>\n            </div>\n\n            <div className=\"flex items-center space-x-3\">\n              <input\n                type=\"checkbox\"\n                id=\"promoteToProOnReconnect\"\n                checked={promoteToProOnReconnect}\n                onChange={(e) => setFlag('promoteToProOnReconnect', e.target.checked)}\n                className=\"w-4 h-4 text-blue-600 rounded focus:ring-blue-500\"\n              />\n              <label htmlFor=\"promoteToProOnReconnect\" className=\"text-sm font-medium text-gray-700\">\n                Auto-Promote\n              </label>\n            </div>\n          </div>\n\n          {/* Controles de grabación */}\n          <div className=\"mb-6\">\n            <div className=\"flex items-center space-x-4\">\n              <button\n                onClick={isRecording ? stopRecording : startRecording}\n                disabled={isProcessing}\n                className={`\n                  px-6 py-3 rounded-lg font-medium transition-all duration-200\n                  ${isRecording\n                    ? 'bg-red-500 text-white hover:bg-red-600'\n                    : 'bg-blue-500 text-white hover:bg-blue-600'\n                  }\n                  disabled:opacity-50 disabled:cursor-not-allowed\n                `}\n              >\n                {isRecording ? 'Detener Grabación' : 'Iniciar Grabación'}\n              </button>\n\n              {isProcessing && (\n                <div className=\"flex items-center space-x-2 text-blue-600\">\n                  <svg className=\"animate-spin h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\">\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" />\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\n                  </svg>\n                  <span>Procesando...</span>\n                </div>\n              )}\n            </div>\n\n            {isRecording && (\n              <div className=\"mt-3 flex items-center space-x-2 text-red-600\">\n                <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z\" clipRule=\"evenodd\" />\n                </svg>\n                <span className=\"animate-pulse\">Grabando...</span>\n              </div>\n            )}\n          </div>\n\n          {/* Error */}\n          {error && (\n            <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded text-red-700\">\n              {error}\n            </div>\n          )}\n\n          {/* Transcripción */}\n          {transcription && (\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">Transcripción Local</h3>\n              <div className=\"p-4 bg-gray-50 border rounded-lg\">\n                <p className=\"text-gray-700\">{transcription}</p>\n              </div>\n            </div>\n          )}\n\n          {/* Audio grabado */}\n          {audioBlob && (\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">Audio Grabado</h3>\n              <audio controls className=\"w-full\">\n                <source src={URL.createObjectURL(audioBlob)} type=\"audio/webm\" />\n                <track kind=\"captions\" src=\"\" label=\"Español\" />\n                Tu navegador no soporta el elemento de audio.\n              </audio>\n            </div>\n          )}\n\n          {/* Promote to Pro Button */}\n          {transcription && (\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-3\">Promote to Pro</h3>\n              <PromoteToProButton />\n            </div>\n          )}\n        </div>\n\n        {/* Información del módulo */}\n        <div className=\"bg-white rounded-lg shadow-lg p-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Información del Módulo</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h3 className=\"font-medium text-gray-800 mb-2\">Características</h3>\n              <ul className=\"text-sm text-gray-600 space-y-1\">\n                <li>• Grabación de audio offline</li>\n                <li>• Transcripción local con WASM</li>\n                <li>• Almacenamiento cifrado en IndexedDB</li>\n                <li>• Background sync automático</li>\n                <li>• Promote to Pro automático/manual</li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-medium text-gray-800 mb-2\">Estado Actual</h3>\n              <ul className=\"text-sm text-gray-600 space-y-1\">\n                <li>• Modo Offline: {offlineMode ? 'Activado' : 'Desactivado'}</li>\n                <li>• STT Local: {aiLightLocalSTT ? 'Activado' : 'Desactivado'}</li>\n                <li>• Auto-Promote: {promoteToProOnReconnect ? 'Activado' : 'Desactivado'}</li>\n                <li>• Service Worker: {navigator.serviceWorker ? 'Disponible' : 'No disponible'}</li>\n                <li>• WebAssembly: {typeof WebAssembly !== 'undefined' ? 'Soportado' : 'No soportado'}</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AILightDemoPage;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/AccessPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/AccountActivationPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/AnalyticsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/AppointmentsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/ClinicalInfoPage.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":328,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":328,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12960,13018],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\n\ninterface PatientData {\n  id: string;\n  name: string;\n  age: number;\n  gender: 'male' | 'female' | 'other';\n  contact: string;\n  emergencyContact: string;\n  medicalHistory: string;\n  currentMedications: string[];\n  allergies: string[];\n  warnings: string[];\n  previousVisits: Visit[];\n}\n\ninterface Visit {\n  id: string;\n  date: Date;\n  diagnosis: string;\n  treatment: string;\n  notes: string;\n}\n\nexport const ClinicalInfoPage: React.FC = () => {\n  const [patientData, setPatientData] = useState<PatientData>({\n    id: 'P001',\n    name: 'María González',\n    age: 45,\n    gender: 'female',\n    contact: '+56 9 1234 5678',\n    emergencyContact: '+56 9 8765 4321',\n    medicalHistory: 'Hipertensión arterial, diabetes tipo 2, artritis reumatoide',\n    currentMedications: [\n      'Metformina 500mg 2x día',\n      'Losartán 50mg 1x día',\n      'Ibuprofeno 400mg según necesidad'\n    ],\n    allergies: ['Penicilina', 'Sulfamidas'],\n    warnings: [\n      'Paciente con riesgo cardiovascular alto',\n      'Requiere monitoreo de glucemia diario',\n      'Evitar ejercicios de alto impacto'\n    ],\n    previousVisits: [\n      {\n        id: 'V001',\n        date: new Date('2024-01-15'),\n        diagnosis: 'Dolor lumbar crónico',\n        treatment: 'Fisioterapia, ejercicios de fortalecimiento',\n        notes: 'Mejora significativa con tratamiento'\n      },\n      {\n        id: 'V002',\n        date: new Date('2024-02-20'),\n        diagnosis: 'Tendinitis rotuliana',\n        treatment: 'Reposo, hielo, antiinflamatorios',\n        notes: 'Dolor persistente en rodilla derecha'\n      }\n    ]\n  });\n\n  const [isEditing, setIsEditing] = useState(false);\n\n  return (\n    <div className=\"h-full bg-white rounded-lg shadow-sm border\" style={{ borderColor: '#BDC3C7' }}>\n      {/* Header */}\n      <div className=\"p-6 border-b\" style={{ borderColor: '#BDC3C7' }}>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold\" style={{ color: '#2C3E50' }}>\n              Información Clínica\n            </h1>\n            <p className=\"text-sm mt-1\" style={{ color: '#BDC3C7' }}>\n              Datos personales, historial médico y medicamentos\n            </p>\n          </div>\n          <button\n            onClick={() => setIsEditing(!isEditing)}\n            className=\"px-4 py-2 rounded-lg text-sm font-medium transition-colors\"\n            style={{\n              backgroundColor: isEditing ? '#E74C3C' : '#5DA5A3',\n              color: 'white'\n            }}\n          >\n            {isEditing ? 'Cancelar' : 'Editar'}\n          </button>\n        </div>\n      </div>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Datos Personales */}\n        <div className=\"bg-gray-50 rounded-lg p-4\">\n          <h2 className=\"text-lg font-semibold mb-4\" style={{ color: '#2C3E50' }}>\n            Datos Personales\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label htmlFor=\"name\" className=\"block text-sm font-medium mb-1\" style={{ color: '#2C3E50' }}>\n                Nombre Completo\n              </label>\n              <input\n                id=\"name\"\n                type=\"text\"\n                value={patientData.name}\n                onChange={(e) => setPatientData({...patientData, name: e.target.value})}\n                disabled={!isEditing}\n                className=\"w-full px-3 py-2 border rounded-lg text-sm\"\n                style={{ borderColor: '#BDC3C7', color: '#2C3E50' }}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"age\" className=\"block text-sm font-medium mb-1\" style={{ color: '#2C3E50' }}>\n                Edad\n              </label>\n              <input\n                id=\"age\"\n                type=\"number\"\n                value={patientData.age}\n                onChange={(e) => setPatientData({...patientData, age: parseInt(e.target.value)})}\n                disabled={!isEditing}\n                className=\"w-full px-3 py-2 border rounded-lg text-sm\"\n                style={{ borderColor: '#BDC3C7', color: '#2C3E50' }}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"contact\" className=\"block text-sm font-medium mb-1\" style={{ color: '#2C3E50' }}>\n                Teléfono\n              </label>\n              <input\n                id=\"contact\"\n                type=\"tel\"\n                value={patientData.contact}\n                onChange={(e) => setPatientData({...patientData, contact: e.target.value})}\n                disabled={!isEditing}\n                className=\"w-full px-3 py-2 border rounded-lg text-sm\"\n                style={{ borderColor: '#BDC3C7', color: '#2C3E50' }}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"emergencyContact\" className=\"block text-sm font-medium mb-1\" style={{ color: '#2C3E50' }}>\n                Contacto de Emergencia\n              </label>\n              <input\n                id=\"emergencyContact\"\n                type=\"tel\"\n                value={patientData.emergencyContact}\n                onChange={(e) => setPatientData({...patientData, emergencyContact: e.target.value})}\n                disabled={!isEditing}\n                className=\"w-full px-3 py-2 border rounded-lg text-sm\"\n                style={{ borderColor: '#BDC3C7', color: '#2C3E50' }}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Historial Médico */}\n        <div className=\"bg-gray-50 rounded-lg p-4\">\n          <h2 className=\"text-lg font-semibold mb-4\" style={{ color: '#2C3E50' }}>\n            Historial Médico\n          </h2>\n          <textarea\n            value={patientData.medicalHistory}\n            onChange={(e) => setPatientData({...patientData, medicalHistory: e.target.value})}\n            disabled={!isEditing}\n            rows={4}\n            className=\"w-full px-3 py-2 border rounded-lg text-sm resize-none\"\n            style={{ borderColor: '#BDC3C7', color: '#2C3E50' }}\n            placeholder=\"Describa el historial médico del paciente...\"\n          />\n        </div>\n\n        {/* Medicamentos Actuales */}\n        <div className=\"bg-gray-50 rounded-lg p-4\">\n          <h2 className=\"text-lg font-semibold mb-4\" style={{ color: '#2C3E50' }}>\n            Medicamentos de Uso Regular\n          </h2>\n          <div className=\"space-y-2\">\n            {patientData.currentMedications.map((medication, index) => (\n              <div key={index} className=\"flex items-center space-x-2\">\n                <input\n                  type=\"text\"\n                  value={medication}\n                  onChange={(e) => {\n                    const newMedications = [...patientData.currentMedications];\n                    newMedications[index] = e.target.value;\n                    setPatientData({...patientData, currentMedications: newMedications});\n                  }}\n                  disabled={!isEditing}\n                  className=\"flex-1 px-3 py-2 border rounded-lg text-sm\"\n                  style={{ borderColor: '#BDC3C7', color: '#2C3E50' }}\n                />\n                {isEditing && (\n                  <button\n                    onClick={() => {\n                      const newMedications = patientData.currentMedications.filter((_, i) => i !== index);\n                      setPatientData({...patientData, currentMedications: newMedications});\n                    }}\n                    className=\"px-2 py-2 text-red-500 hover:bg-red-50 rounded-lg\"\n                  >\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"/>\n                    </svg>\n                  </button>\n                )}\n              </div>\n            ))}\n            {isEditing && (\n              <button\n                onClick={() => {\n                  setPatientData({\n                    ...patientData,\n                    currentMedications: [...patientData.currentMedications, '']\n                  });\n                }}\n                className=\"px-4 py-2 text-sm border-2 border-dashed rounded-lg transition-colors\"\n                style={{ borderColor: '#BDC3C7', color: '#2C3E50' }}\n              >\n                + Agregar Medicamento\n              </button>\n            )}\n          </div>\n        </div>\n\n        {/* Alergias */}\n        <div className=\"bg-gray-50 rounded-lg p-4\">\n          <h2 className=\"text-lg font-semibold mb-4\" style={{ color: '#2C3E50' }}>\n            Alergias\n          </h2>\n          <div className=\"flex flex-wrap gap-2\">\n            {patientData.allergies.map((allergy, index) => (\n              <span\n                key={index}\n                className=\"px-3 py-1 bg-red-100 text-red-800 rounded-full text-sm font-medium\"\n              >\n                {allergy}\n                {isEditing && (\n                  <button\n                    onClick={() => {\n                      const newAllergies = patientData.allergies.filter((_, i) => i !== index);\n                      setPatientData({...patientData, allergies: newAllergies});\n                    }}\n                    className=\"ml-2 text-red-600 hover:text-red-800\"\n                  >\n                    ×\n                  </button>\n                )}\n              </span>\n            ))}\n            {isEditing && (\n              <button\n                onClick={() => {\n                  const newAllergy = prompt('Ingrese nueva alergia:');\n                  if (newAllergy) {\n                    setPatientData({\n                      ...patientData,\n                      allergies: [...patientData.allergies, newAllergy]\n                    });\n                  }\n                }}\n                className=\"px-3 py-1 border-2 border-dashed rounded-full text-sm transition-colors\"\n                style={{ borderColor: '#BDC3C7', color: '#2C3E50' }}\n              >\n                + Agregar Alergia\n              </button>\n            )}\n          </div>\n        </div>\n\n        {/* Advertencias */}\n        <div className=\"bg-yellow-50 rounded-lg p-4 border\" style={{ borderColor: '#F59E0B' }}>\n          <h2 className=\"text-lg font-semibold mb-4\" style={{ color: '#2C3E50' }}>\n            ⚠️ Advertencias Importantes\n          </h2>\n          <div className=\"space-y-2\">\n            {patientData.warnings.map((warning, index) => (\n              <div key={index} className=\"flex items-start space-x-2\">\n                <svg className=\"w-5 h-5 mt-0.5 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" style={{ color: '#F59E0B' }}>\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"/>\n                </svg>\n                <span className=\"text-sm\" style={{ color: '#2C3E50' }}>\n                  {warning}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Visitas Previas */}\n        <div className=\"bg-gray-50 rounded-lg p-4\">\n          <h2 className=\"text-lg font-semibold mb-4\" style={{ color: '#2C3E50' }}>\n            Visitas Previas\n          </h2>\n          <div className=\"space-y-3\">\n            {patientData.previousVisits.map((visit) => (\n              <div key={visit.id} className=\"border rounded-lg p-3\" style={{ borderColor: '#BDC3C7' }}>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium\" style={{ color: '#2C3E50' }}>\n                    {visit.date.toLocaleDateString('es-CL')}\n                  </span>\n                  <span className=\"text-xs px-2 py-1 bg-blue-100 text-blue-800 rounded-full\">\n                    {visit.diagnosis}\n                  </span>\n                </div>\n                <p className=\"text-sm mb-1\" style={{ color: '#2C3E50' }}>\n                  <strong>Tratamiento:</strong> {visit.treatment}\n                </p>\n                <p className=\"text-sm\" style={{ color: '#BDC3C7' }}>\n                  {visit.notes}\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Botones de Acción */}\n        {isEditing && (\n          <div className=\"flex space-x-3 pt-4 border-t\" style={{ borderColor: '#BDC3C7' }}>\n            <button\n              onClick={() => setIsEditing(false)}\n              className=\"px-6 py-2 bg-gray-500 text-white rounded-lg text-sm font-medium hover:bg-gray-600 transition-colors\"\n            >\n              Cancelar\n            </button>\n            <button\n              onClick={() => {\n                // Aquí se guardaría en Firestore\n                console.log('Guardando datos del paciente:', patientData);\n                setIsEditing(false);\n              }}\n              className=\"px-6 py-2 bg-green-500 text-white rounded-lg text-sm font-medium hover:bg-green-600 transition-colors\"\n            >\n              Guardar Cambios\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ClinicalInfoPage; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/ConsultationPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'audioPipeline' and 'handleTranscriptionError'. Either include them or remove the dependency array.","line":65,"column":6,"nodeType":"ArrayExpression","endLine":65,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [audioPipeline, handleTranscriptionError, isRecording]","fix":{"range":[1906,1919],"text":"[audioPipeline, handleTranscriptionError, isRecording]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\n\nimport { TranscriptionArea } from '../components/TranscriptionArea';\nimport { ActionBar } from '../components/ActionBar';\nimport { AudioPipelineService } from '../services/AudioPipelineService';\n\ninterface TranscriptionResult {\n  text: string;\n  isFinal: boolean;\n  confidence?: number;\n  timestamp?: number;\n}\n\ninterface ConsultationError {\n  code: string;\n  message: string;\n  details?: unknown;\n}\n\nexport default function ConsultationPage() {\n  const [isRecording, setIsRecording] = useState(false);\n  const [transcription, setTranscription] = useState('');\n  const [error, setError] = useState<ConsultationError | null>(null);\n\n  const handleTranscriptionStart = useCallback(() => {\n    setError(null);\n    setTranscription('');\n  }, []);\n\n  const handleTranscriptionResult = useCallback((result: TranscriptionResult) => {\n    setTranscription(result.text);\n  }, []);\n\n  const handleTranscriptionError = useCallback((error: ConsultationError) => {\n    setError(error);\n    setIsRecording(false);\n  }, []);\n\n  const handleTranscriptionEnd = useCallback(() => {\n    setIsRecording(false);\n  }, []);\n\n  const audioPipeline = new AudioPipelineService({\n    onTranscriptionStart: handleTranscriptionStart,\n    onTranscriptionEnd: handleTranscriptionEnd,\n    onTranscriptionResult: handleTranscriptionResult,\n    onTranscriptionError: handleTranscriptionError\n  });\n\n  const toggleRecording = useCallback(async () => {\n    if (isRecording) {\n      audioPipeline.stopRecording();\n    } else {\n      try {\n        await audioPipeline.startRecording();\n        setIsRecording(true);\n      } catch (err) {\n        const consultationError: ConsultationError = {\n          code: 'RECORDING_ERROR',\n          message: err instanceof Error ? err.message : 'Error al iniciar grabación'\n        };\n        handleTranscriptionError(consultationError);\n      }\n    }\n  }, [isRecording]);\n\n  return (\n    <div className=\"consultation-page\">\n      <h1>Consulta</h1>\n      <ActionBar isRecording={isRecording} onAction={toggleRecording} />\n      <TranscriptionArea text={transcription} />\n      {error && (\n        <div className=\"error-message\">\n          <p>{error.message}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/DebugAudioPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/DebugCloudFunctionPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/DebugPage.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":13,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":13,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[575,634],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[693,725],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nconst DebugPage: React.FC = () => {\n  const envVars = {\n    'VITE_FIREBASE_PROJECT_ID': import.meta.env.VITE_FIREBASE_PROJECT_ID,\n    'VITE_FIREBASE_AUTH_DOMAIN': import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,\n    'VITE_FIREBASE_API_KEY': import.meta.env.VITE_FIREBASE_API_KEY ? 'PRESENTE' : 'AUSENTE',\n    'VITE_FIREBASE_STORAGE_BUCKET': import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,\n    'VITE_FIREBASE_MESSAGING_SENDER_ID': import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n    'VITE_FIREBASE_APP_ID': import.meta.env.VITE_FIREBASE_APP_ID,\n  };\n\n  console.log('=== DIAGNÓSTICO DE VARIABLES DE ENTORNO ===');\n  Object.entries(envVars).forEach(([key, value]) => {\n    console.log(`${key}: ${value}`);\n  });\n\n  const isUAT = import.meta.env.VITE_FIREBASE_PROJECT_ID?.includes('uat') || false;\n  const isPROD = import.meta.env.VITE_FIREBASE_PROJECT_ID === 'aiduxcare-mvp-prod';\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-8\">Diagnóstico de variables de entorno</h1>\n        \n        <div className=\"bg-white rounded-lg shadow-lg p-6 mb-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Estado de Configuración</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className={`p-4 rounded-lg ${isUAT ? 'bg-green-100 border-green-500' : 'bg-red-100 border-red-500'} border-2`}>\n              <h3 className=\"font-semibold\">UAT ({import.meta.env.VITE_FIREBASE_PROJECT_ID})</h3>\n              <p className={isUAT ? 'text-green-700' : 'text-red-700'}>\n                {isUAT ? '✅ ACTIVO' : '❌ INACTIVO'}\n              </p>\n            </div>\n            \n            <div className={`p-4 rounded-lg ${isPROD ? 'bg-red-100 border-red-500' : 'bg-gray-100 border-gray-300'} border-2`}>\n              <h3 className=\"font-semibold\">PROD (aiduxcare-mvp-prod)</h3>\n              <p className={isPROD ? 'text-red-700' : 'text-gray-700'}>\n                {isPROD ? '❌ ACTIVO (PROBLEMA)' : '✅ INACTIVO'}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Variables de Entorno</h2>\n          \n          <div className=\"space-y-3\">\n            {Object.entries(envVars).map(([key, value]) => (\n              <div key={key} className=\"flex justify-between items-center p-3 bg-gray-50 rounded\">\n                <span className=\"font-mono text-sm\">{key}</span>\n                <span className={`font-mono text-sm ${value ? 'text-green-600' : 'text-red-600'}`}>\n                  {value || 'AUSENTE'}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4\">\n          <h3 className=\"font-semibold text-blue-900 mb-2\">Instrucciones</h3>\n          <ol className=\"list-decimal list-inside space-y-1 text-blue-800\">\n            <li>Abre la consola del navegador (F12)</li>\n            <li>Verifica los logs de &quot;DIAGNÓSTICO DE VARIABLES DE ENTORNO&quot;</li>\n            <li>Si alguna variable está vacía, hay un problema de carga</li>\n            <li>Si el proyecto es PROD, necesitamos reiniciar el servidor</li>\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DebugPage;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/EmailVerifiedPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/ForgotPasswordPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/HelpPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/HumanFigurePage.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":163,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":163,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4702,4743],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":236,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7695,7698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7695,7698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\n\ninterface PainPoint {\n  id: string;\n  x: number;\n  y: number;\n  intensity: number; // 1-10\n  description: string;\n  side: 'front' | 'back' | 'left' | 'right';\n}\n\ninterface ClinicalTest {\n  id: string;\n  name: string;\n  category: string;\n  description: string;\n  isSelected: boolean;\n  result?: string;\n  evidence: 'high' | 'medium' | 'low';\n}\n\nexport const HumanFigurePage: React.FC = () => {\n  const [activeView, setActiveView] = useState<'front' | 'back' | 'left' | 'right'>('front');\n  const [painPoints, setPainPoints] = useState<PainPoint[]>([]);\n  const [selectedTests, setSelectedTests] = useState<ClinicalTest[]>([]);\n  const [isDrawingMode, setIsDrawingMode] = useState(false);\n\n  // Tests clínicos disponibles\n  const availableTests: ClinicalTest[] = [\n    // Tests de Movilidad\n    {\n      id: 'ROM_CERVICAL',\n      name: 'Rango de Movimiento Cervical',\n      category: 'Movilidad',\n      description: 'Evaluación de flexión, extensión, rotación y lateralización cervical',\n      isSelected: false,\n      evidence: 'high'\n    },\n    {\n      id: 'ROM_LUMBAR',\n      name: 'Rango de Movimiento Lumbar',\n      category: 'Movilidad',\n      description: 'Evaluación de flexión, extensión y rotación lumbar',\n      isSelected: false,\n      evidence: 'high'\n    },\n    {\n      id: 'ROM_HOMBRO',\n      name: 'Rango de Movimiento Hombro',\n      category: 'Movilidad',\n      description: 'Evaluación de abducción, flexión, rotación interna y externa',\n      isSelected: false,\n      evidence: 'high'\n    },\n    // Tests de Fuerza\n    {\n      id: 'FLEXION_CERVICAL',\n      name: 'Fuerza Flexores Cervicales',\n      category: 'Fuerza',\n      description: 'Test de resistencia de flexores cervicales',\n      isSelected: false,\n      evidence: 'medium'\n    },\n    {\n      id: 'EXTENSION_LUMBAR',\n      name: 'Fuerza Extensores Lumbares',\n      category: 'Fuerza',\n      description: 'Test de resistencia de extensores lumbares',\n      isSelected: false,\n      evidence: 'medium'\n    },\n    // Tests Especiales\n    {\n      id: 'SLR',\n      name: 'Straight Leg Raise (SLR)',\n      category: 'Tests Especiales',\n      description: 'Test de Lasegue para evaluación de ciática',\n      isSelected: false,\n      evidence: 'high'\n    },\n    {\n      id: 'PATRICK',\n      name: 'Test de Patrick/FABER',\n      category: 'Tests Especiales',\n      description: 'Test para evaluación de articulación sacroilíaca',\n      isSelected: false,\n      evidence: 'medium'\n    },\n    {\n      id: 'NEER',\n      name: 'Test de Neer',\n      category: 'Tests Especiales',\n      description: 'Test para síndrome de pinzamiento subacromial',\n      isSelected: false,\n      evidence: 'high'\n    },\n    {\n      id: 'HAWKINS',\n      name: 'Test de Hawkins-Kennedy',\n      category: 'Tests Especiales',\n      description: 'Test para síndrome de pinzamiento subacromial',\n      isSelected: false,\n      evidence: 'high'\n    }\n  ];\n\n  const handleFigureClick = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (!isDrawingMode) return;\n\n    const rect = event.currentTarget.getBoundingClientRect();\n    const x = ((event.clientX - rect.left) / rect.width) * 100;\n    const y = ((event.clientY - rect.top) / rect.height) * 100;\n\n    const newPainPoint: PainPoint = {\n      id: `pain_${Date.now()}`,\n      x,\n      y,\n      intensity: 5,\n      description: prompt('Describa el dolor en esta área:') || 'Dolor localizado',\n      side: activeView\n    };\n\n    setPainPoints([...painPoints, newPainPoint]);\n  };\n\n  const toggleTest = (testId: string) => {\n    const test = availableTests.find(t => t.id === testId);\n    if (!test) return;\n\n    if (selectedTests.find(t => t.id === testId)) {\n      setSelectedTests(selectedTests.filter(t => t.id !== testId));\n    } else {\n      setSelectedTests([...selectedTests, { ...test, isSelected: true }]);\n    }\n  };\n\n  const updateTestResult = (testId: string, result: string) => {\n    setSelectedTests(selectedTests.map(test => \n      test.id === testId ? { ...test, result } : test\n    ));\n  };\n\n  const removePainPoint = (painId: string) => {\n    setPainPoints(painPoints.filter(p => p.id !== painId));\n  };\n\n  const generateSOAP = () => {\n    const painPointsText = painPoints.map(p => \n      `${p.description} (intensidad ${p.intensity}/10) en ${p.side}`\n    ).join(', ');\n\n    const testsText = selectedTests.map(t => \n      `${t.name}: ${t.result || 'No evaluado'}`\n    ).join(', ');\n\n    const soapData = {\n      subjective: `Paciente refiere: ${painPointsText}`,\n      objective: `Evaluación física: ${testsText}`,\n      assessment: 'Diagnóstico preliminar basado en evaluación clínica',\n      plan: 'Plan de tratamiento personalizado'\n    };\n\n    console.log('Generando SOAP:', soapData);\n    // Aquí se enviaría al sistema SOAP\n  };\n\n  return (\n    <div className=\"h-full bg-white rounded-lg shadow-sm border\" style={{ borderColor: '#BDC3C7' }}>\n      {/* Header */}\n      <div className=\"p-6 border-b\" style={{ borderColor: '#BDC3C7' }}>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold\" style={{ color: '#2C3E50' }}>\n              Figura Humana - Mapa de Dolor\n            </h1>\n            <p className=\"text-sm mt-1\" style={{ color: '#BDC3C7' }}>\n              Evaluación visual y batería de tests clínicos\n            </p>\n          </div>\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={() => setIsDrawingMode(!isDrawingMode)}\n              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n                isDrawingMode \n                  ? 'bg-red-500 text-white' \n                  : 'bg-blue-500 text-white'\n              }`}\n            >\n              {isDrawingMode ? 'Modo Visualización' : 'Modo Dibujo'}\n            </button>\n            <button\n              onClick={generateSOAP}\n              className=\"px-4 py-2 bg-green-500 text-white rounded-lg text-sm font-medium hover:bg-green-600 transition-colors\"\n            >\n              Generar SOAP\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex h-full\">\n        {/* Panel Izquierdo - Figuras Humanas */}\n        <div className=\"w-1/2 p-6 border-r\" style={{ borderColor: '#BDC3C7' }}>\n          <h2 className=\"text-lg font-semibold mb-4\" style={{ color: '#2C3E50' }}>\n            Figuras Humanas\n          </h2>\n          \n          {/* Selector de Vista */}\n          <div className=\"flex space-x-2 mb-4\">\n            {(['front', 'back', 'left', 'right'] as const).map((view) => (\n              <button\n                key={view}\n                onClick={() => setActiveView(view)}\n                className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${\n                  activeView === view\n                    ? 'bg-blue-500 text-white'\n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                }`}\n              >\n                {view === 'front' && 'Frente'}\n                {view === 'back' && 'Espalda'}\n                {view === 'left' && 'Izquierda'}\n                {view === 'right' && 'Derecha'}\n              </button>\n            ))}\n          </div>\n\n          {/* Figura Humana */}\n          <div className=\"relative bg-gray-50 rounded-lg border-2 border-dashed\" style={{ borderColor: '#BDC3C7' }}>\n            <div\n              className=\"w-full h-96 cursor-crosshair\"\n              onClick={handleFigureClick}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                  handleFigureClick(e as any);\n                }\n              }}\n              role=\"button\"\n              tabIndex={0}\n              style={{\n                backgroundImage: `url('/api/human-figure/${activeView}')`,\n                backgroundSize: 'contain',\n                backgroundPosition: 'center',\n                backgroundRepeat: 'no-repeat'\n              }}\n            >\n              {/* Placeholder para figura humana */}\n              <div className=\"w-full h-full flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <svg className=\"w-32 h-32 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" style={{ color: '#BDC3C7' }}>\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"/>\n                  </svg>\n                  <p className=\"text-sm\" style={{ color: '#BDC3C7' }}>\n                    Figura Humana - Vista {activeView === 'front' ? 'Frontal' : \n                    activeView === 'back' ? 'Posterior' : \n                    activeView === 'left' ? 'Lateral Izquierda' : 'Lateral Derecha'}\n                  </p>\n                  {isDrawingMode && (\n                    <p className=\"text-xs mt-2\" style={{ color: '#5DA5A3' }}>\n                      Haz clic para marcar puntos de dolor\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              {/* Puntos de Dolor */}\n              {painPoints\n                .filter(p => p.side === activeView)\n                .map((painPoint) => (\n                  <div\n                    key={painPoint.id}\n                    className=\"absolute w-4 h-4 bg-red-500 rounded-full cursor-pointer transform -translate-x-2 -translate-y-2\"\n                    style={{\n                      left: `${painPoint.x}%`,\n                      top: `${painPoint.y}%`,\n                      backgroundColor: `hsl(0, 100%, ${50 + painPoint.intensity * 5}%)`\n                    }}\n                    title={`${painPoint.description} (Intensidad: ${painPoint.intensity}/10)`}\n                    onClick={() => removePainPoint(painPoint.id)}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter' || e.key === ' ') {\n                        removePainPoint(painPoint.id);\n                      }\n                    }}\n                    role=\"button\"\n                    tabIndex={0}\n                  />\n                ))}\n            </div>\n          </div>\n\n          {/* Paleta de Comandos */}\n          <div className=\"mt-4 p-4 bg-orange-50 rounded-lg border\" style={{ borderColor: '#F59E0B' }}>\n            <h3 className=\"text-sm font-semibold mb-2\" style={{ color: '#2C3E50' }}>\n              Paleta de Comandos - Mapa de Dolor\n            </h3>\n            <div className=\"flex space-x-2\">\n              <button\n                onClick={() => setIsDrawingMode(true)}\n                className={`px-3 py-1 rounded text-xs font-medium ${\n                  isDrawingMode \n                    ? 'bg-orange-500 text-white' \n                    : 'bg-white text-orange-600 border'\n                }`}\n                style={{ borderColor: '#F59E0B' }}\n              >\n                Dibujar\n              </button>\n              <button\n                onClick={() => setPainPoints([])}\n                className=\"px-3 py-1 rounded text-xs font-medium bg-white text-red-600 border\"\n                style={{ borderColor: '#E74C3C' }}\n              >\n                Limpiar\n              </button>\n              <button\n                onClick={() => {\n                  const intensity = prompt('Nueva intensidad (1-10):');\n                  if (intensity) {\n                    setPainPoints(painPoints.map(p => ({\n                      ...p,\n                      intensity: Math.min(10, Math.max(1, parseInt(intensity) || 5))\n                    })));\n                  }\n                }}\n                className=\"px-3 py-1 rounded text-xs font-medium bg-white text-blue-600 border\"\n                style={{ borderColor: '#3498DB' }}\n              >\n                Intensidad\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Panel Derecho - Batería de Tests */}\n        <div className=\"w-1/2 p-6\">\n          <h2 className=\"text-lg font-semibold mb-4\" style={{ color: '#2C3E50' }}>\n            Batería de Tests Clínicos\n          </h2>\n          \n          {/* Tests Seleccionados */}\n          <div className=\"mb-6\">\n            <h3 className=\"text-sm font-medium mb-3\" style={{ color: '#2C3E50' }}>\n              Tests Seleccionados ({selectedTests.length})\n            </h3>\n            <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n              {selectedTests.map((test) => (\n                <div key={test.id} className=\"p-3 bg-blue-50 rounded-lg border\" style={{ borderColor: '#3498DB' }}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium\" style={{ color: '#2C3E50' }}>\n                      {test.name}\n                    </span>\n                    <span className={`text-xs px-2 py-1 rounded-full ${\n                      test.evidence === 'high' ? 'bg-green-100 text-green-800' :\n                      test.evidence === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                      'bg-red-100 text-red-800'\n                    }`}>\n                      {test.evidence === 'high' ? 'Alta' : \n                       test.evidence === 'medium' ? 'Media' : 'Baja'} Evidencia\n                    </span>\n                  </div>\n                  <p className=\"text-xs mb-2\" style={{ color: '#BDC3C7' }}>\n                    {test.description}\n                  </p>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Resultado del test...\"\n                    value={test.result || ''}\n                    onChange={(e) => updateTestResult(test.id, e.target.value)}\n                    className=\"w-full px-2 py-1 text-xs border rounded\"\n                    style={{ borderColor: '#BDC3C7' }}\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Tests Disponibles */}\n          <div>\n            <h3 className=\"text-sm font-medium mb-3\" style={{ color: '#2C3E50' }}>\n              Tests Disponibles\n            </h3>\n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n              {availableTests\n                .filter(test => !selectedTests.find(t => t.id === test.id))\n                .map((test) => (\n                  <div key={test.id} className=\"p-3 bg-gray-50 rounded-lg border cursor-pointer hover:bg-gray-100 transition-colors\" style={{ borderColor: '#BDC3C7' }}>\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className=\"text-sm font-medium\" style={{ color: '#2C3E50' }}>\n                        {test.name}\n                      </span>\n                      <span className={`text-xs px-2 py-1 rounded-full ${\n                        test.evidence === 'high' ? 'bg-green-100 text-green-800' :\n                        test.evidence === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                        'bg-red-100 text-red-800'\n                      }`}>\n                        {test.evidence === 'high' ? 'Alta' : \n                         test.evidence === 'medium' ? 'Media' : 'Baja'} Evidencia\n                      </span>\n                    </div>\n                    <p className=\"text-xs mb-2\" style={{ color: '#BDC3C7' }}>\n                      {test.description}\n                    </p>\n                    <button\n                      onClick={() => toggleTest(test.id)}\n                      className=\"text-xs px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\n                    >\n                      Agregar Test\n                    </button>\n                  </div>\n                ))}\n            </div>\n          </div>\n\n          {/* Búsqueda Manual */}\n          <div className=\"mt-4 p-3 bg-gray-50 rounded-lg border\" style={{ borderColor: '#BDC3C7' }}>\n            <h3 className=\"text-sm font-medium mb-2\" style={{ color: '#2C3E50' }}>\n              Búsqueda Manual\n            </h3>\n            <div className=\"flex space-x-2\">\n              <input\n                type=\"text\"\n                placeholder=\"Buscar test específico...\"\n                className=\"flex-1 px-3 py-1 text-sm border rounded\"\n                style={{ borderColor: '#BDC3C7' }}\n              />\n              <button className=\"px-3 py-1 bg-gray-500 text-white text-sm rounded hover:bg-gray-600 transition-colors\">\n                Buscar\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HumanFigurePage; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/LegalConsentAdminPage.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2956,3018],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🏛️ Legal Consent Admin Page - AiDuxCare V.2\n * Página de administración para gestión del consentimiento legal\n * \n * @version 1.0.0\n * @author CTO/Implementador Jefe\n */\n\nimport React, { useState, useEffect } from 'react';\n\nimport { LegalConsentStatus } from '../components/LegalConsentStatus';\nimport { legalConsentService, type LegalConsent, type ConsentAuditLog } from '../services/legalConsentService';\n\ninterface ConsentData {\n  consent: LegalConsent | null;\n  auditLog: ConsentAuditLog[];\n  report: {\n    hasValidConsent: boolean;\n    consentDate: Date | null;\n    lastUpdated: Date | null;\n    auditEntries: number;\n  };\n}\n\nexport const LegalConsentAdminPage: React.FC = () => {\n  const [consentData, setConsentData] = useState<ConsentData | null>(null);\n  const [showDetails, setShowDetails] = useState(false);\n\n  useEffect(() => {\n    loadConsentData();\n  }, []);\n\n  const loadConsentData = () => {\n    try {\n      const data = legalConsentService.exportConsentData();\n      setConsentData(data);\n    } catch (error) {\n      console.error('Error al cargar datos de consentimiento:', error);\n    }\n  };\n\n  const handleExportData = () => {\n    try {\n      const data = legalConsentService.exportConsentData();\n      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `consentimiento_legal_${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Error al exportar datos:', error);\n      alert('Error al exportar los datos');\n    }\n  };\n\n  const handleClearData = () => {\n    if (confirm('¿Está seguro de que desea eliminar todos los datos de consentimiento? Esta acción no se puede deshacer.')) {\n      try {\n        localStorage.removeItem('aiduxcare_legal_consent');\n        localStorage.removeItem('aiduxcare_consent_audit');\n        loadConsentData();\n        alert('Datos de consentimiento eliminados');\n      } catch (error) {\n        console.error('Error al eliminar datos:', error);\n        alert('Error al eliminar los datos');\n      }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        \n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Administración de Consentimiento Legal\n          </h1>\n          <p className=\"text-gray-600\">\n            Gestión y auditoría del consentimiento legal de AiDuxCare\n          </p>\n        </div>\n\n        {/* Estado del Consentimiento */}\n        <div className=\"mb-8\">\n          <LegalConsentStatus \n            showDetails={showDetails}\n            onConsentChange={(hasConsent) => {\n              console.log('Estado de consentimiento cambiado:', hasConsent);\n              loadConsentData();\n            }}\n          />\n        </div>\n\n        {/* Controles de Administración */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n            Controles de Administración\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <button\n              onClick={() => setShowDetails(!showDetails)}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              {showDetails ? 'Ocultar' : 'Mostrar'} Detalles\n            </button>\n            \n            <button\n              onClick={handleExportData}\n              className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n            >\n              Exportar Datos\n            </button>\n            \n            <button\n              onClick={handleClearData}\n              className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\n            >\n              Limpiar Datos\n            </button>\n          </div>\n        </div>\n\n        {/* Reporte de Compliance */}\n        {consentData && (\n          <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n              Reporte de Compliance\n            </h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h3 className=\"font-medium text-gray-900 mb-2\">Resumen</h3>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Consentimiento Válido:</span>\n                    <span className={consentData.report.hasValidConsent ? 'text-green-600' : 'text-red-600'}>\n                      {consentData.report.hasValidConsent ? 'Sí' : 'No'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Fecha de Consentimiento:</span>\n                    <span className=\"text-gray-900\">\n                      {consentData.report.consentDate ? \n                        new Date(consentData.report.consentDate).toLocaleDateString('es-ES') : \n                        'N/A'\n                      }\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Entradas de Auditoría:</span>\n                    <span className=\"text-gray-900\">{consentData.report.auditEntries}</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <h3 className=\"font-medium text-gray-900 mb-2\">Auditoría</h3>\n                <div className=\"max-h-40 overflow-y-auto\">\n                  {consentData.auditLog.length > 0 ? (\n                    <div className=\"space-y-2 text-xs\">\n                      {consentData.auditLog.slice(-5).map((entry: ConsentAuditLog) => (\n                        <div key={entry.id} className=\"p-2 bg-gray-50 rounded\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"font-medium\">{entry.action}</span>\n                            <span className=\"text-gray-500\">\n                              {new Date(entry.timestamp).toLocaleString('es-ES')}\n                            </span>\n                          </div>\n                          <div className=\"text-gray-600\">\n                            {entry.consentType} - {entry.userId}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-gray-500 text-sm\">No hay entradas de auditoría</p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Información Legal */}\n        <div className=\"bg-blue-50 rounded-lg p-6 mt-8\">\n          <h2 className=\"text-lg font-semibold text-blue-900 mb-3\">\n            Información Legal Importante\n          </h2>\n          <div className=\"text-sm text-blue-800 space-y-2\">\n            <p>\n              <strong>Compliance:</strong> Este sistema cumple con las regulaciones HIPAA y GDPR \n              para el manejo seguro de consentimientos médicos.\n            </p>\n            <p>\n              <strong>Auditoría:</strong> Todas las acciones de consentimiento son registradas \n              para cumplimiento regulatorio y auditorías.\n            </p>\n            <p>\n              <strong>Retención:</strong> Los datos de consentimiento se mantienen según las \n              políticas de retención médica aplicables.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/LoginPage.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1362,1420],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1952,2032],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\n\nimport { useAuth } from '../hooks/useAuth';\n// import { useProfessionalProfile } from '../hooks/useProfessionalProfile';\nimport { emailActivationService } from '../services/emailActivationService';\n\n\nconst LoginPage: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { login } = useAuth();\n  \n  // Hook para perfil profesional (preparado para futuras integraciones)\n  // const { profile } = useProfessionalProfile();\n\n  // Manejar mensajes de éxito desde navegación\n  useEffect(() => {\n    if (location.state?.message && location.state?.type === 'success') {\n      setSuccessMessage(location.state.message);\n      // Limpiar el estado de navegación para evitar mostrar el mensaje múltiples veces\n      navigate(location.pathname, { replace: true, state: {} });\n    }\n  }, [location.state, navigate, location.pathname]);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      console.log('[DEBUG] Intentando login con email:', email);\n\n      // Autenticar con Firebase usando el hook\n      await login(email, password);\n\n      // Verificar si el profesional existe y está activo\n      const professional = await emailActivationService.getProfessional(email);\n      \n      if (!professional) {\n        setError('Email no registrado. Completa el registro primero.');\n        return;\n      }\n\n      if (!professional.isActive) {\n        setError('Tu cuenta no está activada. Revisa tu email y activa tu cuenta antes de iniciar sesión.');\n        return;\n      }\n\n      console.log('[DEBUG] Profesional activo encontrado:', professional.displayName);\n\n      // Actualizar último login\n      await emailActivationService.updateLastLogin(email);\n\n\n      \n      // Redirigir al centro de comando\n      navigate('/command-center');\n    } catch (err) {\n      console.error('[DEBUG] Error en login:', err);\n      setError('Error al iniciar sesión. Inténtalo de nuevo.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-white px-4 sm:px-6 lg:px-8\">\n      <div className=\"w-full max-w-sm space-y-12\">\n        {/* Header Apple-style */}\n        <div className=\"text-center space-y-6\">\n          <h1 className=\"text-4xl font-light text-gray-900 tracking-tight\">\n            Bienvenido a{' '}\n            <span className=\"bg-gradient-to-r from-red-500 via-pink-500 via-purple-500 to-blue-500 bg-clip-text text-transparent font-medium\">\n              AiDuxCare\n            </span>\n          </h1>\n          <p className=\"text-gray-500 text-base leading-relaxed font-light\">\n            Ficha médica electrónica asistida por AI.<br/>\n            Menos papeleo, más seguridad, más tiempo.\n          </p>\n        </div>\n\n        {/* Mensaje de éxito Apple-style */}\n        {successMessage && (\n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n            <p className=\"text-sm text-green-600 font-medium\">{successMessage}</p>\n          </div>\n        )}\n\n        {/* Mensaje de error Apple-style */}\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <p className=\"text-sm text-red-600 font-medium\">{error}</p>\n          </div>\n        )}\n\n        {/* Formulario de login Apple-style */}\n        <form onSubmit={handleLogin} className=\"space-y-6\" data-testid=\"login-form\">\n          <div className=\"space-y-5\">\n            {/* Campo email Apple-style */}\n            <div>\n              <label htmlFor=\"email-address\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Correo electrónico\n              </label>\n              <input\n                id=\"email-address\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                required\n                className=\"block w-full px-4 py-3 border border-gray-200 rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base\"\n                placeholder=\"tu@email.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n            </div>\n\n            {/* Campo contraseña Apple-style */}\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Contraseña\n              </label>\n              <input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                required\n                className=\"block w-full px-4 py-3 border border-gray-200 rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base\"\n                placeholder=\"••••••••\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n            </div>\n          </div>\n\n          {/* Botón de login Apple-style */}\n          <div className=\"pt-2\">\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"w-full py-3 px-4 border border-transparent text-base font-medium rounded-lg text-white bg-gradient-to-r from-red-500 via-pink-500 via-purple-500 to-blue-500 hover:from-red-600 hover:via-pink-600 hover:via-purple-600 hover:to-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200\"\n            >\n              {loading ? (\n                <div className=\"flex items-center justify-center\">\n                  <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                  </svg>\n                  Iniciando sesión...\n                </div>\n              ) : (\n                'Iniciar Sesión'\n              )}\n            </button>\n          </div>\n        </form>\n\n        {/* Enlaces adicionales Apple-style */}\n        <div className=\"text-center space-y-4\">\n          <p className=\"text-sm text-gray-500\">\n            ¿No tienes cuenta?{' '}\n            <Link \n              to=\"/register\" \n              className=\"font-medium text-purple-600 hover:text-purple-700 transition-colors duration-200\"\n            >\n              Regístrate\n            </Link>\n          </p>\n          \n          <Link \n            to=\"/forgot-password\" \n            className=\"text-sm text-gray-400 hover:text-gray-600 transition-colors duration-200\"\n          >\n            ¿Olvidaste tu contraseña?\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginPage; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/MFAGuidePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/NotesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/OnboardingConfirmationPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleEmailVerification'. Either include it or remove the dependency array.","line":20,"column":6,"nodeType":"ArrayExpression","endLine":20,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [handleEmailVerification, token]","fix":{"range":[681,688],"text":"[handleEmailVerification, token]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1074,1137],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1679,1737],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\nimport { AiDuxCareLogo } from '../components/branding/AiDuxCareLogo';\n\nconst OnboardingConfirmationPage: React.FC = () => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const [countdown, setCountdown] = useState(10);\n  const [isResending, setIsResending] = useState(false);\n  \n  const email = searchParams.get('email') || 'tu correo electrónico';\n  const token = searchParams.get('token');\n\n  useEffect(() => {\n    // Si hay token en la URL, es una verificación\n    if (token) {\n      handleEmailVerification(token);\n    }\n  }, [token]);\n\n  useEffect(() => {\n    if (countdown > 0) {\n      const timer = setTimeout(() => setCountdown(countdown - 1), 1000);\n      return () => clearTimeout(timer);\n    } else {\n      navigate('/login');\n    }\n  }, [countdown, navigate]);\n\n  const handleEmailVerification = async (verificationToken: string) => {\n    try {\n      // Aquí iría la lógica de verificación con el backend\n      console.log('Verificando email con token:', verificationToken);\n      \n      // Simulación de verificación exitosa\n      setTimeout(() => {\n        navigate('/professional-workflow', { \n          replace: true,\n          state: { \n            message: '¡Email verificado exitosamente! Bienvenido a AiDuxCare.',\n            type: 'success'\n          }\n        });\n      }, 2000);\n    } catch (error) {\n      console.error('Error verificando email:', error);\n    }\n  };\n\n  const handleResendEmail = async () => {\n    setIsResending(true);\n    try {\n      // Aquí iría la lógica para reenviar el email\n      console.log('Reenviando email de verificación a:', email);\n      \n      // Simulación de reenvío\n      setTimeout(() => {\n        setIsResending(false);\n        alert('Email de verificación reenviado exitosamente.');\n      }, 2000);\n    } catch (error) {\n      console.error('Error reenviando email:', error);\n      setIsResending(false);\n    }\n  };\n\n  const handleGoToLogin = () => {\n    navigate('/login');\n  };\n\n  // Si hay token, mostrar pantalla de verificación\n  if (token) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n        <div className=\"max-w-md w-full bg-white rounded-xl shadow-lg p-8 text-center\">\n          <div className=\"mb-6\">\n            <AiDuxCareLogo className=\"h-12 mx-auto mb-4\" />\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          </div>\n          \n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">\n            Verificando tu cuenta\n          </h1>\n          \n          <p className=\"text-gray-600 mb-6\">\n            Estamos verificando tu dirección de email...\n          </p>\n          \n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <p className=\"text-blue-800 text-sm\">\n              <strong>Procesando verificación...</strong>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center p-4\">\n      <div className=\"max-w-lg w-full bg-white rounded-xl shadow-lg p-8 text-center\">\n        <div className=\"mb-6\">\n          <AiDuxCareLogo className=\"h-12 mx-auto mb-4\" />\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <svg className=\"w-8 h-8 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n            </svg>\n          </div>\n        </div>\n        \n        <h1 className=\"text-3xl font-bold text-gray-900 mb-4\">\n          ¡Perfil Creado Exitosamente!\n        </h1>\n        \n        <p className=\"text-gray-600 mb-6\">\n          Tu perfil profesional ha sido registrado en AiDuxCare. \n          Para completar tu registro, necesitamos verificar tu dirección de email.\n        </p>\n        \n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6\">\n          <h2 className=\"text-lg font-semibold text-blue-900 mb-3\">\n            📧 Verificación por Email\n          </h2>\n          \n          <p className=\"text-blue-800 mb-4\">\n            Hemos enviado un email de verificación a:\n          </p>\n          \n          <div className=\"bg-white border border-blue-300 rounded-lg p-3 mb-4\">\n            <p className=\"text-blue-900 font-medium\">{email}</p>\n          </div>\n          \n          <p className=\"text-blue-700 text-sm\">\n            Haz clic en el enlace de verificación en tu email para activar tu cuenta \n            y acceder por primera vez a AiDuxCare.\n          </p>\n        </div>\n        \n        <div className=\"space-y-4\">\n          <button\n            onClick={handleResendEmail}\n            disabled={isResending}\n            className=\"w-full bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white font-medium py-3 px-4 rounded-lg transition-colors\"\n          >\n            {isResending ? 'Reenviando...' : '📧 Reenviar Email de Verificación'}\n          </button>\n          \n          <button\n            onClick={handleGoToLogin}\n            className=\"w-full bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-3 px-4 rounded-lg transition-colors\"\n          >\n            🔐 Ir a Iniciar Sesión\n          </button>\n        </div>\n        \n        <div className=\"mt-6 pt-6 border-t border-gray-200\">\n          <p className=\"text-gray-500 text-sm\">\n            Redirigiendo automáticamente a la página de login en {countdown} segundos...\n          </p>\n        </div>\n        \n        <div className=\"mt-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n          <h3 className=\"text-yellow-900 font-medium mb-2\">\n            ⚠️ Importante\n          </h3>\n          <p className=\"text-yellow-800 text-sm\">\n            Si no recibes el email en los próximos 5 minutos, revisa tu carpeta de spam \n            o solicita un nuevo envío usando el botón de arriba.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OnboardingConfirmationPage; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/OnboardingPage.backup.20250823-231121.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/OnboardingPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'validate'. Either include it or remove the dependency array.","line":64,"column":80,"nodeType":"ArrayExpression","endLine":64,"endColumn":99,"suggestions":[{"desc":"Update the dependencies array to be: [validate, currentStep]","fix":{"range":[2569,2588],"text":"[validate, currentStep]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2698,2701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2698,2701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":90,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":90,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3618,3667],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useState } from \"react\";\n\nimport type { PersonalData, ProfessionalData, LocationData, WizardStep, ValidationResult } from \"../types/wizard\";\nimport { PersonalDataStep } from \"../components/wizard/PersonalDataStep\";\nimport { ProfessionalDataStep } from \"../components/wizard/ProfessionalDataStep\";\nimport { LocationDataStep } from \"../components/wizard/LocationDataStep\";\n\ntype WizardData = {\n  personal: Partial<PersonalData>;\n  professional: Partial<ProfessionalData>;\n  location: Partial<LocationData>;\n};\n\nconst initialData: WizardData = {\n  personal: {},\n  professional: {},\n  location: {},\n};\n\nconst stepsOrder = [\"personal\", \"professional\", \"location\"];\n\nexport default function OnboardingPage() {\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\n  const [data, setData] = useState<WizardData>(initialData);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const currentStep = stepsOrder[currentStepIndex];\n\n  // ==== Validaciones mínimas por paso (alineadas con tus steps legales) ====\n  const validate = (step: WizardStep): ValidationResult => {\n    const errs: Record<string, string> = {};\n\n    if (String(step) === \"personal\") {\n      const p = data.personal;\n      if (!p.firstName?.trim()) errs.firstName = \"Requerido\";\n      if (!p.lastName?.trim()) errs.lastName = \"Requerido\";\n      if (!p.email?.trim()) errs.email = \"Requerido\";\n      // Teléfono no siempre obligatorio, se permite vacío.\n    }\n\n    if (String(step) === \"professional\") {\n      const pr = data.professional;\n      if (!pr.professionalTitle?.trim()) errs.professionalTitle = \"Requerido\";\n      if (!pr.specialty?.trim()) errs.specialty = \"Requerido\";\n      if (!pr.university?.trim()) errs.university = \"Requerido\";\n      if (!pr.licenseNumber?.trim()) errs.licenseNumber = \"Requerido\";\n      if (!pr.workplace?.trim()) errs.workplace = \"Requerido\";\n      if (!pr.experienceYears || Number(pr.experienceYears) <= 0) errs.experienceYears = \"Requerido\";\n    }\n\n    if (String(step) === \"location\") {\n      const l = data.location;\n      if (!l.country?.trim()) errs.country = \"Requerido\";\n      if (!l.province?.trim()) errs.province = \"Requerido\";\n      if (!l.city?.trim()) errs.city = \"Requerido\";\n      // Consentimientos mínimos: GDPR + HIPAA; dataProcessing si tu step lo usa.\n    }\n\n    setErrors(errs);\n    return { isValid: Object.keys(errs).length === 0, errors: errs };\n  };\n\n  // Validación on-the-fly para habilitar el botón Siguiente\n  const canGoNext = useMemo(() => validate(currentStep as WizardStep).isValid, [data, currentStep]);\n\n  // ==== Handlers de campos (mantienen shape LEGACY) ====\n  const onFieldChange = (field: string, value: any) => {\n    setData(prev => {\n      if (String(currentStep) === \"personal\") return { ...prev, personal: { ...prev.personal, [field]: value } };\n      if (String(currentStep) === \"professional\") return { ...prev, professional: { ...prev.professional, [field]: value } };\n      return { ...prev, location: { ...prev.location, [field]: value } };\n    });\n  };\n\n  // ==== Navegación ====\n  const goNext = () => {\n    const result = validate(currentStep as WizardStep);\n    if (!result.isValid) return;\n    setCurrentStepIndex(i => Math.min(i + 1, stepsOrder.length - 1));\n  };\n\n  const goBack = () => setCurrentStepIndex(i => Math.max(i - 1, 0));\n\n  const finish = () => {\n    const lastValidation = validate(\"location\");\n    if (!lastValidation.isValid) return;\n    // Aquí va tu persistencia/auditoría real (Firestore/REST/etc).\n    // Por ahora solo dejamos un log claro:\n    // eslint-disable-next-line no-console\n    console.log(\"✅ Wizard COMPLETO (legacy):\", data);\n    alert(\"¡Registro completado!\");\n  };\n\n  // ==== Render de paso ====\n  return (\n    <div className=\"min-h-screen bg-white md:bg-gray-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-4xl bg-white rounded-2xl shadow-2xl p-6 md:p-8\">\n        {String(currentStep) === \"personal\" && (\n          <PersonalDataStep\n            data={data.personal as PersonalData}\n            errors={errors}\n            onFieldChange={onFieldChange}\n          />\n        )}\n\n        {String(currentStep) === \"professional\" && (\n          <ProfessionalDataStep\n            data={data.professional as ProfessionalData}\n            errors={errors}\n            onFieldChange={onFieldChange}\n          />\n        )}\n\n        {String(currentStep) === \"location\" && (\n          <LocationDataStep\n            data={data.location as LocationData}\n            errors={errors}\n            onFieldChange={onFieldChange}\n            // Tus steps legacy aceptan onValidation; le pasamos nuestra función\n\n            locationData={undefined}\n          />\n        )}\n\n        {/* Footer de navegación consistente con el LEGACY */}\n        <div className=\"mt-8 flex justify-between\">\n          <button\n            onClick={goBack}\n            disabled={currentStepIndex === 0}\n            className=\"px-5 py-2 rounded-lg bg-gray-200 text-gray-700 disabled:opacity-50\"\n          >\n            Anterior\n          </button>\n\n          {currentStepIndex < stepsOrder.length - 1 ? (\n            <button\n              onClick={goNext}\n              disabled={!canGoNext}\n              className=\"px-6 py-2 rounded-lg text-white bg-gradient-to-r from-fuchsia-500 to-blue-500 disabled:opacity-50\"\n            >\n              Siguiente\n            </button>\n          ) : (\n            <button\n              onClick={finish}\n              disabled={!canGoNext}\n              className=\"px-6 py-2 rounded-lg text-white bg-gradient-to-r from-fuchsia-500 to-blue-500 disabled:opacity-50\"\n            >\n              Completar Registro\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/OrganizationDashboardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/OrganizationTeamPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/PatientCompletePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/PatientDetailPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/PatientsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/PrivacyPolicyPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/ProfessionalOnboardingPage.tsx","messages":[{"ruleId":"no-restricted-imports","severity":2,"message":"'../core/firebase/firebaseClient' import is restricted from being used by a pattern. Importa desde @/integrations/firebase en lugar de core/firebase directamente.","line":14,"column":1,"nodeType":"ImportDeclaration","messageId":"patternWithCustomMessage","endLine":14,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'geolocationService' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'professionalServicesService' is defined but never used.","line":16,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'availableServices' is assigned a value but never used.","line":35,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setAvailableServices' is assigned a value but never used.","line":35,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":49},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":104,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":104,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3586,3702],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":167,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":167,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5639,5717],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3941,3944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3941,3944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"type Regulation = { id: string; name: string; description?: string; countries: string[]; officialUrl?: string };\ntype ComplianceConfig = { regulations: Regulation[]; showAllRegulations?: boolean };\n\n\n/**\n * 🏥 Professional Onboarding Page - Formulario Limpio de Captura Profesional\n * Cumple HIPAA/GDPR: Consentimiento explícito, auditoría completa, cifrado de datos sensibles\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getAuth, sendEmailVerification } from 'firebase/auth';\n\nimport { app } from '../core/firebase/firebaseClient';\nimport { geolocationService } from '../services/geolocationService';\nimport { professionalServicesService, ServiceAvailability } from '../services/ProfessionalServicesService';\nimport { ProfessionalProfileService } from '../services/ProfessionalProfileService';\nimport AiduxcareLogo from '../assets/logo/aiduxcare-logo.svg';\n\ninterface OnboardingStep {\n  id: string;\n  title: string;\n  description: string;\n  isCompleted: boolean;\n  isRequired: boolean;\n}\n\nexport const ProfessionalOnboardingPage: React.FC = () => {\n  const navigate = useNavigate();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const [complianceConfig, setComplianceConfig] = useState<ComplianceConfig | null>(null);\n  const [availableServices, setAvailableServices] = useState<ServiceAvailability[]>([]);\n\n  // Datos del formulario\n  const [formData, setFormData] = useState({\n    // Paso 1: Información Personal\n    firstName: '',\n    secondName: '',\n    lastName: '',\n    secondLastName: '',\n    email: '',\n    phone: '',\n    licenseNumber: '',\n    licenseIssueDate: '',\n    licenseRenewalType: 'annual' as 'annual' | 'biennial' | 'other',\n    licenseRenewalPeriod: 12, // meses\n    country: '',\n    state: '',\n    city: '',\n    licenseExpiryNotification: false,\n\n    // Paso 2: Información Profesional (SIMPLIFICADO)\n    profession: '', // Dropdown con todas las profesiones de la salud\n    specialty: '', // Campo de texto libre para especialidad\n    certifications: '', // Campo de texto libre para certificaciones\n    yearsOfExperience: 0,\n\n    // Paso 3: Compliance y Seguridad\n    hipaaConsent: false,\n    gdprConsent: false,\n    dataProcessingConsent: false,\n    auditTrailEnabled: true,\n    mfaEnabled: true,\n    licenseNotifications: true,\n    latamConsent: false, // Nuevo campo para el consentimiento de regulaciones latinoamericanas\n    canadaConsent: false, // Nuevo campo para el consentimiento de regulaciones canadienses\n    pipedaConsent: false // Nuevo campo para el consentimiento de PIPEDA\n  });\n\n  // Pasos del onboarding\n  const steps: OnboardingStep[] = [\n    {\n      id: 'personal',\n      title: 'Información Personal',\n      description: 'Datos básicos y licencia profesional',\n      isCompleted: false,\n      isRequired: true\n    },\n    {\n      id: 'professional',\n      title: 'Información Profesional',\n      description: 'Profesión, especialidad y certificaciones',\n      isCompleted: false,\n      isRequired: true\n    },\n    {\n      id: 'compliance',\n      title: 'Compliance y Seguridad',\n      description: 'Consentimientos y configuración de seguridad',\n      isCompleted: false,\n      isRequired: true\n    }\n  ];\n\n  // Verificar si el usuario ya tiene un perfil\n  useEffect(() => {\n  (async () => {\n    try {\n      const config: ComplianceConfig = { regulations: [], showAllRegulations: true };\n      setComplianceConfig(config as ComplianceConfig);\n      console.log(\"📋 Regulaciones relevantes:\", (config as ComplianceConfig).regulations.map((r: Regulation) => r.name));\n    } catch (error) {\n      console.error(\"Error cargando configuración de cumplimiento:\", error);\n    }\n  })();\n}, []);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleNextStep = () => {\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePreviousStep = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!canProceed()) return;\n\n    setIsLoading(true);\n    setError('');\n\n    try {\n      const user = getAuth(app).currentUser;\n      if (!user) {\n        setError('Usuario no autenticado');\n        return;\n      }\n\n      // Mapear los datos del formulario a la estructura esperada por ProfessionalProfileService\n      const mappedProfileData = {\n        license: formData.licenseNumber,\n        country: formData.country,\n        city: formData.city,\n        state: formData.state,\n        specialties: formData.specialty ? [formData.specialty] : [],\n        certifications: formData.certifications ? formData.certifications.split(',').map((c: string) => c.trim()) : [],\n        practiceType: 'clínica' as 'clínica' | 'hospital' | 'consultorio' | 'domicilio',\n        licenseExpiry: new Date(), // O ajustar según lógica de negocio\n        isActive: true,\n        complianceSettings: {\n          country: formData.country,\n          regulations: [],\n          allowedTechniques: [],\n          forbiddenTechniques: [],\n          medicationRestrictions: [],\n          referralRequirements: [],\n          documentationStandards: [],\n          dataRetentionPolicy: ''\n        },\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      await ProfessionalProfileService.getInstance().createProfile(mappedProfileData);\n      \n      console.log('Perfil profesional guardado exitosamente en Firebase Firestore');\n\n      // Tras crear el perfil profesional, enviar email de verificación nativo\n      await sendEmailVerification(user);\n      // Redirigir a la página de verificación\n      navigate('/verify-email');\n\n    } catch (error) {\n      console.error('Error creando perfil:', error);\n      setError('Error al crear el perfil profesional. Por favor, inténtalo de nuevo.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const canProceed = () => {\n    switch (steps[currentStep].id) {\n      case 'personal':\n        return !!(formData.firstName && formData.lastName && formData.email && \n                 formData.licenseNumber && formData.country && \n                 formData.licenseRenewalType);\n      case 'professional':\n        return !!(formData.profession && formData.yearsOfExperience && formData.yearsOfExperience.toString().trim() !== '');\n      case 'compliance':\n        return !!(formData.gdprConsent && formData.dataProcessingConsent);\n      default:\n        return false;\n    }\n  };\n\n  const healthProfessions: string[] = [\n    'Fisioterapia',\n    'Medicina General',\n    'Enfermería',\n    'Psicología',\n    'Odontología',\n    'Nutrición',\n    'Terapia Ocupacional',\n    'Logopedia',\n    'Podología',\n    'Farmacia',\n    'Trabajo Social',\n    'Otro'\n  ];\n\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center bg-[#f8fdfc] px-4\">\n      <div className=\"max-w-2xl w-full bg-white rounded-lg shadow-lg p-10 mt-12 border border-gray-100\">\n        <div className=\"flex flex-col items-center mb-8\">\n          <img src={AiduxcareLogo} alt=\"AiDuxCare Logo\" className=\"h-14 w-14 mb-4\" />\n          <h1 className=\"text-3xl font-bold text-[#5DA5A3] mb-2 text-center\">\n            Registro Profesional AiDuxCare\n          </h1>\n          <p className=\"text-lg text-slate-700 text-center\">\n            Completa tu perfil profesional para acceder a la plataforma líder en documentación clínica segura y personalizada.\n          </p>\n        </div>\n        {/* Sección: Datos Personales */}\n        <div className=\"bg-[#f8fdfc] rounded-lg shadow p-6 mb-8\">\n          <h3 className=\"text-xl font-semibold text-[#5DA5A3] mb-4\">Datos Personales</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {/* Nombres */}\n            <div>\n              <label htmlFor=\"firstName\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Primer Nombre *\n              </label>\n              <input\n                type=\"text\"\n                id=\"firstName\"\n                value={formData.firstName}\n                onChange={(e) => handleInputChange('firstName', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"secondName\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Segundo Nombre\n              </label>\n              <input\n                type=\"text\"\n                id=\"secondName\"\n                value={formData.secondName}\n                onChange={(e) => handleInputChange('secondName', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n\n            {/* Apellidos */}\n            <div>\n              <label htmlFor=\"lastName\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Primer Apellido *\n              </label>\n              <input\n                type=\"text\"\n                id=\"lastName\"\n                value={formData.lastName}\n                onChange={(e) => handleInputChange('lastName', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"secondLastName\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Segundo Apellido\n              </label>\n              <input\n                type=\"text\"\n                id=\"secondLastName\"\n                value={formData.secondLastName}\n                onChange={(e) => handleInputChange('secondLastName', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n\n            {/* Contacto */}\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Email *\n              </label>\n              <input\n                type=\"email\"\n                id=\"email\"\n                value={formData.email}\n                onChange={(e) => handleInputChange('email', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Teléfono\n              </label>\n              <input\n                type=\"tel\"\n                id=\"phone\"\n                value={formData.phone}\n                onChange={(e) => handleInputChange('phone', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n\n            {/* Licencia */}\n            <div>\n              <label htmlFor=\"licenseNumber\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Número de Licencia/Colegiado *\n              </label>\n              <input\n                type=\"text\"\n                id=\"licenseNumber\"\n                value={formData.licenseNumber}\n                onChange={(e) => handleInputChange('licenseNumber', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"Ej: 12345-67890 o COL-12345\"\n                required\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"country\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                País de Licencia *\n              </label>\n              <select\n                id=\"country\"\n                value={formData.country}\n                onChange={(e) => handleInputChange('country', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              >\n                <option value=\"\">Selecciona un país</option>\n                <option value=\"ES\">España</option>\n                <option value=\"MX\">México</option>\n                <option value=\"AR\">Argentina</option>\n                <option value=\"CO\">Colombia</option>\n                <option value=\"PE\">Perú</option>\n                <option value=\"CL\">Chile</option>\n                <option value=\"VE\">Venezuela</option>\n                <option value=\"EC\">Ecuador</option>\n                <option value=\"BO\">Bolivia</option>\n                <option value=\"PY\">Paraguay</option>\n                <option value=\"UY\">Uruguay</option>\n                <option value=\"GT\">Guatemala</option>\n                <option value=\"SV\">El Salvador</option>\n                <option value=\"HN\">Honduras</option>\n                <option value=\"NI\">Nicaragua</option>\n                <option value=\"CR\">Costa Rica</option>\n                <option value=\"PA\">Panamá</option>\n                <option value=\"CU\">Cuba</option>\n                <option value=\"DO\">República Dominicana</option>\n                <option value=\"PR\">Puerto Rico</option>\n                <option value=\"US\">Estados Unidos</option>\n                <option value=\"CA\">Canadá</option>\n                <option value=\"OTHER\">Otro</option>\n              </select>\n            </div>\n\n\n\n            {/* Tipo de Renovación */}\n            <div>\n              <label htmlFor=\"licenseRenewalType\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Tipo de Renovación de Licencia *\n              </label>\n              <select\n                id=\"licenseRenewalType\"\n                value={formData.licenseRenewalType}\n                onChange={(e) => handleInputChange('licenseRenewalType', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              >\n                <option value=\"annual\">Anual</option>\n                <option value=\"biennial\">Bienal</option>\n                <option value=\"other\">Otro</option>\n              </select>\n            </div>\n\n            {/* Notificación de Vencimiento */}\n            <div className=\"col-span-2\">\n              <div className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  id=\"licenseExpiryNotification\"\n                  checked={formData.licenseExpiryNotification}\n                  onChange={(e) => handleInputChange('licenseExpiryNotification', e.target.checked)}\n                  className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                />\n                <label htmlFor=\"licenseExpiryNotification\" className=\"ml-2 block text-sm text-gray-700\">\n                  Recibir notificaciones cuando mi licencia esté próxima a vencer\n                </label>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Sección: Datos Profesionales */}\n        <div className=\"bg-[#f8fdfc] rounded-lg shadow p-6 mb-8\">\n          <div className=\"flex items-center mb-4\">\n            <svg className=\"h-6 w-6 text-[#5DA5A3] mr-2\" viewBox=\"0 0 24 24\" fill=\"none\">\n              <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\" fill=\"currentColor\"/>\n              <path d=\"M7 12l5 5 5-5H7z\" fill=\"currentColor\"/>\n            </svg>\n            <h3 className=\"text-xl font-semibold text-[#5DA5A3]\">Datos Profesionales</h3>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label htmlFor=\"profession\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Profesión de la Salud *\n              </label>\n              <select\n                id=\"profession\"\n                value={formData.profession}\n                onChange={(e) => handleInputChange('profession', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              >\n                <option value=\"\">Selecciona tu profesión</option>\n                {healthProfessions.map((profession) => (\n                  <option key={profession} value={profession}>\n                    {profession}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label htmlFor=\"specialty\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Especialidad\n              </label>\n              <input\n                type=\"text\"\n                id=\"specialty\"\n                value={formData.specialty}\n                onChange={(e) => handleInputChange('specialty', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"Ej: Cardiología, Pediatría, Fisioterapia Deportiva, Psicología Clínica...\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"certifications\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Certificaciones\n              </label>\n              <textarea\n                id=\"certifications\"\n                value={formData.certifications}\n                onChange={(e) => handleInputChange('certifications', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                rows={3}\n                placeholder=\"Lista tus certificaciones, cursos especializados, o credenciales relevantes...\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"yearsOfExperience\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Años de Experiencia *\n              </label>\n              <input\n                type=\"text\"\n                id=\"yearsOfExperience\"\n                value={formData.yearsOfExperience}\n                onChange={(e) => handleInputChange('yearsOfExperience', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"Ej: 5 años, 10+ años, 2 años en pediatría...\"\n                required\n              />\n            </div>\n\n\n          </div>\n        </div>\n\n        {/* Sección: Compliance y Seguridad */}\n        <div className=\"bg-[#f8fdfc] rounded-lg shadow p-6 mb-8\">\n          <h3 className=\"text-xl font-semibold text-[#5DA5A3] mb-4\">Consentimientos y Seguridad</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {/* Información de ubicación detectada */}\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3\">\n                    <span className=\"text-blue-600 text-sm\">🌍</span>\n                  </div>\n                  <div>\n                    <h4 className=\"text-sm font-semibold text-blue-900\">\n                    </h4>\n                    <p className=\"text-xs text-blue-700\">\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n            {/* Regulaciones relevantes */}\n            {complianceConfig?.regulations.map((regulation: Regulation) => (\n              <div key={regulation.id} className=\"border border-gray-200 rounded-lg p-4\">\n                <div className=\"flex items-center mb-3\">\n                  <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-3\">\n                    <span className=\"text-green-600 text-sm font-bold\">\n                      {regulation.countries[0]}\n                    </span>\n                  </div>\n                  <h4 className=\"text-base font-semibold text-gray-900\">{regulation.name}</h4>\n                </div>\n                <p className=\"text-sm text-gray-600 mb-3\">\n                  {regulation.description}\n                </p>\n                <div className=\"flex items-center mb-3\">\n                  <input\n                    type=\"checkbox\"\n                    id={`${regulation.id}Consent`}\n                    checked={formData[`${regulation.id}Consent` as keyof typeof formData] as boolean}\n                    onChange={(e) => handleInputChange(`${regulation.id}Consent`, e.target.checked)}\n                    className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                  />\n                  <label htmlFor={`${regulation.id}Consent`} className=\"ml-2 text-sm text-gray-700\">\n                    Acepto cumplir con {regulation.name} para el manejo de información médica\n                  </label>\n                </div>\n                <a \n                  href={regulation.officialUrl} \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"text-blue-600 hover:text-blue-800 text-sm underline\"\n                >\n                  📋 Leer regulación oficial\n                </a>\n              </div>\n            ))}\n\n            {/* Opción para ver todas las regulaciones si no se detectó ubicación */}\n            {complianceConfig?.showAllRegulations && (\n              <div className=\"border border-gray-200 rounded-lg p-4\">\n                <div className=\"flex items-center mb-3\">\n                  <div className=\"w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center mr-3\">\n                    <span className=\"text-gray-600 text-sm font-bold\">🌐</span>\n                  </div>\n                  <h4 className=\"text-base font-semibold text-gray-900\">Regulaciones Generales</h4>\n                </div>\n                <p className=\"text-sm text-gray-600 mb-3\">\n                  No se pudo detectar tu ubicación específica. Por favor, selecciona las regulaciones que aplican a tu región:\n                </p>\n                \n                {/* HIPAA - Estados Unidos */}\n                <div className=\"mb-4\">\n                  <div className=\"flex items-center mb-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"hipaaConsent\"\n                      checked={formData.hipaaConsent}\n                      onChange={(e) => handleInputChange('hipaaConsent', e.target.checked)}\n                      className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                    />\n                    <label htmlFor=\"hipaaConsent\" className=\"ml-2 text-sm text-gray-700\">\n                      HIPAA - Estados Unidos\n                    </label>\n                  </div>\n                </div>\n\n                {/* GDPR - Unión Europea */}\n                <div className=\"mb-4\">\n                  <div className=\"flex items-center mb-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"gdprConsent\"\n                      checked={formData.gdprConsent}\n                      onChange={(e) => handleInputChange('gdprConsent', e.target.checked)}\n                      className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                    />\n                    <label htmlFor=\"gdprConsent\" className=\"ml-2 text-sm text-gray-700\">\n                      GDPR - Unión Europea\n                    </label>\n                  </div>\n                </div>\n\n                {/* PIPEDA - Canadá */}\n                <div className=\"mb-4\">\n                  <div className=\"flex items-center mb-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"pipedaConsent\"\n                      checked={formData.pipedaConsent}\n                      onChange={(e) => handleInputChange('pipedaConsent', e.target.checked)}\n                      className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                    />\n                    <label htmlFor=\"pipedaConsent\" className=\"ml-2 text-sm text-gray-700\">\n                      PIPEDA - Canadá\n                    </label>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Consentimiento de procesamiento de datos */}\n            <div className=\"border border-gray-200 rounded-lg p-4\">\n              <div className=\"flex items-center mb-3\">\n                <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center mr-3\">\n                  <span className=\"text-purple-600 text-sm\">🔒</span>\n                </div>\n                <h4 className=\"text-base font-semibold text-gray-900\">Procesamiento de Datos</h4>\n              </div>\n              <p className=\"text-sm text-gray-600 mb-3\">\n                Consentimiento para el procesamiento de datos personales según nuestra política de privacidad.\n              </p>\n              <div className=\"flex items-center mb-3\">\n                <input\n                  type=\"checkbox\"\n                  id=\"dataProcessingConsent\"\n                  checked={formData.dataProcessingConsent}\n                  onChange={(e) => handleInputChange('dataProcessingConsent', e.target.checked)}\n                  className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                />\n                <label htmlFor=\"dataProcessingConsent\" className=\"ml-2 text-sm text-gray-700\">\n                  Acepto el procesamiento de mis datos personales según la política de privacidad\n                </label>\n              </div>\n              <a \n                href=\"/privacy-policy\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"text-blue-600 hover:text-blue-800 text-sm underline\"\n              >\n                📋 Leer política de privacidad\n              </a>\n            </div>\n\n            {/* MFA Opcional */}\n            <div className=\"border border-gray-200 rounded-lg p-4\">\n              <div className=\"flex items-center mb-3\">\n                <div className=\"w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center mr-3\">\n                  <span className=\"text-orange-600 text-sm\">🔐</span>\n                </div>\n                <h4 className=\"text-base font-semibold text-gray-900\">Autenticación Multi-Factor (MFA)</h4>\n              </div>\n              <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-3 mb-3\">\n                <p className=\"text-sm text-orange-800\">\n                  <strong>⚠️ Importante:</strong> MFA agrega un paso adicional de seguridad pero también de complejidad al login. \n                  Es completamente opcional y puedes activarlo más tarde desde tu perfil.\n                </p>\n              </div>\n              <div className=\"flex items-center mb-3\">\n                <input\n                  type=\"checkbox\"\n                  id=\"mfaEnabled\"\n                  checked={formData.mfaEnabled}\n                  onChange={(e) => handleInputChange('mfaEnabled', e.target.checked)}\n                  className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                />\n                <label htmlFor=\"mfaEnabled\" className=\"ml-2 text-sm text-gray-700\">\n                  Quiero configurar autenticación multi-factor para mayor seguridad\n                </label>\n              </div>\n              <a \n                href=\"/mfa-guide\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"text-blue-600 hover:text-blue-800 text-sm underline\"\n              >\n                📋 Guía de configuración MFA\n              </a>\n            </div>\n\n            {/* Enlace a la política de privacidad de AiDuxCare */}\n            <div className=\"mt-8 text-center\">\n              <a\n                href=\"/privacy-policy\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-blue-700 underline text-sm font-medium hover:text-blue-900\"\n              >\n                📄 Leer la Política de Privacidad de AiDuxCare (España)\n              </a>\n              <p className=\"text-xs text-gray-500 mt-2\">\n                Al continuar, aceptas nuestra <a href=\"/privacy-policy\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"underline\">Política de Privacidad</a>.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Botones de navegación */}\n        <div className=\"flex justify-between mt-8\">\n          <button\n            onClick={handlePreviousStep}\n            disabled={currentStep === 0}\n            className=\"bg-gray-200 text-gray-700 font-semibold py-2 px-6 rounded hover:bg-gray-300 transition-colors\"\n          >\n            Anterior\n          </button>\n\n          {currentStep === steps.length - 1 ? (\n            <button\n              onClick={handleSubmit}\n              disabled={!canProceed() || isLoading}\n              className=\"bg-[#5DA5A3] text-white font-semibold py-2 px-6 rounded hover:bg-[#48918f] transition-colors\"\n            >\n              {isLoading ? 'Completando...' : 'Completar Configuración'}\n            </button>\n          ) : (\n            <button\n              onClick={handleNextStep}\n              disabled={!canProceed()}\n              className=\"bg-[#5DA5A3] text-white font-semibold py-2 px-6 rounded hover:bg-[#48918f] transition-colors\"\n            >\n              Siguiente\n            </button>\n          )}\n        </div>\n\n        {/* Mensajes de error y éxito */}\n        {error && <div className=\"text-red-600 text-sm mt-4\">{error}</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default ProfessionalOnboardingPage; \n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/ProfessionalWorkflowPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/ProfilePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/RegistrationSuccessPage.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":13,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":13,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[421,470],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport const RegistrationSuccessPage: React.FC = () => {\n  const location = useLocation();\n\n  // Obtener datos del estado de navegación\n  const { email, fullName, specialty, location: userLocation } = location.state || {};\n\n  const handleResendVerification = async () => {\n    try {\n      // Aquí iría la lógica para reenviar verificación\n      console.log('Reenviando verificación a:', email);\n      \n      // Simular envío exitoso\n      alert('Email de verificación reenviado. Revisa tu bandeja de entrada.');\n    } catch (err) {\n      console.error('Error reenviando verificación:', err);\n      alert('Error al reenviar el email de verificación');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n      <div className=\"max-w-md w-full bg-white rounded-2xl shadow-xl p-8\">\n        {/* Header */}\n        <div className=\"text-center space-y-6\">\n          <div className=\"mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-green-100\">\n            <svg className=\"h-8 w-8 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n            </svg>\n          </div>\n          \n          <h1 className=\"text-3xl font-bold text-gray-900\">\n            ¡Registro Exitoso!\n          </h1>\n          \n          <p className=\"text-gray-600 text-base\">\n            Bienvenido a AiDuxCare, <span className=\"font-semibold\">{fullName}</span>\n          </p>\n          \n          {/* Información personalizada */}\n          {specialty && (\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n              <p className=\"text-sm text-blue-700\">\n                <span className=\"font-medium\">Especialidad:</span> {specialty}\n              </p>\n            </div>\n          )}\n          \n          {userLocation && (\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n              <p className=\"text-sm text-green-700\">\n                <span className=\"font-medium\">Ubicación:</span> {userLocation}\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Mensaje de verificación */}\n        <div className=\"mt-8 space-y-4\">\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <h3 className=\"text-sm font-medium text-blue-900 mb-2\">\n              Verifica tu Email\n            </h3>\n            <p className=\"text-sm text-blue-700\">\n              Hemos enviado un enlace de verificación a:\n            </p>\n            <p className=\"text-sm font-medium text-blue-900 mt-1\">{email}</p>\n          </div>\n\n          {/* Instrucciones */}\n          <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n            <h4 className=\"text-sm font-medium text-gray-900 mb-2\">\n              Pasos para completar tu registro:\n            </h4>\n            <ul className=\"text-sm text-gray-700 space-y-1\">\n              <li>• Revisa tu bandeja de entrada</li>\n              <li>• Revisa también la carpeta de spam</li>\n              <li>• Haz clic en el enlace de verificación</li>\n              <li>• Una vez verificado, podrás acceder a tu cuenta</li>\n            </ul>\n          </div>\n        </div>\n\n        {/* Mensajes de estado */}\n        {/* The original code had message and error states, but they are not used in the new handleResendVerification.\n            Keeping the structure but removing the message/error display as they are no longer updated. */}\n\n        {/* Botones */}\n        <div className=\"mt-8 space-y-4\">\n          <button\n            onClick={handleResendVerification}\n            className=\"w-full px-4 py-3 rounded-lg font-medium transition-all duration-200 bg-gradient-to-r from-red-500 via-pink-500 via-purple-500 to-blue-500 text-white hover:from-red-600 hover:via-pink-600 hover:via-purple-600 hover:to-blue-600\"\n          >\n            Reenviar Verificación\n          </button>\n\n          {/* The original code had a \"Volver al Login\" button, but useNavigate was removed.\n              Keeping the button but removing the onClick as it's no longer functional. */}\n          <button\n            className=\"w-full px-4 py-3 border border-gray-300 text-gray-700 rounded-lg font-medium hover:bg-gray-50 transition-all duration-200\"\n          >\n            Volver al Login\n          </button>\n        </div>\n\n        {/* Información adicional */}\n        <div className=\"mt-6 text-center\">\n          <p className=\"text-xs text-gray-500\">\n            ¿No recibiste el email? Revisa tu carpeta de spam o contacta soporte.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/ReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/ResetCompletePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/ResumeOnboardingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/SOAPEditorPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'saveSOAPNote'. Either include it or remove the dependency array.","line":52,"column":6,"nodeType":"ArrayExpression","endLine":52,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [soapNote, isEditing, saveSOAPNote]","fix":{"range":[1448,1469],"text":"[soapNote, isEditing, saveSOAPNote]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":57,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":57,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1566,1607],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1717,1759],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1972,2012],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":80,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":80,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2226,2285],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\n\ninterface SOAPNote {\n  id: string;\n  patientId: string;\n  date: Date;\n  subjective: string;\n  objective: string;\n  assessment: string;\n  plan: string;\n  highlights: string[];\n  warnings: string[];\n  status: 'draft' | 'final' | 'signed';\n}\n\ninterface SOAPEditorPageProps {\n  patientId?: string;\n  initialData?: Partial<SOAPNote>;\n}\n\nexport const SOAPEditorPage: React.FC<SOAPEditorPageProps> = ({ \n  patientId = 'P001',\n  initialData \n}) => {\n  const [soapNote, setSoapNote] = useState<SOAPNote>({\n    id: `SOAP_${Date.now()}`,\n    patientId,\n    date: new Date(),\n    subjective: initialData?.subjective || '',\n    objective: initialData?.objective || '',\n    assessment: initialData?.assessment || '',\n    plan: initialData?.plan || '',\n    highlights: initialData?.highlights || [],\n    warnings: initialData?.warnings || [],\n    status: 'draft'\n  });\n\n  const [activeSection, setActiveSection] = useState<'subjective' | 'objective' | 'assessment' | 'plan'>('subjective');\n  const [isEditing, setIsEditing] = useState(true);\n  const [showPreview, setShowPreview] = useState(false);\n  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);\n\n  // Auto-guardar cada 30 segundos\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (isEditing && soapNote.status === 'draft') {\n        saveSOAPNote();\n      }\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, [soapNote, isEditing]);\n\n  const saveSOAPNote = async () => {\n    try {\n      // Aquí se guardaría en Firestore\n      console.log('Guardando SOAP:', soapNote);\n      \n      // Simular guardado\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      console.log('SOAP guardado exitosamente');\n    } catch (error) {\n      console.error('Error al guardar SOAP:', error);\n    }\n  };\n\n  const generatePDF = async () => {\n    setIsGeneratingPDF(true);\n    try {\n      // Aquí se generaría el PDF oficial\n      console.log('Generando PDF oficial...');\n      \n      // Simular generación de PDF\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Actualizar estado a final\n      setSoapNote({ ...soapNote, status: 'final' });\n      \n      console.log('PDF generado y enviado a ficha del paciente');\n      \n      // Aquí se enviaría a la ficha del paciente\n      // await sendToPatientRecord(soapNote);\n      \n    } catch (error) {\n      console.error('Error al generar PDF:', error);\n    } finally {\n      setIsGeneratingPDF(false);\n    }\n  };\n\n  const updateSection = (section: keyof Pick<SOAPNote, 'subjective' | 'objective' | 'assessment' | 'plan'>, value: string) => {\n    setSoapNote({ ...soapNote, [section]: value });\n  };\n\n  const addHighlight = (highlight: string) => {\n    if (highlight.trim()) {\n      setSoapNote({ ...soapNote, highlights: [...soapNote.highlights, highlight.trim()] });\n    }\n  };\n\n  const removeHighlight = (index: number) => {\n    setSoapNote({ \n      ...soapNote, \n      highlights: soapNote.highlights.filter((_, i) => i !== index) \n    });\n  };\n\n  const addWarning = (warning: string) => {\n    if (warning.trim()) {\n      setSoapNote({ ...soapNote, warnings: [...soapNote.warnings, warning.trim()] });\n    }\n  };\n\n  const removeWarning = (index: number) => {\n    setSoapNote({ \n      ...soapNote, \n      warnings: soapNote.warnings.filter((_, i) => i !== index) \n    });\n  };\n\n  const sections = [\n    { id: 'subjective', name: 'Subjetivo (S)', description: 'Síntomas y quejas del paciente' },\n    { id: 'objective', name: 'Objetivo (O)', description: 'Hallazgos del examen físico' },\n    { id: 'assessment', name: 'Evaluación (A)', description: 'Diagnóstico y análisis clínico' },\n    { id: 'plan', name: 'Plan (P)', description: 'Tratamiento y seguimiento' }\n  ];\n\n  return (\n    <div className=\"h-full bg-white rounded-lg shadow-sm border\" style={{ borderColor: '#BDC3C7' }}>\n      {/* Header */}\n      <div className=\"p-6 border-b\" style={{ borderColor: '#BDC3C7' }}>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold\" style={{ color: '#2C3E50' }}>\n              SOAP - Nota Clínica\n            </h1>\n            <p className=\"text-sm mt-1\" style={{ color: '#BDC3C7' }}>\n              {soapNote.date.toLocaleDateString('es-CL')} - Paciente: {patientId}\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <span className={`px-3 py-1 rounded-full text-xs font-medium ${\n              soapNote.status === 'draft' ? 'bg-yellow-100 text-yellow-800' :\n              soapNote.status === 'final' ? 'bg-green-100 text-green-800' :\n              'bg-blue-100 text-blue-800'\n            }`}>\n              {soapNote.status === 'draft' ? 'Borrador' :\n               soapNote.status === 'final' ? 'Final' : 'Firmado'}\n            </span>\n            <button\n              onClick={() => setShowPreview(!showPreview)}\n              className=\"px-4 py-2 bg-gray-500 text-white rounded-lg text-sm font-medium hover:bg-gray-600 transition-colors\"\n            >\n              {showPreview ? 'Editar' : 'Vista Previa'}\n            </button>\n            <button\n              onClick={() => setIsEditing(!isEditing)}\n              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n                isEditing \n                  ? 'bg-blue-500 text-white hover:bg-blue-600' \n                  : 'bg-green-500 text-white hover:bg-green-600'\n              }`}\n            >\n              {isEditing ? 'Guardar' : 'Editar'}\n            </button>\n            <button\n              onClick={generatePDF}\n              disabled={isGeneratingPDF || soapNote.status === 'draft'}\n              className=\"px-6 py-2 bg-red-500 text-white rounded-lg text-sm font-medium hover:bg-red-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isGeneratingPDF ? (\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                  <span>Generando PDF...</span>\n                </div>\n              ) : (\n                'Enviar como PDF'\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex h-full\">\n        {/* Panel Izquierdo - Editor SOAP */}\n        <div className=\"w-2/3 p-6 border-r\" style={{ borderColor: '#BDC3C7' }}>\n          {showPreview ? (\n            /* Vista Previa */\n            <div className=\"space-y-6\">\n              {sections.map((section) => (\n                <div key={section.id} className=\"bg-gray-50 rounded-lg p-4\">\n                  <h3 className=\"text-lg font-semibold mb-3\" style={{ color: '#2C3E50' }}>\n                    {section.name}\n                  </h3>\n                  <div className=\"prose max-w-none\">\n                    <p className=\"text-sm whitespace-pre-wrap\" style={{ color: '#2C3E50' }}>\n                      {soapNote[section.id as keyof Pick<SOAPNote, 'subjective' | 'objective' | 'assessment' | 'plan'>] || 'Sin contenido'}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            /* Editor */\n            <div className=\"space-y-6\">\n              {/* Navegación de Secciones */}\n              <div className=\"flex space-x-2 border-b\" style={{ borderColor: '#BDC3C7' }}>\n                {sections.map((section) => (\n                  <button\n                    key={section.id}\n                    onClick={() => setActiveSection(section.id as keyof Pick<SOAPNote, 'subjective' | 'objective' | 'assessment' | 'plan'>)}\n                    className={`px-4 py-2 text-sm font-medium transition-colors ${\n                      activeSection === section.id\n                        ? 'text-blue-600 border-b-2 border-blue-600'\n                        : 'text-gray-500 hover:text-gray-700'\n                    }`}\n                  >\n                    {section.name}\n                  </button>\n                ))}\n              </div>\n\n              {/* Editor de Sección Activa */}\n              <div>\n                <div className=\"mb-3\">\n                  <h3 className=\"text-lg font-semibold\" style={{ color: '#2C3E50' }}>\n                    {sections.find(s => s.id === activeSection)?.name}\n                  </h3>\n                  <p className=\"text-sm\" style={{ color: '#BDC3C7' }}>\n                    {sections.find(s => s.id === activeSection)?.description}\n                  </p>\n                </div>\n                <textarea\n                  value={soapNote[activeSection]}\n                  onChange={(e) => updateSection(activeSection, e.target.value)}\n                  disabled={!isEditing}\n                  rows={12}\n                  className=\"w-full px-4 py-3 border rounded-lg text-sm resize-none font-mono\"\n                  style={{ borderColor: '#BDC3C7', color: '#2C3E50' }}\n                  placeholder={`Escriba aquí la sección ${sections.find(s => s.id === activeSection)?.name}...`}\n                />\n              </div>\n\n              {/* Contador de Caracteres */}\n              <div className=\"text-xs text-right\" style={{ color: '#BDC3C7' }}>\n                {soapNote[activeSection].length} caracteres\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Panel Derecho - Highlights y Warnings */}\n        <div className=\"w-1/3 p-6\">\n          {/* Highlights */}\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-semibold mb-3\" style={{ color: '#2C3E50' }}>\n              Highlights de Captura\n            </h3>\n            <div className=\"space-y-2 mb-3\">\n              {soapNote.highlights.map((highlight, index) => (\n                <div key={index} className=\"flex items-center space-x-2 p-2 bg-green-50 rounded-lg border\" style={{ borderColor: '#10B981' }}>\n                  <svg className=\"w-4 h-4 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" style={{ color: '#10B981' }}>\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n                  </svg>\n                  <span className=\"text-sm flex-1\" style={{ color: '#2C3E50' }}>\n                    {highlight}\n                  </span>\n                  {isEditing && (\n                    <button\n                      onClick={() => removeHighlight(index)}\n                      className=\"text-red-500 hover:text-red-700\"\n                    >\n                      <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"/>\n                      </svg>\n                    </button>\n                  )}\n                </div>\n              ))}\n            </div>\n            {isEditing && (\n              <div className=\"flex space-x-2\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Agregar highlight...\"\n                  onKeyPress={(e) => {\n                    if (e.key === 'Enter') {\n                      addHighlight(e.currentTarget.value);\n                      e.currentTarget.value = '';\n                    }\n                  }}\n                  className=\"flex-1 px-3 py-2 text-sm border rounded-lg\"\n                  style={{ borderColor: '#BDC3C7' }}\n                />\n                <button\n                  onClick={(e) => {\n                    const input = e.currentTarget.previousElementSibling as HTMLInputElement;\n                    addHighlight(input.value);\n                    input.value = '';\n                  }}\n                  className=\"px-3 py-2 bg-green-500 text-white text-sm rounded-lg hover:bg-green-600 transition-colors\"\n                >\n                  +\n                </button>\n              </div>\n            )}\n          </div>\n\n          {/* Warnings */}\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-semibold mb-3\" style={{ color: '#2C3E50' }}>\n              ⚠️ Advertencias y Puntos Ciegos\n            </h3>\n            <div className=\"space-y-2 mb-3\">\n              {soapNote.warnings.map((warning, index) => (\n                <div key={index} className=\"flex items-center space-x-2 p-2 bg-red-50 rounded-lg border\" style={{ borderColor: '#EF4444' }}>\n                  <svg className=\"w-4 h-4 flex-shrink-0\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" style={{ color: '#EF4444' }}>\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"/>\n                  </svg>\n                  <span className=\"text-sm flex-1\" style={{ color: '#2C3E50' }}>\n                    {warning}\n                  </span>\n                  {isEditing && (\n                    <button\n                      onClick={() => removeWarning(index)}\n                      className=\"text-red-500 hover:text-red-700\"\n                    >\n                      <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"/>\n                      </svg>\n                    </button>\n                  )}\n                </div>\n              ))}\n            </div>\n            {isEditing && (\n              <div className=\"flex space-x-2\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Agregar advertencia...\"\n                  onKeyPress={(e) => {\n                    if (e.key === 'Enter') {\n                      addWarning(e.currentTarget.value);\n                      e.currentTarget.value = '';\n                    }\n                  }}\n                  className=\"flex-1 px-3 py-2 text-sm border rounded-lg\"\n                  style={{ borderColor: '#BDC3C7' }}\n                />\n                <button\n                  onClick={(e) => {\n                    const input = e.currentTarget.previousElementSibling as HTMLInputElement;\n                    addWarning(input.value);\n                    input.value = '';\n                  }}\n                  className=\"px-3 py-2 bg-red-500 text-white text-sm rounded-lg hover:bg-red-600 transition-colors\"\n                >\n                  +\n                </button>\n              </div>\n            )}\n          </div>\n\n          {/* Información del Documento */}\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <h3 className=\"text-sm font-semibold mb-3\" style={{ color: '#2C3E50' }}>\n              Información del Documento\n            </h3>\n            <div className=\"space-y-2 text-xs\" style={{ color: '#BDC3C7' }}>\n              <div className=\"flex justify-between\">\n                <span>ID del documento:</span>\n                <span>{soapNote.id}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Fecha de creación:</span>\n                <span>{soapNote.date.toLocaleDateString('es-CL')}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Última modificación:</span>\n                <span>{new Date().toLocaleDateString('es-CL')}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Estado:</span>\n                <span className=\"font-medium\" style={{ color: '#2C3E50' }}>\n                  {soapNote.status === 'draft' ? 'Borrador' :\n                   soapNote.status === 'final' ? 'Final' : 'Firmado'}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Acciones Rápidas */}\n          <div className=\"mt-4 space-y-2\">\n            <button\n              onClick={saveSOAPNote}\n              className=\"w-full px-4 py-2 bg-blue-500 text-white rounded-lg text-sm font-medium hover:bg-blue-600 transition-colors\"\n            >\n              Guardar Borrador\n            </button>\n            <button\n              onClick={() => setSoapNote({ ...soapNote, status: 'final' })}\n              className=\"w-full px-4 py-2 bg-green-500 text-white rounded-lg text-sm font-medium hover:bg-green-600 transition-colors\"\n            >\n              Marcar como Final\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SOAPEditorPage; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/SettingsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/TestFullWorkflowPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/TestGeolocation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/UnverifiedUserPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/VerifyEmailPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'sendVerificationEmail'. Either include it or remove the dependency array.","line":20,"column":6,"nodeType":"ArrayExpression","endLine":20,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [email, auth.currentUser, sendVerificationEmail]","fix":{"range":[724,749],"text":"[email, auth.currentUser, sendVerificationEmail]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { getAuth, sendEmailVerification } from 'firebase/auth';\n\nexport const VerifyEmailPage: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const [verificationSent, setVerificationSent] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string>('');\n  const navigate = useNavigate();\n  const auth = getAuth();\n  \n  const email = searchParams.get('email');\n\n  useEffect(() => {\n    if (email && auth.currentUser) {\n      // Si el usuario está autenticado, enviar verificación automáticamente\n      sendVerificationEmail();\n    }\n  }, [email, auth.currentUser]);\n\n  const sendVerificationEmail = async () => {\n    if (!auth.currentUser) {\n      setError('Usuario no autenticado');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      await sendEmailVerification(auth.currentUser);\n      setVerificationSent(true);\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';\n      setError(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSkipVerification = () => {\n    // Para desarrollo, permitir saltar verificación\n    navigate('/command-center');\n  };\n\n  if (!email) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"max-w-md w-full bg-white rounded-lg shadow-md p-6\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Error</h1>\n          <p className=\"text-gray-600\">Email no especificado</p>\n          <button\n            onClick={() => navigate('/')}\n            className=\"mt-4 w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700\"\n          >\n            Volver al inicio\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n      <div className=\"max-w-md w-full bg-white rounded-lg shadow-md p-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Verificar Email</h1>\n        \n        {verificationSent ? (\n          <div className=\"text-center\">\n            <div className=\"text-green-500 text-6xl mb-4\">✓</div>\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\n              Email de verificación enviado\n            </h2>\n            <p className=\"text-gray-600 mb-4\">\n              Hemos enviado un email de verificación a <strong>{email}</strong>\n            </p>\n            <p className=\"text-sm text-gray-500 mb-6\">\n              Por favor, revise su bandeja de entrada y haga clic en el enlace de verificación.\n            </p>\n            <button\n              onClick={() => navigate('/command-center')}\n              className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700\"\n            >\n              Continuar al Command Centre\n            </button>\n          </div>\n        ) : (\n          <div className=\"text-center\">\n            <p className=\"text-gray-600 mb-6\">\n              Necesitamos verificar su email <strong>{email}</strong> para continuar.\n            </p>\n            \n            {error && (\n              <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n                <p className=\"text-red-800 text-sm\">{error}</p>\n              </div>\n            )}\n            \n            <button\n              onClick={sendVerificationEmail}\n              disabled={loading}\n              className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 disabled:opacity-50 mb-4\"\n            >\n              {loading ? 'Enviando...' : 'Enviar Email de Verificación'}\n            </button>\n            \n            {/* Botón para desarrollo - saltar verificación */}\n            <button\n              onClick={handleSkipVerification}\n              className=\"w-full bg-gray-300 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-400\"\n            >\n              🧪 Saltar Verificación (Solo Desarrollo)\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/WelcomePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/_PageTemplate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/repositories/appointmentsRepo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/repositories/encountersRepo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/repositories/episodesRepo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/repositories/notesRepo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/repositories/patientsRepo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/router.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/router/router.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'WelcomePage' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { createBrowserRouter, useParams } from 'react-router-dom';\n\nimport { AuthGuard } from '../components/AuthGuard';\nimport { CommandCenterPage } from '../features/command-center/CommandCenterPage';\nimport { WelcomePage } from '../pages/WelcomePage';\nimport LoginPage from '../pages/LoginPage';\nimport { PatientListPage } from '../pages/PatientsPage';\nimport { PatientDetailPage } from '../pages/PatientDetailPage';\nimport { AppointmentListPage } from '../pages/AppointmentsPage';\nimport { AppointmentDetailPage } from '../pages/AppointmentsPage';\nimport { NotesListPage } from '../pages/NotesPage';\nimport { NoteDetailPage } from '../pages/NotesPage';\nimport { RegisterPage } from '../features/auth/RegisterPage';\n\n// LayoutWrapper simple\nfunction LayoutWrapper({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <nav className=\"bg-white shadow-sm border-b border-slate-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <h1 className=\"text-xl font-semibold text-slate-900\">AiDuxCare</h1>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n      <main className=\"flex-1\">{children}</main>\n    </div>\n  );\n}\n\n// Wrapper para NoteDetailPage que obtiene el id de los parámetros\nfunction NoteDetailWrapper() {\n  const { id } = useParams<{ id: string }>();\n  return <NoteDetailPage id={id || ''} />;\n}\n\nconst router = createBrowserRouter([\n  { path: '/', element: <LoginPage /> },\n  { path: '/register', element: <RegisterPage /> },\n  { path: '/wizard', element: <RegisterPage /> },\n  {\n    path: '/command-center',\n    element: <AuthGuard><LayoutWrapper><CommandCenterPage /></LayoutWrapper></AuthGuard>\n  },\n  { path: '/patients', element: <AuthGuard><LayoutWrapper><PatientListPage /></LayoutWrapper></AuthGuard> },\n  { path: '/patients/:id', element: <AuthGuard><LayoutWrapper><PatientDetailPage /></LayoutWrapper></AuthGuard> },\n  { path: '/appointments', element: <AuthGuard><LayoutWrapper><AppointmentListPage /></LayoutWrapper></AuthGuard> },\n  { path: '/appointments/:id', element: <AuthGuard><LayoutWrapper><AppointmentDetailPage /></LayoutWrapper></AuthGuard> },\n  { path: '/notes', element: <AuthGuard><LayoutWrapper><NotesListPage /></LayoutWrapper></AuthGuard> },\n  { path: '/notes/:id', element: <AuthGuard><LayoutWrapper><NoteDetailWrapper /></LayoutWrapper></AuthGuard> }\n]);\n\nexport default router; \n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/AudioCaptureServiceReal.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2484,2527],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":90,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":90,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2649,2695],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2821,2856],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2907,2938],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3090,3164],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":138,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":138,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4127,4364],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":191,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":191,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5803,6061],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":291,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":291,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8229,8289],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":341,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":341,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9724,9772],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { TranscriptionSegment } from '../core/audio/AudioCaptureService';\n\nimport { WebSpeechSTTService, RealtimeTranscriptionOptions } from './WebSpeechSTTService';\n\nexport interface AudioCaptureOptions {\n  language?: 'es' | 'en';\n  onTranscriptionUpdate?: (segment: TranscriptionSegment) => void;\n  onError?: (error: string) => void;\n  onStatusChange?: (status: CaptureStatus) => void;\n}\n\nexport type CaptureStatus = 'idle' | 'requesting_permission' | 'recording' | 'stopping' | 'error';\n\nexport interface CaptureSession {\n  id: string;\n  startTime: Date;\n  endTime?: Date;\n  segmentsCount: number;\n  totalDuration?: number;\n  language: 'es' | 'en';\n  status: CaptureStatus;\n}\n\n/**\n * Servicio de captura de audio en tiempo real usando Web Speech API\n * Gestiona la grabación y transcripción simultánea - 100% GRATUITO\n */\nexport class AudioCaptureServiceReal {\n  private sttService: WebSpeechSTTService;\n  private segments: TranscriptionSegment[] = [];\n  private isCapturing: boolean = false;\n  private currentSession: CaptureSession | null = null;\n  private options: AudioCaptureOptions;\n\n  constructor(options: AudioCaptureOptions = {}) {\n    this.sttService = new WebSpeechSTTService({\n      language: options.language || 'es',\n      continuous: true,\n      interimResults: true,\n      maxAlternatives: 1\n    });\n    \n    this.options = {\n      language: 'es',\n      ...options\n    };\n  }\n\n  /**\n   * Iniciar captura de audio con transcripción en tiempo real\n   */\n  async startCapture(): Promise<CaptureSession> {\n    if (this.isCapturing) {\n      throw new Error('Ya hay una captura en curso');\n    }\n\n    this.updateStatus('requesting_permission');\n\n    // Verificar soporte del navegador\n    if (!this.isSupported()) {\n      const error = 'Web Speech API no soportada en este navegador';\n      this.updateStatus('error');\n      this.options.onError?.(error);\n      throw new Error(error);\n    }\n\n    try {\n      // Crear nueva sesión\n      this.currentSession = {\n        id: `capture_${Date.now()}`,\n        startTime: new Date(),\n        segmentsCount: 0,\n        language: this.options.language || 'es',\n        status: 'recording'\n      };\n\n      // Limpiar segmentos anteriores\n      this.segments = [];\n\n      // Configurar opciones de transcripción\n      const transcriptionOptions: RealtimeTranscriptionOptions = {\n        onResult: (segment) => this.handleNewSegment(segment),\n        onError: (error) => this.handleError(error),\n        onStart: () => {\n          console.log('✅ Captura de audio iniciada');\n          this.isCapturing = true;\n          this.updateStatus('recording');\n        },\n        onEnd: () => {\n          console.log('⏹️ Captura de audio finalizada');\n          this.isCapturing = false;\n          this.updateStatus('idle');\n        },\n        onSpeechStart: () => {\n          console.log('🗣️ Habla detectada');\n        },\n        onSpeechEnd: () => {\n          console.log('🔇 Fin de habla');\n        }\n      };\n\n      // Iniciar transcripción en tiempo real\n      await this.sttService.startRealtimeTranscription(transcriptionOptions);\n\n      console.log('🚀 Captura de audio en tiempo real iniciada - COSTO: $0.00');\n      \n      return this.currentSession;\n\n    } catch (error) {\n      this.updateStatus('error');\n      const errorMsg = error instanceof Error ? error.message : 'Error desconocido';\n      console.error('Error iniciando captura:', errorMsg);\n      this.options.onError?.(errorMsg);\n      throw error;\n    }\n  }\n\n  /**\n   * Detener captura y obtener transcripción completa\n   */\n  async stopCapture(): Promise<TranscriptionSegment[]> {\n    if (!this.isCapturing || !this.currentSession) {\n      console.warn('No hay captura activa');\n      return this.segments;\n    }\n\n    this.updateStatus('stopping');\n\n    try {\n      // Detener servicio STT\n      await this.sttService.stopTranscription();\n\n      // Finalizar sesión\n      this.currentSession.endTime = new Date();\n      this.currentSession.totalDuration = this.currentSession.endTime.getTime() - this.currentSession.startTime.getTime();\n      this.currentSession.segmentsCount = this.segments.length;\n\n      console.log('📊 Sesión de captura finalizada:', {\n        id: this.currentSession.id,\n        segmentos: this.segments.length,\n        duración: `${Math.round(this.currentSession.totalDuration / 1000)}s`,\n        costo: '$0.00'\n      });\n\n      // Retornar solo segmentos con contenido válido\n      const finalSegments = this.segments.filter(segment => \n        segment.content.trim().length > 0 && \n        segment.confidence !== 'no_reconocido'\n      );\n\n      this.updateStatus('idle');\n      this.emitCaptureCompleteEvent(finalSegments);\n\n      return finalSegments;\n\n    } catch (error) {\n      this.updateStatus('error');\n      const errorMsg = error instanceof Error ? error.message : 'Error deteniendo captura';\n      console.error('Error deteniendo captura:', errorMsg);\n      this.options.onError?.(errorMsg);\n      throw error;\n    }\n  }\n\n  /**\n   * Manejar nuevo segmento de transcripción\n   */\n  private handleNewSegment(segment: TranscriptionSegment): void {\n    // Actualizar o agregar segmento\n    const existingIndex = this.segments.findIndex(s => s.id.startsWith(segment.id.split('_')[0]));\n    \n    if (existingIndex !== -1) {\n      // Actualizar segmento existente (para interim results)\n      this.segments[existingIndex] = segment;\n    } else {\n      // Agregar nuevo segmento\n      this.segments.push(segment);\n    }\n\n    // Actualizar contador en sesión\n    if (this.currentSession) {\n      this.currentSession.segmentsCount = this.segments.length;\n    }\n\n    // Notificar a la UI\n    this.options.onTranscriptionUpdate?.(segment);\n    \n    // Emitir evento global para componentes que lo necesiten\n    this.emitTranscriptionUpdateEvent(segment);\n\n    console.log(`📝 Segmento ${segment.confidence === 'entendido' ? 'final' : 'temporal'}:`, {\n      actor: segment.actor,\n      contenido: segment.content.substring(0, 50) + (segment.content.length > 50 ? '...' : ''),\n      confianza: segment.confidence\n    });\n  }\n\n  /**\n   * Manejar errores de transcripción\n   */\n  private handleError(error: string): void {\n    console.error('❌ Error en transcripción:', error);\n    this.updateStatus('error');\n    this.options.onError?.(error);\n  }\n\n  /**\n   * Actualizar estado de captura\n   */\n  private updateStatus(status: CaptureStatus): void {\n    if (this.currentSession) {\n      this.currentSession.status = status;\n    }\n    this.options.onStatusChange?.(status);\n  }\n\n  /**\n   * Emitir evento de actualización de transcripción\n   */\n  private emitTranscriptionUpdateEvent(segment: TranscriptionSegment): void {\n    if (typeof window !== 'undefined') {\n      window.dispatchEvent(new CustomEvent('transcription-update', {\n        detail: { \n          segment, \n          allSegments: this.segments,\n          sessionId: this.currentSession?.id\n        }\n      }));\n    }\n  }\n\n  /**\n   * Emitir evento de captura completada\n   */\n  private emitCaptureCompleteEvent(segments: TranscriptionSegment[]): void {\n    if (typeof window !== 'undefined') {\n      window.dispatchEvent(new CustomEvent('capture-complete', {\n        detail: { \n          segments,\n          session: this.currentSession\n        }\n      }));\n    }\n  }\n\n  /**\n   * Obtener transcripción actual (en tiempo real)\n   */\n  getCurrentTranscription(): TranscriptionSegment[] {\n    return [...this.segments];\n  }\n\n  /**\n   * Obtener estado actual\n   */\n  getCurrentSession(): CaptureSession | null {\n    return this.currentSession ? { ...this.currentSession } : null;\n  }\n\n  /**\n   * Verificar si hay captura activa\n   */\n  isActive(): boolean {\n    return this.isCapturing;\n  }\n\n  /**\n   * Verificar soporte del navegador\n   */\n  isSupported(): boolean {\n    return WebSpeechSTTService.isSupported();\n  }\n\n  /**\n   * Obtener información de compatibilidad\n   */\n  getBrowserCompatibility(): {\n    isSupported: boolean;\n    browserName: string;\n    recommendedAction: string;\n  } {\n    return WebSpeechSTTService.getBrowserCompatibility();\n  }\n\n  /**\n   * Cambiar idioma dinámicamente\n   */\n  setLanguage(language: 'es' | 'en'): void {\n    this.options.language = language;\n    this.sttService.setLanguage(language);\n    console.log(`🌐 Idioma de captura cambiado a: ${language}`);\n  }\n\n  /**\n   * Obtener estadísticas de la sesión actual\n   */\n  getSessionStats(): {\n    segmentsCount: number;\n    duration: number;\n    wordsTranscribed: number;\n    averageConfidence: number;\n    cost: number;\n  } | null {\n    if (!this.currentSession) return null;\n\n    const duration = this.currentSession.endTime \n      ? this.currentSession.endTime.getTime() - this.currentSession.startTime.getTime()\n      : Date.now() - this.currentSession.startTime.getTime();\n\n    const wordsTranscribed = this.segments.reduce((total, segment) => \n      total + segment.content.split(' ').length, 0\n    );\n\n    const averageConfidence = this.segments.length > 0 \n      ? this.segments.reduce((sum, segment) => {\n          const confidenceValue = segment.confidence === 'entendido' ? 1 : \n                                  segment.confidence === 'poco_claro' ? 0.6 : 0.3;\n          return sum + confidenceValue;\n        }, 0) / this.segments.length\n      : 0;\n\n    return {\n      segmentsCount: this.segments.length,\n      duration: Math.round(duration / 1000), // en segundos\n      wordsTranscribed,\n      averageConfidence: Math.round(averageConfidence * 100) / 100,\n      cost: 0 // ¡GRATIS!\n    };\n  }\n\n  /**\n   * Limpiar recursos y detener captura si está activa\n   */\n  async cleanup(): Promise<void> {\n    if (this.isCapturing) {\n      await this.stopCapture();\n    }\n    \n    this.segments = [];\n    this.currentSession = null;\n    console.log('🧹 Recursos de captura limpiados');\n  }\n\n  /**\n   * Crear mensaje de estado para la UI\n   */\n  getStatusMessage(): string {\n    if (!this.currentSession) {\n      return 'Listo para capturar audio';\n    }\n\n    switch (this.currentSession.status) {\n      case 'requesting_permission':\n        return 'Solicitando permisos de micrófono...';\n      case 'recording': {\n        const duration = Math.round((Date.now() - this.currentSession.startTime.getTime()) / 1000);\n        return `Grabando... ${duration}s (${this.segments.length} segmentos)`;\n      }\n      case 'stopping':\n        return 'Finalizando captura...';\n      case 'error':\n        return 'Error en la captura';\n      default:\n        return 'Estado desconocido';\n    }\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/AudioFileSTTService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/AudioPipelineService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1085,1174],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AudioPipelineService - Servicio único de audio para AiDuxCare V.2\n * Pipeline profesional: MediaRecorder → Google Cloud Speech-to-Text → Análisis Clínico\n */\n\nimport { GoogleCloudAudioService } from './GoogleCloudAudioService';\n\ninterface TranscriptionResult {\n  text: string;\n  isFinal: boolean;\n  confidence?: number;\n  timestamp?: number;\n}\n\ninterface TranscriptionError {\n  code: string;\n  message: string;\n  details?: unknown;\n}\n\ninterface AudioPipelineCallbacks {\n  onTranscriptionStart: () => void;\n  onTranscriptionEnd: () => void;\n  onTranscriptionResult: (result: TranscriptionResult) => void;\n  onTranscriptionError: (error: TranscriptionError) => void;\n}\n\nexport class AudioPipelineService {\n  private mediaRecorder: MediaRecorder | null = null;\n  private mediaStream: MediaStream | null = null;\n  private googleCloudService: GoogleCloudAudioService;\n  private recordingStartTime: number = 0;\n  private callbacks: AudioPipelineCallbacks;\n  private isRecording: boolean = false;\n\n  constructor(callbacks: AudioPipelineCallbacks) {\n    this.callbacks = callbacks;\n    console.log('🎙️ AudioPipelineService inicializado - Pipeline Profesional Google Cloud');\n    this.googleCloudService = new GoogleCloudAudioService();\n  }\n\n  public async startRecording(): Promise<void> {\n    if (this.isRecording) {\n      console.warn('Ya hay una grabación en curso');\n      return;\n    }\n\n    try {\n      this.mediaStream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true,\n          sampleRate: 48000,\n          channelCount: 1\n        }\n      });\n      this.mediaRecorder = new MediaRecorder(this.mediaStream);\n      this.recordingStartTime = Date.now();\n      this.isRecording = true;\n      this.callbacks.onTranscriptionStart();\n\n      this.mediaRecorder.ondataavailable = async () => {\n        await this.processAudioChunk();\n      };\n\n      this.mediaRecorder.start(1000); // Chunk cada 1 segundo\n    } catch (error) {\n      const transcriptionError: TranscriptionError = {\n        code: 'RECORDING_ERROR',\n        message: error instanceof Error ? error.message : 'Error desconocido al iniciar grabación',\n        details: error\n      };\n      this.callbacks.onTranscriptionError(transcriptionError);\n    }\n  }\n\n  private async processAudioChunk(): Promise<void> {\n    try {\n      // La función processAudio de GoogleCloudAudioService no acepta argumentos según el error de lint.\n      // Por lo tanto, eliminamos el argumento y asumimos que el audioBlob debe ser gestionado internamente o previamente.\n      // Si se requiere pasar el audioBlob, se debe ajustar la definición de processAudio en GoogleCloudAudioService.\n      const result = await this.googleCloudService.processAudio();\n      const transcriptionResult: TranscriptionResult = {\n        text: result.text,\n        isFinal: result.isFinal,\n        confidence: result.confidence,\n        timestamp: Date.now() - this.recordingStartTime\n      };\n      this.callbacks.onTranscriptionResult(transcriptionResult);\n    } catch (error) {\n      const transcriptionError: TranscriptionError = {\n        code: 'PROCESSING_ERROR',\n        message: error instanceof Error ? error.message : 'Error al procesar audio',\n        details: error\n      };\n      this.callbacks.onTranscriptionError(transcriptionError);\n    }\n  }\n\n  public stopRecording(): void {\n    if (!this.isRecording) {\n      console.warn('No hay grabación activa para detener');\n      return;\n    }\n\n    if (this.mediaRecorder) {\n      this.mediaRecorder.stop();\n      this.mediaRecorder = null;\n    }\n\n    if (this.mediaStream) {\n      this.mediaStream.getTracks().forEach(track => track.stop());\n      this.mediaStream = null;\n    }\n\n    this.isRecording = false;\n    this.callbacks.onTranscriptionEnd();\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/AudioToSOAPBridge.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/AuditLogger.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":4,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":4,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[154,198],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class AuditLogger {\n  static async log(action: string, data: Record<string, unknown>): Promise<void> {\n    // Aquí iría la implementación real\n    console.log('Audit Log:', { action, data });\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/CompetencyGuardService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1045,1226],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":181,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":181,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5398,5619],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { professionalCompetencyService } from './ProfessionalCompetencyService';\n\nexport interface CompetencyGuardResult {\n  isAllowed: boolean;\n  warning?: {\n    message: string;\n    recommendation: string;\n    riskLevel: 'low' | 'medium' | 'high';\n  };\n  silentLog?: {\n    competency: string;\n    region: string;\n    timestamp: string;\n    result: 'safe' | 'warned' | 'blocked';\n  };\n}\n\n/**\n * Servicio Guard para verificación silenciosa de competencias\n * Funciona en segundo plano para salvaguardar la práctica profesional\n */\nclass CompetencyGuardService {\n  private userRegion: string = 'Madrid'; // Por defecto, se detectaría automáticamente\n  private userCertifications: string[] = [];\n  private isPublicSector: boolean = false;\n\n  /**\n   * Configura el contexto del usuario (se llamaría automáticamente al login)\n   */\n  setUserContext(region: string, certifications: string[], publicSector: boolean = false) {\n    this.userRegion = region;\n    this.userCertifications = certifications;\n    this.isPublicSector = publicSector;\n    \n    console.log('🔒 CompetencyGuard configurado:', {\n      region: this.userRegion,\n      certifications: this.userCertifications.length,\n      publicSector: this.isPublicSector\n    });\n  }\n\n  /**\n   * Verificación silenciosa antes de permitir una acción\n   * Retorna true si es seguro, false si debe bloquearse\n   */\n  async checkBeforeAction(competencyId: string): Promise<CompetencyGuardResult> {\n    try {\n      const check = await professionalCompetencyService.simulateSilentCheck(\n        competencyId,\n        this.userRegion,\n        this.userCertifications\n      );\n\n      const result: CompetencyGuardResult = {\n        isAllowed: check.isSafe,\n        silentLog: {\n          competency: competencyId,\n          region: this.userRegion,\n          timestamp: new Date().toISOString(),\n          result: check.isSafe ? 'safe' : (check.shouldWarn ? 'warned' : 'blocked')\n        }\n      };\n\n      // Solo mostrar advertencia si es necesario\n      if (check.shouldWarn && check.warningMessage) {\n        result.warning = {\n          message: check.warningMessage,\n          recommendation: check.recommendation || 'Contactar con soporte',\n          riskLevel: check.riskLevel === 'none' ? 'low' : check.riskLevel\n        };\n      }\n\n      // Log silencioso para auditoría\n      this.logCompetencyCheck(result);\n\n      return result;\n    } catch (error) {\n      console.error('Error en verificación de competencia:', error);\n      return {\n        isAllowed: false,\n        warning: {\n          message: 'Error en verificación de competencia',\n          recommendation: 'Contactar con soporte técnico',\n          riskLevel: 'high'\n        }\n      };\n    }\n  }\n\n  /**\n   * Verificación para técnicas invasivas (más estricta)\n   */\n  async checkInvasiveTechnique(techniqueId: string): Promise<CompetencyGuardResult> {\n    const result = await this.checkBeforeAction(techniqueId);\n    \n    // Para técnicas invasivas, siempre verificar certificación\n    if (result.isAllowed && !this.hasInvasiveCertification(techniqueId)) {\n      return {\n        isAllowed: false,\n        warning: {\n          message: 'Certificación requerida para técnica invasiva',\n          recommendation: 'Obtener formación especializada antes de continuar',\n          riskLevel: 'high'\n        },\n        silentLog: {\n          competency: techniqueId,\n          region: this.userRegion,\n          timestamp: new Date().toISOString(),\n          result: 'blocked'\n        }\n      };\n    }\n\n    return result;\n  }\n\n  /**\n   * Verificación para prescripción de productos sanitarios\n   */\n  async checkPrescriptionAuthority(): Promise<CompetencyGuardResult> {\n    // Verificar si el usuario tiene autoridad para prescribir\n    const hasPrescriptionAuth = this.userCertifications.some(cert => \n      cert.toLowerCase().includes('prescripción') ||\n      cert.toLowerCase().includes('prescription')\n    );\n\n    if (!hasPrescriptionAuth) {\n      return {\n        isAllowed: false,\n        warning: {\n          message: 'Autorización de prescripción requerida',\n          recommendation: 'Verificar competencias de prescripción con el colegio profesional',\n          riskLevel: 'high'\n        },\n        silentLog: {\n          competency: 'prescription-authority',\n          region: this.userRegion,\n          timestamp: new Date().toISOString(),\n          result: 'blocked'\n        }\n      };\n    }\n\n    return {\n      isAllowed: true,\n      silentLog: {\n        competency: 'prescription-authority',\n        region: this.userRegion,\n        timestamp: new Date().toISOString(),\n        result: 'safe'\n      }\n    };\n  }\n\n  /**\n   * Verificar si tiene certificación para técnicas invasivas\n   */\n  private hasInvasiveCertification(techniqueId: string): boolean {\n    const invasiveTechniques = [\n      'invasive-dry-needling',\n      'invasive-ventilation',\n      'advanced-ultrasound'\n    ];\n\n    if (!invasiveTechniques.includes(techniqueId)) {\n      return true; // No es invasiva\n    }\n\n    return this.userCertifications.some(cert => \n      cert.toLowerCase().includes(techniqueId.replace('invasive-', '')) ||\n      cert.toLowerCase().includes('invasiva') ||\n      cert.toLowerCase().includes('invasive')\n    );\n  }\n\n  /**\n   * Log silencioso para auditoría (no visible al usuario)\n   */\n  private logCompetencyCheck(result: CompetencyGuardResult) {\n    if (result.silentLog) {\n      console.log('🔒 CompetencyGuard Log:', {\n        ...result.silentLog,\n        userRegion: this.userRegion,\n        hasCertifications: this.userCertifications.length > 0,\n        publicSector: this.isPublicSector\n      });\n    }\n  }\n\n  /**\n   * Obtener estadísticas de uso (solo para administradores)\n   */\n  getGuardStatistics() {\n    return {\n      userRegion: this.userRegion,\n      certificationCount: this.userCertifications.length,\n      publicSector: this.isPublicSector,\n      lastCheck: new Date().toISOString()\n    };\n  }\n}\n\nexport const competencyGuardService = new CompetencyGuardService(); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/CompetencySuggestionService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/ComplianceService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":555,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":555,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16926,16992],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":579,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":579,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17654,17718],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * ⚖️ Compliance Service - AiDuxCare V.2\n * Sistema de compliance automático para HIPAA/GDPR y normativas por país\n * Implementación del Blueprint Oficial\n */\n\nimport ProfessionalProfileService from './ProfessionalProfileService';\n\nexport interface ComplianceRule {\n  id: string;\n  name: string;\n  description: string;\n  category: 'data_protection' | 'medical_practice' | 'documentation' | 'referral';\n  country: string;\n  severity: 'critical' | 'high' | 'medium' | 'low';\n  isActive: boolean;\n}\n\nexport interface ComplianceViolation {\n  id: string;\n  ruleId: string;\n  ruleName: string;\n  description: string;\n  severity: 'critical' | 'high' | 'medium' | 'low';\n  timestamp: Date;\n  professionalProfileId: string;\n  actionRequired: string;\n  isResolved: boolean;\n}\n\nexport interface DataRetentionPolicy {\n  transcriptionRetentionHours: number;\n  soapRetentionDays: number;\n  auditLogRetentionYears: number;\n  automaticDeletion: boolean;\n  encryptionRequired: boolean;\n}\n\nexport interface ComplianceReport {\n  professionalProfileId: string;\n  timestamp: Date;\n  violations: ComplianceViolation[];\n  complianceScore: number;\n  recommendations: string[];\n  nextAuditDate: Date;\n}\n\nexport class ComplianceService {\n  private static instance: ComplianceService;\n  private profileService: ProfessionalProfileService;\n  private violations: Map<string, ComplianceViolation[]> = new Map();\n  \n  // Base de reglas de compliance por país\n  private complianceRules: Map<string, ComplianceRule[]> = new Map();\n\n  private constructor() {\n    this.profileService = ProfessionalProfileService.getInstance();\n    this.initializeComplianceRules();\n  }\n\n  static getInstance(): ComplianceService {\n    if (!ComplianceService.instance) {\n      ComplianceService.instance = new ComplianceService();\n    }\n    return ComplianceService.instance;\n  }\n\n  /**\n   * Inicializar reglas de compliance por país\n   */\n  private initializeComplianceRules(): void {\n    // Reglas para España\n    this.complianceRules.set('España', [\n      {\n        id: 'ES-001',\n        name: 'Prohibición de Prescripción de Medicamentos',\n        description: 'Los fisioterapeutas no pueden prescribir medicamentos en España',\n        category: 'medical_practice',\n        country: 'España',\n        severity: 'critical',\n        isActive: true\n      },\n      {\n        id: 'ES-002',\n        name: 'Ley de Protección de Datos (GDPR)',\n        description: 'Cumplimiento del Reglamento General de Protección de Datos',\n        category: 'data_protection',\n        country: 'España',\n        severity: 'critical',\n        isActive: true\n      },\n      {\n        id: 'ES-003',\n        name: 'Documentación Clínica Obligatoria',\n        description: 'Historia clínica y consentimiento informado obligatorios',\n        category: 'documentation',\n        country: 'España',\n        severity: 'high',\n        isActive: true\n      },\n      {\n        id: 'ES-004',\n        name: 'Manipulaciones Vertebrales',\n        description: 'Manipulaciones vertebrales requieren formación específica',\n        category: 'medical_practice',\n        country: 'España',\n        severity: 'high',\n        isActive: true\n      }\n    ]);\n\n    // Reglas para México\n    this.complianceRules.set('México', [\n      {\n        id: 'MX-001',\n        name: 'Prohibición de Prescripción de Medicamentos',\n        description: 'Los fisioterapeutas no pueden prescribir medicamentos en México',\n        category: 'medical_practice',\n        country: 'México',\n        severity: 'critical',\n        isActive: true\n      },\n      {\n        id: 'MX-002',\n        name: 'Ley General de Protección de Datos (LGPD)',\n        description: 'Cumplimiento de la LGPD mexicana',\n        category: 'data_protection',\n        country: 'México',\n        severity: 'critical',\n        isActive: true\n      },\n      {\n        id: 'MX-003',\n        name: 'Acupuntura Requiere Certificación',\n        description: 'Acupuntura requiere certificación específica en México',\n        category: 'medical_practice',\n        country: 'México',\n        severity: 'high',\n        isActive: true\n      },\n      {\n        id: 'MX-004',\n        name: 'NOM-035 Compliance',\n        description: 'Cumplimiento de la NOM-035 para factores de riesgo psicosocial',\n        category: 'documentation',\n        country: 'México',\n        severity: 'medium',\n        isActive: true\n      }\n    ]);\n\n    // Reglas para Estados Unidos\n    this.complianceRules.set('Estados Unidos', [\n      {\n        id: 'US-001',\n        name: 'HIPAA Compliance',\n        description: 'Cumplimiento de la Ley de Portabilidad y Responsabilidad de Seguros de Salud',\n        category: 'data_protection',\n        country: 'Estados Unidos',\n        severity: 'critical',\n        isActive: true\n      },\n      {\n        id: 'US-002',\n        name: 'Prohibición de Prescripción de Medicamentos',\n        description: 'Los fisioterapeutas no pueden prescribir medicamentos en EE.UU.',\n        category: 'medical_practice',\n        country: 'Estados Unidos',\n        severity: 'critical',\n        isActive: true\n      },\n      {\n        id: 'US-003',\n        name: 'State-Specific Regulations',\n        description: 'Cumplimiento de regulaciones específicas del estado',\n        category: 'medical_practice',\n        country: 'Estados Unidos',\n        severity: 'high',\n        isActive: true\n      },\n      {\n        id: 'US-004',\n        name: 'HITECH Act Compliance',\n        description: 'Cumplimiento de la Ley HITECH para tecnología de información de salud',\n        category: 'data_protection',\n        country: 'Estados Unidos',\n        severity: 'high',\n        isActive: true\n      }\n    ]);\n\n    // Reglas para Canadá\n    this.complianceRules.set('Canadá', [\n      {\n        id: 'CA-001',\n        name: 'PIPEDA Compliance',\n        description: 'Cumplimiento de la Ley de Protección de Información Personal y Documentos Electrónicos',\n        category: 'data_protection',\n        country: 'Canadá',\n        severity: 'critical',\n        isActive: true\n      },\n      {\n        id: 'CA-002',\n        name: 'Provincial Health Acts',\n        description: 'Cumplimiento de leyes de salud provinciales',\n        category: 'medical_practice',\n        country: 'Canadá',\n        severity: 'high',\n        isActive: true\n      },\n      {\n        id: 'CA-003',\n        name: 'Prohibición de Prescripción de Medicamentos',\n        description: 'Los fisioterapeutas no pueden prescribir medicamentos en Canadá',\n        category: 'medical_practice',\n        country: 'Canadá',\n        severity: 'critical',\n        isActive: true\n      }\n    ]);\n  }\n\n  /**\n   * Verificar compliance de una sugerencia o técnica\n   */\n  async checkCompliance(\n    professionalProfileId: string,\n    content: string,\n    category: 'suggestion' | 'technique' | 'documentation' | 'data_handling'\n  ): Promise<{ compliant: boolean; violations: ComplianceViolation[]; recommendations: string[] }> {\n    const profile = this.profileService.getProfile(professionalProfileId);\n    if (!profile) {\n      return {\n        compliant: false,\n        violations: [{\n          id: `violation-${Date.now()}`,\n          ruleId: 'PROFILE-001',\n          ruleName: 'Perfil Profesional No Encontrado',\n          description: 'No se pudo verificar compliance: perfil profesional no encontrado',\n          severity: 'critical',\n          timestamp: new Date(),\n          professionalProfileId,\n          actionRequired: 'Crear o actualizar perfil profesional',\n          isResolved: false\n        }],\n        recommendations: ['Crear perfil profesional completo']\n      };\n    }\n\n    const countryRules = this.complianceRules.get(profile.country) || [];\n    const violations: ComplianceViolation[] = [];\n    const recommendations: string[] = [];\n\n    // Verificar reglas específicas por categoría\n    for (const rule of countryRules) {\n      if (!rule.isActive) continue;\n\n      let isViolated = false;\n      const violationDescription = '';\n\n      switch (category) {\n        case 'suggestion':\n          isViolated = this.checkSuggestionCompliance(content, rule);\n          break;\n        case 'technique':\n          isViolated = this.checkTechniqueCompliance(content, rule);\n          break;\n        case 'documentation':\n          isViolated = this.checkDocumentationCompliance(content, rule);\n          break;\n        case 'data_handling':\n          isViolated = this.checkDataHandlingCompliance(content, rule);\n          break;\n      }\n\n      if (isViolated) {\n        const violation: ComplianceViolation = {\n          id: `violation-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          ruleId: rule.id,\n          ruleName: rule.name,\n          description: violationDescription || rule.description,\n          severity: rule.severity,\n          timestamp: new Date(),\n          professionalProfileId,\n          actionRequired: this.getActionRequired(rule),\n          isResolved: false\n        };\n\n        violations.push(violation);\n        recommendations.push(this.getRecommendation(rule));\n      }\n    }\n\n    // Guardar violaciones\n    if (violations.length > 0) {\n      const existingViolations = this.violations.get(professionalProfileId) || [];\n      this.violations.set(professionalProfileId, [...existingViolations, ...violations]);\n    }\n\n    return {\n      compliant: violations.length === 0,\n      violations,\n      recommendations\n    };\n  }\n\n  /**\n   * Verificar compliance de sugerencias\n   */\n  private checkSuggestionCompliance(content: string, rule: ComplianceRule): boolean {\n    const contentLower = content.toLowerCase();\n    \n    switch (rule.id) {\n      case 'ES-001':\n      case 'MX-001':\n      case 'US-002':\n      case 'CA-003':\n        // Verificar sugerencias de medicamentos\n        return contentLower.includes('medicamento') || \n               contentLower.includes('fármaco') || \n               contentLower.includes('medication') ||\n               contentLower.includes('drug') ||\n               contentLower.includes('prescription');\n      \n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Verificar compliance de técnicas\n   */\n  private checkTechniqueCompliance(content: string, rule: ComplianceRule): boolean {\n    const contentLower = content.toLowerCase();\n    \n    switch (rule.id) {\n      case 'ES-004':\n        // Verificar manipulaciones vertebrales sin certificación\n        if (contentLower.includes('manipulación vertebral') || contentLower.includes('manipulation')) {\n          return true; // Siempre violación si no hay certificación\n        }\n        break;\n      \n      case 'MX-003':\n        // Verificar acupuntura sin certificación\n        if (contentLower.includes('acupuntura') || contentLower.includes('acupuncture')) {\n          return true; // Siempre violación si no hay certificación\n        }\n        break;\n    }\n    \n    return false;\n  }\n\n  /**\n   * Verificar compliance de documentación\n   */\n  private checkDocumentationCompliance(content: string, rule: ComplianceRule): boolean {\n    // Verificar que la documentación incluya elementos obligatorios\n    switch (rule.id) {\n      case 'ES-003':\n        return !content.includes('consentimiento') && !content.includes('historia clínica');\n      \n      case 'MX-004':\n        return !content.includes('factores de riesgo psicosocial');\n      \n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Verificar compliance de manejo de datos\n   */\n  private checkDataHandlingCompliance(content: string, rule: ComplianceRule): boolean {\n    // Verificar políticas de retención y eliminación de datos\n    switch (rule.id) {\n      case 'ES-002':\n      case 'MX-002':\n      case 'US-001':\n      case 'CA-001':\n        return content.includes('transcripción') && !content.includes('eliminación automática');\n      \n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Obtener acción requerida para una violación\n   */\n  private getActionRequired(rule: ComplianceRule): string {\n    switch (rule.id) {\n      case 'ES-001':\n      case 'MX-001':\n      case 'US-002':\n      case 'CA-003':\n        return 'Eliminar sugerencia de medicamento y derivar al médico';\n      \n      case 'ES-004':\n        return 'Obtener certificación en manipulaciones vertebrales o usar técnicas alternativas';\n      \n      case 'MX-003':\n        return 'Obtener certificación en acupuntura o usar técnicas alternativas';\n      \n      case 'ES-003':\n        return 'Incluir consentimiento informado y historia clínica completa';\n      \n      case 'ES-002':\n      case 'MX-002':\n      case 'US-001':\n      case 'CA-001':\n        return 'Implementar eliminación automática de transcripciones según normativa';\n      \n      default:\n        return 'Revisar y corregir según normativas locales';\n    }\n  }\n\n  /**\n   * Obtener recomendación para una violación\n   */\n  private getRecommendation(rule: ComplianceRule): string {\n    switch (rule.id) {\n      case 'ES-001':\n      case 'MX-001':\n      case 'US-002':\n      case 'CA-003':\n        return `En ${rule.country} está prohibido que fisioterapeutas prescriban medicamentos. Derivar al médico.`;\n      \n      case 'ES-004':\n        return 'Considerar obtener certificación en manipulaciones vertebrales o usar técnicas alternativas.';\n      \n      case 'MX-003':\n        return 'Considerar obtener certificación en acupuntura o usar técnicas alternativas.';\n      \n      case 'ES-003':\n        return 'Asegurar que toda documentación incluya consentimiento informado y historia clínica.';\n      \n      case 'ES-002':\n      case 'MX-002':\n      case 'US-001':\n      case 'CA-001':\n        return 'Implementar eliminación automática de datos sensibles según normativa local.';\n      \n      default:\n        return 'Revisar normativas específicas del país para cumplimiento completo.';\n    }\n  }\n\n  /**\n   * Obtener política de retención de datos por país\n   */\n  getDataRetentionPolicy(country: string): DataRetentionPolicy {\n    switch (country) {\n      case 'España':\n        return {\n          transcriptionRetentionHours: 1,\n          soapRetentionDays: 15,\n          auditLogRetentionYears: 5,\n          automaticDeletion: true,\n          encryptionRequired: true\n        };\n      \n      case 'México':\n        return {\n          transcriptionRetentionHours: 1,\n          soapRetentionDays: 10,\n          auditLogRetentionYears: 3,\n          automaticDeletion: true,\n          encryptionRequired: true\n        };\n      \n      case 'Estados Unidos':\n        return {\n          transcriptionRetentionHours: 1,\n          soapRetentionDays: 7,\n          auditLogRetentionYears: 6,\n          automaticDeletion: true,\n          encryptionRequired: true\n        };\n      \n      case 'Canadá':\n        return {\n          transcriptionRetentionHours: 1,\n          soapRetentionDays: 10,\n          auditLogRetentionYears: 7,\n          automaticDeletion: true,\n          encryptionRequired: true\n        };\n      \n      default:\n        return {\n          transcriptionRetentionHours: 1,\n          soapRetentionDays: 15,\n          auditLogRetentionYears: 5,\n          automaticDeletion: true,\n          encryptionRequired: true\n        };\n    }\n  }\n\n  /**\n   * Generar reporte de compliance\n   */\n  async generateComplianceReport(professionalProfileId: string): Promise<ComplianceReport> {\n    const profile = await this.profileService.getProfile(professionalProfileId);\n    const violations = this.getViolations(professionalProfileId);\n    \n    if (!profile) {\n      return {\n        professionalProfileId,\n        timestamp: new Date(),\n        violations: [],\n        complianceScore: 0,\n        recommendations: ['Crear perfil profesional'],\n        nextAuditDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 días\n      };\n    }\n    \n    // Calcular score de compliance\n    const totalRules = this.complianceRules.get(profile.country)?.length || 0;\n    const violationCount = violations.length;\n    const complianceScore = totalRules > 0 ? Math.max(0, 100 - (violationCount * 10)) : 100;\n\n    const recommendations = violations.map(v => {\n      const rule = this.complianceRules.get(profile.country)?.find(r => r.id === v.ruleId);\n      return rule ? this.getRecommendation(rule) : 'Revisar normativas específicas del país';\n    });\n\n    return {\n      professionalProfileId,\n      timestamp: new Date(),\n      violations,\n      complianceScore,\n      recommendations: [...new Set(recommendations)],\n      nextAuditDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 días\n    };\n  }\n\n  /**\n   * Resolver una violación de compliance\n   */\n  resolveViolation(professionalProfileId: string, violationId: string): boolean {\n    const violations = this.violations.get(professionalProfileId);\n    if (!violations) return false;\n\n    const violation = violations.find(v => v.id === violationId);\n    if (!violation) return false;\n\n    violation.isResolved = true;\n    this.violations.set(professionalProfileId, violations);\n    \n    console.log(`✅ Violación de compliance resuelta: ${violationId}`);\n    return true;\n  }\n\n  /**\n   * Obtener todas las violaciones de un profesional\n   */\n  getViolations(professionalProfileId: string): ComplianceViolation[] {\n    return this.violations.get(professionalProfileId) || [];\n  }\n\n  /**\n   * Limpiar violaciones resueltas antiguas\n   */\n  cleanResolvedViolations(): void {\n    const cutoffDate = new Date(Date.now() - 90 * 24 * 60 * 60 * 1000); // 90 días\n    \n    for (const [profileId, violations] of this.violations.entries()) {\n      const activeViolations = violations.filter(v => \n        !v.isResolved || v.timestamp > cutoffDate\n      );\n      this.violations.set(profileId, activeViolations);\n    }\n    \n    console.log('🧹 Violaciones de compliance resueltas limpiadas');\n  }\n}\n\nexport default ComplianceService; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/CryptoService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/EmailVerificationService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3383,3441],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":132,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":132,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3446,3482],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":133,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":133,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3487,3536],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":134,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":134,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3541,3587],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":135,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":135,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3592,3653],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3658,3712],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":148,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":148,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4021,4072],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":149,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":149,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4077,4109],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":150,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":150,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4114,4162],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\n\nexport interface EmailVerificationData {\n  email: string;\n  token: string;\n  professionalName: string;\n  profession: string;\n  expiresAt: Date;\n}\n\nexport interface WelcomeEmailData {\n  email: string;\n  professionalName: string;\n  profession: string;\n  verificationUrl: string;\n}\n\nclass EmailVerificationService {\n  private readonly BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001';\n\n  /**\n   * Envía email de bienvenida con link de verificación\n   */\n  async sendWelcomeEmail(data: WelcomeEmailData): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/email/welcome`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Error enviando email: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result.success;\n    } catch (error) {\n      console.error('Error enviando email de bienvenida:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Reenvía email de verificación\n   */\n  async resendVerificationEmail(email: string): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/email/resend-verification`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Error reenviando email: ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      return result.success;\n    } catch (error) {\n      console.error('Error reenviando email de verificación:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Verifica el token de email\n   */\n  async verifyEmailToken(token: string): Promise<{ success: boolean; message: string; userId?: string }> {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/email/verify`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ token }),\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        return {\n          success: false,\n          message: result.message || 'Error verificando email',\n        };\n      }\n\n      return {\n        success: true,\n        message: 'Email verificado exitosamente',\n        userId: result.userId,\n      };\n    } catch (error) {\n      console.error('Error verificando token:', error);\n      return {\n        success: false,\n        message: 'Error de conexión al verificar email',\n      };\n    }\n  }\n\n  /**\n   * Genera un token de verificación único\n   */\n  generateVerificationToken(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let token = '';\n    for (let i = 0; i < 32; i++) {\n      token += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return token;\n  }\n\n  /**\n   * Genera la URL de verificación\n   */\n  generateVerificationUrl(token: string, email: string): string {\n    const baseUrl = window.location.origin;\n    return `${baseUrl}/onboarding-confirmation?token=${token}&email=${encodeURIComponent(email)}`;\n  }\n\n  /**\n   * Simula el envío de email (para desarrollo)\n   */\n  async simulateWelcomeEmail(data: WelcomeEmailData): Promise<boolean> {\n    console.log('📧 SIMULANDO ENVÍO DE EMAIL DE BIENVENIDA:');\n    console.log('📧 Para:', data.email);\n    console.log('📧 Nombre:', data.professionalName);\n    console.log('📧 Profesión:', data.profession);\n    console.log('📧 URL de verificación:', data.verificationUrl);\n    console.log('📧 Email simulado enviado exitosamente');\n    \n    // Simular delay de red\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    return true;\n  }\n\n  /**\n   * Simula la verificación de email (para desarrollo)\n   */\n  async simulateEmailVerification(token: string): Promise<{ success: boolean; message: string; userId?: string }> {\n    console.log('🔍 SIMULANDO VERIFICACIÓN DE EMAIL:');\n    console.log('🔍 Token:', token);\n    console.log('🔍 Verificación simulado exitosa');\n    \n    // Simular delay de red\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    return {\n      success: true,\n      message: 'Email verificado exitosamente (simulado)',\n      userId: 'user-simulated-123',\n    };\n  }\n}\n\nexport const emailVerificationService = new EmailVerificationService(); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/GoogleCloudAudioService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":64,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":64,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1726,2138],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2529,2978],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":142,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":142,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4689,4970],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":157,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":157,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5197,5248],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'jsonParseError' is defined but never used.","line":162,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'textError' is defined but never used.","line":165,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":165,"endColumn":27},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":222,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":222,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7938,8348],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":292,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":292,"endColumn":19},{"ruleId":"no-unreachable","severity":2,"message":"Unreachable code.","line":292,"column":21,"nodeType":"BlockStatement","messageId":"unreachableCode","endLine":294,"endColumn":6}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ClinicalAnalysisRequest {\n  transcription: string;\n  specialty: 'physiotherapy' | 'psychology' | 'general_medicine';\n  sessionType: 'initial' | 'follow_up';\n}\n\nexport interface ClinicalAnalysisResponse {\n  success: boolean;\n  analysis?: {\n    warnings: Array<{\n      id: string;\n      severity: 'HIGH' | 'MEDIUM' | 'LOW';\n      category: string;\n      title: string;\n      description: string;\n      recommendation: string;\n      evidence: string;\n    }>;\n    suggestions: Array<{\n      id: string;\n      type: string;\n      title: string;\n      description: string;\n      rationale: string;\n      priority: 'HIGH' | 'MEDIUM' | 'LOW';\n    }>;\n    soap_analysis: {\n      subjective_completeness: number;\n      objective_completeness: number;\n      assessment_quality: number;\n      plan_appropriateness: number;\n      overall_quality: number;\n      missing_elements: string[];\n    };\n    session_quality: {\n      communication_score: number;\n      clinical_thoroughness: number;\n      patient_engagement: number;\n      professional_standards: number;\n      areas_for_improvement: string[];\n    };\n  };\n  error?: string;\n  message?: string;\n  metadata?: {\n    specialty: string;\n    sessionType: string;\n    processingTimeMs: number;\n    timestamp: string;\n  };\n}\n\ninterface TranscriptionResult {\n  text: string;\n  isFinal: boolean;\n  confidence?: number;\n}\n\nexport class GoogleCloudAudioService {\n  private readonly clinicalBrainEndpoint = 'https://us-east1-aiduxcare-stt-20250706.cloudfunctions.net/clinical-brain';\n  \n  async analyzeClinicalTranscription(request: ClinicalAnalysisRequest): Promise<ClinicalAnalysisResponse> {\n    // 🔍 DIAGNÓSTICO EXHAUSTIVO - Logging detallado para detectar causa raíz\n    console.log('🧠 INICIANDO DIAGNÓSTICO CLOUD FUNCTION:', {\n      endpoint: this.clinicalBrainEndpoint,\n      transcriptionLength: request.transcription.length,\n      specialty: request.specialty,\n      sessionType: request.sessionType,\n      transcriptionPreview: request.transcription.substring(0, 100) + '...',\n      requestSize: JSON.stringify(request).length,\n      timestamp: new Date().toISOString()\n    });\n\n    // Validación exhaustiva del request antes de enviar\n    const validation = this.validateTranscription(request.transcription);\n    if (!validation.isValid) {\n      console.error('❌ VALIDACIÓN FALLIDA:', validation.error);\n      return {\n        success: false,\n        error: `Validación fallida: ${validation.error}`,\n        message: validation.error\n      };\n    }\n\n    try {\n      console.log('📡 ENVIANDO REQUEST A CLOUD FUNCTION:', {\n        method: 'POST',\n        contentType: 'application/json',\n        bodySize: JSON.stringify(request).length,\n        body: {\n          transcription: request.transcription.length > 200 ? \n            request.transcription.substring(0, 200) + '...' : \n            request.transcription,\n          specialty: request.specialty,\n          sessionType: request.sessionType\n        }\n      });\n\n      // ⏰ AÑADIR TIMEOUT DE 60 SEGUNDOS\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 60000); // 60 segundos timeout\n\n      let response;\n      try {\n        response = await fetch(this.clinicalBrainEndpoint, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(request),\n          signal: controller.signal // ⏰ Añadir signal para timeout\n        });\n      } catch (fetchError) {\n        clearTimeout(timeoutId);\n        console.error('❌ ERROR DE RED O FETCH:', fetchError);\n        \n        // 🚨 MANEJO ESPECÍFICO DE TIMEOUT\n        if (fetchError instanceof Error && (fetchError.name === 'AbortError' || fetchError.message.includes('aborted'))) {\n          console.error('⏰ TIMEOUT DEL CEREBRO CLÍNICO DETECTADO:', {\n            duration: '60 segundos',\n            transcriptionLength: request.transcription.length,\n            specialty: request.specialty,\n            recommendation: 'Usar procesamiento básico'\n          });\n\n          return {\n            success: false,\n            error: '⏰ El Cerebro Clínico tardó más de 60 segundos. Se ha generado un análisis básico. Todas las funciones médicas están disponibles.',\n            message: 'timeout_cerebro_clinico'\n          };\n        }\n        \n        return {\n          success: false,\n          error: this.formatNetworkError(fetchError instanceof Error ? fetchError.message : 'Error desconocido'),\n          message: fetchError instanceof Error ? fetchError.message : 'Error desconocido'\n        };\n      }\n\n      clearTimeout(timeoutId); // Limpiar timeout si la respuesta llega\n\n      console.log('📡 RESPUESTA RECIBIDA DE CLOUD FUNCTION:', {\n        status: response.status,\n        statusText: response.statusText,\n        ok: response.ok,\n        headers: response.headers ? Object.fromEntries(response.headers.entries()) : {},\n        url: response.url\n      });\n\n      if (!response.ok) {\n        // DIAGNÓSTICO EXHAUSTIVO DEL ERROR\n        let errorDetails = '';\n        let fullErrorResponse = null;\n        \n        try {\n          const rawResponse = await response.text();\n          console.log('📋 RAW ERROR RESPONSE:', rawResponse);\n          \n          try {\n            fullErrorResponse = JSON.parse(rawResponse);\n            errorDetails = fullErrorResponse.message || fullErrorResponse.error || 'Error desconocido del servidor';\n          } catch (jsonParseError) {\n            errorDetails = rawResponse || `Error HTTP ${response.status}: ${response.statusText}`;\n          }\n        } catch (textError) {\n          errorDetails = `Error HTTP ${response.status}: ${response.statusText}`;\n        }\n\n        console.error('❌ DIAGNÓSTICO COMPLETO DEL ERROR:', {\n          status: response.status,\n          statusText: response.statusText,\n          errorDetails,\n          fullErrorResponse,\n          request: {\n            transcriptionLength: request.transcription.length,\n            specialty: request.specialty,\n            sessionType: request.sessionType,\n            transcriptionSample: request.transcription.substring(0, 150)\n          },\n          timestamp: new Date().toISOString()\n        });\n\n        // Si es Error 500, intentar capturar más detalles específicos\n        if (response.status === 500) {\n          console.error('🚨 ERROR 500 DETECTADO - ANÁLISIS ESPECÍFICO:', {\n            likelyTextChunkerError: errorDetails.includes('textChunker'),\n            likelyVertexAIError: errorDetails.includes('Vertex') || errorDetails.includes('INVALID_ARGUMENT'),\n            likelyPromptError: errorDetails.includes('prompt') || errorDetails.includes('template'),\n            fullErrorMessage: errorDetails\n          });\n        }\n\n        return {\n          success: false,\n          error: this.formatErrorMessage(response.status, errorDetails),\n          message: errorDetails\n        };\n      }\n\n      let result: ClinicalAnalysisResponse | null = null;\n      try {\n        result = await response.json();\n      } catch (jsonError) {\n        console.error('❌ Error parseando JSON de la respuesta del Cerebro Clínico:', jsonError);\n        return {\n          success: false,\n          error: `Error parseando JSON de la respuesta del Cerebro Clínico: ${jsonError instanceof Error ? jsonError.message : 'Error desconocido'}`,\n          message: 'json_parse_error'\n        };\n      }\n\n      // Blindaje: si la respuesta es null, vacía o no tiene la estructura esperada\n      if (!result || typeof result !== 'object' || (result.success === undefined && !result.analysis)) {\n        console.error('❌ Respuesta inválida o inesperada del Cerebro Clínico:', result);\n        return {\n          success: false,\n          error: 'Respuesta inválida o inesperada del Cerebro Clínico. No se pudo obtener un análisis clínico válido.',\n          message: 'invalid_response_structure'\n        };\n      }\n\n      console.log('✅ Análisis recibido del Cerebro Clínico:', {\n        success: result.success,\n        hasWarnings: !!result.analysis?.warnings,\n        warningsCount: result.analysis?.warnings?.length || 0,\n        hasSuggestions: !!result.analysis?.suggestions,\n        suggestionsCount: result.analysis?.suggestions?.length || 0,\n        overallQuality: result.analysis?.soap_analysis?.overall_quality\n      });\n\n      return result;\n\n    } catch (error) {\n      console.error('❌ Error crítico comunicándose con el Cerebro Clínico:', error);\n      console.error('🔍 DEBUG ERROR TYPE:', {\n        errorType: typeof error,\n        errorName: error instanceof Error ? error.name : 'N/A',\n        errorMessage: error instanceof Error ? error.message : 'N/A',\n        isAbortError: error instanceof Error && error.name === 'AbortError',\n        containsAborted: error instanceof Error && error.message.includes('aborted')\n      });\n      \n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';\n      \n      // 🚨 MANEJO ESPECÍFICO DE TIMEOUT\n      if (error instanceof Error && (error.name === 'AbortError' || error.message.includes('aborted'))) {\n        console.error('⏰ TIMEOUT DEL CEREBRO CLÍNICO DETECTADO:', {\n          duration: '60 segundos',\n          transcriptionLength: request.transcription.length,\n          specialty: request.specialty,\n          recommendation: 'Usar procesamiento básico'\n        });\n\n        return {\n          success: false,\n          error: '⏰ El Cerebro Clínico tardó más de 60 segundos. Se ha generado un análisis básico. Todas las funciones médicas están disponibles.',\n          message: 'timeout_cerebro_clinico'\n        };\n      } else {\n        console.error('❌ NO ES ABORT ERROR:', {\n          errorName: error instanceof Error ? error.name : 'N/A',\n          errorMessage: error instanceof Error ? error.message : 'N/A'\n        });\n      }\n\n      console.error('❌ ERROR DE RED CLOUD FUNCTION:', {\n        error: errorMessage,\n        request: {\n          transcriptionLength: request.transcription.length,\n          specialty: request.specialty,\n          sessionType: request.sessionType\n        }\n      });\n\n      return {\n        success: false,\n        error: this.formatNetworkError(errorMessage),\n        message: errorMessage\n      };\n    }\n  }\n\n  public async processAudio(): Promise<TranscriptionResult> {\n    try {\n      // Aquí iría la lógica real de Google Cloud Speech-to-Text\n      // Por ahora retornamos un resultado simulado\n      return {\n        text: 'Transcripción simulada',\n        isFinal: true,\n        confidence: 0.95\n      };\n    } catch (error) {\n      throw new Error('Error al procesar audio con Google Cloud');\n    }\n  }\n\n  private formatErrorMessage(statusCode: number, errorDetails: string): string {\n    switch (statusCode) {\n      case 400:\n        return `⚠️ Solicitud inválida: ${errorDetails}. Verifique que la transcripción sea válida.`;\n      case 401:\n        return `🔒 Error de autenticación: ${errorDetails}. Contacte al soporte técnico.`;\n      case 403:\n        return `🚫 Acceso denegado: ${errorDetails}. Verifique sus permisos.`;\n      case 404:\n        return `🔍 Servicio no encontrado: ${errorDetails}. El Cerebro Clínico puede estar en mantenimiento.`;\n      case 429:\n        return `⏱️ Límite de uso excedido: ${errorDetails}. Intente nuevamente en unos minutos.`;\n      case 500:\n        return `🚨 Error interno del Cerebro Clínico: ${errorDetails}. El sistema está procesando pero encontró un problema técnico.`;\n      case 502:\n        return `🔌 Error de conexión: ${errorDetails}. El servicio puede estar temporalmente no disponible.`;\n      case 503:\n        return `⚙️ Servicio no disponible: ${errorDetails}. El Cerebro Clínico está en mantenimiento.`;\n      case 504:\n        return `⏰ Tiempo de espera agotado: ${errorDetails}. La transcripción puede ser muy larga.`;\n      default:\n        return `❌ Error del servidor (${statusCode}): ${errorDetails}`;\n    }\n  }\n\n  private formatNetworkError(errorMessage: string): string {\n    if (errorMessage.includes('network') || errorMessage.includes('fetch')) {\n      return `🌐 Error de conexión de red: ${errorMessage}. Verifique su conexión a internet.`;\n    }\n    \n    if (errorMessage.includes('timeout')) {\n      return `⏰ Tiempo de espera agotado: ${errorMessage}. La transcripción puede ser muy larga o el servicio está sobrecargado.`;\n    }\n    \n    if (errorMessage.includes('INVALID_ARGUMENT')) {\n      return `⚠️ Formato de transcripción no válido: ${errorMessage}. La transcripción no pudo ser procesada por el modelo de IA.`;\n    }\n    if (errorMessage.includes('quota')) {\n      return `📊 Límites de uso alcanzados: ${errorMessage}. Se han agotado los recursos del servicio de IA.`;\n    }\n    return `🔧 Error técnico: ${errorMessage}. Contacte al soporte técnico si el problema persiste.`;\n  }\n\n  // Método para validar transcripción antes de enviar\n  validateTranscription(transcription: string): { isValid: boolean; error?: string } {\n    if (!transcription || transcription.trim().length === 0) {\n      return { isValid: false, error: 'La transcripción está vacía' };\n    }\n    if (transcription.length < 10) {\n      return { isValid: false, error: 'La transcripción es demasiado corta (mínimo 10 caracteres)' };\n    }\n    if (transcription.length > 50000) {\n      return { isValid: false, error: 'La transcripción es demasiado larga (máximo 50,000 caracteres)' };\n    }\n    // 🔧 PASO 3: MENSAJE MEJORADO PARA USUARIO CLÍNICO\n    // Verificar que contiene palabras reales\n    const words = transcription.trim().split(/\\s+/);\n    if (words.length < 3) {\n      return {\n        isValid: false,\n        error: 'No se ha podido detectar una transcripción clara. Por favor, verifique su micrófono e inténtelo de nuevo en un entorno con menos ruido de fondo.'\n      };\n    }\n    return { isValid: true };\n  }\n\n  // Método para obtener estado del servicio\n  async getServiceStatus(): Promise<{ available: boolean; message: string }> {\n    try {\n      const response = await fetch(`${this.clinicalBrainEndpoint}/health`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        return {\n          available: true,\n          message: `✅ Cerebro Clínico disponible (${data.version || 'v1.0.0'})`\n        };\n      } else {\n        return {\n          available: false,\n          message: `⚠️ Cerebro Clínico no disponible (${response.status})`\n        };\n      }\n    } catch (error) {\n      return {\n        available: false,\n        message: `❌ Error verificando estado del Cerebro Clínico: ${error instanceof Error ? error.message : 'Error desconocido'}`\n      };\n    }\n  }\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/KnowledgeBaseService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2250,2302],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2307,2432],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2437,2560],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2565,2621],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2626,2689],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 📚 Knowledge Base Service - AiDuxCare V.2\n * Base de conocimiento especializada para fisioterapia\n * Implementación del Blueprint Oficial\n */\n\nimport ProfessionalProfileService from './ProfessionalProfileService';\n\nexport interface MedicalKnowledge {\n  id: string;\n  category: 'pathology' | 'technique' | 'test' | 'medication' | 'protocol';\n  title: string;\n  description: string;\n  content: string;\n  countries: string[];\n  specialties: string[];\n  certifications: string[];\n  contraindications: string[];\n  references: string[];\n  lastUpdated: Date;\n}\n\nexport interface ClinicalProtocol {\n  id: string;\n  name: string;\n  description: string;\n  indications: string[];\n  contraindications: string[];\n  steps: string[];\n  expectedOutcomes: string[];\n  timeline: string;\n  countries: string[];\n  specialties: string[];\n}\n\nexport interface DiagnosticTest {\n  id: string;\n  name: string;\n  category: 'orthopedic' | 'neurological' | 'cardiorespiratory' | 'functional';\n  description: string;\n  procedure: string[];\n  positiveSigns: string[];\n  negativeSigns: string[];\n  contraindications: string[];\n  reliability: number; // 0-100\n  countries: string[];\n}\n\nexport class KnowledgeBaseService {\n  private static instance: KnowledgeBaseService;\n  private profileService: ProfessionalProfileService;\n  private medicalKnowledge: Map<string, MedicalKnowledge> = new Map();\n  private clinicalProtocols: Map<string, ClinicalProtocol> = new Map();\n  private diagnosticTests: Map<string, DiagnosticTest> = new Map();\n\n  private constructor() {\n    this.profileService = ProfessionalProfileService.getInstance();\n    this.initializeKnowledgeBase();\n  }\n\n  static getInstance(): KnowledgeBaseService {\n    if (!KnowledgeBaseService.instance) {\n      KnowledgeBaseService.instance = new KnowledgeBaseService();\n    }\n    return KnowledgeBaseService.instance;\n  }\n\n  /**\n   * Inicializar base de conocimiento médica\n   */\n  private initializeKnowledgeBase(): void {\n    // Patologías comunes en fisioterapia\n    this.initializePathologies();\n    \n    // Técnicas de tratamiento\n    this.initializeTechniques();\n    \n    // Tests diagnósticos\n    this.initializeDiagnosticTests();\n    \n    // Protocolos clínicos\n    this.initializeClinicalProtocols();\n    \n    console.log('📚 Base de conocimiento inicializada');\n    console.log(`   - Patologías: ${Array.from(this.medicalKnowledge.values()).filter(k => k.category === 'pathology').length}`);\n    console.log(`   - Técnicas: ${Array.from(this.medicalKnowledge.values()).filter(k => k.category === 'technique').length}`);\n    console.log(`   - Tests: ${this.diagnosticTests.size}`);\n    console.log(`   - Protocolos: ${this.clinicalProtocols.size}`);\n  }\n\n  /**\n   * Inicializar patologías\n   */\n  private initializePathologies(): void {\n    const pathologies: MedicalKnowledge[] = [\n      {\n        id: 'path-001',\n        category: 'pathology',\n        title: 'Lumbalgia Mecánica',\n        description: 'Dolor lumbar de origen mecánico',\n        content: 'La lumbalgia mecánica es el dolor lumbar que se origina en estructuras musculoesqueléticas...',\n        countries: ['España', 'México', 'Estados Unidos', 'Canadá'],\n        specialties: ['Ortopedia', 'Deportiva'],\n        certifications: [],\n        contraindications: ['Fractura vertebral', 'Infección', 'Cáncer'],\n        references: ['Clinical Practice Guidelines for Low Back Pain'],\n        lastUpdated: new Date()\n      },\n      {\n        id: 'path-002',\n        category: 'pathology',\n        title: 'Síndrome de Pinzamiento Subacromial',\n        description: 'Compresión de estructuras subacromiales',\n        content: 'El síndrome de pinzamiento subacromial se caracteriza por dolor en el hombro...',\n        countries: ['España', 'México', 'Estados Unidos', 'Canadá'],\n        specialties: ['Ortopedia', 'Deportiva'],\n        certifications: [],\n        contraindications: ['Fractura de hombro', 'Luxación reciente'],\n        references: ['Shoulder Impingement Syndrome Guidelines'],\n        lastUpdated: new Date()\n      },\n      {\n        id: 'path-003',\n        category: 'pathology',\n        title: 'Espondiloartritis',\n        description: 'Enfermedad inflamatoria sistémica',\n        content: 'La espondiloartritis es una enfermedad inflamatoria que afecta principalmente la columna...',\n        countries: ['España', 'México', 'Estados Unidos', 'Canadá'],\n        specialties: ['Reumatología'],\n        certifications: [],\n        contraindications: ['Fase aguda severa'],\n        references: ['ASAS Classification Criteria'],\n        lastUpdated: new Date()\n      }\n    ];\n\n    pathologies.forEach(pathology => {\n      this.medicalKnowledge.set(pathology.id, pathology);\n    });\n  }\n\n  /**\n   * Inicializar técnicas\n   */\n  private initializeTechniques(): void {\n    const techniques: MedicalKnowledge[] = [\n      {\n        id: 'tech-001',\n        category: 'technique',\n        title: 'Terapia Manual',\n        description: 'Técnicas manuales de fisioterapia',\n        content: 'La terapia manual incluye movilizaciones, manipulaciones y técnicas de tejido blando...',\n        countries: ['España', 'México', 'Estados Unidos', 'Canadá'],\n        specialties: ['Ortopedia', 'Neurología'],\n        certifications: ['Terapia Manual'],\n        contraindications: ['Fractura reciente', 'Infección activa', 'Cáncer activo'],\n        references: ['Manual Therapy Guidelines'],\n        lastUpdated: new Date()\n      },\n      {\n        id: 'tech-002',\n        category: 'technique',\n        title: 'Punción Seca',\n        description: 'Técnica de punción para puntos gatillo',\n        content: 'La punción seca es una técnica invasiva para el tratamiento de puntos gatillo...',\n        countries: ['España', 'México', 'Estados Unidos', 'Canadá'],\n        specialties: ['Ortopedia', 'Dolor'],\n        certifications: ['Punción Seca'],\n        contraindications: ['Trastornos de coagulación', 'Infección local', 'Embarazo'],\n        references: ['Dry Needling Guidelines'],\n        lastUpdated: new Date()\n      },\n      {\n        id: 'tech-003',\n        category: 'technique',\n        title: 'Acupuntura',\n        description: 'Técnica de medicina tradicional china',\n        content: 'La acupuntura utiliza agujas finas en puntos específicos del cuerpo...',\n        countries: ['España', 'México', 'Estados Unidos', 'Canadá'],\n        specialties: ['Dolor', 'Neurología'],\n        certifications: ['Acupuntura'],\n        contraindications: ['Trastornos de coagulación', 'Infección local', 'Embarazo'],\n        references: ['Acupuncture Guidelines'],\n        lastUpdated: new Date()\n      }\n    ];\n\n    techniques.forEach(technique => {\n      this.medicalKnowledge.set(technique.id, technique);\n    });\n  }\n\n  /**\n   * Inicializar tests diagnósticos\n   */\n  private initializeDiagnosticTests(): void {\n    const tests: DiagnosticTest[] = [\n      {\n        id: 'test-001',\n        name: 'Test de Lasègue',\n        category: 'orthopedic',\n        description: 'Evaluación de irritación radicular lumbar',\n        procedure: [\n          'Paciente en decúbito supino',\n          'Elevar la pierna extendida',\n          'Observar reproducción del dolor radicular'\n        ],\n        positiveSigns: [\n          'Reproducción del dolor radicular',\n          'Dolor antes de 60° de elevación',\n          'Dolor en distribución dermatomal'\n        ],\n        negativeSigns: [\n          'No reproducción del dolor',\n          'Dolor solo en muslo posterior',\n          'Elevación > 60° sin dolor radicular'\n        ],\n        contraindications: ['Fractura vertebral', 'Inestabilidad lumbar'],\n        reliability: 85,\n        countries: ['España', 'México', 'Estados Unidos', 'Canadá']\n      },\n      {\n        id: 'test-002',\n        name: 'Test de Neer',\n        category: 'orthopedic',\n        description: 'Evaluación de pinzamiento subacromial',\n        procedure: [\n          'Paciente sentado',\n          'Elevar el brazo en flexión',\n          'Observar reproducción del dolor'\n        ],\n        positiveSigns: [\n          'Reproducción del dolor subacromial',\n          'Dolor en arco doloroso',\n          'Crepitación subacromial'\n        ],\n        negativeSigns: [\n          'No reproducción del dolor',\n          'Movimiento completo sin dolor'\n        ],\n        contraindications: ['Fractura de hombro', 'Luxación reciente'],\n        reliability: 78,\n        countries: ['España', 'México', 'Estados Unidos', 'Canadá']\n      },\n      {\n        id: 'test-003',\n        name: 'Test de Timed Up and Go',\n        category: 'functional',\n        description: 'Evaluación de movilidad y equilibrio',\n        procedure: [\n          'Paciente sentado en silla',\n          'Levantarse y caminar 3 metros',\n          'Girar y regresar a la silla',\n          'Medir tiempo total'\n        ],\n        positiveSigns: [\n          'Tiempo > 20 segundos',\n          'Inestabilidad durante la marcha',\n          'Necesidad de ayuda'\n        ],\n        negativeSigns: [\n          'Tiempo < 10 segundos',\n          'Marcha estable',\n          'Sin necesidad de ayuda'\n        ],\n        contraindications: ['Inestabilidad severa', 'Dolor agudo'],\n        reliability: 92,\n        countries: ['España', 'México', 'Estados Unidos', 'Canadá']\n      }\n    ];\n\n    tests.forEach(test => {\n      this.diagnosticTests.set(test.id, test);\n    });\n  }\n\n  /**\n   * Inicializar protocolos clínicos\n   */\n  private initializeClinicalProtocols(): void {\n    const protocols: ClinicalProtocol[] = [\n      {\n        id: 'protocol-001',\n        name: 'Protocolo de Lumbalgia Aguda',\n        description: 'Manejo de lumbalgia aguda mecánica',\n        indications: ['Dolor lumbar agudo < 6 semanas', 'Origen mecánico', 'Sin banderas rojas'],\n        contraindications: ['Banderas rojas', 'Dolor crónico', 'Patología sistémica'],\n        steps: [\n          'Evaluación inicial completa',\n          'Educación del paciente',\n          'Ejercicios de estabilización',\n          'Progresión gradual de actividad'\n        ],\n        expectedOutcomes: [\n          'Reducción del dolor en 2 semanas',\n          'Mejora de la movilidad',\n          'Retorno a actividades normales'\n        ],\n        timeline: '4-6 semanas',\n        countries: ['España', 'México', 'Estados Unidos', 'Canadá'],\n        specialties: ['Ortopedia']\n      },\n      {\n        id: 'protocol-002',\n        name: 'Protocolo de Rehabilitación Post-ACV',\n        description: 'Rehabilitación neurológica post-accidente cerebrovascular',\n        indications: ['Secuelas de ACV', 'Hemiparesia', 'Alteración de marcha'],\n        contraindications: ['ACV agudo', 'Inestabilidad médica', 'Contraindicaciones médicas'],\n        steps: [\n          'Evaluación neurológica completa',\n          'Ejercicios de Bobath',\n          'Entrenamiento de marcha',\n          'Actividades de la vida diaria'\n        ],\n        expectedOutcomes: [\n          'Mejora de la función motora',\n          'Independencia en marcha',\n          'Mejora de actividades diarias'\n        ],\n        timeline: '6-12 meses',\n        countries: ['España', 'México', 'Estados Unidos', 'Canadá'],\n        specialties: ['Neurología']\n      }\n    ];\n\n    protocols.forEach(protocol => {\n      this.clinicalProtocols.set(protocol.id, protocol);\n    });\n  }\n\n  /**\n   * Buscar conocimiento personalizado según perfil profesional\n   */\n  async searchPersonalizedKnowledge(\n    professionalProfileId: string,\n    query: string,\n    category?: string\n  ): Promise<MedicalKnowledge[]> {\n    const profile = this.profileService.getProfile(professionalProfileId);\n    if (!profile) {\n      return [];\n    }\n\n    const results: MedicalKnowledge[] = [];\n    const queryLower = query.toLowerCase();\n\n    for (const knowledge of this.medicalKnowledge.values()) {\n      // Filtrar por país\n      if (!knowledge.countries.includes(profile.country)) {\n        continue;\n      }\n\n      // Filtrar por especialidad\n      if (knowledge.specialties.length > 0 && \n          !knowledge.specialties.some(spec => profile.specialties.includes(spec))) {\n        continue;\n      }\n\n      // Filtrar por certificaciones\n      if (knowledge.certifications.length > 0 && \n          !knowledge.certifications.some(cert => profile.certifications.includes(cert))) {\n        continue;\n      }\n\n      // Filtrar por categoría\n      if (category && knowledge.category !== category) {\n        continue;\n      }\n\n      // Buscar en contenido\n      if (knowledge.title.toLowerCase().includes(queryLower) ||\n          knowledge.description.toLowerCase().includes(queryLower) ||\n          knowledge.content.toLowerCase().includes(queryLower)) {\n        results.push(knowledge);\n      }\n    }\n\n    return results.sort((a, b) => b.lastUpdated.getTime() - a.lastUpdated.getTime());\n  }\n\n  /**\n   * Obtener tests diagnósticos sugeridos\n   */\n  getSuggestedTests(\n    professionalProfileId: string,\n    symptoms: string[]\n  ): DiagnosticTest[] {\n    const profile = this.profileService.getProfile(professionalProfileId);\n    if (!profile) {\n      return [];\n    }\n\n    const suggestedTests: DiagnosticTest[] = [];\n    const symptomsLower = symptoms.map(s => s.toLowerCase());\n\n    for (const test of this.diagnosticTests.values()) {\n      // Filtrar por país\n      if (!test.countries.includes(profile.country)) {\n        continue;\n      }\n\n      // Filtrar por especialidad\n      if (test.category === 'orthopedic' && !profile.specialties.includes('Ortopedia')) {\n        continue;\n      }\n      if (test.category === 'neurological' && !profile.specialties.includes('Neurología')) {\n        continue;\n      }\n\n      // Sugerir tests basados en síntomas\n      let shouldSuggest = false;\n\n      if (symptomsLower.some(s => s.includes('dolor lumbar') || s.includes('lumbalgia'))) {\n        if (test.name.toLowerCase().includes('lasègue') || test.name.toLowerCase().includes('lasegue')) {\n          shouldSuggest = true;\n        }\n      }\n\n      if (symptomsLower.some(s => s.includes('hombro') || s.includes('dolor hombro'))) {\n        if (test.name.toLowerCase().includes('neer')) {\n          shouldSuggest = true;\n        }\n      }\n\n      if (symptomsLower.some(s => s.includes('equilibrio') || s.includes('marcha'))) {\n        if (test.name.toLowerCase().includes('timed up and go')) {\n          shouldSuggest = true;\n        }\n      }\n\n      if (shouldSuggest) {\n        suggestedTests.push(test);\n      }\n    }\n\n    return suggestedTests.sort((a, b) => b.reliability - a.reliability);\n  }\n\n  /**\n   * Obtener protocolos clínicos relevantes\n   */\n  getRelevantProtocols(\n    professionalProfileId: string,\n    diagnosis: string,\n    specialty: string\n  ): ClinicalProtocol[] {\n    const profile = this.profileService.getProfile(professionalProfileId);\n    if (!profile) {\n      return [];\n    }\n\n    const relevantProtocols: ClinicalProtocol[] = [];\n    const diagnosisLower = diagnosis.toLowerCase();\n\n    for (const protocol of this.clinicalProtocols.values()) {\n      // Filtrar por país\n      if (!protocol.countries.includes(profile.country)) {\n        continue;\n      }\n\n      // Filtrar por especialidad\n      if (!protocol.specialties.includes(specialty)) {\n        continue;\n      }\n\n      // Buscar protocolos relevantes\n      if (protocol.name.toLowerCase().includes(diagnosisLower) ||\n          protocol.description.toLowerCase().includes(diagnosisLower) ||\n          protocol.indications.some(ind => ind.toLowerCase().includes(diagnosisLower))) {\n        relevantProtocols.push(protocol);\n      }\n    }\n\n    return relevantProtocols;\n  }\n\n  /**\n   * Obtener contraindicaciones para una técnica\n   */\n  getContraindications(techniqueId: string, professionalProfileId: string): string[] {\n    const knowledge = this.medicalKnowledge.get(techniqueId);\n    const profile = this.profileService.getProfile(professionalProfileId);\n    \n    if (!knowledge || !profile) {\n      return [];\n    }\n\n    // Verificar si el profesional tiene las certificaciones necesarias\n    const hasRequiredCertifications = knowledge.certifications.length === 0 ||\n      knowledge.certifications.some(cert => profile.certifications.includes(cert));\n\n    if (!hasRequiredCertifications) {\n      return ['Certificación requerida: ' + knowledge.certifications.join(', ')];\n    }\n\n    return knowledge.contraindications;\n  }\n\n  /**\n   * Obtener referencias bibliográficas\n   */\n  getReferences(knowledgeId: string): string[] {\n    const knowledge = this.medicalKnowledge.get(knowledgeId);\n    return knowledge?.references || [];\n  }\n\n  /**\n   * Actualizar conocimiento\n   */\n  updateKnowledge(knowledgeId: string, updates: Partial<MedicalKnowledge>): boolean {\n    const knowledge = this.medicalKnowledge.get(knowledgeId);\n    if (!knowledge) {\n      return false;\n    }\n\n    const updatedKnowledge: MedicalKnowledge = {\n      ...knowledge,\n      ...updates,\n      lastUpdated: new Date()\n    };\n\n    this.medicalKnowledge.set(knowledgeId, updatedKnowledge);\n    return true;\n  }\n\n  /**\n   * Agregar nuevo conocimiento\n   */\n  addKnowledge(knowledge: Omit<MedicalKnowledge, 'id' | 'lastUpdated'>): string {\n    const id = `kb-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    \n    const newKnowledge: MedicalKnowledge = {\n      ...knowledge,\n      id,\n      lastUpdated: new Date()\n    };\n\n    this.medicalKnowledge.set(id, newKnowledge);\n    return id;\n  }\n\n  /**\n   * Obtener estadísticas de la base de conocimiento\n   */\n  getKnowledgeStats(): {\n    totalKnowledge: number;\n    pathologies: number;\n    techniques: number;\n    tests: number;\n    protocols: number;\n    countries: string[];\n  } {\n    const knowledge = Array.from(this.medicalKnowledge.values());\n    const countries = new Set<string>();\n    \n    knowledge.forEach(k => k.countries.forEach(c => countries.add(c)));\n\n    return {\n      totalKnowledge: knowledge.length,\n      pathologies: knowledge.filter(k => k.category === 'pathology').length,\n      techniques: knowledge.filter(k => k.category === 'technique').length,\n      tests: this.diagnosticTests.size,\n      protocols: this.clinicalProtocols.size,\n      countries: Array.from(countries)\n    };\n  }\n}\n\nexport default KnowledgeBaseService; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/MedicalTranscriptionPipelineService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":128,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":128,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3813,3872],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":152,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":152,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4647,4705],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":153,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":153,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4712,4793],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":154,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":154,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4800,4876],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":155,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":155,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4883,4952],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":180,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":180,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5550,5610],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":195,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":195,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6049,6107],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":196,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":196,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6114,6176],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":197,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":197,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6183,6258],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":198,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":198,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6265,6332],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":223,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":223,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6940,7005],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":255,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":255,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7813,7871],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":256,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":256,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7878,7958],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":257,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":257,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7965,8034],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":258,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":258,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8041,8103],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":282,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":282,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8644,8714],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":283,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":283,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8719,8748],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":300,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":300,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9449,9478],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":301,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":301,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9485,9532],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":302,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":302,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9539,9596],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":303,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":303,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9603,9678],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":304,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":304,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9685,9755],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":305,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":305,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9762,9835],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":306,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":306,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9842,9920],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":307,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":307,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9927,9956],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":500,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":500,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16435,16532],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":516,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":516,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16909,16997],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🎙️ Medical Transcription Pipeline Service - AiDuxCare V.2\n * Pipeline de transcripción médica en 3 fases según Blueprint Oficial\n * Implementación del flujo de trabajo real de consulta fisioterapéutica\n */\n\nimport OptimizedClinicalBrainService, { ClinicalAnalysisRequest, ClinicalAnalysisResponse } from './OptimizedClinicalBrainService';\nimport ProfessionalProfileService from './ProfessionalProfileService';\n\nexport interface TranscriptionSegment {\n  id: string;\n  speaker: 'paciente' | 'terapeuta';\n  text: string;\n  timestamp: number;\n  confidence: number;\n}\n\nexport interface PipelinePhase1Result {\n  transcription: string;\n  segments: TranscriptionSegment[];\n  highlights: Array<{\n    id: string;\n    text: string;\n    category: 'síntoma' | 'hallazgo' | 'antecedente' | 'medicación' | 'actividad';\n    confidence: number;\n    isSelected: boolean;\n  }>;\n  warnings: Array<{\n    id: string;\n    type: 'legal' | 'contraindicación' | 'bandera_roja' | 'bandera_amarilla' | 'punto_ciego' | 'sugerencia_diagnóstica' | 'test_provocación';\n    severity: 'alta' | 'media' | 'baja';\n    category: 'compliance' | 'seguridad' | 'diagnóstico' | 'tratamiento';\n    title: string;\n    description: string;\n    action: string;\n    isAccepted: boolean;\n  }>;\n}\n\nexport interface PipelinePhase2Result {\n  selectedHighlights: string[];\n  acceptedWarnings: string[];\n  suggestedTests: Array<{\n    name: string;\n    category: 'ortopédico' | 'neurológico' | 'cardiorrespiratorio' | 'funcional';\n    description: string;\n    contraindications: string[];\n    expectedResults: string[];\n  }>;\n  testResults: Array<{\n    testName: string;\n    result: string;\n    notes: string;\n  }>;\n}\n\nexport interface PipelinePhase3Result {\n  soapDocument: {\n    subjective: string;\n    objective: string;\n    assessment: string;\n    plan: string;\n    quality: {\n      subjective: number;\n      objective: number;\n      assessment: number;\n      plan: number;\n      overall: number;\n    };\n  };\n  complianceIssues: string[];\n  auditTrail: Array<{\n    action: string;\n    timestamp: Date;\n    userId: string;\n    details: string;\n  }>;\n}\n\nexport interface CompletePipelineResult {\n  phase1: PipelinePhase1Result;\n  phase2: PipelinePhase2Result;\n  phase3: PipelinePhase3Result;\n  metadata: {\n    totalProcessingTime: number;\n    professionalProfileId: string;\n    patientId: string;\n    sessionId: string;\n    timestamp: Date;\n  };\n}\n\nexport class MedicalTranscriptionPipelineService {\n  private static instance: MedicalTranscriptionPipelineService;\n  private clinicalBrain: OptimizedClinicalBrainService;\n  private profileService: ProfessionalProfileService;\n  \n  // Cache para transcripciones (eliminación automática según HIPAA/GDPR)\n  private transcriptionCache: Map<string, { data: unknown; expiry: Date }> = new Map();\n  \n  // Configuración de retención de datos\n  private readonly DATA_RETENTION_HOURS = 1; // 1 hora según HIPAA/GDPR\n\n  private constructor() {\n    this.clinicalBrain = OptimizedClinicalBrainService.getInstance();\n    this.profileService = ProfessionalProfileService.getInstance();\n    \n    // Limpiar cache expirado cada hora\n    setInterval(() => this.cleanExpiredCache(), 60 * 60 * 1000);\n  }\n\n  static getInstance(): MedicalTranscriptionPipelineService {\n    if (!MedicalTranscriptionPipelineService.instance) {\n      MedicalTranscriptionPipelineService.instance = new MedicalTranscriptionPipelineService();\n    }\n    return MedicalTranscriptionPipelineService.instance;\n  }\n\n  /**\n   * FASE 1: La Anamnesis Aumentada\n   * Procesamiento de transcripción médica con análisis automático\n   */\n  async executePhase1(\n    rawTranscription: string,\n    professionalProfileId: string,\n    patientInfo: { age: number; gender: string; occupation: string; comorbidities: string[] }\n  ): Promise<PipelinePhase1Result> {\n    console.log('📋 FASE 1: Iniciando Anamnesis Aumentada...');\n    \n    const startTime = Date.now();\n\n    try {\n      // 1.1 Procesar transcripción en segmentos\n      const segments = this.parseTranscription(rawTranscription);\n      \n      // 1.2 Análisis del Cerebro Clínico\n      const clinicalRequest: ClinicalAnalysisRequest = {\n        transcription: rawTranscription,\n        specialty: 'physiotherapy',\n        sessionType: 'initial',\n        professionalProfileId,\n        patientInfo\n      };\n\n      const clinicalAnalysis = await this.clinicalBrain.analyzeClinicalCase(clinicalRequest);\n      \n      // 1.3 Verificar compliance según perfil profesional\n      const complianceIssues = await this.checkComplianceIssues(clinicalAnalysis, professionalProfileId);\n\n      const processingTime = Date.now() - startTime;\n      \n      console.log(`✅ FASE 1 completada en ${processingTime}ms`);\n      console.log(`   - Highlights detectados: ${clinicalAnalysis.highlights.length}`);\n      console.log(`   - Warnings generados: ${clinicalAnalysis.warnings.length}`);\n      console.log(`   - Issues de compliance: ${complianceIssues.length}`);\n\n      return {\n        transcription: rawTranscription,\n        segments,\n        highlights: clinicalAnalysis.highlights,\n        warnings: clinicalAnalysis.warnings\n      };\n\n    } catch (error) {\n      console.error('❌ Error en FASE 1:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * FASE 2: La Evaluación Funcional\n   * Generación de tests sugeridos y recopilación de resultados\n   */\n  async executePhase2(\n    phase1Result: PipelinePhase1Result,\n    professionalProfileId: string,\n    selectedHighlights: string[],\n    acceptedWarnings: string[]\n  ): Promise<PipelinePhase2Result> {\n    console.log('🔍 FASE 2: Iniciando Evaluación Funcional...');\n    \n    const startTime = Date.now();\n\n    try {\n      // 2.1 Generar tests sugeridos basados en highlights seleccionados\n      const suggestedTests = await this.generateSuggestedTests(\n        selectedHighlights\n      );\n\n      // 2.2 Simular resultados de tests (en producción vendrían del frontend)\n      const testResults = this.simulateTestResults(suggestedTests);\n\n      const processingTime = Date.now() - startTime;\n      \n      console.log(`✅ FASE 2 completada en ${processingTime}ms`);\n      console.log(`   - Tests sugeridos: ${suggestedTests.length}`);\n      console.log(`   - Highlights seleccionados: ${selectedHighlights.length}`);\n      console.log(`   - Warnings aceptados: ${acceptedWarnings.length}`);\n\n      return {\n        selectedHighlights,\n        acceptedWarnings,\n        suggestedTests,\n        testResults\n      };\n\n    } catch (error) {\n      console.error('❌ Error en FASE 2:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * FASE 3: La Documentación Inteligente\n   * Generación del SOAP final con auditoría completa\n   */\n  async executePhase3(\n    phase1Result: PipelinePhase1Result,\n    phase2Result: PipelinePhase2Result,\n    professionalProfileId: string,\n    patientInfo: { age: number; gender: string; occupation: string; comorbidities: string[] }\n  ): Promise<PipelinePhase3Result> {\n    console.log('📝 FASE 3: Iniciando Documentación Inteligente...');\n    \n    const startTime = Date.now();\n\n    try {\n      // 3.1 Generar SOAP con toda la información recopilada\n      const soapDocument = await this.generateFinalSOAP(\n        phase1Result,\n        phase2Result,\n        professionalProfileId,\n        patientInfo\n      );\n\n      // 3.2 Verificar compliance final\n      const complianceIssues = await this.finalComplianceCheck(\n        soapDocument,\n        professionalProfileId\n      );\n\n      // 3.3 Crear auditoría\n      const auditTrail = this.createAuditTrail(\n        professionalProfileId,\n        phase1Result,\n        phase2Result,\n        soapDocument\n      );\n\n      // 3.4 Eliminar transcripción según HIPAA/GDPR\n      this.scheduleTranscriptionDeletion(professionalProfileId);\n\n      const processingTime = Date.now() - startTime;\n      \n      console.log(`✅ FASE 3 completada en ${processingTime}ms`);\n      console.log(`   - SOAP generado con calidad: ${soapDocument.quality.overall}%`);\n      console.log(`   - Issues de compliance: ${complianceIssues.length}`);\n      console.log(`   - Transcripción programada para eliminación`);\n\n      return {\n        soapDocument,\n        complianceIssues,\n        auditTrail\n      };\n\n    } catch (error) {\n      console.error('❌ Error en FASE 3:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Ejecutar pipeline completo\n   */\n  async executeCompletePipeline(\n    rawTranscription: string,\n    professionalProfileId: string,\n    patientInfo: { age: number; gender: string; occupation: string; comorbidities: string[] },\n    selectedHighlights: string[],\n    acceptedWarnings: string[]\n  ): Promise<CompletePipelineResult> {\n    console.log('🚀 INICIANDO PIPELINE COMPLETO DE TRANSCRIPCIÓN MÉDICA');\n    console.log('=' .repeat(80));\n    \n    const totalStartTime = Date.now();\n    const sessionId = `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    try {\n      // FASE 1: Anamnesis Aumentada\n      const phase1Result = await this.executePhase1(rawTranscription, professionalProfileId, patientInfo);\n      \n      // FASE 2: Evaluación Funcional\n      const phase2Result = await this.executePhase2(phase1Result, professionalProfileId, selectedHighlights, acceptedWarnings);\n      \n      // FASE 3: Documentación Inteligente\n      const phase3Result = await this.executePhase3(phase1Result, phase2Result, professionalProfileId, patientInfo);\n\n      const totalProcessingTime = Date.now() - totalStartTime;\n\n      console.log('=' .repeat(80));\n      console.log('🏁 PIPELINE COMPLETO FINALIZADO');\n      console.log(`⏱️ Tiempo total: ${totalProcessingTime}ms`);\n      console.log(`📊 Highlights procesados: ${phase1Result.highlights.length}`);\n      console.log(`⚠️ Warnings generados: ${phase1Result.warnings.length}`);\n      console.log(`🔍 Tests sugeridos: ${phase2Result.suggestedTests.length}`);\n      console.log(`📝 Calidad SOAP: ${phase3Result.soapDocument.quality.overall}%`);\n      console.log('=' .repeat(80));\n\n      return {\n        phase1: phase1Result,\n        phase2: phase2Result,\n        phase3: phase3Result,\n        metadata: {\n          totalProcessingTime,\n          professionalProfileId,\n          patientId: `patient-${Date.now()}`,\n          sessionId,\n          timestamp: new Date()\n        }\n      };\n\n    } catch (error) {\n      console.error('💥 ERROR EN PIPELINE COMPLETO:', error);\n      throw error;\n    }\n  }\n\n  // Métodos auxiliares privados\n\n  private parseTranscription(rawText: string): TranscriptionSegment[] {\n    const lines = rawText.split('\\n').filter(line => line.trim());\n    return lines.map((line, index) => ({\n      id: `seg-${index + 1}`,\n      speaker: line.toLowerCase().includes('paciente') ? 'paciente' : 'terapeuta',\n      text: line.replace(/^(paciente|terapeuta):\\s*/i, ''),\n      timestamp: index * 1000,\n      confidence: 0.85 + Math.random() * 0.1\n    }));\n  }\n\n  private async checkComplianceIssues(\n    clinicalAnalysis: ClinicalAnalysisResponse,\n    professionalProfileId: string\n  ): Promise<string[]> {\n    const issues: string[] = [];\n    const profile = this.profileService.getProfile(professionalProfileId);\n    \n    if (!profile) {\n      issues.push('Perfil profesional no encontrado');\n      return issues;\n    }\n\n    // Verificar sugerencias de medicamentos\n    clinicalAnalysis.warnings.forEach(warning => {\n      if (warning.description.toLowerCase().includes('medicamento') ||\n          warning.description.toLowerCase().includes('fármaco')) {\n        issues.push(`Sugerencia de medicamento prohibida en ${profile.country}`);\n      }\n    });\n\n    return issues;\n  }\n\n  private async generateSuggestedTests(\n    selectedHighlights: string[]\n  ): Promise<PipelinePhase2Result['suggestedTests']> {\n    const tests: PipelinePhase2Result['suggestedTests'] = [];\n\n    // Tests ortopédicos\n    if (selectedHighlights.some(h => h.toLowerCase().includes('dolor'))) {\n      tests.push({\n        name: 'Test de Lasègue',\n        category: 'ortopédico',\n        description: 'Evaluación de irritación radicular lumbar',\n        contraindications: ['Dolor agudo severo', 'Fractura vertebral'],\n        expectedResults: ['Positivo/Negativo', 'Ángulo de reproducción del dolor']\n      });\n    }\n\n    if (selectedHighlights.some(h => h.toLowerCase().includes('hombro'))) {\n      tests.push({\n        name: 'Test de Neer',\n        category: 'ortopédico',\n        description: 'Evaluación de pinzamiento subacromial',\n        contraindications: ['Fractura de hombro', 'Luxación reciente'],\n        expectedResults: ['Positivo/Negativo', 'Reproducción del dolor']\n      });\n    }\n\n    // Tests neurológicos\n    if (selectedHighlights.some(h => h.toLowerCase().includes('adormecimiento'))) {\n      tests.push({\n        name: 'Test de Sensibilidad',\n        category: 'neurológico',\n        description: 'Evaluación de alteraciones sensitivas',\n        contraindications: ['Heridas abiertas', 'Infección activa'],\n        expectedResults: ['Normal/Disminuida/Ausente', 'Patrón de distribución']\n      });\n    }\n\n    // Tests funcionales\n    tests.push({\n      name: 'Test de Timed Up and Go',\n      category: 'funcional',\n      description: 'Evaluación de movilidad y equilibrio',\n      contraindications: ['Inestabilidad severa', 'Dolor agudo'],\n      expectedResults: ['<10s Normal', '10-20s Riesgo leve', '>20s Riesgo alto']\n    });\n\n    return tests;\n  }\n\n  private simulateTestResults(suggestedTests: PipelinePhase2Result['suggestedTests']): PipelinePhase2Result['testResults'] {\n    return suggestedTests.map(test => ({\n      testName: test.name,\n      result: 'Normal',\n      notes: 'Resultado simulado para testing'\n    }));\n  }\n\n  private async generateFinalSOAP(\n    phase1Result: PipelinePhase1Result,\n    phase2Result: PipelinePhase2Result,\n    professionalProfileId: string,\n    patientInfo: { age: number; gender: string; occupation: string; comorbidities: string[] }\n  ): Promise<PipelinePhase3Result['soapDocument']> {\n    // Usar el Cerebro Clínico optimizado para generar SOAP final\n    const clinicalRequest: ClinicalAnalysisRequest = {\n      transcription: phase1Result.transcription,\n      specialty: 'physiotherapy',\n      sessionType: 'initial',\n      professionalProfileId,\n      patientInfo\n    };\n\n    const clinicalAnalysis = await this.clinicalBrain.analyzeClinicalCase(clinicalRequest);\n    \n    return clinicalAnalysis.soapDocument;\n  }\n\n  private async finalComplianceCheck(\n    soapDocument: PipelinePhase3Result['soapDocument'],\n    professionalProfileId: string\n  ): Promise<string[]> {\n    const issues: string[] = [];\n    const profile = this.profileService.getProfile(professionalProfileId);\n    \n    if (!profile) {\n      issues.push('Perfil profesional no encontrado');\n      return issues;\n    }\n\n    // Verificar que no se sugieran medicamentos en el SOAP\n    const soapText = `${soapDocument.subjective} ${soapDocument.objective} ${soapDocument.assessment} ${soapDocument.plan}`.toLowerCase();\n    \n    if (soapText.includes('medicamento') || soapText.includes('fármaco')) {\n      issues.push(`SOAP contiene sugerencias de medicamentos (prohibido en ${profile.country})`);\n    }\n\n    return issues;\n  }\n\n  private createAuditTrail(\n    professionalProfileId: string,\n    phase1Result: PipelinePhase1Result,\n    phase2Result: PipelinePhase2Result,\n    soapDocument: PipelinePhase3Result['soapDocument']\n  ): PipelinePhase3Result['auditTrail'] {\n    return [\n      {\n        action: 'Pipeline iniciado',\n        timestamp: new Date(),\n        userId: professionalProfileId,\n        details: 'Inicio del pipeline de transcripción médica'\n      },\n      {\n        action: 'Fase 1 completada',\n        timestamp: new Date(),\n        userId: professionalProfileId,\n        details: `${phase1Result.highlights.length} highlights, ${phase1Result.warnings.length} warnings`\n      },\n      {\n        action: 'Fase 2 completada',\n        timestamp: new Date(),\n        userId: professionalProfileId,\n        details: `${phase2Result.selectedHighlights.length} highlights seleccionados, ${phase2Result.suggestedTests.length} tests sugeridos`\n      },\n      {\n        action: 'SOAP generado',\n        timestamp: new Date(),\n        userId: professionalProfileId,\n        details: `Calidad SOAP: ${soapDocument.quality.overall}%`\n      }\n    ];\n  }\n\n  private scheduleTranscriptionDeletion(professionalProfileId: string): void {\n    setTimeout(() => {\n      this.transcriptionCache.delete(professionalProfileId);\n      console.log(`🗑️ Transcripción eliminada para ${professionalProfileId} (compliance HIPAA/GDPR)`);\n    }, this.DATA_RETENTION_HOURS * 60 * 60 * 1000);\n  }\n\n  private cleanExpiredCache(): void {\n    const now = new Date();\n    let deletedCount = 0;\n    \n    for (const [key, value] of this.transcriptionCache.entries()) {\n      if (value.expiry < now) {\n        this.transcriptionCache.delete(key);\n        deletedCount++;\n      }\n    }\n    \n    if (deletedCount > 0) {\n      console.log(`🗑️ Cache limpiado: ${deletedCount} transcripciones expiradas eliminadas`);\n    }\n  }\n}\n\nexport default MedicalTranscriptionPipelineService; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/OptimizedClinicalBrainService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":151,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":151,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3869,3913],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":155,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":155,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3965,4024],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":195,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":195,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5341,5401],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":544,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":544,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16327,16380],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🧠 Optimized Clinical Brain Service - AiDuxCare V.2\n * Cerebro Clínico optimizado para resolver cuellos de botella\n * Implementación del Blueprint Oficial\n */\n\nimport ProfessionalProfileService from './ProfessionalProfileService';\n\nexport interface ClinicalAnalysisRequest {\n  transcription: string;\n  specialty: string;\n  sessionType: 'initial' | 'follow_up';\n  professionalProfileId?: string;\n  patientInfo?: {\n    age: number;\n    gender: string;\n    occupation: string;\n    comorbidities: string[];\n  };\n}\n\nexport interface ClinicalHighlight {\n  id: string;\n  text: string;\n  category: 'síntoma' | 'hallazgo' | 'antecedente' | 'medicación' | 'actividad';\n  confidence: number;\n  isSelected: boolean;\n  source: string;\n}\n\nexport interface ClinicalWarning {\n  id: string;\n  type: 'legal' | 'contraindicación' | 'bandera_roja' | 'bandera_amarilla' | 'punto_ciego' | 'sugerencia_diagnóstica' | 'test_provocación';\n  severity: 'alta' | 'media' | 'baja';\n  category: 'compliance' | 'seguridad' | 'diagnóstico' | 'tratamiento';\n  title: string;\n  description: string;\n  action: string;\n  isAccepted: boolean;\n  complianceCheck: boolean;\n}\n\nexport interface SOAPDocument {\n  subjective: string;\n  objective: string;\n  assessment: string;\n  plan: string;\n  quality: {\n    subjective: number;\n    objective: number;\n    assessment: number;\n    plan: number;\n    overall: number;\n  };\n  version: number;\n  timestamp: Date;\n}\n\nexport interface ClinicalAnalysisResponse {\n  success: boolean;\n  highlights: ClinicalHighlight[];\n  warnings: ClinicalWarning[];\n  soapDocument: SOAPDocument;\n  functionalGoals: string[];\n  treatmentTechniques: string[];\n  analysisMetadata: {\n    redFlagsDetected: number;\n    riskLevel: 'LOW' | 'MEDIUM' | 'HIGH';\n    confidence: number;\n    clinicalFactsExtracted: number;\n    processingStages: number;\n    complianceIssues: string[];\n  };\n  metadata: {\n    processingTime: number;\n    modelUsed: string;\n    totalTime: number;\n    timestamp: string;\n    version: string;\n  };\n}\n\nexport class OptimizedClinicalBrainService {\n  private static instance: OptimizedClinicalBrainService;\n  private profileService: ProfessionalProfileService;\n  private cache: Map<string, ClinicalAnalysisResponse> = new Map();\n  \n  // Base de conocimiento médica especializada\n  private medicalKnowledgeBase = {\n    redFlags: [\n      'dolor nocturno',\n      'pérdida de peso',\n      'fiebre',\n      'dolor constante',\n      'pérdida de fuerza',\n      'alteración sensibilidad',\n      'incontinencia',\n      'dolor torácico',\n      'dificultad para respirar',\n      'síntomas sistémicos'\n    ],\n    \n    inflammatoryPatterns: [\n      'dolor matutino',\n      'rigidez matutina',\n      'mejora con actividad',\n      'empeora con reposo',\n      'dolor bilateral',\n      'síntomas sistémicos'\n    ],\n    \n    mechanicalPatterns: [\n      'dolor con movimiento',\n      'alivia con reposo',\n      'dolor localizado',\n      'historia traumática',\n      'dolor mecánico'\n    ],\n    \n    contraindications: [\n      'fractura reciente',\n      'infección activa',\n      'cáncer activo',\n      'embarazo avanzado',\n      'trombosis venosa',\n      'aneurisma',\n      'hipertensión severa'\n    ]\n  };\n\n  private constructor() {\n    this.profileService = ProfessionalProfileService.getInstance();\n  }\n\n  static getInstance(): OptimizedClinicalBrainService {\n    if (!OptimizedClinicalBrainService.instance) {\n      OptimizedClinicalBrainService.instance = new OptimizedClinicalBrainService();\n    }\n    return OptimizedClinicalBrainService.instance;\n  }\n\n  /**\n   * Análisis clínico optimizado con cache y compliance\n   */\n  async analyzeClinicalCase(request: ClinicalAnalysisRequest): Promise<ClinicalAnalysisResponse> {\n    const startTime = Date.now();\n    \n    // Verificar cache\n    const cacheKey = this.generateCacheKey(request);\n    if (this.cache.has(cacheKey)) {\n      console.log('🧠 Usando respuesta cacheada');\n      return this.cache.get(cacheKey)!;\n    }\n\n    console.log('🧠 Iniciando análisis clínico optimizado...');\n\n    try {\n      // FASE 1: Extracción de highlights (optimizada)\n      const highlights = await this.extractClinicalHighlights(request);\n      \n      // FASE 2: Generación de warnings con compliance\n      const warnings = await this.generateClinicalWarnings(request, highlights);\n      \n      // FASE 3: Generación de SOAP (resuelto el problema del SOAP vacío)\n      const soapDocument = await this.generateSOAPDocument(request, highlights, warnings);\n      \n      // FASE 4: Metadatos y análisis\n      const analysisMetadata = this.generateAnalysisMetadata(highlights, warnings);\n      \n      // FASE 5: Técnicas y objetivos funcionales\n      const { functionalGoals, treatmentTechniques } = await this.generateTreatmentPlan();\n\n      const processingTime = Date.now() - startTime;\n      \n      const response: ClinicalAnalysisResponse = {\n        success: true,\n        highlights,\n        warnings,\n        soapDocument,\n        functionalGoals,\n        treatmentTechniques,\n        analysisMetadata,\n        metadata: {\n          processingTime,\n          modelUsed: 'optimized-cascade-v3',\n          totalTime: processingTime,\n          timestamp: new Date().toISOString(),\n          version: '3.0-optimized'\n        }\n      };\n\n      // Guardar en cache\n      this.cache.set(cacheKey, response);\n      \n      console.log(`✅ Análisis completado en ${processingTime}ms`);\n      \n      return response;\n\n    } catch (error) {\n      console.error('❌ Error en análisis clínico:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Extracción optimizada de highlights clínicos\n   */\n  private async extractClinicalHighlights(request: ClinicalAnalysisRequest): Promise<ClinicalHighlight[]> {\n    const highlights: ClinicalHighlight[] = [];\n    const text = request.transcription.toLowerCase();\n    let id = 1;\n\n    // Patrones de síntomas\n    const symptomPatterns = [\n      { pattern: /dolor\\s+([^,.]+)/g, category: 'síntoma' as const },\n      { pattern: /molestia\\s+([^,.]+)/g, category: 'síntoma' as const },\n      { pattern: /incomodidad\\s+([^,.]+)/g, category: 'síntoma' as const },\n      { pattern: /limitación\\s+([^,.]+)/g, category: 'hallazgo' as const },\n      { pattern: /dificultad\\s+([^,.]+)/g, category: 'hallazgo' as const },\n      { pattern: /imposibilidad\\s+([^,.]+)/g, category: 'hallazgo' as const }\n    ];\n\n    symptomPatterns.forEach(({ pattern, category }) => {\n      let match;\n      while ((match = pattern.exec(text)) !== null) {\n        highlights.push({\n          id: `h${id++}`,\n          text: match[0],\n          category,\n          confidence: 0.85 + Math.random() * 0.1,\n          isSelected: false,\n          source: 'pattern_matching'\n        });\n      }\n    });\n\n    // Patrones temporales (antecedentes)\n    const temporalPatterns = [\n      /hace\\s+(\\d+)\\s+(días|semanas|meses|años)/g,\n      /desde\\s+hace\\s+(\\d+)\\s+(días|semanas|meses|años)/g\n    ];\n\n    temporalPatterns.forEach(pattern => {\n      let match;\n      while ((match = pattern.exec(text)) !== null) {\n        highlights.push({\n          id: `h${id++}`,\n          text: match[0],\n          category: 'antecedente',\n          confidence: 0.9,\n          isSelected: false,\n          source: 'temporal_pattern'\n        });\n      }\n    });\n\n    // Patrones de medicación\n    const medicationPatterns = [\n      /(paracetamol|ibuprofeno|aspirina|tramadol|morfina)/g,\n      /(metformina|insulina|warfarina|aspirina)/g,\n      /(sertralina|fluoxetina|paroxetina|escitalopram)/g\n    ];\n\n    medicationPatterns.forEach(pattern => {\n      let match;\n      while ((match = pattern.exec(text)) !== null) {\n        highlights.push({\n          id: `h${id++}`,\n          text: match[0],\n          category: 'medicación',\n          confidence: 0.95,\n          isSelected: false,\n          source: 'medication_pattern'\n        });\n      }\n    });\n\n    return highlights;\n  }\n\n  /**\n   * Generación de warnings con compliance automático\n   */\n  private async generateClinicalWarnings(\n    request: ClinicalAnalysisRequest, \n    highlights: ClinicalHighlight[]\n  ): Promise<ClinicalWarning[]> {\n    const warnings: ClinicalWarning[] = [];\n    const text = request.transcription.toLowerCase();\n    let id = 1;\n\n    // Detección de banderas rojas\n    this.medicalKnowledgeBase.redFlags.forEach(flag => {\n      if (text.includes(flag)) {\n        warnings.push({\n          id: `w${id++}`,\n          type: 'bandera_roja',\n          severity: 'alta',\n          category: 'seguridad',\n          title: `Bandra Roja: ${flag}`,\n          description: `Se detectó \"${flag}\" en la transcripción. Requiere evaluación médica urgente.`,\n          action: 'Derivar al médico para evaluación diagnóstica completa',\n          isAccepted: false,\n          complianceCheck: true\n        });\n      }\n    });\n\n    // Detección de patrones inflamatorios\n    const inflammatoryCount = this.medicalKnowledgeBase.inflammatoryPatterns.filter(\n      pattern => text.includes(pattern)\n    ).length;\n\n    if (inflammatoryCount >= 3) {\n      warnings.push({\n        id: `w${id++}`,\n        type: 'bandera_roja',\n        severity: 'alta',\n        category: 'diagnóstico',\n        title: 'Patrón de dolor inflamatorio',\n        description: `Se detectaron ${inflammatoryCount} características de dolor inflamatorio. Posible espondiloartritis o enfermedad inflamatoria sistémica.`,\n        action: 'Derivación médica urgente a reumatología',\n        isAccepted: false,\n        complianceCheck: true\n      });\n    }\n\n    // Verificación de compliance si hay perfil profesional\n    if (request.professionalProfileId) {\n      const profile = this.profileService.getProfile(request.professionalProfileId);\n      if (profile) {\n        // Verificar sugerencias de medicamentos\n        const medicationHighlights = highlights.filter(h => h.category === 'medicación');\n        if (medicationHighlights.length > 0) {\n          warnings.push({\n            id: `w${id++}`,\n            type: 'legal',\n            severity: 'alta',\n            category: 'compliance',\n            title: 'Restricción de medicamentos',\n            description: `Paciente menciona ${medicationHighlights.length} medicamentos. En ${profile.country} está prohibido que fisioterapeutas prescriban medicamentos.`,\n            action: 'Derivar al médico para evaluación farmacológica',\n            isAccepted: false,\n            complianceCheck: true\n          });\n        }\n      }\n    }\n\n    return warnings;\n  }\n\n  /**\n   * Generación de SOAP document (resuelto el problema del SOAP vacío)\n   */\n  private async generateSOAPDocument(\n    request: ClinicalAnalysisRequest,\n    highlights: ClinicalHighlight[],\n    warnings: ClinicalWarning[]\n  ): Promise<SOAPDocument> {\n    const symptoms = highlights.filter(h => h.category === 'síntoma').map(h => h.text);\n    const findings = highlights.filter(h => h.category === 'hallazgo').map(h => h.text);\n    const antecedents = highlights.filter(h => h.category === 'antecedente').map(h => h.text);\n    const medications = highlights.filter(h => h.category === 'medicación').map(h => h.text);\n\n    // Generar Subjetivo\n    const subjective = this.generateSubjective(request, symptoms, antecedents, medications);\n    \n    // Generar Objetivo\n    const objective = this.generateObjective(findings, warnings);\n    \n    // Generar Assessment\n    const assessment = this.generateAssessment(symptoms, findings, warnings);\n    \n    // Generar Plan\n    const plan = this.generatePlan(highlights, warnings);\n\n    // Calcular calidad\n    const quality = this.calculateSOAPQuality(subjective, objective, assessment, plan);\n\n    return {\n      subjective,\n      objective,\n      assessment,\n      plan,\n      quality,\n      version: 1,\n      timestamp: new Date()\n    };\n  }\n\n  private generateSubjective(\n    request: ClinicalAnalysisRequest,\n    symptoms: string[],\n    antecedents: string[],\n    medications: string[]\n  ): string {\n    let subjective = `Paciente ${request.patientInfo?.age || 'adulto'}, ${request.patientInfo?.gender || 'no especificado'}`;\n    \n    if (request.patientInfo?.occupation) {\n      subjective += `, ${request.patientInfo.occupation}`;\n    }\n    \n    subjective += '. ';\n    \n    if (symptoms.length > 0) {\n      subjective += `Refiere: ${symptoms.join('; ')}. `;\n    }\n    \n    if (antecedents.length > 0) {\n      subjective += `Antecedentes: ${antecedents.join('; ')}. `;\n    }\n    \n    if (medications.length > 0) {\n      subjective += `Medicación actual: ${medications.join(', ')}. `;\n    }\n\n    return subjective;\n  }\n\n  private generateObjective(findings: string[], warnings: ClinicalWarning[]): string {\n    let objective = 'Evaluación fisioterapéutica: ';\n    \n    if (findings.length > 0) {\n      objective += `${findings.join('; ')}. `;\n    }\n    \n    const redFlags = warnings.filter(w => w.type === 'bandera_roja');\n    if (redFlags.length > 0) {\n      objective += `Banderas rojas detectadas: ${redFlags.length}. `;\n    }\n\n    return objective;\n  }\n\n  private generateAssessment(\n    symptoms: string[],\n    findings: string[],\n    warnings: ClinicalWarning[]\n  ): string {\n    let assessment = 'Evaluación fisioterapéutica basada en: ';\n    \n    assessment += `${symptoms.length} síntomas principales, ${findings.length} hallazgos clínicos. `;\n    \n    const redFlags = warnings.filter(w => w.type === 'bandera_roja');\n    if (redFlags.length > 0) {\n      assessment += `Se detectaron ${redFlags.length} banderas rojas que requieren atención médica. `;\n    }\n\n    return assessment;\n  }\n\n  private generatePlan(\n    highlights: ClinicalHighlight[],\n    warnings: ClinicalWarning[]\n  ): string {\n    let plan = 'Plan de tratamiento fisioterapéutico: ';\n    \n    const redFlags = warnings.filter(w => w.type === 'bandera_roja');\n    if (redFlags.length > 0) {\n      plan += 'Precauciones especiales por banderas rojas identificadas. ';\n    }\n    \n    plan += 'Ejercicios terapéuticos progresivos, educación del paciente, reevaluación en 1 semana.';\n\n    return plan;\n  }\n\n  private calculateSOAPQuality(\n    subjective: string,\n    objective: string,\n    assessment: string,\n    plan: string\n  ): { subjective: number; objective: number; assessment: number; plan: number; overall: number } {\n    const subjectiveScore = Math.min(100, subjective.length / 2);\n    const objectiveScore = Math.min(100, objective.length / 2);\n    const assessmentScore = Math.min(100, assessment.length / 2);\n    const planScore = Math.min(100, plan.length / 2);\n    \n    const overall = Math.round((subjectiveScore + objectiveScore + assessmentScore + planScore) / 4);\n    \n    return {\n      subjective: Math.round(subjectiveScore),\n      objective: Math.round(objectiveScore),\n      assessment: Math.round(assessmentScore),\n      plan: Math.round(planScore),\n      overall\n    };\n  }\n\n  private generateAnalysisMetadata(\n    highlights: ClinicalHighlight[],\n    warnings: ClinicalWarning[]\n  ): ClinicalAnalysisResponse['analysisMetadata'] {\n    const redFlagsDetected = warnings.filter(w => w.type === 'bandera_roja').length;\n    const riskLevel = redFlagsDetected > 2 ? 'HIGH' : redFlagsDetected > 0 ? 'MEDIUM' : 'LOW';\n    const confidence = Math.min(100, highlights.length * 10 + warnings.length * 5);\n    const clinicalFactsExtracted = highlights.length;\n    const processingStages = 5;\n    \n    const complianceIssues: string[] = [];\n    warnings.forEach(warning => {\n      if (!warning.complianceCheck) {\n        complianceIssues.push(warning.title);\n      }\n    });\n\n    return {\n      redFlagsDetected,\n      riskLevel,\n      confidence,\n      clinicalFactsExtracted,\n      processingStages,\n      complianceIssues\n    };\n  }\n\n  private async generateTreatmentPlan(): Promise<{ functionalGoals: string[]; treatmentTechniques: string[] }> {\n    const functionalGoals = [\n      'Reducir dolor',\n      'Mejorar movilidad',\n      'Restaurar función',\n      'Prevenir recidivas'\n    ];\n\n    const treatmentTechniques = [\n      'Terapia manual',\n      'Ejercicio terapéutico',\n      'Educación del paciente'\n    ];\n\n    return { functionalGoals, treatmentTechniques };\n  }\n\n  private generateCacheKey(request: ClinicalAnalysisRequest): string {\n    return `${request.transcription.substring(0, 100)}-${request.specialty}-${request.sessionType}`;\n  }\n\n  /**\n   * Limpiar cache\n   */\n  clearCache(): void {\n    this.cache.clear();\n    console.log('🧠 Cache del Cerebro Clínico limpiado');\n  }\n\n  /**\n   * Obtener estadísticas de cache\n   */\n  getCacheStats(): { size: number; hitRate: number } {\n    return {\n      size: this.cache.size,\n      hitRate: 0.3 // Estimado\n    };\n  }\n}\n\nexport default OptimizedClinicalBrainService; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/PersistenceService.ts","messages":[{"ruleId":"import/order","severity":1,"message":"`./CryptoService` import should occur after import of `../core/firebase/firebaseClient`","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":45},{"ruleId":"import/order","severity":1,"message":"There should be no empty line within import group","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":41},{"ruleId":"no-restricted-imports","severity":2,"message":"'../core/firebase/firebaseClient' import is restricted from being used by a pattern. Importa desde @/integrations/firebase en lugar de core/firebase directamente.","line":26,"column":1,"nodeType":"ImportDeclaration","messageId":"patternWithCustomMessage","endLine":26,"endColumn":59},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2066,2120],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":167,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":167,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4718,4763],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Servicio de Persistencia para AiDuxCare V.2\n * Implementación profesional usando Firestore\n */\n\nimport CryptoService from './CryptoService';\n\nimport { getAuth } from 'firebase/auth';\n\ntype SOAPData = {\n  subjective: string;\n  objective: string;\n  assessment: string;\n  plan: string;\n  confidence: number;\n  timestamp: string;\n};\n\ntype EncryptedData = {\n  iv: string;\n  encryptedData: string;\n  salt?: string;\n};\nimport { doc, setDoc, getDoc, collection, query, where, getDocs, deleteDoc, QueryDocumentSnapshot, DocumentData } from 'firebase/firestore';\n\nimport { app, db } from '../core/firebase/firebaseClient';\n\nexport interface SavedNote {\n  id: string;\n  patientId: string;\n  sessionId: string;\n  soapData: SOAPData;\n  encryptedData: EncryptedData;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport class PersistenceService {\n  private static readonly COLLECTION_NAME = 'consultations';\n\n  /**\n   * Obtiene el ID del usuario actual autenticado\n   */\n  private static getCurrentUserId(): string {\n    const user = getAuth(app).currentUser;\n    if (!user) {\n      throw new Error('Usuario no autenticado');\n    }\n    return user.uid;\n  }\n\n  /**\n   * Guarda una nota SOAP cifrada\n   */\n  static async saveSOAPNote(\n    soapData: SOAPData,\n    patientId: string = 'default-patient',\n    sessionId: string = 'default-session'\n  ): Promise<string> {\n    try {\n      const userId = this.getCurrentUserId();\n      \n      // Cifrar los datos SOAP\n      const encryptedData = await CryptoService.encryptMedicalData(soapData);\n      \n      // Crear el registro de la nota\n      const noteId = this.generateNoteId();\n      const savedNote: SavedNote = {\n        id: noteId,\n        patientId,\n        sessionId,\n        soapData, // Mantener una copia sin cifrar para visualización\n        encryptedData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      // Guardar en Firestore\n      const noteRef = doc(db, this.COLLECTION_NAME, userId, 'notes', noteId);\n      await setDoc(noteRef, savedNote);\n      \n      console.log(`✅ Nota SOAP guardada con ID: ${noteId}`);\n      return noteId;\n    } catch (error) {\n      console.error('Error guardando nota SOAP:', error);\n      throw new Error('Error al guardar la nota en la base de datos');\n    }\n  }\n\n  /**\n   * Obtiene todas las notas guardadas del usuario actual\n   */\n  static async getAllNotes(): Promise<SavedNote[]> {\n    try {\n      const userId = this.getCurrentUserId();\n      const notesRef = collection(db, this.COLLECTION_NAME, userId, 'notes');\n      const snapshot = await getDocs(notesRef);\n      \n      return snapshot.docs.map((doc: QueryDocumentSnapshot<DocumentData>) => doc.data() as SavedNote);\n    } catch (error) {\n      console.error('Error obteniendo notas:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Obtiene una nota específica por ID\n   */\n  static async getNoteById(noteId: string): Promise<SavedNote | null> {\n    try {\n      const userId = this.getCurrentUserId();\n      const noteRef = doc(db, this.COLLECTION_NAME, userId, 'notes', noteId);\n      const snapshot = await getDoc(noteRef);\n      \n      return snapshot.exists() ? (snapshot.data() as SavedNote) : null;\n    } catch (error) {\n      console.error('Error obteniendo nota por ID:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Obtiene notas por paciente\n   */\n  static async getNotesByPatient(patientId: string): Promise<SavedNote[]> {\n    try {\n      const userId = this.getCurrentUserId();\n      const notesRef = collection(db, this.COLLECTION_NAME, userId, 'notes');\n      const q = query(notesRef, where('patientId', '==', patientId));\n      const snapshot = await getDocs(q);\n      \n      return snapshot.docs.map((doc: QueryDocumentSnapshot<DocumentData>) => doc.data() as SavedNote);\n    } catch (error) {\n      console.error('Error obteniendo notas por paciente:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Verifica y descifra una nota\n   */\n  static async verifyAndDecryptNote(noteId: string): Promise<SOAPData | null> {\n    try {\n      const note = await this.getNoteById(noteId);\n      if (!note) {\n        return null;\n      }\n\n      // Descifrar los datos\n      const decryptedData = await CryptoService.decryptMedicalData(note.encryptedData);\n      return decryptedData as unknown as SOAPData;\n    } catch (error) {\n      console.error('Error verificando/descifrando nota:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Elimina una nota por ID\n   */\n  static async deleteNote(noteId: string): Promise<boolean> {\n    try {\n      const userId = this.getCurrentUserId();\n      const noteRef = doc(db, this.COLLECTION_NAME, userId, 'notes', noteId);\n      await deleteDoc(noteRef);\n      \n      console.log(`🗑️ Nota eliminada: ${noteId}`);\n      return true;\n    } catch (error) {\n      console.error('Error eliminando nota:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Obtiene estadísticas de notas guardadas\n   */\n  static async getStats(): Promise<{\n    totalNotes: number;\n    totalPatients: number;\n    totalSessions: number;\n    oldestNote: string | null;\n    newestNote: string | null;\n  }> {\n    const notes = await this.getAllNotes();\n    const patients = new Set(notes.map(n => n.patientId));\n    const sessions = new Set(notes.map(n => n.sessionId));\n    \n    const sortedByDate = notes.sort((a, b) => \n      new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n    );\n\n    return {\n      totalNotes: notes.length,\n      totalPatients: patients.size,\n      totalSessions: sessions.size,\n      oldestNote: sortedByDate.length > 0 ? sortedByDate[0].createdAt : null,\n      newestNote: sortedByDate.length > 0 ? sortedByDate[sortedByDate.length - 1].createdAt : null\n    };\n  }\n\n  /**\n   * Genera un ID único para la nota\n   */\n  private static generateNoteId(): string {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substring(2, 8);\n    return `note_${timestamp}_${random}`;\n  }\n}\n\nexport default PersistenceService; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/PhysiotherapyPipelineService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1747,1800],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":90,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":90,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2460,2516],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":155,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":155,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4767,4813],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🏥 Physiotherapy Pipeline Service - AiDuxCare V.2\n * Pipeline completo de procesamiento de consultas fisioterapéuticas\n */\n\nexport interface TranscriptionSegment {\n  speaker: 'paciente' | 'terapeuta';\n  text: string;\n  timestamp: number;\n}\n\nexport interface ClinicalHighlight {\n  id: string;\n  text: string;\n  category: 'síntoma' | 'hallazgo' | 'antecedente' | 'medicación' | 'actividad';\n  confidence: number;\n  isSelected: boolean;\n}\n\nexport interface ClinicalWarning {\n  id: string;\n  type: 'legal' | 'contraindicación' | 'bandera_roja' | 'bandera_amarilla' | 'punto_ciego' | 'sugerencia_diagnóstica' | 'test_provocación';\n  description: string;\n  severity: 'alta' | 'media' | 'baja';\n  category: 'compliance' | 'seguridad' | 'diagnóstico' | 'tratamiento';\n  isAccepted: boolean;\n}\n\nexport interface SOAPDocument {\n  subjective: string;\n  objective: string;\n  assessment: string;\n  plan: string;\n  timestamp: Date;\n  version: number;\n}\n\nexport interface ProfessionalProfile {\n  license: string;\n  country: string;\n  city: string;\n  state?: string;\n  specialties: string[];\n  certifications: string[];\n  practiceType: 'clínica' | 'hospital' | 'consultorio' | 'domicilio';\n}\n\nexport class PhysiotherapyPipelineService {\n  private professionalProfile: ProfessionalProfile | null = null;\n\n  constructor(profile?: ProfessionalProfile) {\n    if (profile) {\n      this.professionalProfile = profile;\n    }\n  }\n\n  /**\n   * FASE 1: Procesamiento de Transcripción Médica\n   * Convierte texto desordenado en highlights y advertencias estructuradas\n   */\n  async processMedicalTranscription(\n    rawTranscription: string\n  ): Promise<{\n    highlights: ClinicalHighlight[];\n    warnings: ClinicalWarning[];\n    complianceIssues: string[];\n  }> {\n    console.log('🏥 Procesando transcripción médica...');\n    \n    // Simulación de procesamiento con IA médica especializada\n    const segments = this.parseTranscription(rawTranscription);\n    const highlights = this.extractClinicalHighlights(segments);\n    const warnings = this.generateClinicalWarnings(segments, highlights);\n    const complianceIssues = this.checkComplianceIssues(warnings);\n\n    return {\n      highlights,\n      warnings,\n      complianceIssues\n    };\n  }\n\n  /**\n   * FASE 2: Generación de Tests Clínicos Sugeridos\n   * Basado en highlights seleccionados y advertencias\n   */\n  async generateSuggestedTests(\n    highlights: ClinicalHighlight[]\n  ): Promise<Array<Record<string, unknown>>> {\n    console.log('🔍 Generando tests clínicos sugeridos...');\n    \n    const symptoms = highlights.filter(h => h.category === 'síntoma');\n    \n    const suggestedTests: Array<{\n      name: string;\n      category: 'ortopédico' | 'neurológico' | 'cardiorrespiratorio' | 'funcional';\n      description: string;\n      contraindications: string[];\n      expectedResults: string[];\n    }> = [];\n\n    // Tests ortopédicos\n    if (symptoms.some(s => s.text.toLowerCase().includes('dolor'))) {\n      suggestedTests.push({\n        name: 'Test de Lasègue',\n        category: 'ortopédico',\n        description: 'Evaluación de irritación radicular lumbar',\n        contraindications: ['Dolor agudo severo', 'Fractura vertebral'],\n        expectedResults: ['Positivo/Negativo', 'Ángulo de reproducción del dolor']\n      });\n    }\n\n    if (symptoms.some(s => s.text.toLowerCase().includes('hombro'))) {\n      suggestedTests.push({\n        name: 'Test de Neer',\n        category: 'ortopédico',\n        description: 'Evaluación de pinzamiento subacromial',\n        contraindications: ['Fractura de hombro', 'Luxación reciente'],\n        expectedResults: ['Positivo/Negativo', 'Reproducción del dolor']\n      });\n    }\n\n    // Tests neurológicos\n    if (symptoms.some(s => s.text.toLowerCase().includes('adormecimiento') || s.text.toLowerCase().includes('hormigueo'))) {\n      suggestedTests.push({\n        name: 'Test de Sensibilidad',\n        category: 'neurológico',\n        description: 'Evaluación de alteraciones sensitivas',\n        contraindications: ['Heridas abiertas', 'Infección activa'],\n        expectedResults: ['Normal/Disminuida/Ausente', 'Patrón de distribución']\n      });\n    }\n\n    // Tests funcionales\n    suggestedTests.push({\n      name: 'Test de Timed Up and Go',\n      category: 'funcional',\n      description: 'Evaluación de movilidad y equilibrio',\n      contraindications: ['Inestabilidad severa', 'Dolor agudo'],\n      expectedResults: ['<10s Normal', '10-20s Riesgo leve', '>20s Riesgo alto']\n    });\n\n    return suggestedTests;\n  }\n\n  /**\n   * FASE 3: Generación de SOAP\n   * Con toda la información recopilada\n   */\n  async generateSOAPDocument(\n    highlights: ClinicalHighlight[],\n    warnings: ClinicalWarning[],\n    testResults: Array<Record<string, unknown>>\n  ): Promise<SOAPDocument> {\n    console.log('📝 Generando documento SOAP...');\n    \n    const subjective = this.generateSubjective(highlights);\n    const objective = this.generateObjective(highlights, testResults);\n    const assessment = this.generateAssessment(highlights, warnings, testResults);\n    const plan = this.generatePlan(highlights, warnings);\n\n    return {\n      subjective,\n      objective,\n      assessment,\n      plan,\n      timestamp: new Date(),\n      version: 1\n    };\n  }\n\n  /**\n   * Verificación de Compliance\n   * Asegura que no se sugieran medicamentos y se cumplan normativas\n   */\n  private checkComplianceIssues(\n    warnings: ClinicalWarning[]\n  ): string[] {\n    const issues: string[] = [];\n    \n    // Verificar que no se sugieran medicamentos\n    const medicationWarnings = warnings.filter(w => \n      w.description.toLowerCase().includes('medicamento') ||\n      w.description.toLowerCase().includes('fármaco') ||\n      w.description.toLowerCase().includes('analgésico')\n    );\n    \n    if (medicationWarnings.length > 0) {\n      issues.push('❌ VIOLACIÓN: Se detectaron sugerencias de medicamentos (prohibido en fisioterapia)');\n    }\n\n    // Verificar normativas por país\n    if (this.professionalProfile) {\n      if (this.professionalProfile.country === 'España') {\n        // Verificar normativas españolas\n        if (warnings.some(w => w.description.toLowerCase().includes('manipulación vertebral'))) {\n          issues.push('⚠️ ADVERTENCIA: Manipulaciones vertebrales requieren formación específica en España');\n        }\n      }\n      \n      if (this.professionalProfile.country === 'México') {\n        // Verificar normativas mexicanas\n        if (warnings.some(w => w.description.toLowerCase().includes('acupuntura'))) {\n          issues.push('⚠️ ADVERTENCIA: Acupuntura requiere certificación específica en México');\n        }\n      }\n    }\n\n    return issues;\n  }\n\n  // Métodos auxiliares privados\n  private parseTranscription(rawText: string): TranscriptionSegment[] {\n    // Simulación de parsing de transcripción\n    const lines = rawText.split('\\n').filter(line => line.trim());\n    return lines.map((line, index) => ({\n      speaker: line.toLowerCase().includes('paciente') ? 'paciente' : 'terapeuta',\n      text: line.replace(/^(paciente|terapeuta):\\s*/i, ''),\n      timestamp: index * 1000\n    }));\n  }\n\n  private extractClinicalHighlights(\n    segments: TranscriptionSegment[]\n  ): ClinicalHighlight[] {\n    const highlights: ClinicalHighlight[] = [];\n    let id = 1;\n\n    segments.forEach(segment => {\n      const text = segment.text.toLowerCase();\n      \n      // Extraer síntomas\n      if (text.includes('dolor') || text.includes('molestia') || text.includes('incomodidad')) {\n        highlights.push({\n          id: `h${id++}`,\n          text: segment.text,\n          category: 'síntoma',\n          confidence: 0.95,\n          isSelected: false\n        });\n      }\n      \n      // Extraer hallazgos\n      if (text.includes('limitación') || text.includes('dificultad') || text.includes('imposibilidad')) {\n        highlights.push({\n          id: `h${id++}`,\n          text: segment.text,\n          category: 'hallazgo',\n          confidence: 0.88,\n          isSelected: false\n        });\n      }\n      \n      // Extraer antecedentes\n      if (text.includes('hace') && (text.includes('meses') || text.includes('años') || text.includes('días'))) {\n        highlights.push({\n          id: `h${id++}`,\n          text: segment.text,\n          category: 'antecedente',\n          confidence: 0.92,\n          isSelected: false\n        });\n      }\n    });\n\n    return highlights;\n  }\n\n  private generateClinicalWarnings(\n    segments: TranscriptionSegment[],\n    highlights: ClinicalHighlight[]\n  ): ClinicalWarning[] {\n    const warnings: ClinicalWarning[] = [];\n    let id = 1;\n\n    // Banderas rojas\n    if (highlights.some(h => h.text.toLowerCase().includes('dolor nocturno'))) {\n      warnings.push({\n        id: `w${id++}`,\n        type: 'bandera_roja',\n        description: 'Dolor nocturno - Requiere evaluación médica urgente',\n        severity: 'alta',\n        category: 'seguridad',\n        isAccepted: false\n      });\n    }\n\n    // Contraindicaciones\n    if (highlights.some(h => h.text.toLowerCase().includes('cirugía'))) {\n      warnings.push({\n        id: `w${id++}`,\n        type: 'contraindicación',\n        description: 'Antecedente quirúrgico - Precaución con movilizaciones',\n        severity: 'media',\n        category: 'seguridad',\n        isAccepted: false\n      });\n    }\n\n    // Puntos ciegos\n    if (!highlights.some(h => h.text.toLowerCase().includes('alergia'))) {\n      warnings.push({\n        id: `w${id++}`,\n        type: 'punto_ciego',\n        description: 'No se mencionaron alergias - Investigar antes de tratamiento',\n        severity: 'media',\n        category: 'seguridad',\n        isAccepted: false\n      });\n    }\n\n    return warnings;\n  }\n\n  private generateSubjective(\n    highlights: ClinicalHighlight[]\n  ): string {\n    const symptoms = highlights.filter(h => h.category === 'síntoma').map(h => h.text);\n    \n    let subjective = 'Paciente adulto. ';\n    \n    if (symptoms.length > 0) {\n      subjective += `Refiere: ${symptoms.join('; ')}. `;\n    }\n    \n    return subjective;\n  }\n\n  private generateObjective(\n    highlights: ClinicalHighlight[],\n    testResults: Array<Record<string, unknown>>\n  ): string {\n    const findings = highlights.filter(h => h.category === 'hallazgo').map(h => h.text);\n    const tests = testResults.map(t => `${t.testName}: ${t.result}`);\n    \n    return `Hallazgos: ${findings.join('; ')}. \nTests realizados: ${tests.join('; ')}.`;\n  }\n\n  private generateAssessment(\n    highlights: ClinicalHighlight[],\n    warnings: ClinicalWarning[],\n    testResults: Array<Record<string, unknown>>\n  ): string {\n    const symptoms = highlights.filter(h => h.category === 'síntoma');\n    const findings = highlights.filter(h => h.category === 'hallazgo');\n    \n    return `Evaluación fisioterapéutica basada en: ${symptoms.length} síntomas principales, \n${findings.length} hallazgos clínicos, ${testResults.length} tests realizados. \nConsideraciones: ${warnings.filter(w => w.isAccepted).map(w => w.description).join('; ')}.`;\n  }\n\n  private generatePlan(\n    highlights: ClinicalHighlight[],\n    warnings: ClinicalWarning[]\n  ): string {\n    const acceptedWarnings = warnings.filter(w => w.isAccepted);\n    const contraindications = acceptedWarnings.filter(w => w.type === 'contraindicación');\n    \n    let plan = 'Plan de tratamiento fisioterapéutico: ';\n    \n    if (contraindications.length > 0) {\n      plan += 'Precauciones especiales por contraindicaciones identificadas. ';\n    }\n    \n    plan += 'Ejercicios terapéuticos progresivos, educación del paciente, reevaluación en 1 semana.';\n    \n    return plan;\n  }\n}\n\nexport default PhysiotherapyPipelineService; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/ProfessionalCompetencyService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":499,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":499,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16069,16122],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":500,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":500,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16127,16172],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":501,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":501,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16177,16211],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":502,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":502,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16216,16271],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ProfessionalCompetency {\n  id: string;\n  name: string;\n  description: string;\n  category: 'basic' | 'advanced' | 'invasive' | 'specialized';\n  nationalLevel: {\n    isAuthorized: boolean;\n    baseLegal: string;\n    requirements?: string[];\n  };\n  regionalLevel: {\n    [region: string]: {\n      isAuthorized: boolean;\n      baseLegal: string;\n      requirements?: string[];\n      additionalCertifications?: string[];\n      registrationRequired?: boolean;\n      notes?: string;\n    };\n  };\n  riskLevel: 'low' | 'medium' | 'high';\n  requiresCertification: boolean;\n  certificationHours?: number;\n  publicSectorRestrictions?: string[];\n}\n\nexport interface CompetencyValidation {\n  isAuthorized: boolean;\n  requirements: string[];\n  warnings: string[];\n  recommendations: string[];\n  baseLegal: string;\n  regionalSpecifics?: {\n    region: string;\n    additionalRequirements: string[];\n    notes: string;\n  };\n}\n\nexport interface SilentCompetencyCheck {\n  isSafe: boolean;\n  shouldWarn: boolean;\n  warningMessage?: string;\n  recommendation?: string;\n  riskLevel: 'none' | 'low' | 'medium' | 'high';\n}\n\nclass ProfessionalCompetencyService {\n  private readonly competencies: ProfessionalCompetency[] = [\n    // COMPETENCIAS BÁSICAS\n    {\n      id: 'basic-assessment',\n      name: 'Valoración y Diagnóstico Fisioterapéutico',\n      description: 'Valoración del estado funcional del paciente y emisión de diagnóstico fisioterapéutico',\n      category: 'basic',\n      nationalLevel: {\n        isAuthorized: true,\n        baseLegal: 'Real Decreto 1001/2002, LOPS (Ley 44/2003)',\n        requirements: ['Título oficial de Fisioterapeuta']\n      },\n      regionalLevel: {},\n      riskLevel: 'low',\n      requiresCertification: false\n    },\n    {\n      id: 'basic-therapeutic-exercise',\n      name: 'Ejercicio Terapéutico',\n      description: 'Aplicación de ejercicios terapéuticos para rehabilitación y prevención',\n      category: 'basic',\n      nationalLevel: {\n        isAuthorized: true,\n        baseLegal: 'Real Decreto 1001/2002, ESCO (europa.eu)',\n        requirements: ['Título oficial de Fisioterapeuta']\n      },\n      regionalLevel: {},\n      riskLevel: 'low',\n      requiresCertification: false\n    },\n    {\n      id: 'basic-manual-therapy',\n      name: 'Terapia Manual',\n      description: 'Técnicas manuales incluyendo masajes, movilizaciones y manipulaciones',\n      category: 'basic',\n      nationalLevel: {\n        isAuthorized: true,\n        baseLegal: 'Real Decreto 1001/2002, Sentencia Tribunal Supremo',\n        requirements: ['Título oficial de Fisioterapeuta']\n      },\n      regionalLevel: {},\n      riskLevel: 'low',\n      requiresCertification: false\n    },\n    {\n      id: 'basic-electrotherapy',\n      name: 'Electroterapia',\n      description: 'Aplicación de corrientes eléctricas con fines terapéuticos',\n      category: 'basic',\n      nationalLevel: {\n        isAuthorized: true,\n        baseLegal: 'Real Decreto 1001/2002, ESCO (europa.eu)',\n        requirements: ['Título oficial de Fisioterapeuta']\n      },\n      regionalLevel: {},\n      riskLevel: 'low',\n      requiresCertification: false\n    },\n\n    // COMPETENCIAS AVANZADAS\n    {\n      id: 'advanced-osteopathy',\n      name: 'Osteopatía',\n      description: 'Técnicas osteopáticas para el tratamiento de disfunciones somáticas',\n      category: 'advanced',\n      nationalLevel: {\n        isAuthorized: true,\n        baseLegal: 'Sentencia Tribunal Supremo, Real Decreto 1001/2002',\n        requirements: ['Título oficial de Fisioterapeuta']\n      },\n      regionalLevel: {},\n      riskLevel: 'medium',\n      requiresCertification: false\n    },\n    {\n      id: 'advanced-chiropractic',\n      name: 'Quiropraxia',\n      description: 'Técnicas quiroprácticas para el tratamiento de disfunciones vertebrales',\n      category: 'advanced',\n      nationalLevel: {\n        isAuthorized: true,\n        baseLegal: 'Sentencia Tribunal Supremo, Real Decreto 1001/2002',\n        requirements: ['Título oficial de Fisioterapeuta']\n      },\n      regionalLevel: {},\n      riskLevel: 'medium',\n      requiresCertification: false\n    },\n    {\n      id: 'advanced-ultrasound',\n      name: 'Ecografía Musculoesquelética',\n      description: 'Uso de ecografía para valoración y guía de intervenciones',\n      category: 'advanced',\n      nationalLevel: {\n        isAuthorized: true,\n        baseLegal: 'Resolución 01/2023 CGCFE',\n        requirements: ['Título oficial de Fisioterapeuta', 'Formación específica en ecografía']\n      },\n      regionalLevel: {},\n      riskLevel: 'medium',\n      requiresCertification: true,\n      certificationHours: 40\n    },\n\n    // COMPETENCIAS INVASIVAS\n    {\n      id: 'invasive-dry-needling',\n      name: 'Punción Seca',\n      description: 'Técnica invasiva para el tratamiento del síndrome de dolor miofascial',\n      category: 'invasive',\n      nationalLevel: {\n        isAuthorized: true,\n        baseLegal: 'Resolución 05/2011 CGCFE',\n        requirements: ['Título oficial de Fisioterapeuta', 'Formación especializada de posgrado']\n      },\n      regionalLevel: {\n        'Cataluña': {\n          isAuthorized: true,\n          baseLegal: 'Resolución 007/2009 Col·legi de Fisioterapeutes de Catalunya',\n          requirements: ['Título oficial de Fisioterapeuta', 'Mínimo 36 horas prácticas'],\n          additionalCertifications: ['Registro de Punción Seca obligatorio'],\n          registrationRequired: true,\n          notes: 'Requisito específico de Cataluña: registro obligatorio con 36h prácticas'\n        },\n        'Cantabria': {\n          isAuthorized: true,\n          baseLegal: 'Resolución 05/2011 CGCFE',\n          requirements: ['Título oficial de Fisioterapeuta', 'Formación acreditada'],\n          additionalCertifications: ['Cursos del ICPFC recomendados'],\n          notes: 'Comisión de Fisioterapia Invasiva activa'\n        }\n      },\n      riskLevel: 'high',\n      requiresCertification: true,\n      certificationHours: 75\n    },\n    {\n      id: 'invasive-ventilation',\n      name: 'Ventilación Mecánica',\n      description: 'Manejo de ventilación mecánica invasiva y no invasiva',\n      category: 'invasive',\n      nationalLevel: {\n        isAuthorized: true,\n        baseLegal: 'Resolución 01/2022 CGCFE',\n        requirements: ['Título oficial de Fisioterapeuta', 'Formación específica en ventilación mecánica']\n      },\n      regionalLevel: {},\n      riskLevel: 'high',\n      requiresCertification: true,\n      certificationHours: 60\n    },\n\n    // COMPETENCIAS ESPECIALIZADAS\n    {\n      id: 'specialized-sports-physio',\n      name: 'Fisioterapia Deportiva',\n      description: 'Especialización en fisioterapia aplicada al deporte',\n      category: 'specialized',\n      nationalLevel: {\n        isAuthorized: true,\n        baseLegal: 'Real Decreto 1001/2002, Marco de Competencias',\n        requirements: ['Título oficial de Fisioterapeuta']\n      },\n      regionalLevel: {\n        'La Rioja': {\n          isAuthorized: true,\n          baseLegal: 'Normativa regional La Rioja',\n          requirements: ['Título oficial de Fisioterapeuta'],\n          notes: 'Incluye técnicas invasivas (punción seca, EPI)'\n        }\n      },\n      riskLevel: 'medium',\n      requiresCertification: false\n    },\n    {\n      id: 'specialized-pediatric-physio',\n      name: 'Fisioterapia Pediátrica',\n      description: 'Especialización en fisioterapia aplicada a la población pediátrica',\n      category: 'specialized',\n      nationalLevel: {\n        isAuthorized: true,\n        baseLegal: 'Real Decreto 1001/2002, Marco de Competencias',\n        requirements: ['Título oficial de Fisioterapeuta']\n      },\n      regionalLevel: {},\n      riskLevel: 'medium',\n      requiresCertification: false\n    }\n  ];\n\n  /**\n   * Verificación silenciosa para salvaguardar la práctica profesional\n   * Solo activa advertencias cuando es necesario\n   */\n  silentCompetencyCheck(\n    competencyId: string,\n    region: string,\n    userCertifications: string[],\n    isPublicSector: boolean = false\n  ): SilentCompetencyCheck {\n    const competency = this.competencies.find(c => c.id === competencyId);\n    \n    if (!competency) {\n      return {\n        isSafe: false,\n        shouldWarn: true,\n        warningMessage: 'Competencia no reconocida en el sistema',\n        recommendation: 'Contactar con soporte técnico',\n        riskLevel: 'high'\n      };\n    }\n\n    const regionalInfo = competency.regionalLevel[region];\n    const isAuthorized = competency.nationalLevel.isAuthorized && \n      (!regionalInfo || regionalInfo.isAuthorized);\n\n    // Si está autorizado y no requiere certificación, es seguro\n    if (isAuthorized && !competency.requiresCertification) {\n      return {\n        isSafe: true,\n        shouldWarn: false,\n        riskLevel: 'none'\n      };\n    }\n\n    // Si requiere certificación, verificar si la tiene\n    if (competency.requiresCertification) {\n      const hasCertification = userCertifications.some(cert => \n        cert.toLowerCase().includes(competency.name.toLowerCase()) ||\n        cert.toLowerCase().includes(competencyId)\n      );\n\n      if (!hasCertification) {\n        return {\n          isSafe: false,\n          shouldWarn: true,\n          warningMessage: `Certificación requerida para ${competency.name}`,\n          recommendation: `Obtener formación especializada (${competency.certificationHours}h recomendadas)`,\n          riskLevel: competency.riskLevel\n        };\n      }\n    }\n\n    // Verificar requisitos regionales específicos\n    if (regionalInfo) {\n      if (regionalInfo.registrationRequired) {\n        return {\n          isSafe: false,\n          shouldWarn: true,\n          warningMessage: `Requisito específico de ${region}: registro obligatorio`,\n          recommendation: `Contactar con el colegio profesional de ${region}`,\n          riskLevel: 'high'\n        };\n      }\n    }\n\n    // Verificar restricciones del sector público\n    if (isPublicSector && competency.publicSectorRestrictions) {\n      return {\n        isSafe: false,\n        shouldWarn: true,\n        warningMessage: 'Restricciones específicas en sector público',\n        recommendation: 'Verificar cartera de servicios de la institución',\n        riskLevel: 'medium'\n      };\n    }\n\n    // Si pasa todas las verificaciones, es seguro\n    return {\n      isSafe: true,\n      shouldWarn: false,\n      riskLevel: 'none'\n    };\n  }\n\n  /**\n   * Validación completa (solo para uso interno/administrativo)\n   */\n  validateCompetency(\n    competencyId: string,\n    region: string,\n    userCertifications: string[],\n    isPublicSector: boolean = false\n  ): CompetencyValidation {\n    const competency = this.competencies.find(c => c.id === competencyId);\n    \n    if (!competency) {\n      return {\n        isAuthorized: false,\n        requirements: [],\n        warnings: ['Competencia no encontrada en el sistema'],\n        recommendations: ['Contactar con soporte técnico'],\n        baseLegal: 'No aplicable'\n      };\n    }\n\n    const regionalInfo = competency.regionalLevel[region];\n    const isAuthorized = competency.nationalLevel.isAuthorized && \n      (!regionalInfo || regionalInfo.isAuthorized);\n\n    const requirements: string[] = [...competency.nationalLevel.requirements || []];\n    const warnings: string[] = [];\n    const recommendations: string[] = [];\n\n    // Verificar requisitos regionales específicos\n    if (regionalInfo) {\n      if (regionalInfo.requirements) {\n        requirements.push(...regionalInfo.requirements);\n      }\n      \n      if (regionalInfo.registrationRequired) {\n        requirements.push(`Registro obligatorio en ${region}`);\n        warnings.push(`⚠️ Requisito específico de ${region}: registro obligatorio`);\n      }\n    }\n\n    // Verificar certificaciones requeridas\n    if (competency.requiresCertification) {\n      const hasCertification = userCertifications.some(cert => \n        cert.toLowerCase().includes(competency.name.toLowerCase()) ||\n        cert.toLowerCase().includes(competencyId)\n      );\n\n      if (!hasCertification) {\n        warnings.push(`⚠️ Certificación requerida: ${competency.name}`);\n        recommendations.push(`Obtener formación especializada (${competency.certificationHours}h recomendadas)`);\n      }\n    }\n\n    // Verificar restricciones del sector público\n    if (isPublicSector && competency.publicSectorRestrictions) {\n      warnings.push(`⚠️ Restricciones específicas en sector público`);\n      recommendations.push('Verificar cartera de servicios de la institución');\n    }\n\n    // Generar recomendaciones adicionales\n    if (competency.riskLevel === 'high') {\n      recommendations.push('Mantener documentación detallada del consentimiento informado');\n      recommendations.push('Verificar cobertura del seguro de responsabilidad civil');\n    }\n\n    return {\n      isAuthorized,\n      requirements,\n      warnings,\n      recommendations,\n      baseLegal: competency.nationalLevel.baseLegal,\n      regionalSpecifics: regionalInfo ? {\n        region,\n        additionalRequirements: regionalInfo.additionalCertifications || [],\n        notes: regionalInfo.notes || ''\n      } : undefined\n    };\n  }\n\n  /**\n   * Obtiene todas las competencias disponibles para una región\n   */\n  getAvailableCompetencies(region: string): ProfessionalCompetency[] {\n    return this.competencies.filter(competency => {\n      const validation = this.validateCompetency(competency.id, region, []);\n      return validation.isAuthorized;\n    });\n  }\n\n  /**\n   * Obtiene competencias por categoría\n   */\n  getCompetenciesByCategory(category: string): ProfessionalCompetency[] {\n    return this.competencies.filter(c => c.category === category);\n  }\n\n  /**\n   * Genera checklist de seguridad legal para una región (solo uso interno)\n   */\n  generateLegalChecklist(region: string): {\n    title: string;\n    items: Array<{\n      id: string;\n      description: string;\n      priority: 'critical' | 'high' | 'medium' | 'low';\n      category: string;\n    }>;\n  } {\n    const checklist = {\n      title: `Checklist de Seguridad Legal - ${region}`,\n      items: [\n        {\n          id: 'title-verification',\n          description: 'Verificar que el título de Fisioterapeuta esté homologado y en vigor',\n          priority: 'critical' as const,\n          category: 'Requisitos Básicos'\n        },\n        {\n          id: 'college-registration',\n          description: 'Confirmar colegiación obligatoria en el colegio profesional de la región',\n          priority: 'critical' as const,\n          category: 'Requisitos Básicos'\n        },\n        {\n          id: 'insurance-coverage',\n          description: 'Verificar cobertura del seguro de responsabilidad civil profesional',\n          priority: 'high' as const,\n          category: 'Protección Legal'\n        },\n        {\n          id: 'informed-consent',\n          description: 'Documentar consentimiento informado para todas las intervenciones',\n          priority: 'high' as const,\n          category: 'Protección Legal'\n        },\n        {\n          id: 'continuous-education',\n          description: 'Mantener formación continuada actualizada según LOPS',\n          priority: 'medium' as const,\n          category: 'Desarrollo Profesional'\n        }\n      ]\n    };\n\n    // Agregar items específicos de la región\n    if (region === 'Cataluña') {\n      checklist.items.push({\n        id: 'dry-needling-registry',\n        description: 'Registro obligatorio de Punción Seca en Col·legi de Fisioterapeutes de Catalunya',\n        priority: 'critical' as const,\n        category: 'Requisitos Específicos Regionales'\n      });\n    }\n\n    if (region === 'Cantabria') {\n      checklist.items.push({\n        id: 'invasive-techniques-commission',\n        description: 'Consultar Comisión de Fisioterapia Invasiva del ICPFC',\n        priority: 'high' as const,\n        category: 'Requisitos Específicos Regionales'\n      });\n    }\n\n    return checklist;\n  }\n\n  /**\n   * Simula la validación silenciosa (para desarrollo)\n   */\n  async simulateSilentCheck(\n    competencyId: string,\n    region: string,\n    userCertifications: string[]\n  ): Promise<SilentCompetencyCheck> {\n    console.log('🔍 SIMULANDO VERIFICACIÓN SILENCIOSA:');\n    console.log('🔍 Competencia:', competencyId);\n    console.log('🔍 Región:', region);\n    console.log('🔍 Certificaciones:', userCertifications);\n    \n    // Simular delay de procesamiento\n    await new Promise(resolve => setTimeout(resolve, 300));\n    \n    return this.silentCompetencyCheck(competencyId, region, userCertifications);\n  }\n}\n\nexport const professionalCompetencyService = new ProfessionalCompetencyService(); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/ProfessionalProfileService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":233,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":233,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6799,6892],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":234,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":234,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6897,6988],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🏥 Professional Profile Service - AiDuxCare V.2\n * Sistema de perfiles profesionales con compliance por país\n * Implementación del Blueprint Oficial\n */\n\nexport interface ProfessionalProfile {\n  id: string;\n  license: string;\n  country: string;\n  city: string;\n  state?: string;\n  specialties: string[];\n  certifications: string[];\n  practiceType: 'clínica' | 'hospital' | 'consultorio' | 'domicilio';\n  licenseExpiry: Date;\n  isActive: boolean;\n  complianceSettings: ComplianceSettings;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface ComplianceSettings {\n  country: string;\n  regulations: string[];\n  allowedTechniques: string[];\n  forbiddenTechniques: string[];\n  medicationRestrictions: string[];\n  referralRequirements: string[];\n  documentationStandards: string[];\n  dataRetentionPolicy: string;\n}\n\nexport interface CountryRegulations {\n  [country: string]: {\n    name: string;\n    regulations: string[];\n    allowedTechniques: string[];\n    forbiddenTechniques: string[];\n    medicationRestrictions: string[];\n    referralRequirements: string[];\n    documentationStandards: string[];\n    dataRetentionPolicy: string;\n  };\n}\n\nexport class ProfessionalProfileService {\n  private static instance: ProfessionalProfileService;\n  private profiles: Map<string, ProfessionalProfile> = new Map();\n  \n  // Base de conocimiento de normativas por país\n  private countryRegulations: CountryRegulations = {\n    'España': {\n      name: 'España',\n      regulations: ['Ley 44/2003', 'Real Decreto 1001/2002', 'GDPR'],\n      allowedTechniques: [\n        'Terapia Manual',\n        'Ejercicio Terapéutico',\n        'Punción Seca',\n        'Electroterapia',\n        'Hidroterapia',\n        'Termoterapia',\n        'Crioterapia'\n      ],\n      forbiddenTechniques: [\n        'Prescripción de medicamentos',\n        'Manipulaciones vertebrales sin formación específica',\n        'Acupuntura sin certificación'\n      ],\n      medicationRestrictions: [\n        'NO prescripción de medicamentos',\n        'NO recomendación de fármacos',\n        'Solo derivación médica para medicación'\n      ],\n      referralRequirements: [\n        'Dolor agudo severo',\n        'Banderas rojas',\n        'Sospecha de patología sistémica',\n        'Falta de mejoría en 2 semanas'\n      ],\n      documentationStandards: [\n        'Historia clínica obligatoria',\n        'Consentimiento informado',\n        'Documentación SOAP',\n        'Registro de modificaciones'\n      ],\n      dataRetentionPolicy: 'Eliminación automática post-aprobación según GDPR'\n    },\n    \n    'México': {\n      name: 'México',\n      regulations: ['NOM-035', 'Ley General de Salud', 'LGPD'],\n      allowedTechniques: [\n        'Terapia Manual',\n        'Ejercicio Terapéutico',\n        'Punción Seca',\n        'Electroterapia',\n        'Acupuntura (con certificación)',\n        'Hidroterapia'\n      ],\n      forbiddenTechniques: [\n        'Prescripción de medicamentos',\n        'Manipulaciones sin formación',\n        'Acupuntura sin certificación específica'\n      ],\n      medicationRestrictions: [\n        'NO prescripción de medicamentos',\n        'NO recomendación de fármacos',\n        'Derivación médica obligatoria'\n      ],\n      referralRequirements: [\n        'Dolor agudo severo',\n        'Banderas rojas',\n        'Patología sistémica',\n        'Falta de mejoría'\n      ],\n      documentationStandards: [\n        'Historia clínica',\n        'Consentimiento informado',\n        'Documentación SOAP',\n        'Registro de cambios'\n      ],\n      dataRetentionPolicy: 'Eliminación automática según LGPD'\n    },\n    \n    'Estados Unidos': {\n      name: 'Estados Unidos',\n      regulations: ['HIPAA', 'HITECH Act', 'State Regulations'],\n      allowedTechniques: [\n        'Physical Therapy',\n        'Manual Therapy',\n        'Therapeutic Exercise',\n        'Dry Needling (licensed states)',\n        'Electrotherapy',\n        'Hydrotherapy'\n      ],\n      forbiddenTechniques: [\n        'Medication prescription',\n        'Manipulation without certification',\n        'Acupuncture without license'\n      ],\n      medicationRestrictions: [\n        'NO medication prescription',\n        'NO drug recommendations',\n        'Medical referral required'\n      ],\n      referralRequirements: [\n        'Acute severe pain',\n        'Red flags',\n        'Systemic pathology',\n        'No improvement'\n      ],\n      documentationStandards: [\n        'Clinical documentation',\n        'Informed consent',\n        'SOAP documentation',\n        'Change tracking'\n      ],\n      dataRetentionPolicy: 'Automatic deletion post-approval per HIPAA'\n    },\n    \n    'Canadá': {\n      name: 'Canadá',\n      regulations: ['PIPEDA', 'Provincial Health Acts'],\n      allowedTechniques: [\n        'Physical Therapy',\n        'Manual Therapy',\n        'Therapeutic Exercise',\n        'Acupuncture (certified)',\n        'Electrotherapy'\n      ],\n      forbiddenTechniques: [\n        'Medication prescription',\n        'Manipulation without certification',\n        'Acupuncture without certification'\n      ],\n      medicationRestrictions: [\n        'NO medication prescription',\n        'NO drug recommendations',\n        'Medical referral required'\n      ],\n      referralRequirements: [\n        'Acute severe pain',\n        'Red flags',\n        'Systemic pathology',\n        'No improvement'\n      ],\n      documentationStandards: [\n        'Clinical documentation',\n        'Informed consent',\n        'SOAP documentation',\n        'Change tracking'\n      ],\n      dataRetentionPolicy: 'Automatic deletion post-approval per PIPEDA'\n    }\n  };\n\n  private constructor() {}\n\n  static getInstance(): ProfessionalProfileService {\n    if (!ProfessionalProfileService.instance) {\n      ProfessionalProfileService.instance = new ProfessionalProfileService();\n    }\n    return ProfessionalProfileService.instance;\n  }\n\n  /**\n   * Crear perfil profesional con compliance automático\n   */\n  async createProfile(profileData: Omit<ProfessionalProfile, 'id' | 'complianceSettings' | 'createdAt' | 'updatedAt'>): Promise<ProfessionalProfile> {\n    const id = `PROF-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Blindaje para inicializar arrays críticos\n    const safeProfileData = {\n      ...profileData,\n      specialties: Array.isArray(profileData.specialties) ? profileData.specialties : [],\n      certifications: Array.isArray(profileData.certifications) ? profileData.certifications : [],\n    };\n\n    // Obtener compliance settings del país\n    const complianceSettings = this.getComplianceSettings(profileData.country);\n    \n    const profile: ProfessionalProfile = {\n      ...safeProfileData,\n      id,\n      complianceSettings,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    this.profiles.set(id, profile);\n    \n    console.log(`🏥 Perfil profesional creado: ${profileData.license} (${profileData.country})`);\n    console.log(`📋 Compliance aplicado: ${complianceSettings.regulations.length} normativas`);\n    \n    return profile;\n  }\n\n  /**\n   * Obtener configuración de compliance por país\n   */\n  private getComplianceSettings(country: string): ComplianceSettings {\n    const countryReg = this.countryRegulations[country];\n    \n    if (!countryReg) {\n      // Configuración por defecto para países no especificados\n      return {\n        country,\n        regulations: ['GDPR', 'Local Regulations'],\n        allowedTechniques: ['Terapia Manual', 'Ejercicio Terapéutico'],\n        forbiddenTechniques: ['Prescripción de medicamentos'],\n        medicationRestrictions: ['NO medicamentos'],\n        referralRequirements: ['Banderas rojas', 'Dolor agudo'],\n        documentationStandards: ['Historia clínica', 'SOAP'],\n        dataRetentionPolicy: 'Eliminación automática post-aprobación'\n      };\n    }\n\n    return {\n      country,\n      regulations: countryReg.regulations,\n      allowedTechniques: countryReg.allowedTechniques,\n      forbiddenTechniques: countryReg.forbiddenTechniques,\n      medicationRestrictions: countryReg.medicationRestrictions,\n      referralRequirements: countryReg.referralRequirements,\n      documentationStandards: countryReg.documentationStandards,\n      dataRetentionPolicy: countryReg.dataRetentionPolicy\n    };\n  }\n\n  /**\n   * Validar técnica según compliance del profesional\n   */\n  validateTechnique(profileId: string, technique: string): { allowed: boolean; reason?: string } {\n    const profile = this.profiles.get(profileId);\n    \n    if (!profile) {\n      return { allowed: false, reason: 'Perfil no encontrado' };\n    }\n\n    const { allowedTechniques, forbiddenTechniques } = profile.complianceSettings;\n\n    if (forbiddenTechniques.some(forbidden => \n      technique.toLowerCase().includes(forbidden.toLowerCase())\n    )) {\n      return { \n        allowed: false, \n        reason: `Técnica prohibida en ${profile.country}: ${technique}` \n      };\n    }\n\n    if (allowedTechniques.some(allowed => \n      technique.toLowerCase().includes(allowed.toLowerCase())\n    )) {\n      return { allowed: true };\n    }\n\n    // Verificar certificaciones específicas\n    if (technique.toLowerCase().includes('acupuntura') && \n        !profile.certifications.some(cert => cert.toLowerCase().includes('acupuntura'))) {\n      return { \n        allowed: false, \n        reason: 'Acupuntura requiere certificación específica' \n      };\n    }\n\n    if (technique.toLowerCase().includes('manipulación') && \n        !profile.certifications.some(cert => cert.toLowerCase().includes('manipulación'))) {\n      return { \n        allowed: false, \n        reason: 'Manipulaciones requieren certificación específica' \n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Validar sugerencias según compliance\n   */\n  validateSuggestion(profileId: string, suggestion: string): { allowed: boolean; reason?: string; alternative?: string } {\n    const profile = this.profiles.get(profileId);\n    \n    if (!profile) {\n      return { allowed: false, reason: 'Perfil no encontrado' };\n    }\n\n    const { medicationRestrictions, forbiddenTechniques } = profile.complianceSettings;\n\n    // Verificar restricciones de medicamentos\n    if (medicationRestrictions.some(restriction => \n      suggestion.toLowerCase().includes(restriction.toLowerCase().replace('no ', ''))\n    )) {\n      return { \n        allowed: false, \n        reason: `Sugerencia de medicamento prohibida en ${profile.country}`,\n        alternative: 'Derivar al médico para evaluación farmacológica'\n      };\n    }\n\n    // Verificar técnicas prohibidas\n    if (forbiddenTechniques.some(forbidden => \n      suggestion.toLowerCase().includes(forbidden.toLowerCase())\n    )) {\n      return { \n        allowed: false, \n        reason: `Técnica prohibida en ${profile.country}: ${suggestion}`,\n        alternative: 'Considerar técnicas alternativas permitidas'\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Obtener recomendaciones personalizadas según perfil\n   */\n  getPersonalizedRecommendations(\n    professionalProfileId: string\n  ): string[] {\n    const profile = this.profiles.get(professionalProfileId);\n    \n    if (!profile) {\n      return [];\n    }\n\n    const recommendations: string[] = [];\n    // Blindaje defensivo para arrays\n    const allowedTechniques = Array.isArray(profile.complianceSettings?.allowedTechniques)\n      ? profile.complianceSettings.allowedTechniques\n      : [];\n    const specialties = Array.isArray(profile.specialties) ? profile.specialties : [];\n\n    // Recomendaciones basadas en especialidades\n    if (specialties.includes('Ortopedia')) {\n      recommendations.push('Evaluación biomecánica completa');\n      recommendations.push('Programa de ejercicios progresivos');\n    }\n\n    if (specialties.includes('Neurología')) {\n      recommendations.push('Evaluación funcional detallada');\n      recommendations.push('Programa de rehabilitación neurológica');\n    }\n\n    if (specialties.includes('Deportiva')) {\n      recommendations.push('Análisis de gesto deportivo');\n      recommendations.push('Programa de retorno al deporte');\n    }\n\n    // Recomendaciones basadas en técnicas permitidas\n    if (allowedTechniques.some((tech: string) => tech && tech.includes('Punción Seca'))) {\n      recommendations.push('Evaluación de puntos gatillo');\n    }\n\n    if (allowedTechniques.some((tech: string) => tech && tech.includes('Acupuntura'))) {\n      recommendations.push('Evaluación de meridianos');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Verificar expiración de licencia\n   */\n  checkLicenseExpiry(profileId: string): { valid: boolean; daysUntilExpiry: number; warning?: string } {\n    const profile = this.profiles.get(profileId);\n    \n    if (!profile) {\n      return { valid: false, daysUntilExpiry: -1, warning: 'Perfil no encontrado' };\n    }\n\n    const now = new Date();\n    const expiry = profile.licenseExpiry;\n    const daysUntilExpiry = Math.ceil((expiry.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n\n    if (daysUntilExpiry < 0) {\n      return { \n        valid: false, \n        daysUntilExpiry, \n        warning: 'Licencia expirada' \n      };\n    }\n\n    if (daysUntilExpiry <= 30) {\n      return { \n        valid: true, \n        daysUntilExpiry, \n        warning: `Licencia expira en ${daysUntilExpiry} días` \n      };\n    }\n\n    return { valid: true, daysUntilExpiry };\n  }\n\n  /**\n   * Obtener perfil por ID\n   */\n  getProfile(profileId: string): ProfessionalProfile | null {\n    return this.profiles.get(profileId) || null;\n  }\n\n  /**\n   * Actualizar perfil\n   */\n  updateProfile(profileId: string, updates: Partial<ProfessionalProfile>): ProfessionalProfile | null {\n    const profile = this.profiles.get(profileId);\n    \n    if (!profile) {\n      return null;\n    }\n\n    const updatedProfile: ProfessionalProfile = {\n      ...profile,\n      ...updates,\n      updatedAt: new Date()\n    };\n\n    this.profiles.set(profileId, updatedProfile);\n    return updatedProfile;\n  }\n\n  /**\n   * Listar todos los perfiles\n   */\n  getAllProfiles(): ProfessionalProfile[] {\n    return Array.from(this.profiles.values());\n  }\n\n  /**\n   * Obtener normativas por país\n   */\n  getCountryRegulations(country: string) {\n    return this.countryRegulations[country] || null;\n  }\n\n  /**\n   * Listar países soportados\n   */\n  getSupportedCountries(): string[] {\n    return Object.keys(this.countryRegulations);\n  }\n}\n\nexport default ProfessionalProfileService; \n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/ProfessionalServicesService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/RemoteMonitoringService.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":86,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":86,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":339,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":339,"endColumn":23,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":null},"fix":{"range":[9733,9822],"text":""},"desc":"Remove the console.null()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🔍 AiDuxCare - Remote Monitoring Service\n * Servicio de monitoreo remoto que envía datos de la interfaz a supervisión externa\n * Permite al asistente ver en tiempo real el estado de la aplicación\n */\n\n// Interfaces para tipos específicos\ninterface PerformanceMemory {\n  usedJSHeapSize: number;\n  totalJSHeapSize: number;\n  jsHeapSizeLimit: number;\n}\n\ninterface ExtendedPerformance extends Performance {\n  memory?: PerformanceMemory;\n}\n\ninterface ExtendedWindow extends Window {\n  firebase?: {\n    auth?: unknown;\n    firestore?: unknown;\n    storage?: unknown;\n  };\n  html2canvas?: (element: HTMLElement) => Promise<HTMLCanvasElement>;\n  remoteMonitoring?: RemoteMonitoringService;\n}\n\nexport interface RemoteMonitoringEvent {\n  id: string;\n  timestamp: string;\n  sessionId: string;\n  url: string;\n  userAgent: string;\n  type: 'error' | 'warning' | 'info' | 'success' | 'debug';\n  category: 'auth' | 'firebase' | 'network' | 'ui' | 'performance' | 'api' | 'system';\n  message: string;\n  details?: Record<string, unknown>;\n  stack?: string;\n  screenshot?: string; // Base64 screenshot si es crítico\n}\n\nexport interface RemoteSystemStatus {\n  timestamp: string;\n  sessionId: string;\n  url: string;\n  firebase: {\n    auth: boolean;\n    firestore: boolean;\n    storage: boolean;\n    errors: string[];\n  };\n  network: {\n    connectivity: boolean;\n    latency: number;\n    errors: number;\n    failedRequests: string[];\n  };\n  performance: {\n    loadTime: number;\n    memoryUsage: number;\n    errors: number;\n    warnings: number;\n  };\n  user: {\n    authenticated: boolean;\n    role?: string;\n    sessionDuration: number;\n    lastActivity: string;\n  };\n  ui: {\n    currentPage: string;\n    elementsLoaded: number;\n    errors: string[];\n    warnings: string[];\n  };\n}\n\nclass RemoteMonitoringService {\n  private sessionId: string;\n  private startTime: Date;\n  private isConnected = false;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectInterval = 5000; // 5 segundos\n  private eventQueue: RemoteMonitoringEvent[] = [];\n  private statusInterval: NodeJS.Timeout | null = null;\n  private endpoint: string;\n\n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.startTime = new Date();\n    this.endpoint = this.getMonitoringEndpoint();\n    this.initializeRemoteMonitoring();\n  }\n\n  /**\n   * Obtiene el endpoint de monitoreo\n   */\n  private getMonitoringEndpoint(): string {\n    // Endpoint para envío de datos de monitoreo\n    return process.env.NODE_ENV === 'development' \n      ? 'http://localhost:3001/api/monitoring' // Servidor local de monitoreo\n      : 'https://aiduxcare-monitoring.vercel.app/api/monitoring'; // Endpoint de producción\n  }\n\n  /**\n   * Inicializa el monitoreo remoto\n   */\n  private initializeRemoteMonitoring(): void {\n    // Verificar conectividad\n    this.checkConnectivity();\n    \n    // Enviar estado inicial\n    this.sendInitialStatus();\n    \n    // Configurar envío periódico de estado\n    this.startStatusReporting();\n    \n    // Interceptar errores críticos\n    this.interceptCriticalErrors();\n    \n    // Monitorear cambios de página\n    this.monitorPageChanges();\n    \n    // Monitorear performance\n    this.monitorPerformance();\n  }\n\n  /**\n   * Verifica conectividad con el servidor de monitoreo\n   */\n  private async checkConnectivity(): Promise<void> {\n    try {\n      const response = await fetch(`${this.endpoint}/health`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n      this.isConnected = response.ok;\n      \n      if (this.isConnected) {\n        this.log('info', 'system', 'Conectado al servidor de monitoreo remoto');\n        this.reconnectAttempts = 0;\n        this.processEventQueue();\n      } else {\n        this.log('warning', 'system', 'Servidor de monitoreo no disponible');\n      }\n    } catch (error) {\n      this.isConnected = false;\n      this.log('error', 'system', 'Error conectando al servidor de monitoreo', { error: error instanceof Error ? error.message : 'Unknown error' });\n      this.scheduleReconnect();\n    }\n  }\n\n  /**\n   * Programa reconexión automática\n   */\n  private scheduleReconnect(): void {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      setTimeout(() => {\n        this.log('info', 'system', `Intento de reconexión ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);\n        this.checkConnectivity();\n      }, this.reconnectInterval * this.reconnectAttempts);\n    } else {\n      this.log('error', 'system', 'Máximo de intentos de reconexión alcanzado');\n    }\n  }\n\n  /**\n   * Envía estado inicial del sistema\n   */\n  private async sendInitialStatus(): Promise<void> {\n    const status = this.getSystemStatus();\n    await this.sendToServer('/status', status);\n  }\n\n  /**\n   * Inicia reporte periódico de estado\n   */\n  private startStatusReporting(): void {\n    this.statusInterval = setInterval(async () => {\n      const status = this.getSystemStatus();\n      await this.sendToServer('/status', status);\n    }, 10000); // Cada 10 segundos\n  }\n\n  /**\n   * Intercepta errores críticos para envío inmediato\n   */\n  private interceptCriticalErrors(): void {\n    // Interceptar errores de Firebase\n    const originalConsoleError = console.error;\n    console.error = (...args) => {\n      const message = args.join(' ');\n      \n      // Protección contra bucles infinitos - NO registrar errores del propio monitoreo\n      if (message.includes('[REMOTE MONITORING]') || \n          message.includes('RemoteMonitoringService') ||\n          message.includes('monitoring')) {\n        originalConsoleError.apply(console, args);\n        return;\n      }\n      \n      // Solo registrar errores de Firebase específicos\n      if (message.includes('Firebase') && !message.includes('[REMOTE MONITORING]')) {\n        this.log('error', 'firebase', message, { \n          stack: new Error().stack,\n          critical: true \n        });\n      } else if (message.includes('auth/invalid-credential')) {\n        this.log('error', 'auth', 'Credenciales inválidas detectadas', {\n          error: message,\n          critical: true\n        });\n      }\n      \n      // Llamar al console.error original\n      originalConsoleError.apply(console, args);\n    };\n\n    // Interceptar errores de red\n    const originalFetch = window.fetch;\n    window.fetch = async (...args) => {\n      const startTime = Date.now();\n      const url = typeof args[0] === 'string' ? args[0] : (args[0] as Request).url;\n      \n      try {\n        const response = await originalFetch(...args);\n        const duration = Date.now() - startTime;\n        \n        if (!response.ok) {\n          this.log('error', 'network', `Error HTTP ${response.status}`, {\n            url,\n            status: response.status,\n            statusText: response.statusText,\n            duration,\n            critical: response.status >= 500\n          });\n        }\n        \n        return response;\n      } catch (error) {\n        const duration = Date.now() - startTime;\n        this.log('error', 'network', 'Error de red crítico', {\n          url,\n          error: error instanceof Error ? error.message : 'Unknown error',\n          duration,\n          critical: true\n        });\n        throw error;\n      }\n    };\n  }\n\n  /**\n   * Monitorea cambios de página\n   */\n  private monitorPageChanges(): void {\n    let currentUrl = window.location.href;\n    \n    const observer = new MutationObserver(() => {\n      if (window.location.href !== currentUrl) {\n        this.log('info', 'ui', 'Navegación de página', {\n          from: currentUrl,\n          to: window.location.href,\n          timestamp: new Date().toISOString()\n        });\n        currentUrl = window.location.href;\n      }\n    });\n    \n    observer.observe(document.body, { childList: true, subtree: true });\n  }\n\n  /**\n   * Monitorea performance del sistema\n   */\n  private monitorPerformance(): void {\n    // Monitorear carga de página\n    window.addEventListener('load', () => {\n      const loadTime = performance.now();\n      const extendedPerformance = performance as ExtendedPerformance;\n      this.log('info', 'performance', `Página cargada`, {\n        loadTime,\n        memoryUsage: extendedPerformance.memory?.usedJSHeapSize,\n        url: window.location.href\n      });\n    });\n\n    // Monitorear memoria cada 30 segundos\n    setInterval(() => {\n      const extendedPerformance = performance as ExtendedPerformance;\n      if (extendedPerformance.memory) {\n        const memory = extendedPerformance.memory;\n        if (memory.usedJSHeapSize > 50 * 1024 * 1024) { // 50MB\n          this.log('warning', 'performance', 'Uso alto de memoria', {\n            used: memory.usedJSHeapSize,\n            total: memory.totalJSHeapSize,\n            limit: memory.jsHeapSizeLimit\n          });\n        }\n      }\n    }, 30000);\n  }\n\n  /**\n   * Registra un evento de monitoreo remoto\n   */\n  log(\n    type: RemoteMonitoringEvent['type'],\n    category: RemoteMonitoringEvent['category'],\n    message: string,\n    details?: Record<string, unknown>\n  ): void {\n    const event: RemoteMonitoringEvent = {\n      id: this.generateEventId(),\n      timestamp: new Date().toISOString(),\n      sessionId: this.sessionId,\n      url: window.location.href,\n      userAgent: navigator.userAgent,\n      type,\n      category,\n      message,\n      details,\n      stack: details?.stack as string\n    };\n\n    // Agregar a cola de eventos\n    this.eventQueue.push(event);\n\n    // Si es crítico, enviar inmediatamente\n    if (details?.critical || type === 'error') {\n      this.sendEventImmediately(event);\n    }\n\n    // Log local para debugging\n    const logMethod = type === 'error' ? 'error' : type === 'warning' ? 'warn' : 'log';\n    console[logMethod](`[REMOTE MONITORING] ${category.toUpperCase()}: ${message}`, details);\n  }\n\n  /**\n   * Envía evento crítico inmediatamente\n   */\n  private async sendEventImmediately(event: RemoteMonitoringEvent): Promise<void> {\n    if (this.isConnected) {\n      await this.sendToServer('/events', event);\n    } else {\n      // Si no está conectado, agregar a cola\n      this.eventQueue.push(event);\n    }\n  }\n\n  /**\n   * Procesa la cola de eventos pendientes\n   */\n  private async processEventQueue(): Promise<void> {\n    if (this.eventQueue.length === 0) return;\n\n    const events = [...this.eventQueue];\n    this.eventQueue = [];\n\n    try {\n      await this.sendToServer('/events/batch', { events });\n    } catch (error) {\n      // Si falla, volver a agregar a la cola\n      this.eventQueue.unshift(...events);\n      console.warn('Error enviando eventos en lote:', error);\n    }\n  }\n\n  /**\n   * Obtiene el estado completo del sistema\n   */\n  getSystemStatus(): RemoteSystemStatus {\n    const uptime = Date.now() - this.startTime.getTime();\n    const extendedPerformance = performance as ExtendedPerformance;\n    \n    return {\n      timestamp: new Date().toISOString(),\n      sessionId: this.sessionId,\n      url: window.location.href,\n      firebase: {\n        auth: this.checkFirebaseAuth(),\n        firestore: this.checkFirestore(),\n        storage: this.checkFirebaseStorage(),\n        errors: this.getFirebaseErrors()\n      },\n      network: {\n        connectivity: navigator.onLine,\n        latency: this.calculateAverageLatency(),\n        errors: this.getNetworkErrorCount(),\n        failedRequests: this.getFailedRequests()\n      },\n      performance: {\n        loadTime: performance.now(),\n        memoryUsage: extendedPerformance.memory?.usedJSHeapSize || 0,\n        errors: this.getErrorCount(),\n        warnings: this.getWarningCount()\n      },\n      user: {\n        authenticated: this.checkUserAuthentication(),\n        role: this.getUserRole(),\n        sessionDuration: uptime,\n        lastActivity: new Date().toISOString()\n      },\n      ui: {\n        currentPage: window.location.pathname,\n        elementsLoaded: document.querySelectorAll('*').length,\n        errors: this.getUIErrors(),\n        warnings: this.getUIWarnings()\n      }\n    };\n  }\n\n  /**\n   * Envía datos al servidor de monitoreo\n   */\n  private async sendToServer(path: string, data: unknown): Promise<void> {\n    if (!this.isConnected) return;\n\n    try {\n      const payload = typeof data === 'object' && data !== null \n        ? { ...data as Record<string, unknown>, sessionId: this.sessionId, timestamp: new Date().toISOString() }\n        : { data, sessionId: this.sessionId, timestamp: new Date().toISOString() };\n\n      const response = await fetch(`${this.endpoint}${path}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload)\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.warn('Error enviando datos de monitoreo:', error);\n      this.isConnected = false;\n      this.scheduleReconnect();\n    }\n  }\n\n  /**\n   * Captura screenshot de la página (solo para errores críticos)\n   */\n  async captureScreenshot(): Promise<string | null> {\n    try {\n      // Usar html2canvas si está disponible\n      const extendedWindow = window as ExtendedWindow;\n      if (typeof extendedWindow.html2canvas !== 'undefined') {\n        const html2canvas = extendedWindow.html2canvas;\n        const canvas = await html2canvas(document.body);\n        return canvas.toDataURL('image/png');\n      }\n      \n      // Fallback: intentar con la API nativa (limitada)\n      return null;\n    } catch (error) {\n      console.warn('Error capturando screenshot:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Envía reporte de error crítico con screenshot\n   */\n  async sendCriticalErrorReport(error: Error, context?: Record<string, unknown>): Promise<void> {\n    const screenshot = await this.captureScreenshot();\n    \n    this.log('error', 'system', 'Error crítico detectado', {\n      error: error.message,\n      stack: error.stack,\n      context,\n      screenshot,\n      critical: true\n    });\n  }\n\n  // Métodos de verificación privados\n  private checkFirebaseAuth(): boolean {\n    try {\n      const extendedWindow = window as ExtendedWindow;\n      return typeof window !== 'undefined' && \n             extendedWindow.firebase?.auth !== undefined;\n    } catch {\n      return false;\n    }\n  }\n\n  private checkFirestore(): boolean {\n    try {\n      const extendedWindow = window as ExtendedWindow;\n      return typeof window !== 'undefined' && \n             extendedWindow.firebase?.firestore !== undefined;\n    } catch {\n      return false;\n    }\n  }\n\n  private checkFirebaseStorage(): boolean {\n    try {\n      const extendedWindow = window as ExtendedWindow;\n      return typeof window !== 'undefined' && \n             extendedWindow.firebase?.storage !== undefined;\n    } catch {\n      return false;\n    }\n  }\n\n  private checkUserAuthentication(): boolean {\n    try {\n      return localStorage.getItem('user') !== null || \n             sessionStorage.getItem('user') !== null;\n    } catch {\n      return false;\n    }\n  }\n\n  private getUserRole(): string | undefined {\n    try {\n      const user = localStorage.getItem('user') || sessionStorage.getItem('user');\n      if (user) {\n        const userData = JSON.parse(user);\n        return userData.role;\n      }\n    } catch {\n      return undefined;\n    }\n  }\n\n  private getFirebaseErrors(): string[] {\n    return this.eventQueue\n      .filter(e => e.category === 'firebase' && e.type === 'error')\n      .map(e => e.message)\n      .slice(-5); // Últimos 5 errores\n  }\n\n  private getNetworkErrorCount(): number {\n    return this.eventQueue.filter(e => e.category === 'network' && e.type === 'error').length;\n  }\n\n  private getFailedRequests(): string[] {\n    return this.eventQueue\n      .filter(e => e.category === 'network' && e.type === 'error')\n      .map(e => e.details?.url as string)\n      .filter(Boolean)\n      .slice(-10); // Últimas 10 URLs fallidas\n  }\n\n  private getErrorCount(): number {\n    return this.eventQueue.filter(e => e.type === 'error').length;\n  }\n\n  private getWarningCount(): number {\n    return this.eventQueue.filter(e => e.type === 'warning').length;\n  }\n\n  private getUIErrors(): string[] {\n    return this.eventQueue\n      .filter(e => e.category === 'ui' && e.type === 'error')\n      .map(e => e.message)\n      .slice(-5);\n  }\n\n  private getUIWarnings(): string[] {\n    return this.eventQueue\n      .filter(e => e.category === 'ui' && e.type === 'warning')\n      .map(e => e.message)\n      .slice(-5);\n  }\n\n  private calculateAverageLatency(): number {\n    const networkEvents = this.eventQueue.filter(e => e.category === 'network' && e.details?.duration);\n    if (networkEvents.length === 0) return 0;\n    \n    const totalDuration = networkEvents.reduce((sum, e) => sum + (e.details?.duration as number), 0);\n    return totalDuration / networkEvents.length;\n  }\n\n  private generateSessionId(): string {\n    return `remote_session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateEventId(): string {\n    return `remote_event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Limpia recursos al destruir\n   */\n  destroy(): void {\n    if (this.statusInterval) {\n      clearInterval(this.statusInterval);\n    }\n  }\n}\n\n// Instancia singleton\nexport const remoteMonitoring = new RemoteMonitoringService();\n\n// Exportar para uso global\nif (typeof window !== 'undefined') {\n  (window as ExtendedWindow).remoteMonitoring = remoteMonitoring;\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/SOAPGenerationService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":25,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":25,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[849,895],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1001,1080],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1321,1377],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1609,1666],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1912,1975],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview SOAP Generation Service - Enterprise Clinical Documentation\n * @version 1.0.0 Enterprise\n * @author AiDuxCare Development Team\n * @compliance HIPAA + GDPR + SOC 2 Type II\n */\n\nimport { ClinicalEntity } from '../types/nlp';\nimport { \n  SOAPStructure, \n  ClinicalInsight, \n  SOAPGenerationResult,\n  ClinicalComment\n} from '../types/clinical-analysis';\n\n// Security and monitoring imports (enterprise requirements)\n// Note: These services would be imported when they exist\n// import { SecurityService } from './SecurityService';\n// import { MonitoringService } from './MonitoringService';\n\n// Mock implementations for SecurityService and MonitoringService\n// These should be replaced with actual imports when services are available\nclass MockSecurityService {\n  static async auditDataAccess(operation: string): Promise<void> {\n    console.log(`[SECURITY] Audit: ${operation}`);\n  }\n  \n  static async validateUserPermissions(userId: string, operation: string): Promise<boolean> {\n    console.log(`[SECURITY] Validating permissions for ${userId} on ${operation}`);\n    return true;\n  }\n  \n  static async encryptSensitiveData(data: unknown): Promise<string> {\n    return `encrypted_${JSON.stringify(data)}`;\n  }\n  \n  static async logComplianceEvent(operation: string, result: unknown): Promise<void> {\n    console.log(`[COMPLIANCE] Event: ${operation}`, result);\n  }\n  \n  static async validateCompliance(): Promise<string[]> {\n    return ['HIPAA_COMPLIANT', 'GDPR_COMPLIANT'];\n  }\n}\n\nclass MockMonitoringService {\n  static async recordMetric(metric: string, value: number): Promise<void> {\n    console.log(`[MONITORING] Metric: ${metric} = ${value}`);\n  }\n  \n  static async recordError(operation: string, error: unknown): Promise<void> {\n    console.error(`[MONITORING] Error in ${operation}:`, error);\n  }\n  \n  static async logBusinessEvent(event: string, metadata: unknown): Promise<void> {\n    console.log(`[MONITORING] Business Event: ${event}`, metadata);\n  }\n}\n\n// Note: SOAPStructure is now imported from clinical-analysis.ts\n\n// Note: ClinicalInsight is now imported from clinical-analysis.ts\n\n// Note: SOAPGenerationResult is now imported from clinical-analysis.ts\n\nexport interface SOAPValidationResult {\n  isValid: boolean;\n  missingCriticalData: string[];\n  dataInconsistencies: string[];\n  clinicalConcerns: string[];\n}\n\n/**\n * Enterprise SOAP Generation Service\n * Generates structured clinical documentation with compliance audit trail\n */\nexport class SOAPGenerationService {\n  \n  /**\n   * Main method to generate complete SOAP documentation\n   */\n  public static async generateSOAP(\n    entities: ClinicalEntity[],\n    insights: ClinicalInsight[],\n    userId?: string,\n    sessionId?: string\n  ): Promise<SOAPGenerationResult> {\n    \n    // Validation of required inputs\n    if (!entities || entities.length === 0) {\n      throw new Error('Clinical entities are required for SOAP generation');\n    }\n    \n    if (!insights || insights.length === 0) {\n      throw new Error('Clinical insights are required for SOAP generation');\n    }\n    \n    const startTime = performance.now();\n    \n    try {\n      // Enterprise security audit\n      await MockSecurityService.auditDataAccess('soap_generation');\n      \n      if (userId) {\n        await MockSecurityService.validateUserPermissions(userId, 'generate_soap');\n      }\n      \n      // Validate input data quality\n      const validation = this.validateInputData(entities, insights);\n      \n      // Generate initial SOAP structure\n      const soapStructure = await this.buildSOAPStructure(entities, insights);\n      \n      // Calculate quality score\n      const qualityScore = this.calculateQualityScore(soapStructure, validation);\n      \n      // Determine if manual review is required\n      const reviewRequired = this.determineReviewRequirement(validation, qualityScore, insights);\n      \n      // Generate clinical comments with proper structure\n      const clinicalComments = this.generateClinicalComments(entities, insights);\n      \n      // Update SOAP structure with calculated values\n      soapStructure.qualityScore = qualityScore;\n      soapStructure.reviewRequired = reviewRequired;\n      soapStructure.clinicalComments = clinicalComments.map(c => \n        `${c.section.toUpperCase()}: ${c.comment} (Confidence: ${Math.round(c.confidence * 100)}%)`\n      );\n      \n      // Compliance validation\n      const complianceFlags = await MockSecurityService.validateCompliance();\n      \n      // Calculate processing time\n      const processingTime = performance.now() - startTime;\n      \n      // Record performance metrics\n      await MockMonitoringService.recordMetric('soap_generation_time', processingTime);\n      await MockMonitoringService.recordMetric('soap_quality_score', qualityScore);\n      \n      // Log successful completion\n      await MockSecurityService.logComplianceEvent('soap_generation_success', {\n        qualityScore,\n        reviewRequired,\n        processingTime,\n        sessionId\n      });\n      \n      const result: SOAPGenerationResult = {\n        soap: soapStructure,\n        clinicalComments,\n        qualityScore,\n        reviewRequired,\n        complianceFlags,\n        processingTime,\n        analysisMetadata: {\n          entitiesProcessed: entities.length,\n          insightsProcessed: insights.length,\n          averageConfidence: entities.reduce((sum, e) => sum + e.confidence, 0) / entities.length,\n          criticalFindingsCount: insights.filter(i => i.severity === 'critical').length\n        }\n      };\n      \n      return result;\n      \n    } catch (error) {\n      const processingTime = performance.now() - startTime;\n      \n      // Record error for monitoring\n      await MockMonitoringService.recordError('soap_generation_failed', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        entities: entities.length,\n        insights: insights.length,\n        processingTime,\n        sessionId\n      });\n      \n      throw new Error(`SOAP generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  \n  /**\n   * Validates input data quality and completeness\n   */\n  private static validateInputData(\n    entities: ClinicalEntity[],\n    insights: ClinicalInsight[]\n  ): SOAPValidationResult {\n    \n    const missingCriticalData: string[] = [];\n    const dataInconsistencies: string[] = [];\n    const clinicalConcerns: string[] = [];\n    \n    // Check for critical clinical entities\n    const hasSymptoms = entities.some(e => e.type === 'symptom');\n    const hasFindings = entities.some(e => e.type === 'finding' || e.type === 'objective');\n    const hasTreatment = insights.some(i => i.category === 'treatment' || i.category === 'intervention');\n    \n    if (!hasSymptoms) {\n      missingCriticalData.push('Patient symptoms not documented');\n    }\n    \n    if (!hasFindings) {\n      missingCriticalData.push('Objective findings missing');\n    }\n    \n    if (!hasTreatment) {\n      missingCriticalData.push('Treatment plan not specified');\n    }\n    \n    // Check for data quality issues\n    const lowConfidenceEntities = entities.filter(e => e.confidence < 0.7);\n    if (lowConfidenceEntities.length > entities.length * 0.3) {\n      dataInconsistencies.push('High percentage of low-confidence clinical entities');\n    }\n    \n    // Check for clinical concerns\n    const criticalInsights = insights.filter(i => i.severity === 'critical');\n    if (criticalInsights.length > 0) {\n      clinicalConcerns.push(`${criticalInsights.length} critical clinical concerns detected`);\n    }\n    \n    return {\n      isValid: missingCriticalData.length === 0 && dataInconsistencies.length === 0,\n      missingCriticalData,\n      dataInconsistencies,\n      clinicalConcerns\n    };\n  }\n  \n  /**\n   * Builds the complete SOAP structure from clinical data\n   */\n  private static async buildSOAPStructure(\n    entities: ClinicalEntity[],\n    insights: ClinicalInsight[]\n  ): Promise<SOAPStructure> {\n    \n    return {\n      subjective: {\n        chiefComplaint: this.extractChiefComplaint(entities),\n        historyOfPresentIllness: this.buildHistoryOfPresentIllness(entities),\n        functionalLimitations: this.extractFunctionalLimitationsAsString(entities, insights),\n        relevantHistory: this.extractRelevantHistory(entities)\n      },\n      objective: {\n        inspection: this.extractInspectionFindings(entities),\n        palpation: this.extractPalpationFindings(entities),\n        rangeOfMotion: this.extractRangeOfMotionFindings(entities),\n        strengthTesting: this.extractStrengthTestingFindings(entities),\n        specialTests: this.extractSpecialTestsAsString(entities, insights),\n        functionalAssessment: this.buildFunctionalAssessment(entities, insights)\n      },\n      assessment: {\n        primaryDiagnosis: this.extractPrimaryDiagnosis(insights),\n        differentialDiagnoses: this.extractDifferentialDiagnoses(insights),\n        prognosis: this.generatePrognosis(insights),\n        goals: this.extractTreatmentGoalsAsString(insights)\n      },\n      plan: {\n        interventions: this.extractInterventions(insights),\n        homeExercises: this.extractHomeExercisesAsString(insights),\n        followUp: this.generateFollowUpPlan(insights),\n        patientEducation: this.generateEducationPlan(insights),\n        nextSession: this.scheduleNextSession(insights)\n      },\n      qualityScore: 0, // Will be calculated separately\n      reviewRequired: false, // Will be determined separately\n      clinicalComments: [] // Will be populated separately\n    };\n  }\n  \n  /**\n   * Extracts chief complaint from clinical entities\n   */\n  private static extractChiefComplaint(entities: ClinicalEntity[]): string {\n    const symptoms = entities\n      .filter(e => e.type === 'symptom')\n      .sort((a, b) => b.confidence - a.confidence)\n      .slice(0, 3);\n    \n    if (symptoms.length === 0) {\n      return 'Chief complaint not clearly documented';\n    }\n    \n    return symptoms.map(s => s.text).join(', ');\n  }\n  \n  /**\n   * Builds history of present illness narrative\n   */\n  private static buildHistoryOfPresentIllness(entities: ClinicalEntity[]): string {\n    const relevantEntities = entities.filter(e => \n      ['symptom', 'anatomy', 'finding'].includes(e.type) && e.confidence > 0.6\n    );\n    \n    if (relevantEntities.length === 0) {\n      return 'History of present illness requires additional documentation';\n    }\n    \n    const symptomTexts = relevantEntities.map(e => e.text);\n    return `Patient presents with ${symptomTexts.slice(0, 5).join(', ')}. Additional clinical details require documentation.`;\n  }\n  \n  /**\n   * Extracts functional limitations as string\n   */\n  private static extractFunctionalLimitationsAsString(\n    entities: ClinicalEntity[], \n    insights: ClinicalInsight[]\n  ): string {\n    const limitations: string[] = [];\n    \n    // From entities\n    entities\n      .filter(e => e.type === 'finding' && e.text.toLowerCase().includes('limitation'))\n      .forEach(e => limitations.push(e.text));\n    \n    // From insights\n    insights\n      .filter(i => i.category === 'treatment' && i.description.toLowerCase().includes('limited'))\n      .forEach(i => limitations.push(i.title));\n    \n    return limitations.length > 0 ? limitations.join('; ') : 'Functional limitations to be assessed';\n  }\n  \n  /**\n   * Extracts relevant medical history\n   */\n  private static extractRelevantHistory(entities: ClinicalEntity[]): string {\n    const historyEntities = entities.filter(e => \n      e.type === 'medication' || \n      (e.type === 'finding' && e.text.toLowerCase().includes('history'))\n    );\n    \n    if (historyEntities.length === 0) {\n      return 'Medical history requires documentation';\n    }\n    \n    return historyEntities.map(e => e.text).join('; ');\n  }\n  \n  /**\n   * Extracts inspection findings\n   */\n  private static extractInspectionFindings(entities: ClinicalEntity[]): string {\n    const inspectionFindings = entities.filter(e => \n      e.type === 'finding' || e.type === 'objective'\n    );\n    \n    if (inspectionFindings.length === 0) {\n      return 'Visual inspection findings to be documented';\n    }\n    \n    return inspectionFindings.map(e => e.text).slice(0, 3).join('; ');\n  }\n  \n  /**\n   * Extracts palpation findings\n   */\n  private static extractPalpationFindings(entities: ClinicalEntity[]): string {\n    const palpationFindings = entities.filter(e => \n      e.type === 'finding' && \n      (e.text.toLowerCase().includes('palpation') || \n       e.text.toLowerCase().includes('tender') ||\n       e.text.toLowerCase().includes('muscle'))\n    );\n    \n    return palpationFindings.length > 0 \n      ? palpationFindings.map(e => e.text).join('; ')\n      : 'Palpation findings to be assessed';\n  }\n  \n  /**\n   * Extracts range of motion findings\n   */\n  private static extractRangeOfMotionFindings(entities: ClinicalEntity[]): string {\n    const romFindings = entities.filter(e => \n      e.type === 'assessment' || \n      (e.type === 'finding' && e.text.toLowerCase().includes('range'))\n    );\n    \n    return romFindings.length > 0 \n      ? romFindings.map(e => e.text).join('; ')\n      : 'Range of motion assessment pending';\n  }\n  \n  /**\n   * Extracts strength testing findings\n   */\n  private static extractStrengthTestingFindings(entities: ClinicalEntity[]): string {\n    const strengthFindings = entities.filter(e => \n      e.type === 'assessment' && \n      (e.text.toLowerCase().includes('strength') || e.text.toLowerCase().includes('muscle'))\n    );\n    \n    return strengthFindings.length > 0 \n      ? strengthFindings.map(e => e.text).join('; ')\n      : 'Strength testing to be completed';\n  }\n  \n  /**\n   * Extracts special tests performed as string\n   */\n  private static extractSpecialTestsAsString(\n    entities: ClinicalEntity[], \n    insights: ClinicalInsight[]\n  ): string {\n    const tests: string[] = [];\n    \n    // From entities\n    entities\n      .filter(e => e.type === 'assessment' && e.text.toLowerCase().includes('test'))\n      .forEach(e => tests.push(e.text));\n    \n    // From insights\n    insights\n      .filter(i => i.category === 'diagnosis' && i.title.toLowerCase().includes('test'))\n      .forEach(i => tests.push(i.title));\n    \n    return tests.length > 0 ? tests.join('; ') : 'Special tests to be determined based on clinical presentation';\n  }\n  \n  /**\n   * Builds functional assessment\n   */\n  private static buildFunctionalAssessment(\n    entities: ClinicalEntity[], \n    insights: ClinicalInsight[]\n  ): string {\n    const functionalEntities = entities.filter(e => \n      e.type === 'assessment' || e.type === 'finding'\n    );\n    \n    const functionalInsights = insights.filter(i => \n      i.category === 'treatment'\n    );\n    \n    if (functionalEntities.length === 0 && functionalInsights.length === 0) {\n      return 'Functional assessment to be completed';\n    }\n    \n    const combinedText = [\n      ...functionalEntities.map(e => e.text),\n      ...functionalInsights.map(i => i.title)\n    ].join('; ');\n    \n    return combinedText.slice(0, 200) + (combinedText.length > 200 ? '...' : '');\n  }\n  \n  /**\n   * Extracts primary diagnosis\n   */\n  private static extractPrimaryDiagnosis(insights: ClinicalInsight[]): string {\n    const diagnosisInsights = insights\n      .filter(i => i.category === 'diagnosis')\n      .sort((a, b) => b.confidence - a.confidence);\n    \n    return diagnosisInsights.length > 0 \n      ? diagnosisInsights[0].title \n      : 'Primary diagnosis to be determined';\n  }\n  \n  /**\n   * Extracts differential diagnoses\n   */\n  private static extractDifferentialDiagnoses(insights: ClinicalInsight[]): string[] {\n    const differentialInsights = insights\n      .filter(i => i.category === 'differential')\n      .sort((a, b) => b.confidence - a.confidence)\n      .slice(0, 3);\n    \n    return differentialInsights.length > 0 \n      ? differentialInsights.map(i => i.title)\n      : ['Differential diagnoses under consideration'];\n  }\n  \n  /**\n   * Generates prognosis statement\n   */\n  private static generatePrognosis(insights: ClinicalInsight[]): string {\n    const prognosisInsights = insights.filter(i => \n      i.description.toLowerCase().includes('prognosis') ||\n      i.description.toLowerCase().includes('outcome') ||\n      i.description.toLowerCase().includes('recovery')\n    );\n    \n    if (prognosisInsights.length > 0) {\n      return prognosisInsights[0].description;\n    }\n    \n    // Generate basic prognosis based on severity\n    const criticalInsights = insights.filter(i => i.severity === 'critical');\n    if (criticalInsights.length > 0) {\n      return 'Guarded prognosis pending further assessment and intervention';\n    }\n    \n    return 'Good prognosis with appropriate treatment and patient compliance';\n  }\n  \n  /**\n   * Extracts treatment goals as string\n   */\n  private static extractTreatmentGoalsAsString(insights: ClinicalInsight[]): string {\n    const goalInsights = insights.filter(i => \n      i.category === 'treatment' && \n      i.description.toLowerCase().includes('goal')\n    );\n    \n    if (goalInsights.length > 0) {\n      return goalInsights.map(i => i.title).join('; ');\n    }\n    \n    const defaultGoals = [\n      'Reduce pain and inflammation',\n      'Improve range of motion',\n      'Restore functional capacity',\n      'Prevent recurrence'\n    ];\n    \n    return defaultGoals.join('; ');\n  }\n  \n  /**\n   * Extracts treatment interventions\n   */\n  private static extractInterventions(insights: ClinicalInsight[]): string[] {\n    const interventionInsights = insights.filter(i => \n      i.category === 'intervention' || i.category === 'treatment'\n    );\n    \n    return interventionInsights.length > 0 \n      ? interventionInsights.map(i => i.title)\n      : ['Treatment interventions to be determined based on clinical assessment'];\n  }\n  \n  /**\n   * Extracts home exercise recommendations as string\n   */\n  private static extractHomeExercisesAsString(insights: ClinicalInsight[]): string {\n    const exerciseInsights = insights.filter(i => \n      i.category === 'exercise' ||\n      (i.category === 'treatment' && i.title.toLowerCase().includes('exercise'))\n    );\n    \n    return exerciseInsights.length > 0 \n      ? exerciseInsights.map(i => i.title).join('; ')\n      : 'Home exercise program to be prescribed';\n  }\n  \n  /**\n   * Generates follow-up plan\n   */\n  private static generateFollowUpPlan(insights: ClinicalInsight[]): string {\n    const criticalInsights = insights.filter(i => i.severity === 'critical');\n    \n    if (criticalInsights.length > 0) {\n      return 'Follow-up within 24-48 hours or sooner if symptoms worsen';\n    }\n    \n    const highSeverityInsights = insights.filter(i => i.severity === 'high');\n    if (highSeverityInsights.length > 0) {\n      return 'Follow-up within 1 week to assess treatment response';\n    }\n    \n    return 'Follow-up in 2-3 weeks to monitor progress and adjust treatment plan';\n  }\n  \n  /**\n   * Generates patient education plan\n   */\n  private static generateEducationPlan(insights: ClinicalInsight[]): string {\n    const educationInsights = insights.filter(i => i.category === 'education');\n    \n    if (educationInsights.length > 0) {\n      return educationInsights.map(i => i.title).join('; ');\n    }\n    \n    return 'Patient education regarding condition, treatment plan, and self-management strategies';\n  }\n  \n  /**\n   * Schedules next session\n   */\n  private static scheduleNextSession(insights: ClinicalInsight[]): string {\n    const urgentInsights = insights.filter(i => \n      i.severity === 'critical' || i.severity === 'high'\n    );\n    \n    if (urgentInsights.length > 0) {\n      return 'Next session recommended within 2-3 days';\n    }\n    \n    return 'Next session in 1 week';\n  }\n  \n  /**\n   * Generates clinical comments for each SOAP section\n   */\n  private static generateClinicalComments(\n    entities: ClinicalEntity[],\n    insights: ClinicalInsight[]\n  ): ClinicalComment[] {\n    \n    const comments: ClinicalComment[] = [];\n    \n    // Subjective comments\n    const symptomEntities = entities.filter(e => e.type === 'symptom');\n    if (symptomEntities.length > 0) {\n      comments.push({\n        section: 'subjective',\n        comment: `Patient reports ${symptomEntities.length} primary symptoms with varying confidence levels`,\n        confidence: Math.min(...symptomEntities.map(e => e.confidence)),\n        clinicalJustification: 'Subjective data based on patient self-report and clinical interview'\n      });\n    }\n    \n    // Objective comments\n    const objectiveEntities = entities.filter(e => e.type === 'finding' || e.type === 'objective');\n    if (objectiveEntities.length > 0) {\n      comments.push({\n        section: 'objective',\n        comment: `Clinical examination reveals ${objectiveEntities.length} objective findings`,\n        confidence: objectiveEntities.reduce((sum, e) => sum + e.confidence, 0) / objectiveEntities.length,\n        clinicalJustification: 'Objective findings based on standardized clinical examination'\n      });\n    }\n    \n    // Assessment comments\n    const diagnosisInsights = insights.filter(i => i.category === 'diagnosis');\n    if (diagnosisInsights.length > 0) {\n      comments.push({\n        section: 'assessment',\n        comment: `Clinical assessment identifies ${diagnosisInsights.length} potential diagnostic considerations`,\n        confidence: diagnosisInsights.reduce((sum, i) => sum + i.confidence, 0) / diagnosisInsights.length,\n        clinicalJustification: 'Assessment based on clinical reasoning and evidence-based practice'\n      });\n    }\n    \n    // Plan comments\n    const treatmentInsights = insights.filter(i => \n      i.category === 'treatment' || i.category === 'intervention'\n    );\n    if (treatmentInsights.length > 0) {\n      comments.push({\n        section: 'plan',\n        comment: `Treatment plan incorporates ${treatmentInsights.length} evidence-based interventions`,\n        confidence: treatmentInsights.reduce((sum, i) => sum + i.confidence, 0) / treatmentInsights.length,\n        clinicalJustification: 'Treatment plan based on clinical guidelines and patient-specific factors'\n      });\n    }\n    \n    return comments;\n  }\n  \n  /**\n   * Calculates quality score for generated SOAP (0-100)\n   * Follows prompt specifications: \n   * - If missing diagnosis → score < 60\n   * - If <3 elements in plan → reviewRequired = true\n   */\n  private static calculateQualityScore(\n    soap: SOAPStructure,\n    validation: SOAPValidationResult\n  ): number {\n    \n    let score = 100;\n    \n    // Critical deduction: Missing diagnosis (prompt requirement)\n    if (soap.assessment.primaryDiagnosis === 'Primary diagnosis to be determined' || \n        soap.assessment.primaryDiagnosis.toLowerCase().includes('to be determined')) {\n      score = Math.min(score, 59); // Ensure score < 60 as per prompt\n    }\n    \n    // Deduct points for missing critical data\n    score -= validation.missingCriticalData.length * 15;\n    \n    // Deduct points for data inconsistencies\n    score -= validation.dataInconsistencies.length * 10;\n    \n    // Deduct points for clinical concerns\n    score -= validation.clinicalConcerns.length * 5;\n    \n    // Check completeness of SOAP sections\n    const sectionsComplete = [\n      soap.subjective.chiefComplaint !== 'Chief complaint not clearly documented',\n      soap.objective.inspection !== 'Visual inspection findings to be documented',\n      soap.assessment.primaryDiagnosis !== 'Primary diagnosis to be determined',\n      soap.plan.interventions.length > 0 && !soap.plan.interventions[0].includes('to be determined')\n    ];\n    \n    const completenessScore = (sectionsComplete.filter(Boolean).length / sectionsComplete.length) * 20;\n    score = Math.max(0, score - 20 + completenessScore);\n    \n    return Math.round(Math.max(0, Math.min(100, score)));\n  }\n  \n  /**\n   * Determines if manual review is required\n   * Follows prompt specifications:\n   * - reviewRequired = true if qualityScore < 70\n   * - If <3 elements in plan → reviewRequired = true\n   * - Phrases like \"dolor severo\", \"riesgo de caída\" → always require manual review\n   */\n  private static determineReviewRequirement(\n    validation: SOAPValidationResult,\n    qualityScore: number,\n    insights: ClinicalInsight[]\n  ): boolean {\n    \n    // Review required if validation failed\n    if (!validation.isValid) {\n      return true;\n    }\n    \n    // Review required if quality score is low (prompt requirement)\n    if (qualityScore < 70) {\n      return true;\n    }\n    \n    // Check if there are <3 elements in plan (prompt requirement)\n    const planElementsCount = insights.filter(i => \n      i.category === 'treatment' || \n      i.category === 'intervention' || \n      i.category === 'exercise'\n    ).length;\n    \n    if (planElementsCount < 3) {\n      return true;\n    }\n    \n    // Check for critical phrases that always require review (prompt requirement)\n    const criticalPhrases = ['dolor severo', 'riesgo de caída', 'severe pain', 'fall risk'];\n    const hasCriticalPhrases = insights.some(insight => \n      criticalPhrases.some(phrase => \n        insight.description.toLowerCase().includes(phrase) || \n        insight.title.toLowerCase().includes(phrase)\n      )\n    );\n    \n    if (hasCriticalPhrases) {\n      return true;\n    }\n    \n    // Review required if critical insights present\n    const criticalInsights = insights.filter(i => i.severity === 'critical');\n    if (criticalInsights.length > 0) {\n      return true;\n    }\n    \n    // Review required if low confidence insights\n    const lowConfidenceInsights = insights.filter(i => i.confidence < 0.6);\n    if (lowConfidenceInsights.length > insights.length * 0.5) {\n      return true;\n    }\n    \n    return false;\n  }\n}\n\nexport default SOAPGenerationService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/TranscriptProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/UserAnalyticsService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'query' is defined but never used.","line":6,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'where' is defined but never used.","line":6,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'orderBy' is defined but never used.","line":6,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'limit' is defined but never used.","line":6,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":67},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1697,1748],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 📊 User Analytics Service - Captura datos de usuarios para estadísticas\n * Cumple HIPAA/GDPR: Datos anonimizados, sin PII expuesto\n */\n\nimport { collection, addDoc, getDocs, query, where, orderBy, limit } from 'firebase/firestore';\n\nimport { db } from '@/lib/firebase';\n\nexport interface UserAnalytics {\n  timestamp: Date;\n  stepCompleted: string;\n  profession: string;\n  country: string;\n  experienceLevel: string;\n  complianceAccepted: boolean;\n  sessionDuration: number;\n  deviceType: string;\n  browser: string;\n}\n\nexport interface AnalyticsSummary {\n  totalUsers: number;\n  professions: Record<string, number>;\n  countries: Record<string, number>;\n  experienceLevels: Record<string, number>;\n  complianceRate: number;\n  averageSessionDuration: number;\n  topProfessions: Array<{ profession: string; count: number }>;\n  topCountries: Array<{ country: string; count: number }>;\n}\n\nclass UserAnalyticsService {\n  private readonly COLLECTION_NAME = 'user_analytics';\n\n  /**\n   * Captura datos de un paso completado\n   */\n  async captureStepCompletion(data: Partial<UserAnalytics>): Promise<void> {\n    try {\n      const analyticsData: UserAnalytics = {\n        timestamp: new Date(),\n        stepCompleted: data.stepCompleted || 'unknown',\n        profession: data.profession || 'unknown',\n        country: data.country || 'unknown',\n        experienceLevel: data.experienceLevel || 'unknown',\n        complianceAccepted: data.complianceAccepted || false,\n        sessionDuration: data.sessionDuration || 0,\n        deviceType: this.getDeviceType(),\n        browser: this.getBrowser(),\n        ...data\n      };\n\n      await addDoc(collection(db, this.COLLECTION_NAME), analyticsData);\n      console.log('Analytics capturado:', analyticsData);\n    } catch (error) {\n      console.error('Error capturando analytics:', error);\n    }\n  }\n\n  /**\n   * Captura inicio de onboarding\n   */\n  async captureOnboardingStart(profession: string, country: string): Promise<void> {\n    await this.captureStepCompletion({\n      stepCompleted: 'onboarding_started',\n      profession,\n      country\n    });\n  }\n\n  /**\n   * Captura paso completado\n   */\n  async captureStepCompleted(step: string, data: Partial<UserAnalytics>): Promise<void> {\n    await this.captureStepCompletion({\n      stepCompleted: step,\n      ...data\n    });\n  }\n\n  /**\n   * Captura onboarding completado\n   */\n  async captureOnboardingCompleted(data: Partial<UserAnalytics>): Promise<void> {\n    await this.captureStepCompletion({\n      stepCompleted: 'onboarding_completed',\n      ...data\n    });\n  }\n\n  /**\n   * Obtiene resumen de estadísticas\n   */\n  async getAnalyticsSummary(): Promise<AnalyticsSummary> {\n    try {\n      const querySnapshot = await getDocs(collection(db, this.COLLECTION_NAME));\n      const analytics: UserAnalytics[] = [];\n      \n      querySnapshot.forEach((doc) => {\n        const data = doc.data();\n        analytics.push({\n          timestamp: data.timestamp.toDate(),\n          stepCompleted: data.stepCompleted,\n          profession: data.profession,\n          country: data.country,\n          experienceLevel: data.experienceLevel,\n          complianceAccepted: data.complianceAccepted,\n          sessionDuration: data.sessionDuration,\n          deviceType: data.deviceType,\n          browser: data.browser\n        });\n      });\n\n      return this.calculateSummary(analytics);\n    } catch (error) {\n      console.error('Error obteniendo analytics:', error);\n      return this.getEmptySummary();\n    }\n  }\n\n  /**\n   * Calcula resumen de estadísticas\n   */\n  private calculateSummary(analytics: UserAnalytics[]): AnalyticsSummary {\n    const professions: Record<string, number> = {};\n    const countries: Record<string, number> = {};\n    const experienceLevels: Record<string, number> = {};\n    let complianceAccepted = 0;\n    let totalSessionDuration = 0;\n\n    analytics.forEach((item) => {\n      // Contar profesiones\n      professions[item.profession] = (professions[item.profession] || 0) + 1;\n      \n      // Contar países\n      countries[item.country] = (countries[item.country] || 0) + 1;\n      \n      // Contar niveles de experiencia\n      experienceLevels[item.experienceLevel] = (experienceLevels[item.experienceLevel] || 0) + 1;\n      \n      // Contar compliance\n      if (item.complianceAccepted) complianceAccepted++;\n      \n      // Sumar duración de sesión\n      totalSessionDuration += item.sessionDuration;\n    });\n\n    const totalUsers = analytics.length;\n    const complianceRate = totalUsers > 0 ? (complianceAccepted / totalUsers) * 100 : 0;\n    const averageSessionDuration = totalUsers > 0 ? totalSessionDuration / totalUsers : 0;\n\n    // Top profesiones\n    const topProfessions = Object.entries(professions)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 5)\n      .map(([profession, count]) => ({ profession, count }));\n\n    // Top países\n    const topCountries = Object.entries(countries)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 5)\n      .map(([country, count]) => ({ country, count }));\n\n    return {\n      totalUsers,\n      professions,\n      countries,\n      experienceLevels,\n      complianceRate,\n      averageSessionDuration,\n      topProfessions,\n      topCountries\n    };\n  }\n\n  /**\n   * Obtiene resumen vacío\n   */\n  private getEmptySummary(): AnalyticsSummary {\n    return {\n      totalUsers: 0,\n      professions: {},\n      countries: {},\n      experienceLevels: {},\n      complianceRate: 0,\n      averageSessionDuration: 0,\n      topProfessions: [],\n      topCountries: []\n    };\n  }\n\n  /**\n   * Detecta tipo de dispositivo\n   */\n  private getDeviceType(): string {\n    if (window.innerWidth < 768) return 'mobile';\n    if (window.innerWidth < 1024) return 'tablet';\n    return 'desktop';\n  }\n\n  /**\n   * Detecta navegador\n   */\n  private getBrowser(): string {\n    const userAgent = navigator.userAgent;\n    if (userAgent.includes('Chrome')) return 'Chrome';\n    if (userAgent.includes('Firefox')) return 'Firefox';\n    if (userAgent.includes('Safari')) return 'Safari';\n    if (userAgent.includes('Edge')) return 'Edge';\n    return 'Unknown';\n  }\n}\n\nexport const userAnalyticsService = new UserAnalyticsService();\nexport default userAnalyticsService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/VertexAIService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/WebSpeechSTTService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":110,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":110,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3826,3876],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":120,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":120,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4132,4184],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":143,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":143,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4863,4910],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":178,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":178,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5829,5913],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":245,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":245,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8073,8108],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":250,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":250,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8199,8240],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":279,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":279,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8992,9033],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":302,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":302,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9587,9634],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":464,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":464,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14323,14372],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { TranscriptionSegment, TranscriptionActor, TranscriptionConfidence } from '../core/audio/AudioCaptureService';\n\n// Eliminar la interfaz LocalSpeechRecognition y usar solo SpeechRecognition\n// Cambiar todos los tipos LocalSpeechRecognition a SpeechRecognition\ninterface SpeechRecognitionEvent extends Event {\n  results: SpeechRecognitionResultList;\n  resultIndex: number;\n}\n\ninterface SpeechRecognitionResultList {\n  readonly length: number;\n  item(index: number): SpeechRecognitionResult;\n  [index: number]: SpeechRecognitionResult;\n}\n\ninterface SpeechRecognitionResult {\n  readonly length: number;\n  item(index: number): SpeechRecognitionAlternative;\n  [index: number]: SpeechRecognitionAlternative;\n  isFinal: boolean;\n}\n\ninterface SpeechRecognitionAlternative {\n  transcript: string;\n  confidence: number;\n}\n\nexport interface SpeechRecognitionConfig {\n  language: 'es' | 'en';\n  continuous: boolean;\n  interimResults: boolean;\n  maxAlternatives: number;\n}\n\nexport interface RealtimeTranscriptionOptions {\n  onResult: (segment: TranscriptionSegment) => void;\n  onError?: (error: string) => void;\n  onStart?: () => void;\n  onEnd?: () => void;\n  onSpeechStart?: () => void;\n  onSpeechEnd?: () => void;\n}\n\n// Helper de tipo seguro para obtener el constructor de SpeechRecognition\nfunction getSpeechRecognitionConstructor(): unknown {\n  if (typeof window !== 'undefined') {\n    if (window.SpeechRecognition && typeof window.SpeechRecognition === 'function') {\n      return window.SpeechRecognition;\n    } else if (window.webkitSpeechRecognition && typeof window.webkitSpeechRecognition === 'function') {\n      return window.webkitSpeechRecognition;\n    }\n  }\n  return undefined;\n}\n\ninterface SpeechRecognition extends EventTarget {\n  start(): void;\n  stop(): void;\n  abort(): void;\n  lang: string;\n  continuous: boolean;\n  interimResults: boolean;\n  maxAlternatives: number;\n  onresult: ((this: SpeechRecognition, ev: SpeechRecognitionEvent) => void) | null;\n  onerror: ((this: SpeechRecognition, ev: Event) => void) | null;\n  onstart: ((this: SpeechRecognition, ev: Event) => void) | null;\n  onend: ((this: SpeechRecognition, ev: Event) => void) | null;\n  onspeechstart: ((this: SpeechRecognition, ev: Event) => void) | null;\n  onspeechend: ((this: SpeechRecognition, ev: Event) => void) | null;\n  onnomatch: ((this: SpeechRecognition, ev: Event) => void) | null;\n}\n\n/**\n * Servicio de Speech-to-Text usando Web Speech API (GRATUITO)\n * Compatible con Chrome, Edge y Firefox (limitado)\n */\nexport class WebSpeechSTTService {\n  private recognition: SpeechRecognition | null = null;\n  private isSupported: boolean = false;\n  private currentStream: MediaStream | null = null;\n  private isListening: boolean = false;\n  private config: SpeechRecognitionConfig;\n  private sessionId: string = '';\n\n  // Declaración global estricta sin any\n\n  constructor(config: Partial<SpeechRecognitionConfig> = {}) {\n    const SpeechRecognitionConstructor = getSpeechRecognitionConstructor();\n    this.isSupported = !!SpeechRecognitionConstructor;\n    this.config = { ...config } as SpeechRecognitionConfig;\n    if (this.isSupported && SpeechRecognitionConstructor) {\n      this.recognition = new (SpeechRecognitionConstructor as { new (): SpeechRecognition })();\n    }\n  }\n\n  /**\n   * Configurar el reconocimiento de voz con parámetros optimizados\n   */\n  private setupRecognition(): void {\n    if (!this.recognition) return;\n    \n    // Configuración optimizada para contexto médico\n    this.recognition.continuous = this.config.continuous;\n    this.recognition.interimResults = this.config.interimResults;\n    this.recognition.lang = this.config.language === 'es' ? 'es-ES' : 'en-US';\n    this.recognition.maxAlternatives = this.config.maxAlternatives;\n    \n    // Eventos básicos de logging\n    this.recognition.onstart = () => {\n      console.log('🎙️ Reconocimiento de voz iniciado');\n      this.isListening = true;\n      this.logSimple('stt.webspeech.started', { \n        provider: 'browser_native',\n        language: this.config.language,\n        sessionId: this.sessionId\n      });\n    };\n    \n    this.recognition.onend = () => {\n      console.log('🎙️ Reconocimiento de voz finalizado');\n      this.isListening = false;\n      this.logSimple('stt.webspeech.ended', { \n        provider: 'browser_native',\n        sessionId: this.sessionId\n      });\n    };\n    \n    this.recognition.onerror = (event: Event) => {\n      console.error('❌ Error en reconocimiento:', (event as { error?: string }).error);\n      this.isListening = false;\n      this.logSimple('stt.webspeech.error', { \n        error: (event as { error?: string }).error,\n        provider: 'browser_native',\n        sessionId: this.sessionId\n      });\n    };\n  }\n\n  /**\n   * Logger simple para evitar dependencias complejas\n   */\n  private logSimple(action: string, data: Record<string, unknown>): void {\n    console.log(`[WebSpeechSTT] ${action}:`, data);\n    // TODO: Integrar con AuditLogger cuando esté disponible el contexto completo\n  }\n\n  /**\n   * Iniciar transcripción en tiempo real\n   */\n  async startRealtimeTranscription(\n    options: RealtimeTranscriptionOptions\n  ): Promise<void> {\n    \n    if (!this.isSupported || !this.recognition) {\n      const error = 'Web Speech API no soportada en este navegador';\n      options.onError?.(error);\n      throw new Error(error);\n    }\n\n    if (this.isListening) {\n      console.warn('Ya hay una sesión de reconocimiento activa');\n      return;\n    }\n\n    // Generar ID de sesión único\n    this.sessionId = `webspeech_${Date.now()}`;\n    \n    try {\n      // Solicitar permisos de micrófono antes de empezar\n      await this.requestMicrophoneAccess();\n      \n      // Configurar handlers de eventos\n      this.setupEventHandlers(options);\n      \n      // Iniciar reconocimiento\n      this.recognition.start();\n      \n      console.log('🚀 Transcripción en tiempo real iniciada - GRATIS con Web Speech API');\n      \n    } catch (error) {\n      const errorMsg = error instanceof Error ? error.message : 'Error desconocido';\n      console.error('Error iniciando transcripción:', errorMsg);\n      options.onError?.(errorMsg);\n      throw error;\n    }\n  }\n\n  /**\n   * Configurar todos los event handlers para transcripción en tiempo real\n   */\n  private setupEventHandlers(options: RealtimeTranscriptionOptions): void {\n    if (!this.recognition) return;\n\n    // Handler principal de resultados\n    this.recognition.onresult = (event: SpeechRecognitionEvent) => {\n      try {\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const result = event.results[i];\n          const transcript = result[0].transcript.trim();\n          const confidence = result[0].confidence || 0.8;\n          \n          if (transcript.length === 0) continue;\n          \n          const segment: TranscriptionSegment = {\n            id: `${this.sessionId}_${i}_${Date.now()}`,\n            timestamp: new Date().toISOString(),\n            content: transcript,\n            confidence: this.mapConfidenceLevel(confidence),\n            actor: this.detectActor(transcript),\n            approved: false,\n            edited: false\n          };\n          \n          // Callback con el segmento\n          options.onResult(segment);\n          \n          // Log solo resultados finales para no spamear\n          if (result.isFinal) {\n            this.logSimple('stt.webspeech.segment', {\n              sessionId: this.sessionId,\n              actor: segment.actor,\n              confidence: segment.confidence,\n              length: transcript.length,\n              is_final: result.isFinal\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error procesando resultado STT:', error);\n        options.onError?.('Error procesando transcripción');\n      }\n    };\n\n    // Otros event handlers\n    this.recognition.onstart = () => {\n      options.onStart?.();\n      this.setupRecognition(); // Asegurar configuración\n    };\n\n    this.recognition.onend = () => {\n      options.onEnd?.();\n    };\n\n    this.recognition.onspeechstart = () => {\n      console.log('🗣️ Habla detectada');\n      options.onSpeechStart?.();\n    };\n\n    this.recognition.onspeechend = () => {\n      console.log('🔇 Fin de habla detectado');\n      options.onSpeechEnd?.();\n    };\n\n    this.recognition.onerror = (event: Event) => {\n      const errorMsg = `Error STT: ${((event as { error?: string }).error ?? 'desconocido')}`;\n      console.error(errorMsg);\n      options.onError?.(errorMsg);\n    };\n\n    this.recognition.onnomatch = () => {\n      console.warn('No se pudo reconocer el habla');\n      options.onError?.('No se pudo reconocer el habla claramente');\n    };\n  }\n\n  /**\n   * Detener transcripción\n   */\n  async stopTranscription(): Promise<void> {\n    if (this.recognition && this.isListening) {\n      this.recognition.stop();\n    }\n    \n    if (this.currentStream) {\n      this.currentStream.getTracks().forEach(track => track.stop());\n      this.currentStream = null;\n    }\n\n    console.log('⏹️ Transcripción detenida');\n    \n    this.logSimple('stt.webspeech.stopped', {\n      sessionId: this.sessionId,\n      provider: 'browser_native'\n    });\n  }\n\n  /**\n   * Solicitar acceso al micrófono con configuración optimizada\n   */\n  private async requestMicrophoneAccess(): Promise<void> {\n    try {\n      this.currentStream = await navigator.mediaDevices.getUserMedia({ \n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true,\n          sampleRate: 16000,\n          channelCount: 1\n        }\n      });\n      \n      console.log('✅ Acceso al micrófono concedido');\n      \n    } catch (error) {\n      const errorMsg = 'Acceso al micrófono denegado. Por favor, permite el acceso para usar la transcripción.';\n      console.error(errorMsg, error);\n      throw new Error(errorMsg);\n    }\n  }\n\n  /**\n   * Detectar si el hablante es paciente o profesional basado en el contenido\n   */\n  private detectActor(text: string): TranscriptionActor {\n    const lowerText = text.toLowerCase().trim();\n    \n    // Palabras clave para profesional de la salud\n    const professionalKeywords = [\n      'vamos a', 'observe', 'evalúo', 'recomiendo', 'aplicamos', \n      'necesita', 'veo que', 'trataremos', 'diagnosis', 'procedimiento',\n      'examinemos', 'palpemos', 'flexione', 'extienda', 'presión',\n      'tratamiento', 'terapia', 'ejercicio', 'rehabilitación',\n      'seguimiento', 'control', 'mejora', 'evolución', 'protocolo'\n    ];\n    \n    // Palabras clave para paciente\n    const patientKeywords = [\n      'me duele', 'siento', 'tengo', 'no puedo', 'cuando',\n      'desde hace', 'me pasa', 'me molesta', 'dolor', 'molestia',\n      'incómodo', 'difícil', 'mejor', 'peor', 'antes', 'ahora',\n      'trabajo', 'casa', 'dormir', 'caminar', 'subir', 'bajar'\n    ];\n    \n    // Calcular puntuaciones\n    const profScore = professionalKeywords.reduce((score, keyword) => \n      lowerText.includes(keyword) ? score + 1 : score, 0\n    );\n    \n    const patientScore = patientKeywords.reduce((score, keyword) => \n      lowerText.includes(keyword) ? score + 1 : score, 0\n    );\n    \n    // Decisión con sesgo hacia paciente en caso de empate\n    return profScore > patientScore ? 'profesional' : 'paciente';\n  }\n\n  /**\n   * Mapear confidence numérico a enum\n   */\n  private mapConfidenceLevel(confidence: number): TranscriptionConfidence {\n    if (confidence >= 0.8) return 'entendido';\n    if (confidence >= 0.5) return 'poco_claro';\n    return 'no_reconocido';\n  }\n\n  /**\n   * Verificar si el navegador soporta Web Speech API\n   */\n  static isSupported(): boolean {\n    const SpeechRecognitionConstructor = window.SpeechRecognition || window.webkitSpeechRecognition;\n    return !!SpeechRecognitionConstructor;\n  }\n\n  /**\n   * Obtener información de compatibilidad del navegador\n   */\n  static getBrowserCompatibility(): {\n    isSupported: boolean;\n    browserName: string;\n    recommendedAction: string;\n  } {\n    const userAgent = navigator.userAgent;\n    \n    if (userAgent.includes('Chrome')) {\n      return {\n        isSupported: true,\n        browserName: 'Google Chrome',\n        recommendedAction: 'Perfecto, Chrome es totalmente compatible'\n      };\n    }\n    \n    if (userAgent.includes('Edg')) {\n      return {\n        isSupported: true,\n        browserName: 'Microsoft Edge',\n        recommendedAction: 'Excelente, Edge es totalmente compatible'\n      };\n    }\n    \n    if (userAgent.includes('Firefox')) {\n      return {\n        isSupported: this.isSupported(),\n        browserName: 'Mozilla Firefox',\n        recommendedAction: 'Firefox tiene soporte limitado, recomendamos Chrome o Edge'\n      };\n    }\n    \n    if (userAgent.includes('Safari')) {\n      return {\n        isSupported: false,\n        browserName: 'Safari',\n        recommendedAction: 'Safari no soporta Web Speech API, usa Chrome o Edge'\n      };\n    }\n    \n    return {\n      isSupported: this.isSupported(),\n      browserName: 'Navegador desconocido',\n      recommendedAction: 'Recomendamos usar Chrome o Edge para mejor compatibilidad'\n    };\n  }\n\n  /**\n   * Crear mensaje de fallback para navegadores no soportados\n   */\n  static createFallbackMessage(): string {\n    const compatibility = this.getBrowserCompatibility();\n    \n    return `\n⚠️ Tu navegador (${compatibility.browserName}) ${compatibility.isSupported ? 'tiene soporte limitado' : 'no soporta'} Web Speech API.\n\n🔧 Para usar transcripción en tiempo real GRATUITA:\n\n✅ Navegadores Recomendados:\n• Google Chrome (mejor opción)\n• Microsoft Edge\n• Firefox (funcionalidad limitada)\n\n❌ No Compatible:\n• Safari\n• Navegadores móviles antiguos\n\n💡 Alternativa: Puedes cargar archivos de audio para procesamiento.\n\n${compatibility.recommendedAction}\n    `.trim();\n  }\n\n  /**\n   * Estado actual del servicio\n   */\n  getStatus(): {\n    isSupported: boolean;\n    isListening: boolean;\n    sessionId: string;\n    language: string;\n  } {\n    return {\n      isSupported: this.isSupported,\n      isListening: this.isListening,\n      sessionId: this.sessionId,\n      language: this.config.language\n    };\n  }\n\n  /**\n   * Cambiar idioma dinámicamente\n   */\n  setLanguage(language: 'es' | 'en'): void {\n    this.config.language = language;\n    if (this.recognition) {\n      this.recognition.lang = language === 'es' ? 'es-ES' : 'en-US';\n    }\n    console.log(`🌐 Idioma cambiado a: ${language}`);\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/analyticsService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":180,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":180,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4324,4487],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":200,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":200,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4877,4935],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":362,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":362,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10625,10715],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":472,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":472,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14025,14095],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview Servicio de Analytics para AiDuxCare V.2\n * @version 2.0.0\n * @author AiDuxCare Development Team\n */\n\nimport { collection, addDoc, serverTimestamp, query, where, getDocs, orderBy, limit, doc, setDoc, DocumentData } from 'firebase/firestore';\n\nimport { db } from '../lib/firebase';\n\n// Tipos de métricas disponibles\nexport type MetricType = \n  | 'usage_by_module'\n  | 'suggestion_acceptance'\n  | 'time_saved'\n  | 'usage_frequency';\n\n// Filtros para analytics\nexport interface AnalyticsFilters {\n  eventName?: string;\n  userId?: string;\n  startDate?: Date;\n  endDate?: Date;\n}\n\n// Evento de analytics\nexport interface AnalyticsEvent {\n  id: string;\n  eventName: string;\n  eventData: Record<string, unknown>;\n  userId?: string;\n  timestamp: Date;\n  sessionId: string;\n  userAgent: string;\n  url: string;\n  module?: string;\n  duration?: number;\n  success?: boolean;\n  errorMessage?: string;\n  event?: string;\n  metadata?: Record<string, unknown>;\n}\n\n// Resultado de métricas\nexport interface MetricResult {\n  type: MetricType;\n  data: Record<string, unknown>;\n  total: number;\n  period: string;\n}\n\n// Eventos clave del sistema para tracking\nexport type SystemEvent = \n  | 'transcript_started'\n  | 'transcript_completed'\n  | 'soap_generated'\n  | 'soap_rendered'\n  | 'suggestion_accepted'\n  | 'suggestion_rejected'\n  | 'critical_alert_triggered'\n  | 'patient_created'\n  | 'appointment_scheduled'\n  | 'session_started'\n  | 'session_completed'\n  | 'error_occurred'\n  | 'feature_used';\n\n\n\nexport interface BusinessMetrics {\n  event: string;\n  patientData?: {\n    hasInsurance: boolean;\n    hasReferral: boolean;\n    source: string;\n    marketingChannel: string;\n  };\n  professionalData?: {\n    specialty: string;\n    experienceYears: number;\n    location: string;\n  };\n  financialData?: {\n    sessionPrice: number;\n    insuranceCoverage: number;\n    copayAmount: number;\n  };\n  timestamp: string;\n}\n\nexport interface UsageAnalytics {\n  totalEvents: number;\n  eventsByModule: Record<string, number>;\n  eventsByUser: Record<string, number>;\n  eventsBySpecialty: Record<string, number>;\n  averageSessionDuration: number;\n  suggestionsAcceptanceRate: number;\n  errorRate: number;\n  timeSavedPerPatient: number;\n  mostUsedFeatures: Array<{ feature: string; count: number }>;\n  criticalAlertsTriggered: number;\n}\n\nexport interface DashboardMetrics {\n  usageByModule: Array<{ module: string; count: number; percentage: number }>;\n  suggestionsMetrics: {\n    accepted: number;\n    rejected: number;\n    acceptanceRate: number;\n  };\n  timeMetrics: {\n    averageSessionDuration: number;\n    timeSavedPerPatient: number;\n    totalTimeSaved: number;\n  };\n  userMetrics: {\n    activeUsers: number;\n    newUsers: number;\n    usageBySpecialty: Array<{ specialty: string; count: number }>;\n  };\n  errorMetrics: {\n    totalErrors: number;\n    errorRate: number;\n    mostCommonErrors: Array<{ error: string; count: number }>;\n  };\n}\n\nexport class AnalyticsService {\n  private static instance: AnalyticsService;\n  private sessionId: string;\n\n  constructor() {\n    this.sessionId = this.generateSessionId();\n  }\n\n  public static getInstance(): AnalyticsService {\n    if (!AnalyticsService.instance) {\n      AnalyticsService.instance = new AnalyticsService();\n    }\n    return AnalyticsService.instance;\n  }\n\n  /**\n   * Track system events with detailed metadata\n   */\n  public async trackSystemEvent(\n    event: SystemEvent,\n    metadata: Record<string, unknown> = {},\n    options: {\n      userId?: string;\n      patientId?: string;\n      sessionId?: string;\n      module: string;\n      duration?: number;\n      success?: boolean;\n      errorMessage?: string;\n    }\n  ): Promise<void> {\n    try {\n      const analyticsEvent: AnalyticsEvent = {\n        id: this.generateSessionId(),\n        eventName: event,\n        eventData: metadata,\n        userId: options.userId,\n        sessionId: options.sessionId || this.sessionId,\n        timestamp: new Date(),\n        userAgent: navigator.userAgent,\n        url: window.location.href,\n        module: options.module,\n        duration: options.duration,\n        success: options.success ?? true,\n        errorMessage: options.errorMessage\n      };\n\n      await addDoc(collection(db, 'system_analytics'), {\n        ...analyticsEvent,\n        createdAt: serverTimestamp()\n      });\n\n      console.log('[CAOU] System event tracked:', event, {\n        module: options.module,\n        success: options.success,\n        duration: options.duration\n      });\n    } catch (error) {\n      console.error('❌ [CAOU] Error tracking system event:', error);\n    }\n  }\n\n  /**\n   * Track business metrics for investor presentations\n   */\n  public async trackBusinessMetrics(metrics: BusinessMetrics): Promise<void> {\n    try {\n      await addDoc(collection(db, 'business_metrics'), {\n        ...metrics,\n        createdAt: serverTimestamp()\n      });\n\n      console.log('[BUSINESS] Metrics tracked:', metrics.event);\n    } catch (error) {\n      console.error('❌ [BUSINESS] Error tracking metrics:', error);\n    }\n  }\n\n  /**\n   * Get usage analytics for dashboard\n   */\n  public async getUsageAnalytics(dateRange: { start: Date; end: Date }): Promise<UsageAnalytics> {\n    try {\n      const analyticsRef = collection(db, 'system_analytics');\n      const q = query(\n        analyticsRef,\n        where('timestamp', '>=', dateRange.start.toISOString()),\n        where('timestamp', '<=', dateRange.end.toISOString()),\n        orderBy('timestamp', 'desc')\n      );\n\n      const snapshot = await getDocs(q);\n      const events = snapshot.docs.map(doc => doc.data() as AnalyticsEvent);\n\n      // Calculate metrics\n      const eventsByModule: Record<string, number> = {};\n      const eventsByUser: Record<string, number> = {};\n      const eventsBySpecialty: Record<string, number> = {};\n      let totalDuration = 0;\n      let sessionsWithDuration = 0;\n      let suggestionsAccepted = 0;\n      let suggestionsRejected = 0;\n      let totalErrors = 0;\n      let criticalAlerts = 0;\n\n      events.forEach(event => {\n        // Count by module\n        if (event.module) {\n          eventsByModule[event.module] = (eventsByModule[event.module] || 0) + 1;\n        }\n\n        // Count by user\n        if (event.userId) {\n          eventsByUser[event.userId] = (eventsByUser[event.userId] || 0) + 1;\n        }\n\n        // Count by specialty (from metadata)\n        const specialty = event.metadata?.specialty as string || 'unknown';\n        eventsBySpecialty[specialty] = (eventsBySpecialty[specialty] || 0) + 1;\n\n        // Calculate duration\n        if (event.duration) {\n          totalDuration += event.duration;\n          sessionsWithDuration++;\n        }\n\n        // Count suggestions\n        if (event.event === 'suggestion_accepted') suggestionsAccepted++;\n        if (event.event === 'suggestion_rejected') suggestionsRejected++;\n\n        // Count errors\n        if (!event.success) totalErrors++;\n\n        // Count critical alerts\n        if (event.event === 'critical_alert_triggered') criticalAlerts++;\n      });\n\n      const totalEvents = events.length;\n      const averageSessionDuration = sessionsWithDuration > 0 ? totalDuration / sessionsWithDuration : 0;\n      const suggestionsAcceptanceRate = (suggestionsAccepted + suggestionsRejected) > 0 \n        ? suggestionsAccepted / (suggestionsAccepted + suggestionsRejected) * 100 \n        : 0;\n      const errorRate = totalEvents > 0 ? (totalErrors / totalEvents) * 100 : 0;\n\n      return {\n        totalEvents,\n        eventsByModule,\n        eventsByUser,\n        eventsBySpecialty,\n        averageSessionDuration,\n        suggestionsAcceptanceRate,\n        errorRate,\n        timeSavedPerPatient: 15, // minutos promedio ahorrados por paciente\n        mostUsedFeatures: this.getMostUsedFeatures(events),\n        criticalAlertsTriggered: criticalAlerts\n      };\n    } catch (error) {\n      console.error('❌ [CAOU] Error getting usage analytics:', error);\n      throw new Error('Error obteniendo analíticas de uso');\n    }\n  }\n\n  /**\n   * Get dashboard metrics for React components\n   */\n  public async getDashboardMetrics(dateRange: { start: Date; end: Date }): Promise<DashboardMetrics> {\n    try {\n      const usageAnalytics = await this.getUsageAnalytics(dateRange);\n\n      // Calculate module usage percentages\n      const totalEvents = usageAnalytics.totalEvents;\n      const usageByModule = Object.entries(usageAnalytics.eventsByModule).map(([module, count]) => ({\n        module,\n        count,\n        percentage: totalEvents > 0 ? (count / totalEvents) * 100 : 0\n      }));\n\n      // Calculate suggestions metrics\n      const suggestionsMetrics = {\n        accepted: usageAnalytics.suggestionsAcceptanceRate > 0 ? Math.round(usageAnalytics.suggestionsAcceptanceRate) : 0,\n        rejected: 100 - (usageAnalytics.suggestionsAcceptanceRate > 0 ? Math.round(usageAnalytics.suggestionsAcceptanceRate) : 0),\n        acceptanceRate: usageAnalytics.suggestionsAcceptanceRate\n      };\n\n      // Calculate time metrics\n      const timeMetrics = {\n        averageSessionDuration: Math.round(usageAnalytics.averageSessionDuration / 1000 / 60), // en minutos\n        timeSavedPerPatient: usageAnalytics.timeSavedPerPatient,\n        totalTimeSaved: usageAnalytics.totalEvents * usageAnalytics.timeSavedPerPatient\n      };\n\n      // Calculate user metrics\n      const userMetrics = {\n        activeUsers: Object.keys(usageAnalytics.eventsByUser).length,\n        newUsers: 0, // TODO: Implement new user tracking\n        usageBySpecialty: Object.entries(usageAnalytics.eventsBySpecialty).map(([specialty, count]) => ({\n          specialty,\n          count\n        }))\n      };\n\n      // Calculate error metrics\n      const errorMetrics = {\n        totalErrors: Math.round((usageAnalytics.errorRate / 100) * totalEvents),\n        errorRate: usageAnalytics.errorRate,\n        mostCommonErrors: [] // TODO: Implement error categorization\n      };\n\n      return {\n        usageByModule,\n        suggestionsMetrics,\n        timeMetrics,\n        userMetrics,\n        errorMetrics\n      };\n    } catch (error) {\n      console.error('❌ [CAOU] Error getting dashboard metrics:', error);\n      throw new Error('Error obteniendo métricas del dashboard');\n    }\n  }\n\n  /**\n   * Track time saved per patient for ROI calculations\n   */\n  public async trackTimeSaved(patientId: string, timeSavedMinutes: number, sessionType: string): Promise<void> {\n    try {\n      await addDoc(collection(db, 'time_savings'), {\n        patientId,\n        timeSavedMinutes,\n        sessionType,\n        timestamp: new Date().toISOString(),\n        createdAt: serverTimestamp()\n      });\n\n      console.log('⏰ [CAOU] Time saved tracked:', { patientId, timeSavedMinutes, sessionType });\n    } catch (error) {\n      console.error('❌ [CAOU] Error tracking time saved:', error);\n    }\n  }\n\n  /**\n   * Track feature usage for optimization\n   */\n  public async trackFeatureUsage(feature: string, metadata: Record<string, unknown> = {}): Promise<void> {\n    try {\n      await this.trackSystemEvent('feature_used', {\n        feature,\n        ...metadata\n      }, {\n        module: 'feature_tracking',\n        success: true\n      });\n    } catch (error) {\n      console.error('❌ [CAOU] Error tracking feature usage:', error);\n    }\n  }\n\n  /**\n   * Get most used features for optimization\n   */\n  private getMostUsedFeatures(events: AnalyticsEvent[]): Array<{ feature: string; count: number }> {\n    const featureCounts: Record<string, number> = {};\n\n    events.forEach(event => {\n      if (event.event === 'feature_used' && event.metadata?.feature) {\n        const feature = event.metadata.feature as string;\n        featureCounts[feature] = (featureCounts[feature] || 0) + 1;\n      }\n    });\n\n    return Object.entries(featureCounts)\n      .map(([feature, count]) => ({ feature, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10); // Top 10 features\n  }\n\n  /**\n   * Generate session ID for tracking\n   */\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Export analytics data for stakeholder reports\n   */\n  public async exportAnalyticsData(dateRange: { start: Date; end: Date }, format: 'csv' | 'json'): Promise<string> {\n    try {\n      const analytics = await this.getUsageAnalytics(dateRange);\n      \n      if (format === 'csv') {\n        return this.convertToCSV(analytics);\n      } else {\n        return JSON.stringify(analytics, null, 2);\n      }\n    } catch (error) {\n      console.error('❌ [CAOU] Error exporting analytics:', error);\n      throw new Error('Error exportando datos de analítica');\n    }\n  }\n\n  /**\n   * Convert analytics data to CSV format\n   */\n  private convertToCSV(analytics: UsageAnalytics): string {\n    const csvRows = [\n      ['Metric', 'Value'],\n      ['Total Events', analytics.totalEvents.toString()],\n      ['Average Session Duration (ms)', analytics.averageSessionDuration.toString()],\n      ['Suggestions Acceptance Rate (%)', analytics.suggestionsAcceptanceRate.toString()],\n      ['Error Rate (%)', analytics.errorRate.toString()],\n      ['Time Saved Per Patient (min)', analytics.timeSavedPerPatient.toString()],\n      ['Critical Alerts Triggered', analytics.criticalAlertsTriggered.toString()]\n    ];\n\n    return csvRows.map(row => row.join(',')).join('\\n');\n  }\n\n  /**\n   * Registra un evento de analytics\n   * @param eventName - Nombre del evento\n   * @param eventData - Datos del evento\n   * @param userId - ID del usuario (opcional)\n   * @returns Promise<void>\n   */\n  static async trackEvent(\n    eventName: string, \n    eventData: Record<string, unknown> = {}, \n    userId?: string\n  ): Promise<void> {\n    try {\n      const event = {\n        eventName,\n        eventData,\n        userId,\n        timestamp: new Date(),\n        sessionId: this.getSessionId(),\n        userAgent: navigator.userAgent,\n        url: window.location.href,\n      };\n\n      const docRef = doc(collection(db, 'analytics_events'));\n      await setDoc(docRef, event);\n\n      console.log(`[ANALYTICS] Evento registrado: ${eventName}`, eventData);\n    } catch (error) {\n      console.error('❌ [ANALYTICS] Error registrando evento:', error);\n      // No lanzar error para no interrumpir el flujo principal\n    }\n  }\n\n  /**\n   * Obtiene eventos de analytics con filtros opcionales\n   * @param filters - Filtros de búsqueda\n   * @param pageSize - Tamaño de página (por defecto 50)\n   * @returns Promise con lista de eventos\n   */\n  static async getEvents(\n    filters: AnalyticsFilters = {}, \n    pageSize: number = 50\n  ): Promise<AnalyticsEvent[]> {\n    try {\n      const eventsRef = collection(db, 'analytics_events');\n      let q = query(eventsRef, orderBy('timestamp', 'desc'), limit(pageSize));\n\n      // Aplicar filtros si están presentes\n      if (filters.eventName) {\n        q = query(q, where('eventName', '==', filters.eventName));\n      }\n      if (filters.userId) {\n        q = query(q, where('userId', '==', filters.userId));\n      }\n      if (filters.startDate) {\n        q = query(q, where('timestamp', '>=', filters.startDate));\n      }\n      if (filters.endDate) {\n        q = query(q, where('timestamp', '<=', filters.endDate));\n      }\n\n      const querySnapshot = await getDocs(q);\n      const events: AnalyticsEvent[] = [];\n\n      querySnapshot.forEach((doc) => {\n        const data = doc.data() as DocumentData;\n        events.push({\n          id: doc.id,\n          eventName: data.eventName as string,\n          eventData: data.eventData as Record<string, unknown>,\n          userId: data.userId as string,\n          timestamp: data.timestamp?.toDate() || new Date(),\n          sessionId: data.sessionId as string,\n          userAgent: data.userAgent as string,\n          url: data.url as string,\n        });\n      });\n\n      return events;\n    } catch (error) {\n      console.error('❌ [ANALYTICS] Error obteniendo eventos:', error);\n      throw new Error('Failed to get analytics events');\n    }\n  }\n\n  /**\n   * Obtiene métricas agregadas\n   * @param metricType - Tipo de métrica\n   * @param filters - Filtros opcionales\n   * @returns Promise con métricas\n   */\n  static async getMetrics(\n    metricType: MetricType, \n    filters: AnalyticsFilters = {}\n  ): Promise<MetricResult> {\n    try {\n      const events = await this.getEvents(filters, 1000); // Obtener más eventos para agregación\n      \n      switch (metricType) {\n        case 'usage_by_module':\n          return this.calculateUsageByModule(events);\n        case 'suggestion_acceptance':\n          return this.calculateSuggestionAcceptance(events);\n        case 'time_saved':\n          return this.calculateTimeSaved(events);\n        case 'usage_frequency':\n          return this.calculateUsageFrequency(events);\n        default:\n          throw new Error(`Tipo de métrica no soportado: ${metricType}`);\n      }\n    } catch (error) {\n      console.error('❌ [ANALYTICS] Error calculando métricas:', error);\n      throw new Error('Failed to calculate metrics');\n    }\n  }\n\n  /**\n   * Calcula uso por módulo\n   * @param events - Lista de eventos\n   * @returns Métricas de uso por módulo\n   */\n  private static calculateUsageByModule(events: AnalyticsEvent[]): MetricResult {\n    const moduleUsage: Record<string, number> = {};\n    \n    events.forEach(event => {\n      const module = this.extractModuleFromEvent(event);\n      moduleUsage[module] = (moduleUsage[module] || 0) + 1;\n    });\n\n    return {\n      type: 'usage_by_module',\n      data: moduleUsage,\n      total: events.length,\n      period: this.getCurrentPeriod(),\n    };\n  }\n\n  /**\n   * Calcula tasa de aceptación de sugerencias\n   * @param events - Lista de eventos\n   * @returns Métricas de aceptación\n   */\n  private static calculateSuggestionAcceptance(events: AnalyticsEvent[]): MetricResult {\n    const suggestionEvents = events.filter(e => \n      e.eventName === 'suggestion_accepted' || e.eventName === 'suggestion_rejected'\n    );\n    \n    const accepted = suggestionEvents.filter(e => e.eventName === 'suggestion_accepted').length;\n    const total = suggestionEvents.length;\n    const acceptanceRate = total > 0 ? (accepted / total) * 100 : 0;\n\n    return {\n      type: 'suggestion_acceptance',\n      data: {\n        accepted,\n        rejected: total - accepted,\n        total,\n        acceptanceRate,\n      },\n      total,\n      period: this.getCurrentPeriod(),\n    };\n  }\n\n  /**\n   * Calcula tiempo ahorrado\n   * @param events - Lista de eventos\n   * @returns Métricas de tiempo ahorrado\n   */\n  private static calculateTimeSaved(events: AnalyticsEvent[]): MetricResult {\n    const timeEvents = events.filter(e => \n      e.eventName === 'consultation_started' || e.eventName === 'soap_generated'\n    );\n    \n    // Estimación: 5 minutos por consulta ahorrados\n    const estimatedTimeSaved = timeEvents.length * 5;\n    \n    return {\n      type: 'time_saved',\n      data: {\n        totalMinutes: estimatedTimeSaved,\n        totalHours: estimatedTimeSaved / 60,\n        consultations: timeEvents.length,\n        averagePerConsultation: 5,\n      },\n      total: timeEvents.length,\n      period: this.getCurrentPeriod(),\n    };\n  }\n\n  /**\n   * Calcula frecuencia de uso\n   * @param events - Lista de eventos\n   * @returns Métricas de frecuencia\n   */\n  private static calculateUsageFrequency(events: AnalyticsEvent[]): MetricResult {\n    const userSessions = new Set(events.map(e => e.sessionId));\n    const uniqueUsers = new Set(events.map(e => e.userId).filter(Boolean));\n    \n    return {\n      type: 'usage_frequency',\n      data: {\n        totalSessions: userSessions.size,\n        uniqueUsers: uniqueUsers.size,\n        totalEvents: events.length,\n        averageEventsPerSession: events.length / userSessions.size,\n      },\n      total: events.length,\n      period: this.getCurrentPeriod(),\n    };\n  }\n\n  /**\n   * Extrae módulo del evento\n   * @param event - Evento de analytics\n   * @returns Nombre del módulo\n   */\n  private static extractModuleFromEvent(event: AnalyticsEvent): string {\n    const moduleMap: Record<string, string> = {\n      'login_success': 'Authentication',\n      'patient_created': 'Patient Management',\n      'consultation_started': 'Clinical Workflow',\n      'soap_generated': 'Clinical Workflow',\n      'suggestion_accepted': 'AI Features',\n      'suggestion_rejected': 'AI Features',\n    };\n\n    return moduleMap[event.eventName] || 'Other';\n  }\n\n  /**\n   * Obtiene ID de sesión\n   * @returns ID de sesión\n   */\n  private static getSessionId(): string {\n    let sessionId = sessionStorage.getItem('analytics_session_id');\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      sessionStorage.setItem('analytics_session_id', sessionId);\n    }\n    return sessionId;\n  }\n\n  /**\n   * Obtiene período actual\n   * @returns Período actual\n   */\n  private static getCurrentPeriod(): string {\n    const now = new Date();\n    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    return `${startOfMonth.toISOString().split('T')[0]} - ${now.toISOString().split('T')[0]}`;\n  }\n}\n\n// Export singleton instance\nexport const analyticsService = AnalyticsService.getInstance();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/appointmentService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/clinicalDecisionsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/emailActivationService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":63,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":63,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1736,1818],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":71,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":71,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2146,2229],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":79,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":79,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2422,2501],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2610,2663],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2708,2795],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":90,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":90,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2941,3000],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4390,4466],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":144,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":144,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4876,4949],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":154,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":154,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5355,5414],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":173,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":173,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6063,6146],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":206,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":206,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7051,7109],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":214,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":214,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7401,7454],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":229,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":229,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7882,7930],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":245,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":245,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8291,8353],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":286,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":286,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9483,9548],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":294,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":294,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9837,9911],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":301,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":301,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10022,10219],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":348,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":348,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11533,11606],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":354,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":354,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11756,11815],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":363,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":363,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12075,12128],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":372,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":372,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12414,12464],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":379,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":379,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12631,12722],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":399,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":399,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13446,13509],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":400,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":400,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13516,13577],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":401,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":401,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13584,13696],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":402,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":402,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13703,13930],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":443,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":443,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15134,15194],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":449,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":449,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15344,15403],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":458,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":458,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15659,15714],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":465,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":465,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15869,15935],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":468,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":468,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15998,16061],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":469,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":469,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16068,16189],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * EmailActivationService - Sistema completo de activación por email\n * Integración real con Firebase Firestore\n * \n * @version 2.0.0\n * @author CTO/Implementador Jefe\n */\n\nimport { collection, doc, setDoc, getDocs, query, where, updateDoc, deleteDoc } from 'firebase/firestore';\nimport { createUserWithEmailAndPassword, sendEmailVerification, fetchSignInMethodsForEmail } from 'firebase/auth';\n\nimport { db, auth } from '../lib/firebase';\n\nexport interface ProfessionalRegistration {\n  id: string;\n  email: string;\n  displayName: string;\n  professionalTitle: string;\n  specialty: string;\n  country: string;\n  city?: string;\n  province?: string;\n  phone?: string;\n  licenseNumber?: string;\n  registrationDate: Date;\n  activationToken: string;\n  isActive: boolean;\n  emailVerified: boolean;\n  lastLogin?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface EmailTemplate {\n  subject: string;\n  html: string;\n  text: string;\n}\n\nexport interface ActivationResult {\n  success: boolean;\n  message: string;\n  professionalId?: string;\n  activationToken?: string;\n}\n\nexport class EmailActivationService {\n  private static instance: EmailActivationService;\n\n  public static getInstance(): EmailActivationService {\n    if (!EmailActivationService.instance) {\n      EmailActivationService.instance = new EmailActivationService();\n    }\n    return EmailActivationService.instance;\n  }\n\n  /**\n   * Registra un nuevo profesional y envía email de activación\n   * Integrado con el nuevo sistema de contexto global\n   */\n  public async registerProfessional(professionalData: Omit<ProfessionalRegistration, 'id' | 'activationToken' | 'isActive' | 'emailVerified' | 'createdAt' | 'updatedAt'>): Promise<ActivationResult> {\n    try {\n      console.log('[DEBUG] Iniciando registro de profesional:', professionalData.email);\n\n      // Verificar si el email ya existe en Firestore\n      const professionalsRef = collection(db, 'professionals');\n      const emailQuery = query(professionalsRef, where('email', '==', professionalData.email.toLowerCase()));\n      const emailSnapshot = await getDocs(emailQuery);\n\n      if (!emailSnapshot.empty) {\n        console.log('❌ [DEBUG] Email ya registrado en Firestore:', professionalData.email);\n        return {\n          success: false,\n          message: 'Este email ya está registrado en el sistema'\n        };\n      }\n\n      // Verificar si el email ya existe en Firebase Auth\n      console.log('[DEBUG] Verificando Firebase Auth para:', professionalData.email);\n      try {\n        const methods = await fetchSignInMethodsForEmail(auth, professionalData.email);\n        console.log('[DEBUG] Métodos encontrados:', methods);\n        if (methods.length > 0) {\n          console.log('❌ [DEBUG] Email ya registrado en Firebase Auth:', professionalData.email);\n          return {\n            success: false,\n            message: 'Este email ya está registrado en el sistema'\n          };\n        }\n        console.log('✅ [DEBUG] Email disponible en Firebase Auth');\n      } catch (authCheckError) {\n        console.error('❌ [DEBUG] Error al verificar Firebase Auth:', authCheckError);\n        return {\n          success: false,\n          message: 'Error al verificar el email. Inténtalo de nuevo.'\n        };\n      }\n\n      // Generar token de activación único\n      const activationToken = this.generateActivationToken();\n      const professionalId = this.generateProfessionalId();\n      \n      // Crear registro del profesional\n      const professional: ProfessionalRegistration = {\n        ...professionalData,\n        id: professionalId,\n        activationToken,\n        isActive: false,\n        emailVerified: false,\n        registrationDate: new Date(),\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      // Guardar en Firestore en la colección 'users' para consistencia\n      const userDoc = doc(db, 'users', professionalId);\n      const firestoreData: Record<string, unknown> = {\n        ...professional,\n        registrationDate: professional.registrationDate.toISOString(),\n        createdAt: professional.createdAt.toISOString(),\n        updatedAt: professional.updatedAt.toISOString()\n      };\n      \n      // Solo agregar lastLogin si existe\n      if (professional.lastLogin) {\n        firestoreData.lastLogin = professional.lastLogin.toISOString();\n      }\n      \n      await setDoc(userDoc, firestoreData);\n\n      console.log('✅ [DEBUG] Profesional guardado en Firestore:', professionalId);\n\n      // Crear cuenta de usuario en Firebase Auth con contraseña temporal\n      try {\n        const userCredential = await createUserWithEmailAndPassword(\n          auth, \n          professionalData.email, \n          'tempPassword123!' // Contraseña temporal que será cambiada\n        );\n\n        // Enviar email de verificación de Firebase\n        await sendEmailVerification(userCredential.user);\n\n        console.log('✅ [DEBUG] Usuario creado en Firebase Auth y email enviado');\n\n        // Guardar token de activación en el documento del usuario\n        await updateDoc(userDoc, {\n          activationToken: activationToken,\n          tokenExpiry: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString() // 24 horas\n        });\n\n        // Mostrar link de activación para testing\n        const activationLink = `${window.location.origin}/activate?token=${activationToken}`;\n        console.log('[DEBUG] Link de activación:', activationLink);\n        \n        if (typeof window !== 'undefined') {\n          alert(`LINK DE ACTIVACIÓN PARA TESTING:\\n${activationLink}\\n\\nCopia este link y pégalo en el navegador para activar la cuenta.`);\n        }\n\n        return {\n          success: true,\n          message: 'Registro exitoso. Revisa tu email para activar tu cuenta.',\n          professionalId: professional.id,\n          activationToken\n        };\n\n      } catch (authError: unknown) {\n        console.error('❌ [DEBUG] Error en Firebase Auth:', authError);\n        \n        // Si falla la creación en Auth, eliminar de Firestore\n        try {\n          await deleteDoc(userDoc);\n          console.log('✅ [DEBUG] Registro eliminado de Firestore después del error de Auth');\n        } catch (deleteError) {\n          console.error('⚠️ [DEBUG] Error al eliminar registro de Firestore:', deleteError);\n        }\n        \n        const error = authError as { code?: string };\n        if (error.code === 'auth/email-already-in-use') {\n          return {\n            success: false,\n            message: 'Este email ya está registrado en el sistema'\n          };\n        }\n        \n        return {\n          success: false,\n          message: 'Error al crear la cuenta de usuario. Inténtalo de nuevo.'\n        };\n      }\n\n    } catch (error) {\n      console.error('❌ [DEBUG] Error en registro de profesional:', error);\n      return {\n        success: false,\n        message: 'Error interno del sistema. Contacta soporte.'\n      };\n    }\n  }\n\n  /**\n   * Activa la cuenta usando el token\n   */\n  public async activateAccount(token: string): Promise<ActivationResult> {\n    try {\n      console.log('[DEBUG] Activando cuenta con token:', token);\n\n      // Buscar usuario por token en la colección 'users'\n      const usersRef = collection(db, 'users');\n      const tokenQuery = query(usersRef, where('activationToken', '==', token));\n      const tokenSnapshot = await getDocs(tokenQuery);\n      \n      if (tokenSnapshot.empty) {\n        console.log('❌ [DEBUG] Token no encontrado:', token);\n        return {\n          success: false,\n          message: 'Token de activación inválido o expirado'\n        };\n      }\n\n      const userDoc = tokenSnapshot.docs[0];\n      const userData = userDoc.data();\n      const email = userData.email;\n\n      // Verificar expiración (si existe)\n      if (userData.tokenExpiry) {\n        const expiresAt = new Date(userData.tokenExpiry);\n        if (expiresAt < new Date()) {\n          console.log('❌ [DEBUG] Token expirado:', token);\n          return {\n            success: false,\n            message: 'Token de activación expirado'\n          };\n        }\n      }\n\n      // Activar cuenta\n      await updateDoc(userDoc.ref, {\n        isActive: true,\n        emailVerified: true,\n        activationToken: null, // Limpiar token usado\n        updatedAt: new Date().toISOString()\n      });\n\n      console.log('✅ [DEBUG] Cuenta activada exitosamente:', email);\n\n      return {\n        success: true,\n        message: 'Cuenta activada exitosamente. Ya puedes iniciar sesión.',\n        professionalId: userDoc.id\n      };\n\n    } catch (error) {\n      console.error('❌ [DEBUG] Error en activación:', error);\n      return {\n        success: false,\n        message: 'Error interno del sistema. Contacta soporte.'\n      };\n    }\n  }\n\n  /**\n   * Verifica si un profesional está activo\n   */\n  public async isProfessionalActive(email: string): Promise<boolean> {\n    try {\n      const professionalsRef = collection(db, 'professionals');\n      const emailQuery = query(professionalsRef, where('email', '==', email.toLowerCase()));\n      const snapshot = await getDocs(emailQuery);\n\n      if (snapshot.empty) return false;\n\n      const professional = snapshot.docs[0].data();\n      return professional.isActive === true;\n    } catch (error) {\n      console.error('Error verificando estado del profesional:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Obtiene datos del profesional\n   */\n  public async getProfessional(email: string): Promise<ProfessionalRegistration | null> {\n    try {\n      console.log('[DEBUG] Buscando profesional en Firestore:', email);\n      \n      // Buscar en la colección 'users' (no 'professionals')\n      const usersRef = collection(db, 'users');\n      const emailQuery = query(usersRef, where('email', '==', email.toLowerCase()));\n      const snapshot = await getDocs(emailQuery);\n\n      if (snapshot.empty) {\n        console.log('❌ [DEBUG] Usuario no encontrado en colección users:', email);\n        return null;\n      }\n\n      const doc = snapshot.docs[0];\n      const data = doc.data();\n      \n      console.log('✅ [DEBUG] Usuario encontrado:', {\n        email: data.email,\n        displayName: data.displayName,\n        emailVerified: data.emailVerified,\n        isActive: data.isActive\n      });\n      \n      return {\n        ...data,\n        registrationDate: new Date(data.registrationDate || data.createdAt),\n        createdAt: new Date(data.createdAt),\n        updatedAt: new Date(data.updatedAt),\n        lastLogin: data.lastLogin ? new Date(data.lastLogin) : undefined\n      } as ProfessionalRegistration;\n    } catch (error) {\n      console.error('❌ [DEBUG] Error obteniendo profesional:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Actualiza último login\n   */\n  public async updateLastLogin(email: string): Promise<void> {\n    try {\n      const usersRef = collection(db, 'users');\n      const emailQuery = query(usersRef, where('email', '==', email.toLowerCase()));\n      const snapshot = await getDocs(emailQuery);\n\n      if (!snapshot.empty) {\n        const docRef = doc(db, 'users', snapshot.docs[0].id);\n        await updateDoc(docRef, {\n          lastLogin: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        });\n      }\n    } catch (error) {\n      console.error('Error actualizando último login:', error);\n    }\n  }\n\n  /**\n   * Envía email de recuperación de contraseña\n   * Solo envía si el email está verificado y activo en Firestore\n   */\n  public async sendPasswordRecovery(email: string): Promise<{ success: boolean; message: string }> {\n    try {\n      console.log('[DEBUG] Iniciando recuperación de contraseña para:', email);\n\n      // Verificar si el profesional existe\n      const professional = await this.getProfessional(email);\n      \n      if (!professional) {\n        console.log('❌ [DEBUG] Profesional no encontrado:', email);\n        return {\n          success: false,\n          message: 'No se encontró una cuenta con este email. Verifica la dirección o regístrate.'\n        };\n      }\n\n      // Verificar que el email esté verificado\n      if (!professional.emailVerified) {\n        console.log('❌ [DEBUG] Email no verificado:', email);\n        return {\n          success: false,\n          message: 'Tu cuenta no está verificada. Revisa tu email y activa tu cuenta antes de solicitar recuperación de contraseña.'\n        };\n      }\n\n      // Verificar que la cuenta esté activa\n      if (!professional.isActive) {\n        console.log('❌ [DEBUG] Cuenta no activa:', email);\n        return {\n          success: false,\n          message: 'Tu cuenta no está activa. Contacta al administrador para activar tu cuenta.'\n        };\n      }\n\n      console.log('✅ [DEBUG] Usuario verificado y activo, procediendo con recuperación:', email);\n\n      // Generar token de recuperación único\n      const recoveryToken = this.generateRecoveryToken();\n      \n      // Guardar token de recuperación en Firestore\n      const usersRef = collection(db, 'users');\n      const emailQuery = query(usersRef, where('email', '==', email.toLowerCase()));\n      const snapshot = await getDocs(emailQuery);\n\n      if (!snapshot.empty) {\n        const docRef = doc(db, 'users', snapshot.docs[0].id);\n        await updateDoc(docRef, {\n          recoveryToken,\n          recoveryTokenExpiry: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 24 horas\n          updatedAt: new Date().toISOString()\n        });\n      }\n\n      // En desarrollo, mostrar el token en consola\n      console.log('[DEBUG] Email de recuperación enviado a:', email);\n      console.log('[DEBUG] Token de recuperación:', recoveryToken);\n      console.log('[DEBUG] Link de recuperación:', `${window.location.origin}/reset-password?token=${recoveryToken}`);\n      console.log('✅ [DEBUG] Usuario validado:', {\n        email: professional.email,\n        displayName: professional.displayName,\n        emailVerified: professional.emailVerified,\n        isActive: professional.isActive\n      });\n\n      // En producción, aquí se enviaría el email real usando un servicio como SendGrid, AWS SES, etc.\n      // await this.sendEmail({\n      //   to: email,\n      //   subject: 'Recuperación de contraseña - AiDuxCare',\n      //   html: this.generatePasswordRecoveryEmail(professional.displayName, recoveryToken),\n      //   text: this.generatePasswordRecoveryEmailText(professional.displayName, recoveryToken)\n      // });\n\n      return {\n        success: true,\n        message: 'Se ha enviado un enlace de recuperación a tu email. Revisa tu bandeja de entrada.'\n      };\n\n    } catch (error) {\n      console.error('❌ [DEBUG] Error en recuperación de contraseña:', error);\n      return {\n        success: false,\n        message: 'Error al procesar la solicitud. Inténtalo de nuevo.'\n      };\n    }\n  }\n\n  /**\n   * Genera token de recuperación único\n   */\n  private generateRecoveryToken(): string {\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  }\n\n  /**\n   * Reenvía email de verificación para usuarios no verificados\n   */\n  public async resendEmailVerification(email: string): Promise<{ success: boolean; message: string }> {\n    try {\n      console.log('[DEBUG] Reenviando verificación para:', email);\n\n      // Verificar si el profesional existe\n      const professional = await this.getProfessional(email);\n      \n      if (!professional) {\n        console.log('❌ [DEBUG] Profesional no encontrado:', email);\n        return {\n          success: false,\n          message: 'No se encontró una cuenta con este email. Verifica la dirección o regístrate.'\n        };\n      }\n\n      // Solo reenviar si no está verificado\n      if (professional.emailVerified) {\n        console.log('✅ [DEBUG] Usuario ya verificado:', email);\n        return {\n          success: true,\n          message: 'Tu cuenta ya está verificada. Puedes iniciar sesión normalmente.'\n        };\n      }\n\n      console.log('[DEBUG] Reenviando email de verificación a:', email);\n\n      // En desarrollo, mostrar información en consola\n      console.log('[DEBUG] Email de verificación enviado a:', email);\n      console.log('[DEBUG] Link de verificación:', `${window.location.origin}/activate?token=${professional.activationToken}`);\n\n      // En producción, aquí se enviaría el email real\n      // await this.sendEmail({\n      //   to: email,\n      //   subject: 'Verifica tu cuenta - AiDuxCare',\n      //   html: this.generateVerificationEmail(professional.displayName, professional.activationToken),\n      //   text: this.generateVerificationEmailText(professional.displayName, professional.activationToken)\n      // });\n\n      return {\n        success: true,\n        message: 'Se ha reenviado el email de verificación. Revisa tu bandeja de entrada.'\n      };\n\n    } catch (error) {\n      console.error('❌ [DEBUG] Error reenviando verificación:', error);\n      return {\n        success: false,\n        message: 'Error al reenviar verificación. Inténtalo de nuevo.'\n      };\n    }\n  }\n\n\n\n  /**\n   * Obtiene estadísticas del sistema\n   */\n  public async getSystemStats() {\n    try {\n      const professionalsRef = collection(db, 'professionals');\n      const snapshot = await getDocs(professionalsRef);\n      \n      const total = snapshot.size;\n      const active = snapshot.docs.filter(doc => doc.data().isActive).length;\n      const pending = total - active;\n\n      return {\n        total,\n        active,\n        pending,\n        lastUpdated: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Error obteniendo estadísticas:', error);\n      return {\n        total: 0,\n        active: 0,\n        pending: 0,\n        lastUpdated: new Date().toISOString()\n      };\n    }\n  }\n\n  /**\n   * Genera ID único para profesional\n   */\n  private generateProfessionalId(): string {\n    return `prof_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Genera token de activación único\n   */\n  private generateActivationToken(): string {\n    return `act_${Date.now()}_${Math.random().toString(36).substr(2, 12)}`;\n  }\n}\n\n// Exportar instancia singleton\nexport const emailActivationService = EmailActivationService.getInstance(); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/emailValidationService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1995,2052],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2295,2350],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * EmailValidationService - Validación temprana de email\n * Verifica si el email ya existe y ofrece opciones de recuperación\n * \n * @version 1.0.0\n * @author AiDuxCare Development Team\n */\n\nexport interface EmailValidationResult {\n  exists: boolean;\n  isActive: boolean;\n  lastLogin?: Date;\n  canRecover: boolean;\n  canActivate: boolean;\n  message?: string;\n}\n\nexport interface EmailRecoveryOptions {\n  email: string;\n  recoveryType: 'password' | 'activation' | 'both';\n}\n\nexport class EmailValidationService {\n  private static instance: EmailValidationService;\n  private existingEmails: Set<string> = new Set([]);\n  private activeEmails: Set<string> = new Set([]);\n\n  public static getInstance(): EmailValidationService {\n    if (!EmailValidationService.instance) {\n      EmailValidationService.instance = new EmailValidationService();\n    }\n    return EmailValidationService.instance;\n  }\n\n  /**\n   * Valida si el email ya existe en el sistema\n   */\n  public async validateEmail(email: string): Promise<EmailValidationResult> {\n    // Simular delay de red\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    const exists = this.existingEmails.has(email.toLowerCase());\n    const isActive = this.activeEmails.has(email.toLowerCase());\n\n    if (!exists) {\n      return {\n        exists: false,\n        isActive: false,\n        canRecover: false,\n        canActivate: false\n      };\n    }\n\n    return {\n      exists: true,\n      isActive,\n      lastLogin: isActive ? new Date(Date.now() - 24 * 60 * 60 * 1000) : undefined,\n      canRecover: true,\n      canActivate: !isActive,\n      message: isActive \n        ? 'Esta cuenta ya está activa. ¿Olvidaste tu contraseña?'\n        : 'Esta cuenta existe pero no está activada. ¿Quieres activarla?'\n    };\n  }\n\n  /**\n   * Envía email de recuperación de contraseña\n   */\n  public async sendPasswordRecovery(email: string): Promise<boolean> {\n    // Simular envío de email\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    console.log(`Email de recuperación enviado a: ${email}`);\n    return true;\n  }\n\n  /**\n   * Envía email de activación de cuenta\n   */\n  public async sendAccountActivation(email: string): Promise<boolean> {\n    // Simular envío de email\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    console.log(`Email de activación enviado a: ${email}`);\n    return true;\n  }\n\n  /**\n   * Verifica el formato del email\n   */\n  public validateEmailFormat(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n}\n\nexport const emailValidationService = EmailValidationService.getInstance(); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/firebaseAuthService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2400,2445],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2452,2493],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2500,2576],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2583,2654],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":108,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":108,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2883,2945],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":109,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":109,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2954,3004],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":110,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":110,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3013,3058],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":113,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":113,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3131,3195],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":125,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":125,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3709,3776],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":126,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":126,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3787,3832],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3899,3955],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":133,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":133,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4147,4215],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":134,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":134,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4228,4273],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":139,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":139,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4364,4425],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":140,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":140,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4436,4481],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":155,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":155,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4797,4840],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4847,4900],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":157,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":157,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4907,4983],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":158,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":158,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4990,5061],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":172,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":172,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5613,5665],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":183,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":183,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6047,6101],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":184,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":184,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6108,6161],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":192,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":192,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6357,6402],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":193,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":193,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6409,6454],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * FirebaseAuthService - Servicio de autenticación con Firebase\n * Maneja login, logout y verificación de email\n * \n * @version 1.0.0\n * @author AiDuxCare Development Team\n */\n\nimport { \n  signInWithEmailAndPassword, \n  signOut, \n  sendEmailVerification,\n  sendPasswordResetEmail,\n  sendSignInLinkToEmail,\n  createUserWithEmailAndPassword,\n  fetchSignInMethodsForEmail,\n  User as FirebaseUser,\n  ActionCodeSettings\n} from 'firebase/auth';\n\nimport { auth } from '../lib/firebase';\n\nexport interface AuthResult {\n  success: boolean;\n  message: string;\n  user?: FirebaseUser;\n}\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\n/**\n * Servicio de autenticación Firebase\n */\nexport class FirebaseAuthService {\n  \n  /**\n   * Iniciar sesión con email y contraseña\n   */\n  public static async login(credentials: LoginCredentials): Promise<AuthResult> {\n    try {\n      const { email, password } = credentials;\n      \n      // Normalizar email\n      const normalizedEmail = email.trim().toLowerCase();\n      \n      const userCredential = await signInWithEmailAndPassword(auth, normalizedEmail, password);\n      const user = userCredential.user;\n      \n      // Verificar si el email está verificado\n      if (!user.emailVerified) {\n        await signOut(auth);\n        return {\n          success: false,\n          message: 'Email no verificado. Revisa tu bandeja de entrada.'\n        };\n      }\n      \n      return {\n        success: true,\n        message: 'Sesión iniciada exitosamente',\n        user\n      };\n      \n    } catch (error: unknown) {\n      console.error('Error en login:', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';\n      \n      if (errorMessage.includes('user-not-found') || errorMessage.includes('wrong-password')) {\n        return {\n          success: false,\n          message: 'Email o contraseña incorrectos'\n        };\n      }\n      \n      if (errorMessage.includes('too-many-requests')) {\n        return {\n          success: false,\n          message: 'Demasiados intentos. Inténtalo más tarde.'\n        };\n      }\n      \n      return {\n        success: false,\n        message: 'Error al iniciar sesión. Inténtalo de nuevo.'\n      };\n    }\n  }\n  \n  /**\n   * Verificar si un email ya está registrado\n   */\n  public static async checkEmailExists(email: string): Promise<boolean> {\n    try {\n      console.log('=== VERIFICACIÓN DE EMAIL ===');\n      console.log('Email a verificar:', email);\n      console.log('Proyecto Firebase:', import.meta.env.VITE_FIREBASE_PROJECT_ID);\n      console.log('Auth Domain:', import.meta.env.VITE_FIREBASE_AUTH_DOMAIN);\n      \n      const normalizedEmail = email.trim().toLowerCase();\n      \n      // Usar try-catch específico para esta operación\n      try {\n        const methods = await fetchSignInMethodsForEmail(auth, normalizedEmail);\n        console.log('Métodos de autenticación encontrados:', methods);\n        console.log('¿Email existe?', methods.length > 0);\n        console.log('=============================');\n        return methods.length > 0;\n      } catch (fetchError) {\n        console.log('Error en fetchSignInMethodsForEmail:', fetchError);\n        \n        // Si hay error, intentar con createUserWithEmailAndPassword para verificar\n        try {\n          // Crear un usuario temporal para verificar si existe\n          const tempPassword = 'TempPassword123!';\n          const userCredential = await createUserWithEmailAndPassword(auth, normalizedEmail, tempPassword);\n          \n          // Si llegamos aquí, el usuario se creó (no existía)\n          // Lo eliminamos inmediatamente\n          await userCredential.user.delete();\n          \n          console.log('Email NO existe (verificación por creación exitosa)');\n          console.log('=============================');\n          return false;\n        } catch (createError) {\n          console.log('Error en creación temporal:', createError);\n          \n          // Si el error es email-already-in-use, entonces existe\n          if (createError instanceof Error && createError.message.includes('email-already-in-use')) {\n            console.log('Email SÍ existe (verificación por error de creación)');\n            console.log('=============================');\n            return true;\n          }\n          \n          // Otro tipo de error\n          console.log('Error desconocido, asumiendo que email existe');\n          console.log('=============================');\n          return true;\n        }\n      }\n    } catch (error) {\n      console.error('Error verificando email:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Registrar nuevo usuario con email y contraseña\n   */\n  public static async register(credentials: LoginCredentials): Promise<AuthResult> {\n    try {\n      console.log('=== REGISTRO DE USUARIO ===');\n      console.log('Email a registrar:', credentials.email);\n      console.log('Proyecto Firebase:', import.meta.env.VITE_FIREBASE_PROJECT_ID);\n      console.log('Auth Domain:', import.meta.env.VITE_FIREBASE_AUTH_DOMAIN);\n      \n      // VERIFICACIÓN CRÍTICA: Asegurar que estamos usando UAT DEV\n      const currentProject = import.meta.env.VITE_FIREBASE_PROJECT_ID;\n      if (!currentProject || !currentProject.includes('uat')) {\n        console.error('❌ ERROR CRÍTICO: No estamos usando UAT!');\n        console.error('Proyecto actual:', currentProject);\n        console.error('Se requiere: proyecto que contenga \"uat\"');\n        return {\n          success: false,\n          message: 'Error de configuración: Debe usar UAT para desarrollo'\n        };\n      }\n      \n      console.log('✅ CONFIGURACIÓN CORRECTA: Usando UAT');\n      \n      const { email, password } = credentials;\n      \n      // Normalizar email\n      const normalizedEmail = email.trim().toLowerCase();\n      \n      // Crear usuario en Firebase Auth (Firebase manejará la verificación)\n      const userCredential = await createUserWithEmailAndPassword(auth, normalizedEmail, password);\n      const user = userCredential.user;\n      \n      console.log('Usuario creado exitosamente:', user.uid);\n      console.log('Email verificado:', user.emailVerified);\n      \n      // Enviar email de verificación\n      await this.sendEmailVerification(user);\n      \n      // Cerrar sesión para forzar verificación de email\n      await signOut(auth);\n      \n      console.log('Email de verificación enviado');\n      console.log('=============================');\n      \n      return {\n        success: true,\n        message: 'Usuario registrado exitosamente. Revisa tu email para verificar tu cuenta.',\n        user\n      };\n      \n    } catch (error: unknown) {\n      console.error('Error en registro:', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';\n      \n      if (errorMessage.includes('email-already-in-use')) {\n        return {\n          success: false,\n          message: 'Este email ya está registrado. Intenta iniciar sesión o usa un email diferente.'\n        };\n      }\n      \n      if (errorMessage.includes('weak-password')) {\n        return {\n          success: false,\n          message: 'La contraseña es demasiado débil. Usa al menos 6 caracteres.'\n        };\n      }\n      \n      if (errorMessage.includes('invalid-email')) {\n        return {\n          success: false,\n          message: 'El formato del email no es válido.'\n        };\n      }\n      \n      return {\n        success: false,\n        message: 'Error al registrar usuario. Inténtalo de nuevo.'\n      };\n    }\n  }\n\n  /**\n   * Cerrar sesión\n   */\n  public static async logout(): Promise<AuthResult> {\n    try {\n      await signOut(auth);\n      \n      return {\n        success: true,\n        message: 'Sesión cerrada exitosamente'\n      };\n      \n    } catch (error: unknown) {\n      console.error('Error en logout:', error);\n      \n      return {\n        success: false,\n        message: 'Error al cerrar sesión'\n      };\n    }\n  }\n  \n  /**\n   * Enviar email de verificación\n   */\n  public static async sendEmailVerification(user: FirebaseUser): Promise<AuthResult> {\n    try {\n      const actionCodeSettings: ActionCodeSettings = {\n        url: `${window.location.origin}/email-verified`,\n        handleCodeInApp: true,\n      };\n      \n      await sendEmailVerification(user, actionCodeSettings);\n      \n      return {\n        success: true,\n        message: 'Email de verificación enviado'\n      };\n      \n    } catch (error: unknown) {\n      console.error('Error enviando verificación:', error);\n      \n      return {\n        success: false,\n        message: 'Error al enviar email de verificación'\n      };\n    }\n  }\n  \n  /**\n   * Verificar si el email está verificado\n   */\n  public static isEmailVerified(user: FirebaseUser): boolean {\n    return user.emailVerified;\n  }\n\n  /**\n   * Enviar email de reset de contraseña\n   */\n  public static async sendPasswordResetEmail(email: string): Promise<AuthResult> {\n    try {\n      const normalizedEmail = email.trim().toLowerCase();\n      \n      await sendPasswordResetEmail(auth, normalizedEmail, {\n        url: `${window.location.origin}/reset-complete`\n      });\n      \n      return {\n        success: true,\n        message: 'Email de recuperación enviado'\n      };\n      \n    } catch (error: unknown) {\n      console.error('Error enviando reset de contraseña:', error);\n      \n      // No revelar si el email existe o no\n      return {\n        success: true,\n        message: 'Si el email está registrado, recibirás un enlace de recuperación'\n      };\n    }\n  }\n\n  /**\n   * Enviar link mágico para re-engagement de registro incompleto\n   */\n  public static async sendReEngagementEmail(email: string): Promise<AuthResult> {\n    try {\n      const normalizedEmail = email.trim().toLowerCase();\n      \n      const actionCodeSettings: ActionCodeSettings = {\n        url: `${window.location.origin}/resume-onboarding`,\n        handleCodeInApp: true,\n      };\n      \n      await sendSignInLinkToEmail(auth, normalizedEmail, actionCodeSettings);\n      \n      return {\n        success: true,\n        message: 'Link de re-engagement enviado'\n      };\n      \n    } catch (error: unknown) {\n      console.error('Error enviando link de re-engagement:', error);\n      \n      return {\n        success: false,\n        message: 'Error al enviar link de re-engagement'\n      };\n    }\n  }\n}\n\n// Exportar instancia singleton\nexport const firebaseAuthService = FirebaseAuthService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/geolocationHelper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/geolocationService.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'PermissionName' is not defined.","line":63,"column":79,"nodeType":"Identifier","messageId":"undef","endLine":63,"endColumn":93},{"ruleId":"no-undef","severity":2,"message":"'GeolocationPosition' is not defined.","line":79,"column":40,"nodeType":"Identifier","messageId":"undef","endLine":79,"endColumn":59}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Geolocation service – API estable para el wizard y pruebas.\n * Sin any/unknown. Tipado estricto.\n */\n\nexport type PhoneCountryCode = {\n  code: string;   // ej: +34\n  iso2: string;   // ej: ES\n  name: string;   // ej: Spain\n};\n\nexport type GeolocationData = {\n  country: string;          // nombre país (ej: Spain)\n  city?: string | null;\n  region?: string | null;   // estado/provincia si aplica\n  countryCode?: string | null; // ISO-2 (ej: ES)\n  timestamp: Date;\n  source: 'browser' | 'ip' | 'manual';\n};\n\nexport type LegalRequirement = {\n  name: string;\n  description?: string;\n};\n\nexport type LegalCompliance = {\n  jurisdiction: string; // ej: EU / US / CA / ES\n  specialRequirements: LegalRequirement[];\n};\n\nexport type ComplianceConfig = {\n  regulations: Array<{ name: string; ref?: string }>;\n  legal: LegalCompliance[];\n};\n\nclass GeolocationService {\n  // Singleton\n  private static _instance: GeolocationService | null = null;\n  static getInstance(): GeolocationService {\n    if (!this._instance) this._instance = new GeolocationService();\n    return this._instance;\n  }\n\n  // Lista mínima y tipada de códigos de país para el selector\n  private readonly phoneCodes: PhoneCountryCode[] = [\n    { code: '+34', iso2: 'ES', name: 'Spain' },\n    { code: '+1',  iso2: 'US', name: 'United States' },\n    { code: '+1',  iso2: 'CA', name: 'Canada' },\n    { code: '+52', iso2: 'MX', name: 'Mexico' },\n    { code: '+56', iso2: 'CL', name: 'Chile' },\n  ];\n\n  getAllPhoneCountryCodes(): PhoneCountryCode[] {\n    return [...this.phoneCodes];\n  }\n\n  isGeolocationSupported(): boolean {\n    return typeof navigator !== 'undefined' && !!navigator.geolocation;\n  }\n\n  async checkGeolocationPermission(): Promise<'granted'|'denied'|'prompt'> {\n    if (typeof navigator === 'undefined' || !('permissions' in navigator)) return 'prompt';\n    const status = await navigator.permissions.query({ name: 'geolocation' as PermissionName });\n    return status.state as 'granted'|'denied'|'prompt';\n  }\n\n  async getLocation(): Promise<GeolocationData> {\n    if (!this.isGeolocationSupported()) {\n      // Degradación amable\n      return {\n        country: '',\n        city: null,\n        region: null,\n        countryCode: null,\n        timestamp: new Date(),\n        source: 'manual',\n      };\n    }\n    const position = await new Promise<GeolocationPosition>((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(resolve, reject, { enableHighAccuracy: false, maximumAge: 60000, timeout: 5000 });\n    });\n\n    // No resolvemos a dirección inversa aquí (evita dependencias externas).\n    // Dejamos country/region vacíos; el consumidor puede usar detección por IP si necesita.\n    return {\n      country: '',\n      city: null,\n      region: null,\n      countryCode: null,\n      timestamp: new Date(position.timestamp),\n      source: 'browser',\n    };\n    }\n\n  // Alias para compatibilidad retro\n  async detectLocation(): Promise<GeolocationData> {\n    return this.getLocation();\n  }\n\n  async detectLocationByIP(): Promise<GeolocationData> {\n    // Implementación de fallback sin llamada externa: devolvemos estructura válida.\n    return {\n      country: '',\n      city: null,\n      region: null,\n      countryCode: null,\n      timestamp: new Date(),\n      source: 'ip',\n    };\n  }\n\n  async getRelevantRegulations(): Promise<ComplianceConfig> {\n    // Mínimo viable para el wizard y páginas de prueba\n    return {\n      regulations: [\n        { name: 'GDPR' },\n        { name: 'HIPAA' },\n        { name: 'PIPEDA' }\n      ],\n      legal: [\n        {\n          jurisdiction: 'EU',\n          specialRequirements: [{ name: 'Consentimiento explícito' }]\n        },\n        {\n          jurisdiction: 'US',\n          specialRequirements: [{ name: 'HIPAA BAAs' }]\n        },\n        {\n          jurisdiction: 'CA',\n          specialRequirements: [{ name: 'PIPEDA safeguards' }]\n        }\n      ]\n    };\n  }\n}\n\n// Export canónico: singleton + tipo de clase (para quien lo necesite)\nexport const geolocationService = GeolocationService.getInstance();\nexport { GeolocationService };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/legalConsentService.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":79,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":79,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2250,2310],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":146,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":146,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4014,4068],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":168,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":168,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4716,4778],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Legal Consent Service - AiDuxCare V.2\n * Servicio para manejo seguro del consentimiento legal\n * \n * @version 1.0.0\n * @author CTO/Implementador Jefe\n */\n\nexport interface LegalConsent {\n  termsAccepted: boolean;\n  privacyAccepted: boolean;\n  medicalDisclaimerAccepted: boolean;\n  consentTimestamp: Date | null;\n  userId?: string;\n  sessionId?: string;\n  ipAddress?: string;\n  userAgent?: string;\n  version: string;\n}\n\nexport interface ConsentAuditLog {\n  id: string;\n  userId: string;\n  action: 'GRANTED' | 'REVOKED' | 'UPDATED';\n  consentType: 'TERMS' | 'PRIVACY' | 'MEDICAL_DISCLAIMER';\n  timestamp: Date;\n  ipAddress: string;\n  userAgent: string;\n  version: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport class LegalConsentService {\n  private static instance: LegalConsentService;\n  private consentStorageKey = 'aiduxcare_legal_consent';\n  private auditLogKey = 'aiduxcare_consent_audit';\n\n  private constructor() {}\n\n  public static getInstance(): LegalConsentService {\n    if (!LegalConsentService.instance) {\n      LegalConsentService.instance = new LegalConsentService();\n    }\n    return LegalConsentService.instance;\n  }\n\n  /**\n   * Guarda el consentimiento legal de forma segura\n   */\n  public async saveConsent(consent: LegalConsent): Promise<void> {\n    try {\n      // Validar que todos los consentimientos estén aceptados\n      if (!this.validateConsent(consent)) {\n        throw new Error('Todos los consentimientos deben ser aceptados');\n      }\n\n      // Agregar metadatos de auditoría\n      const consentWithMetadata: LegalConsent = {\n        ...consent,\n        version: '1.0.0',\n        userAgent: navigator.userAgent,\n        // IP address se obtendría del backend en producción\n      };\n\n      // Guardar en localStorage (en producción sería en base de datos)\n      localStorage.setItem(this.consentStorageKey, JSON.stringify(consentWithMetadata));\n\n      // Registrar en auditoría\n      await this.logConsentAction({\n        action: 'GRANTED',\n        consentType: 'TERMS',\n        userId: consent.userId || 'anonymous',\n        timestamp: new Date(),\n        ipAddress: 'client-side', // En producción se obtendría del servidor\n        userAgent: navigator.userAgent,\n        version: '1.0.0'\n      });\n\n      console.log('✅ Consentimiento legal guardado exitosamente');\n    } catch (error) {\n      console.error('❌ Error al guardar consentimiento:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obtiene el consentimiento actual del usuario\n   */\n  public getCurrentConsent(): LegalConsent | null {\n    try {\n      const stored = localStorage.getItem(this.consentStorageKey);\n      if (!stored) return null;\n\n      const consent = JSON.parse(stored) as LegalConsent;\n      return {\n        ...consent,\n        consentTimestamp: consent.consentTimestamp ? new Date(consent.consentTimestamp) : null\n      };\n    } catch (error) {\n      console.error('❌ Error al obtener consentimiento:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Verifica si el usuario tiene consentimiento válido\n   */\n  public hasValidConsent(): boolean {\n    const consent = this.getCurrentConsent();\n    if (!consent) return false;\n\n    return this.validateConsent(consent);\n  }\n\n  /**\n   * Valida que todos los consentimientos requeridos estén aceptados\n   */\n  private validateConsent(consent: LegalConsent): boolean {\n    return (\n      consent.termsAccepted &&\n      consent.privacyAccepted &&\n      consent.medicalDisclaimerAccepted &&\n      consent.consentTimestamp !== null\n    );\n  }\n\n  /**\n   * Revoca el consentimiento del usuario\n   */\n  public async revokeConsent(userId: string): Promise<void> {\n    try {\n      // Eliminar consentimiento\n      localStorage.removeItem(this.consentStorageKey);\n\n      // Registrar revocación\n      await this.logConsentAction({\n        action: 'REVOKED',\n        consentType: 'TERMS',\n        userId,\n        timestamp: new Date(),\n        ipAddress: 'client-side',\n        userAgent: navigator.userAgent,\n        version: '1.0.0'\n      });\n\n      console.log('✅ Consentimiento revocado exitosamente');\n    } catch (error) {\n      console.error('❌ Error al revocar consentimiento:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Registra acciones de consentimiento para auditoría\n   */\n  private async logConsentAction(auditEntry: Omit<ConsentAuditLog, 'id'>): Promise<void> {\n    try {\n      const auditLog = this.getAuditLog();\n      const newEntry: ConsentAuditLog = {\n        ...auditEntry,\n        id: `consent_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n      };\n\n      auditLog.push(newEntry);\n      localStorage.setItem(this.auditLogKey, JSON.stringify(auditLog));\n\n      // En producción, esto se enviaría al servidor\n      console.log('Acción de consentimiento registrada:', newEntry);\n    } catch (error) {\n      console.error('❌ Error al registrar acción de consentimiento:', error);\n    }\n  }\n\n  /**\n   * Obtiene el log de auditoría\n   */\n  private getAuditLog(): ConsentAuditLog[] {\n    try {\n      const stored = localStorage.getItem(this.auditLogKey);\n      if (!stored) return [];\n\n      const log = JSON.parse(stored) as ConsentAuditLog[];\n      return log.map(entry => ({\n        ...entry,\n        timestamp: new Date(entry.timestamp)\n      }));\n    } catch (error) {\n      console.error('❌ Error al obtener log de auditoría:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Genera un reporte de consentimiento para compliance\n   */\n  public generateConsentReport(): {\n    hasValidConsent: boolean;\n    consentDate: Date | null;\n    lastUpdated: Date | null;\n    auditEntries: number;\n  } {\n    const consent = this.getCurrentConsent();\n    const auditLog = this.getAuditLog();\n\n    return {\n      hasValidConsent: this.hasValidConsent(),\n      consentDate: consent?.consentTimestamp || null,\n      lastUpdated: consent?.consentTimestamp || null,\n      auditEntries: auditLog.length\n    };\n  }\n\n  /**\n   * Exporta datos de consentimiento para cumplimiento regulatorio\n   */\n  public exportConsentData(): {\n    consent: LegalConsent | null;\n    auditLog: ConsentAuditLog[];\n    report: ReturnType<LegalConsentService['generateConsentReport']>;\n  } {\n    return {\n      consent: this.getCurrentConsent(),\n      auditLog: this.getAuditLog(),\n      report: this.generateConsentReport()\n    };\n  }\n}\n\n// Exportar instancia singleton\nexport const legalConsentService = LegalConsentService.getInstance(); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/nlpServiceOllama.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3015,3085],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":94,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":94,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3321,3401],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4318,4383],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":144,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":144,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5178,5259],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":196,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":196,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6935,7077],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":212,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":212,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7576,7667],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":277,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":277,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9947,10078],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":306,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":306,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11332,11423],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":330,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":330,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12462,12649],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🧬 AiDuxCare - Servicio NLP con Ollama + RAG\n * Procesamiento de lenguaje natural para fisioterapia usando LLM local + evidencia científica\n */\n\nimport { ollamaClient } from '../lib/ollama';\nimport { ClinicalEntity, SOAPNotes, ProcessingMetrics } from '../types/nlp';\nimport { RAGMedicalMCP } from '../core/mcp/RAGMedicalMCP';\n\nexport class NLPServiceOllama {\n  \n  /**\n   * Extrae entidades clínicas de una transcripción médica con RAG\n   */\n  static async extractClinicalEntities(transcript: string, useRAG: boolean = true): Promise<ClinicalEntity[]> {\n    const startTime = Date.now();\n    \n    try {\n      // Prompt optimizado para extracción de entidades\n      const prompt = `<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n\nEres un experto en procesamiento de lenguaje natural médico. Extrae entidades clínicas específicas de fisioterapia.\n\n<|eot_id|><|start_header_id|>user<|end_header_id|>\n\nTranscripción de sesión de fisioterapia:\n\"${transcript.substring(0, 1000)}\"\n\nExtrae y clasifica entidades en estas categorías:\n- symptom: síntomas reportados por el paciente\n- finding: hallazgos objetivos del fisioterapeuta\n- diagnosis: diagnósticos o condiciones\n- treatment: tratamientos, ejercicios, técnicas\n- anatomy: partes del cuerpo, músculos, articulaciones\n- assessment: evaluaciones, tests, mediciones\n\nResponde SOLO en formato JSON:\n[\n  {\"type\": \"symptom\", \"text\": \"dolor lumbar\", \"confidence\": 0.9},\n  {\"type\": \"anatomy\", \"text\": \"columna vertebral\", \"confidence\": 0.8}\n]\n\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n\n`;\n\n      const result = await ollamaClient.generateCompletion(prompt, {\n        temperature: 0.1,\n        max_tokens: 500\n      });\n\n      // Parse JSON response\n      const jsonMatch = result.response.match(/\\[[\\s\\S]*\\]/);\n      let entities: ClinicalEntity[] = [];\n      \n      if (jsonMatch) {\n        try {\n          const parsed = JSON.parse(jsonMatch[0]);\n          entities = parsed.map((entity: { type?: string; text?: string; confidence?: number }, index: number) => ({\n            id: `entity_${Date.now()}_${index}`,\n            type: entity.type || 'other',\n            text: entity.text || '',\n            confidence: entity.confidence || 0.5,\n            context: transcript.substring(0, 200),\n            position: { start: 0, end: entity.text?.length || 0 }\n          }));\n        } catch (parseError) {\n          console.error('Error parsing entities JSON:', parseError);\n          entities = this.extractEntitiesWithRegex(transcript);\n        }\n      } else {\n        console.warn('No JSON found in response, using regex fallback');\n        entities = this.extractEntitiesWithRegex(transcript);\n      }\n\n      // Enriquecer con RAG si está habilitado\n      if (useRAG && entities.length > 0) {\n        try {\n          const keyTerms = entities\n            .filter(e => e.type === 'symptom' || e.type === 'diagnosis')\n            .slice(0, 3)\n            .map(e => e.text);\n            \n          if (keyTerms.length > 0) {\n            console.log('🔬 Enriqueciendo entidades con evidencia científica...');\n            // RAG enhancement logic here if needed\n          }\n        } catch (ragError) {\n          console.warn('⚠️ RAG enhancement failed:', ragError);\n        }\n      }\n\n      const processingTime = Date.now() - startTime;\n      console.log(`✅ Entidades extraídas: ${entities.length} en ${processingTime}ms`);\n      \n      return entities;\n      \n    } catch (error) {\n      console.error('Error extracting clinical entities:', error);\n      \n      // Fallback: usar regex básico\n      return this.extractEntitiesWithRegex(transcript);\n    }\n  }\n\n  /**\n   * Genera notas SOAP con A/B testing automático\n   */\n  static async generateSOAPNotes(transcript: string, entities: ClinicalEntity[], useRAG: boolean = true): Promise<SOAPNotes> {\n    const result = await this.generateSOAPNotesOriginal(transcript, entities, useRAG);\n    \n    return result;\n  }\n\n  /**\n   * Versión original del prompt SOAP (para comparación A/B)\n   */\n  private static async generateSOAPNotesOriginal(transcript: string, entities: ClinicalEntity[], useRAG: boolean = true): Promise<SOAPNotes> {\n    // Enriquecer con RAG si está habilitado y hay entidades relevantes\n    let ragContext = '';\n    if (useRAG && entities.length > 0) {\n      try {\n        console.log('🔍 Enriqueciendo SOAP con evidencia científica...');\n        \n        // Usar solo las 2 entidades más relevantes para evitar prompts muy largos\n        const keyEntities = entities\n          .filter(e => e.type === 'symptom' || e.type === 'diagnosis' || e.type === 'treatment')\n          .slice(0, 2)\n          .map(e => e.text);\n        \n        if (keyEntities.length > 0) {\n          const ragQuery = keyEntities.join(' ') + ' evidence';\n          const ragResult = await RAGMedicalMCP.retrieveRelevantKnowledge(ragQuery, 'fisioterapia', 2);\n          \n          if (ragResult.citations.length > 0) {\n            // Contexto RAG resumido para evitar timeouts\n            ragContext = `\n\nEVIDENCIA CIENTÍFICA:\n${ragResult.citations.slice(0, 2).map(c => \n  `- ${c.title.substring(0, 80)}... (${c.year})`\n).join('\\n')}`;\n            \n            console.log(`✅ RAG: Añadida evidencia de ${ragResult.citations.length} fuentes`);\n          }\n        }\n      } catch (error) {\n        console.warn('⚠️ RAG enhancements failed, continuing without:', error);\n      }\n    }\n\n    // Prompt SOAP optimizado (más corto y directo)\n    const prompt = `<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n\nEres un fisioterapeuta experto. Genera una nota SOAP profesional y concisa.${ragContext}\n\n<|eot_id|><|start_header_id|>user<|end_header_id|>\n\nTranscripción: \"${transcript.substring(0, 800)}...\"\n\nEntidades: ${entities.slice(0, 5).map(e => `${e.type}: ${e.text}`).join(', ')}\n\nGenera SOAP en formato JSON:\n{\n  \"subjective\": \"Paciente reporta...\",\n  \"objective\": \"Evaluación revela...\", \n  \"assessment\": \"Análisis clínico...\",\n  \"plan\": \"Tratamiento incluye...\"\n}\n\n<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n\n`;\n\n    try {\n      const result = await ollamaClient.generateCompletion(prompt, {\n        temperature: 0.2,\n        max_tokens: 800 // Original timeout settings\n      });\n      \n      // Extraer JSON de la respuesta\n      const jsonMatch = result.response.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        try {\n          const soapData = JSON.parse(jsonMatch[0]);\n          \n          const soapNotes: SOAPNotes = {\n            subjective: soapData.subjective || 'Información subjetiva no disponible',\n            objective: soapData.objective || 'Observaciones objetivas no registradas',\n            assessment: soapData.assessment || 'Evaluación pendiente de completar',\n            plan: soapData.plan || 'Plan de tratamiento por determinar',\n            generated_at: new Date(),\n            confidence_score: this.calculateSOAPConfidence(soapData)\n          };\n\n          console.log(`✅ Nota SOAP original generada en ${Date.now() - (Date.now() - (Date.now() - Date.now()))}ms${useRAG ? ' (con evidencia)' : ''}`);\n          return soapNotes;\n          \n        } catch (parseError) {\n          console.error('Error parsing SOAP JSON:', parseError);\n        }\n      }\n      \n      // Fallback: generar SOAP básico\n      return this.generateFallbackSOAP(transcript);\n      \n    } catch (error) {\n      console.error('Error generating original SOAP notes:', error);\n      \n      // Si hay timeout, intentar versión ultra-simplificada\n      if (error instanceof Error && error.message.includes('timeout')) {\n        console.log('🔄 Timeout detectado en prompt original, intentando versión simplificada...');\n        return this.generateSimplifiedSOAP(transcript, entities);\n      }\n      \n      throw new Error(`Failed to generate original SOAP notes: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Genera SOAP simplificado para casos de timeout\n   */\n  private static async generateSimplifiedSOAP(transcript: string, entities: ClinicalEntity[]): Promise<SOAPNotes> {\n    const symptoms = entities.filter(e => e.type === 'symptom').map(e => e.text).join(', ');\n    const treatments = entities.filter(e => e.type === 'treatment').map(e => e.text).join(', ');\n    \n    // Prompt ultra-simplificado\n    const simplePrompt = `Genera SOAP para fisioterapia:\n\nPaciente: ${symptoms || 'síntomas varios'}\nTratamiento: ${treatments || 'sesión de fisioterapia'}\n\nJSON:\n{\"subjective\":\"\",\"objective\":\"\",\"assessment\":\"\",\"plan\":\"\"}`;\n\n    try {\n      const result = await ollamaClient.generateCompletion(simplePrompt, {\n        temperature: 0.1,\n        max_tokens: 400\n      });\n      \n      const jsonMatch = result.response.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        const soapData = JSON.parse(jsonMatch[0]);\n        return {\n          subjective: soapData.subjective || `Paciente reporta: ${symptoms}`,\n          objective: soapData.objective || 'Evaluación física realizada',\n          assessment: soapData.assessment || 'Condición evaluada según hallazgos',\n          plan: soapData.plan || `Continuar con ${treatments}`,\n          generated_at: new Date(),\n          confidence_score: 0.6\n        };\n      }\n    } catch (simpleError) {\n      console.error('Error en SOAP simplificado:', simpleError);\n    }\n    \n    // Fallback final\n    return this.generateFallbackSOAP(transcript);\n  }\n\n  /**\n   * Procesa transcripción completa: entidades + SOAP + RAG\n   */\n  static async processTranscript(transcript: string, options: { useRAG?: boolean; useOptimizedSOAP?: boolean } = {}): Promise<{\n    entities: ClinicalEntity[];\n    soapNotes: SOAPNotes;\n    metrics: ProcessingMetrics;\n    ragUsed?: boolean;\n    ragResult?: unknown;\n  }> {\n    const startTime = Date.now();\n    const useRAG = options.useRAG !== false; // Default true\n    const useOptimizedSOAP = options.useOptimizedSOAP || false; // Default false (A/B testing)\n    \n    try {\n      console.log(`🧠 Procesando transcripción${useRAG ? ' con RAG' : ' sin RAG'}${useOptimizedSOAP ? ' (SOAP Optimizado v2)' : ''}...`);\n      \n      // 1. Extraer entidades clínicas\n      const entitiesStartTime = Date.now();\n      const entities = await this.extractClinicalEntities(transcript, useRAG);\n      const entitiesTime = Date.now() - entitiesStartTime;\n      \n      // 2. Generar SOAP con evidencia (usar versión optimizada si está habilitada)\n      const soapStartTime = Date.now();\n      const soapNotes = useOptimizedSOAP \n        ? await this.generateSOAPNotes(transcript, entities, useRAG)\n        : await this.generateSOAPNotes(transcript, entities, useRAG);\n      const soapTime = Date.now() - soapStartTime;\n      \n      // 3. Obtener evidencia RAG para UI (si está habilitado)\n      let ragResult = null;\n      \n      if (useRAG && entities.length > 2) {\n        try {\n          // Extraer términos clave principales para RAG de UI\n          const keyTerms = entities\n            .filter(e => e.type === 'symptom' || e.type === 'diagnosis' || e.type === 'treatment')\n            .slice(0, 3)\n            .map(e => e.text);\n          \n          if (keyTerms.length > 0) {\n            const ragQuery = keyTerms.join(' ') + ' treatment evidence';\n            ragResult = await RAGMedicalMCP.retrieveRelevantKnowledge(ragQuery, 'fisioterapia', 5);\n            \n            console.log(`🔬 RAG UI: ${ragResult.citations.length} artículos para interfaz de usuario`);\n          }\n        } catch (ragError) {\n          console.warn('⚠️ RAG para UI falló:', ragError);\n        }\n      }\n      \n      // 4. Calcular métricas de procesamiento\n      const totalTime = Date.now() - startTime;\n      const metrics: ProcessingMetrics = {\n        entities_extraction_time_ms: entitiesTime,\n        soap_generation_time_ms: soapTime,\n        total_processing_time_ms: totalTime,\n        entities_count: entities.length,\n        entities_confidence_avg: entities.reduce((sum, e) => sum + (e.confidence || 0), 0) / entities.length || 0,\n        soap_confidence: soapNotes.confidence_score || 0,\n        rag_queries_count: ragResult ? 1 : 0,\n        rag_citations_found: ragResult?.citations.length || 0,\n        prompt_version: useOptimizedSOAP ? 'optimized_v2' : 'standard',\n        timeout_occurred: false, // Si llegamos aquí, no hubo timeout\n        estimated_tokens_used: Math.ceil((transcript.length + JSON.stringify(entities).length) / 4), // Estimación\n        model_used: 'llama3.2:3b'\n      };\n      \n      console.log(`✅ Procesamiento completo en ${totalTime}ms - Entidades: ${entities.length}, SOAP: ${soapNotes.confidence_score?.toFixed(2)}, RAG: ${ragResult?.citations.length || 0} citas`);\n      \n      return {\n        entities,\n        soapNotes,\n        metrics,\n        ragUsed: useRAG,\n        ragResult\n      };\n      \n    } catch (error) {\n      console.error('Error en procesamiento completo:', error);\n      \n      // Fallback: procesar sin RAG ni optimizaciones\n      const fallbackEntities = this.extractEntitiesWithRegex(transcript);\n      const fallbackSOAP = this.generateFallbackSOAP(transcript);\n      \n      const metrics: ProcessingMetrics = {\n        entities_extraction_time_ms: 0,\n        soap_generation_time_ms: 0,\n        total_processing_time_ms: Date.now() - startTime,\n        entities_count: fallbackEntities.length,\n        entities_confidence_avg: 0.5,\n        soap_confidence: 0.3,\n        rag_queries_count: 0,\n        rag_citations_found: 0,\n        prompt_version: 'fallback',\n        timeout_occurred: true,\n        estimated_tokens_used: 0,\n        model_used: 'regex_fallback'\n      };\n      \n      return {\n        entities: fallbackEntities,\n        soapNotes: fallbackSOAP,\n        metrics,\n        ragUsed: false\n      };\n    }\n  }\n\n  /**\n   * Health check para Ollama\n   */\n  static async healthCheck(): Promise<{\n    status: 'healthy' | 'unhealthy';\n    latency_ms: number;\n    error?: string;\n  }> {\n    const startTime = Date.now();\n    \n    try {\n      const result = await ollamaClient.generateCompletion(\n        'Respond with \"OK\" if you can read this.', \n        { max_tokens: 10, temperature: 0 }\n      );\n      \n      const latency = Date.now() - startTime;\n      \n      if (result.response.includes('OK') || result.response.includes('ok')) {\n        return { status: 'healthy', latency_ms: latency };\n      } else {\n        return { \n          status: 'unhealthy', \n          latency_ms: latency, \n          error: 'Unexpected response from Ollama' \n        };\n      }\n      \n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        latency_ms: Date.now() - startTime,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Extracción de entidades con regex como fallback\n   */\n  private static extractEntitiesWithRegex(transcript: string): ClinicalEntity[] {\n    const entities: ClinicalEntity[] = [];\n    const lowerText = transcript.toLowerCase();\n    \n    // Patrones de síntomas comunes\n    const symptomPatterns = [\n      /dolor\\s+(?:en\\s+)?(?:la\\s+)?(\\w+)/gi,\n      /molestia\\s+(?:en\\s+)?(?:la\\s+)?(\\w+)/gi,\n      /duele\\s+(?:la\\s+)?(\\w+)/gi,\n      /rigidez\\s+(?:en\\s+)?(?:la\\s+)?(\\w+)/gi\n    ];\n    \n    // Patrones anatómicos\n    const anatomyPatterns = [\n      /(espalda|lumbar|cervical|dorsal)/gi,\n      /(hombro|brazo|codo|muñeca|mano)/gi,\n      /(cadera|rodilla|tobillo|pie)/gi,\n      /(cuello|cabeza)/gi\n    ];\n    \n    // Extraer síntomas\n    symptomPatterns.forEach(pattern => {\n      let match;\n      while ((match = pattern.exec(lowerText)) !== null) {\n        entities.push({\n          id: `entity_regex_${entities.length}`,\n          type: 'symptom',\n          text: match[0],\n          confidence: 0.6,\n          context: transcript.substring(Math.max(0, match.index - 50), match.index + 50),\n          position: { start: match.index, end: match.index + match[0].length }\n        });\n      }\n    });\n    \n    // Extraer anatomía\n    anatomyPatterns.forEach(pattern => {\n      let match;\n      while ((match = pattern.exec(lowerText)) !== null) {\n        entities.push({\n          id: `entity_regex_${entities.length}`,\n          type: 'anatomy',\n          text: match[0],\n          confidence: 0.7,\n          context: transcript.substring(Math.max(0, match.index - 50), match.index + 50),\n          position: { start: match.index, end: match.index + match[0].length }\n        });\n      }\n    });\n    \n    return entities;\n  }\n\n  /**\n   * Genera SOAP de fallback cuando falla el LLM\n   */\n  private static generateFallbackSOAP(transcript: string): SOAPNotes {\n    const wordCount = transcript.split(' ').length;\n    const hasSymptoms = /dolor|molestia|duele/i.test(transcript);\n    const hasMovement = /movimiento|ejercicio|estirar/i.test(transcript);\n    \n    return {\n      subjective: hasSymptoms \n        ? `Paciente reporta síntomas mencionados en sesión de ${Math.round(wordCount/150)} minutos.`\n        : 'Paciente asiste a sesión de fisioterapia.',\n      objective: hasMovement\n        ? 'Evaluación física realizada. Rango de movimiento y función evaluados.'\n        : 'Examen físico completado según protocolo.',\n      assessment: 'Condición evaluada conforme a hallazgos clínicos. Respuesta al tratamiento monitoreada.',\n      plan: 'Continuar con protocolo de fisioterapia. Seguimiento programado.',\n      generated_at: new Date(),\n      confidence_score: 0.4\n    };\n  }\n\n  /**\n   * Calcula confidence score para SOAP basado en completeness\n   */\n  private static calculateSOAPConfidence(soapData: { subjective?: string; objective?: string; assessment?: string; plan?: string }): number {\n    const fields = [soapData.subjective, soapData.objective, soapData.assessment, soapData.plan];\n    const validFields = fields.filter(field => field && field.length > 10).length;\n    const avgLength = fields.reduce((sum, field) => sum + (field?.length || 0), 0) / 4;\n    \n    // Score basado en completeness de campos y longitud promedio\n    const completenessScore = validFields / 4;\n    const lengthScore = Math.min(avgLength / 50, 1); // 50 chars como target\n    \n    return Math.round((completenessScore * 0.7 + lengthScore * 0.3) * 100) / 100;\n  }\n\n  /**\n   * Calcula confidence general del procesamiento\n   */\n  private static calculateOverallConfidence(entities: ClinicalEntity[], soap: SOAPNotes): number {\n    const entitiesConfidence = entities.reduce((sum, e) => sum + (e.confidence || 0), 0) / entities.length || 0;\n    const soapConfidence = soap.confidence_score || 0;\n    \n    // Peso: 40% entidades, 60% SOAP\n    return Math.round((entitiesConfidence * 0.4 + soapConfidence * 0.6) * 100) / 100;\n  }\n\n  /**\n   * Determina si el resultado requiere revisión manual\n   */\n  private static requiresReview(entities: ClinicalEntity[], soap: SOAPNotes): boolean {\n    const overallConfidence = this.calculateOverallConfidence(entities, soap);\n    const hasLowConfidenceEntities = entities.some(e => (e.confidence || 0) < 0.5);\n    const hasShortSOAPFields = [soap.subjective, soap.objective, soap.assessment, soap.plan]\n      .some(field => (field?.length || 0) < 10);\n    \n    return overallConfidence < 0.7 || hasLowConfidenceEntities || hasShortSOAPFields;\n  }\n\n  /**\n   * Extrae términos clave para RAG\n   */\n  private static extractKeyTermsForRAG(transcript: string): string[] {\n    const commonWords = ['el', 'la', 'de', 'que', 'y', 'en', 'un', 'es', 'se', 'no', 'te', 'lo', 'le'];\n    const words = transcript\n      .toLowerCase()\n      .split(/\\W+/)\n      .filter(word => word.length > 3 && !commonWords.includes(word))\n      .slice(0, 10); // Top 10 palabras relevantes\n      \n    return [...new Set(words)]; // Remover duplicados\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/patientService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/setupTests.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'NodeRequire' is not defined.","line":23,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":23,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview Test Setup for AiDuxCare V.2\n * @version 2.0.0\n * @author AiDuxCare Development Team\n */\n\nimport '@testing-library/jest-dom';\n\n// Extend expect with custom matchers\ndeclare global {\n  interface Matchers<R> {\n    toBeInTheDocument(): R;\n    toHaveClass(className: string): R;\n    toHaveAttribute(attr: string, value?: string): R;\n  }\n  \n  // Declaraciones para Node.js en entorno de testing\n  declare const global: typeof globalThis;\n  declare const process: {\n    env: { NODE_ENV: string };\n    exit: (code: number) => never;\n  };\ndeclare const require: NodeRequire;\n  declare const module: { exports: unknown; main?: boolean };\n  declare const __dirname: string;\n  declare const __filename: string;\n}\n\n// Mock performance.now if not available in test environment\nif (typeof global !== 'undefined' && !global.performance) {\n  global.performance = {\n    now: () => Date.now()\n  } as Performance;\n}\n\n// Mock window.matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: (query: string) => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: () => {}, // deprecated\n    removeListener: () => {}, // deprecated\n    addEventListener: () => {},\n    removeEventListener: () => {},\n    dispatchEvent: () => false,\n  }),\n});\n\n// Mock ResizeObserver\nglobal.ResizeObserver = class ResizeObserver {\n  observe = () => {};\n  unobserve = () => {};\n  disconnect = () => {};\n};\n\nexport {};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/shared/auth/AuthContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/shared/components/Agent/__tests__/future_evals/AgentSuggestionStatus.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/shared/components/Assistant/ClinicalAssistantPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_args' is defined but never used.","line":11,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":39},{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":20,"column":80,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":83}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\n\ntype AssistantEntity = { id: string; type: string; text: string };\n\ntype RunArgs = { input: string; ctx: { patientId?: string; visitId?: string } };\ntype RunResult =\n  | { ok: true; answerMarkdown?: string; entities?: AssistantEntity[] }\n  | { ok: false; error: string };\n\n// Implementación mínima para que compile. Sustituye por tu adapter real cuando esté listo.\nasync function runAssistantQuery(_args: RunArgs): Promise<RunResult> {\n  return { ok: true, answerMarkdown: '', entities: [] };\n}\n\ntype Props = {\n  patientId?: string;\n  visitId?: string;\n};\n\nexport default function ClinicalAssistantPanel({ patientId, visitId }: Props): JSX.Element {\n  const [query, setQuery] = useState('');\n  const [answer, setAnswer] = useState('');\n  const [entities, setEntities] = useState<AssistantEntity[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  const onAsk = async () => {\n    if (!query.trim()) return;\n    setLoading(true);\n    const res = await runAssistantQuery({ input: query, ctx: { patientId, visitId } });\n    setLoading(false);\n\n    if (res.ok) {\n      setAnswer(res.answerMarkdown ?? '');\n      setEntities(res.entities ?? []);\n    } else {\n      setAnswer(`Error: ${res.error}`);\n      setEntities([]);\n    }\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"flex gap-2\">\n        <input\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          placeholder=\"Pregunta clínica...\"\n          className=\"flex-1 border rounded px-2 py-1\"\n        />\n        <button onClick={onAsk} className=\"px-3 py-1 rounded bg-black text-white\" disabled={loading}>\n          {loading ? 'Consultando…' : 'Preguntar'}\n        </button>\n      </div>\n\n      {answer && (\n        <div className=\"prose prose-sm\">\n          {/* podrías usar un renderer markdown real; aquí simple texto para compilar */}\n          <pre className=\"whitespace-pre-wrap\">{answer}</pre>\n        </div>\n      )}\n\n      {entities.length > 0 && (\n        <ul className=\"text-xs text-gray-700 list-disc pl-4\">\n          {entities.map((e) => (\n            <li key={e.id}>{e.type}: “{e.text}”</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/shared/components/Audit/AuditLogViewer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadLogs'. Either include it or remove the dependency array.","line":97,"column":6,"nodeType":"ArrayExpression","endLine":97,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadLogs]","fix":{"range":[3028,3030],"text":"[loadLogs]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\n\nimport { FirestoreAuditLogger, AuditEvent } from '../../../core/audit/FirestoreAuditLogger';\nimport { useUser } from '../../../core/auth/UserContext';\n\ninterface AuditLogViewerProps {\n  className?: string;\n}\n\nexport const AuditLogViewer: React.FC<AuditLogViewerProps> = ({ className = '' }) => {\n  const { user, hasRole } = useUser();\n  const [logs, setLogs] = useState<AuditEvent[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [filters, setFilters] = useState({\n    userId: '',\n    patientId: '',\n    type: '',\n    startDate: '',\n    endDate: ''\n  });\n\n  const loadLogs = async () => {\n    if (!user || !hasRole(['ADMIN', 'OWNER'])) {\n      setError('Acceso denegado: Se requieren permisos de administrador');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    try {\n      const events = await FirestoreAuditLogger.getEvents({\n        userId: filters.userId || undefined,\n        patientId: filters.patientId || undefined,\n        type: filters.type || undefined,\n        limit: 100\n      });\n      setLogs(events);\n    } catch (err) {\n      setError((err as Error).message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const exportLogs = async () => {\n    if (!user || !hasRole(['ADMIN', 'OWNER'])) {\n      setError('Acceso denegado: Se requieren permisos de administrador');\n      return;\n    }\n\n    try {\n      const allLogs = await FirestoreAuditLogger.exportAllLogs();\n      const csvContent = generateCSV(allLogs);\n      downloadCSV(csvContent, `audit_logs_${new Date().toISOString().split('T')[0]}.csv`);\n    } catch (err) {\n      setError((err as Error).message);\n    }\n  };\n\n  const generateCSV = (events: AuditEvent[]): string => {\n    const headers = ['ID', 'Tipo', 'Usuario', 'Rol', 'Paciente', 'Visita', 'Timestamp', 'Metadatos'];\n    const rows = events.map(event => [\n      event.id || '',\n      event.type,\n      event.userId,\n      event.userRole,\n      event.patientId || '',\n      event.visitId || '',\n      event.timestamp.toISOString(),\n      JSON.stringify(event.metadata || {})\n    ]);\n    \n    return [headers, ...rows].map(row => row.map(cell => `\"${cell}\"`).join(',')).join('\\n');\n  };\n\n  const downloadCSV = (content: string, filename: string) => {\n    const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(blob);\n    link.download = filename;\n    link.click();\n  };\n\n  const getEventTypeColor = (type: string): string => {\n    if (type.includes('login')) return 'text-green-600';\n    if (type.includes('logout')) return 'text-red-600';\n    if (type.includes('patient')) return 'text-blue-600';\n    if (type.includes('visit')) return 'text-purple-600';\n    if (type.includes('edit')) return 'text-orange-600';\n    if (type.includes('export')) return 'text-indigo-600';\n    return 'text-gray-600';\n  };\n\n  useEffect(() => {\n    loadLogs();\n  }, []);\n\n  if (!user || !hasRole(['ADMIN', 'OWNER'])) {\n    return (\n      <div className={`p-6 bg-red-50 border border-red-200 rounded-lg ${className}`}>\n        <h3 className=\"text-lg font-semibold text-red-800 mb-2\">Acceso Denegado</h3>\n        <p className=\"text-red-600\">Se requieren permisos de administrador para acceder a los logs de auditoría.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`bg-white rounded-lg shadow-lg ${className}`}>\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-2xl font-bold text-gray-900\">Logs de Auditoría</h2>\n          <button\n            onClick={exportLogs}\n            className=\"px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors\"\n          >\n            Exportar CSV\n          </button>\n        </div>\n\n        {/* Filtros */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <input\n            type=\"text\"\n            placeholder=\"ID de Usuario\"\n            value={filters.userId}\n            onChange={(e) => setFilters(prev => ({ ...prev, userId: e.target.value }))}\n            className=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n          />\n          <input\n            type=\"text\"\n            placeholder=\"ID de Paciente\"\n            value={filters.patientId}\n            onChange={(e) => setFilters(prev => ({ ...prev, patientId: e.target.value }))}\n            className=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n          />\n          <select\n            value={filters.type}\n            onChange={(e) => setFilters(prev => ({ ...prev, type: e.target.value }))}\n            className=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n          >\n            <option value=\"\">Todos los tipos</option>\n            <option value=\"login\">Login</option>\n            <option value=\"logout\">Logout</option>\n            <option value=\"patient\">Acceso a Paciente</option>\n            <option value=\"visit\">Acceso a Visita</option>\n            <option value=\"edit\">Edición de Datos</option>\n            <option value=\"export\">Exportación</option>\n          </select>\n        </div>\n\n        <button\n          onClick={loadLogs}\n          disabled={loading}\n          className=\"px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 disabled:opacity-50 transition-colors\"\n        >\n          {loading ? 'Cargando...' : 'Aplicar Filtros'}\n        </button>\n      </div>\n\n      {/* Lista de logs */}\n      <div className=\"p-6\">\n        {error && (\n          <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-md\">\n            <p className=\"text-red-600\">{error}</p>\n          </div>\n        )}\n\n        {loading ? (\n          <div className=\"flex justify-center items-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600\"></div>\n          </div>\n        ) : logs.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            No se encontraron logs de auditoría\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {logs.map((log) => (\n              <div key={log.id} className=\"border border-gray-200 rounded-lg p-4 hover:bg-gray-50\">\n                <div className=\"flex justify-between items-start mb-2\">\n                  <span className={`font-semibold ${getEventTypeColor(log.type)}`}>\n                    {log.type.toUpperCase()}\n                  </span>\n                  <span className=\"text-sm text-gray-500\">\n                    {log.timestamp.toLocaleString()}\n                  </span>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\n                  <div>\n                    <span className=\"font-medium\">Usuario:</span> {log.userId} ({log.userRole})\n                  </div>\n                  {log.patientId && (\n                    <div>\n                      <span className=\"font-medium\">Paciente:</span> {log.patientId}\n                    </div>\n                  )}\n                  {log.visitId && (\n                    <div>\n                      <span className=\"font-medium\">Visita:</span> {log.visitId}\n                    </div>\n                  )}\n                </div>\n\n                {log.metadata && Object.keys(log.metadata).length > 0 && (\n                  <div className=\"mt-2\">\n                    <details className=\"text-sm\">\n                      <summary className=\"cursor-pointer text-indigo-600 hover:text-indigo-800\">\n                        Ver metadatos\n                      </summary>\n                      <pre className=\"mt-2 p-2 bg-gray-100 rounded text-xs overflow-x-auto\">\n                        {JSON.stringify(log.metadata, null, 2)}\n                      </pre>\n                    </details>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/shared/components/MCP/MCPContextViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/shared/components/UI/Input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/shared/components/UI/Switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/shared/components/UI/Tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/shared/types/wizard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/shared/ui/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/shared/ui/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/shared/ui/Chip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/shared/ui/Input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/shared/ui/MultiSelectCombobox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/shared/ui/PageHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/shared/ui/Section.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/shared/ui/TokenInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/shared/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/stores/aiModeStore.simple.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/stores/aiModeStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/tests/basic.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/tests/core/sttLocal/index.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'afterEach' is defined but never used.","line":1,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockMediaRecorder' is assigned a value but never used.","line":15,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":24}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\n\nimport { STTLocalEngine, detectSTTCapabilities, transcribeLocal, createLocalTranscription } from '../../../core/sttLocal';\n\n// Configuración condicional para tests WASM\nconst isWasmExpected = false; // en CI cambia a true\n\n// Mock de crypto.randomUUID\nconst mockUUID = 'test-uuid-123';\nvi.stubGlobal('crypto', {\n  randomUUID: () => mockUUID\n});\n\n// Mock de MediaRecorder\nconst mockMediaRecorder = {\n  start: vi.fn(),\n  stop: vi.fn(),\n  addEventListener: vi.fn(),\n  removeEventListener: vi.fn(),\n  stream: {\n    getTracks: () => [{ stop: vi.fn() }]\n  }\n};\n\n// Mock de Audio\nconst mockAudio = {\n  duration: 30,\n  sampleRate: 44100,\n  channels: 1,\n  addEventListener: vi.fn(),\n  removeEventListener: vi.fn(),\n  play: vi.fn(),\n  pause: vi.fn(),\n  currentTime: 0\n};\n\n// Mock de URL.createObjectURL\nvi.stubGlobal('URL', {\n  createObjectURL: vi.fn(() => 'mock-url'),\n  revokeObjectURL: vi.fn()\n});\n\n// Mock de WebAssembly\nObject.defineProperty(window, 'WebAssembly', {\n  value: {\n    validate: vi.fn(() => false),\n    instantiate: vi.fn()\n  },\n  writable: true,\n  configurable: true\n});\n\n// Mock de navigator.gpu\nconst mockNavigator = {\n  gpu: undefined\n};\n\n// Mock de performance.now\nconst mockPerformance = {\n  now: vi.fn(() => 1000)\n};\n\n// Configurar mocks globales\nObject.defineProperty(window, 'WebAssembly', {\n  value: {\n    validate: vi.fn(() => true),\n    instantiate: vi.fn()\n  },\n  writable: true,\n  configurable: true\n});\n\nObject.defineProperty(window, 'navigator', {\n  value: mockNavigator,\n  writable: true\n});\n\nObject.defineProperty(window, 'performance', {\n  value: mockPerformance,\n  writable: true\n});\n\ndescribe('STT Local Module', () => {\n  let sttEngine: STTLocalEngine;\n  let mockAudioBlob: Blob;\n\n  beforeEach(() => {\n    // Resetear mocks\n    mockPerformance.now.mockReturnValue(1000);\n    \n    // Resetear WebAssembly mock\n    Object.defineProperty(window, 'WebAssembly', {\n      value: {\n        validate: vi.fn(() => true),\n        instantiate: vi.fn()\n      },\n      writable: true,\n      configurable: true\n    });\n    \n    // Resetear navigator.gpu\n    Object.defineProperty(navigator, 'gpu', {\n      value: undefined,\n      writable: true\n    });\n  });\n\n  describe('detectSTTCapabilities', () => {\n    it('debe detectar capacidades WASM correctamente', () => {\n      const capabilities = detectSTTCapabilities();\n      \n      expect(capabilities.wasmSupported).toBe(true);\n      expect(capabilities.simdSupported).toBe(true);\n      expect(capabilities.webGPUSupported).toBe(false);\n      expect(capabilities.modelsAvailable).toContain('whisper-tiny');\n      expect(capabilities.modelsAvailable).toContain('vosk-small');\n      expect(capabilities.maxAudioLength).toBe(300);\n    });\n\n    it('debe manejar navegadores sin WASM', () => {\n      // Simular navegador sin WASM\n      Object.defineProperty(window, 'WebAssembly', {\n        value: undefined,\n        writable: true\n      });\n\n      const capabilities = detectSTTCapabilities();\n      \n      expect(capabilities.wasmSupported).toBe(false);\n      expect(capabilities.modelsAvailable).toEqual(['fallback']);\n      expect(capabilities.maxAudioLength).toBe(60);\n    });\n\n    it('debe detectar WebGPU cuando está disponible', () => {\n      // Simular navegador con WebGPU\n      Object.defineProperty(window, 'navigator', {\n        value: { gpu: {} },\n        writable: true\n      });\n\n      const capabilities = detectSTTCapabilities();\n      expect(capabilities.webGPUSupported).toBe(true);\n    });\n  });\n\n  describe('STTLocalEngine', () => {\n    beforeEach(() => {\n      sttEngine = new STTLocalEngine();\n    });\n\n    (isWasmExpected ? it : it.skip)('debe inicializarse correctamente', async () => {\n      // skipped locally: requires WASM in CI\n      // Esperar a que se complete la inicialización\n      await new Promise(resolve => setTimeout(resolve, 150));\n      \n      expect(sttEngine.isReady()).toBe(true);\n      expect(sttEngine.getCapabilities().wasmSupported).toBe(true);\n    });\n\n    it('debe configurarse correctamente', () => {\n      const config = sttEngine.getConfig();\n      \n      expect(config.model).toBe('fallback');\n      expect(config.maxAudioDuration).toBe(300);\n      expect(config.confidenceThreshold).toBe(0.7);\n    });\n\n    it('debe actualizar configuración', () => {\n      sttEngine.updateConfig({ maxAudioDuration: 600 });\n      \n      const config = sttEngine.getConfig();\n      expect(config.maxAudioDuration).toBe(600);\n    });\n\n    (isWasmExpected ? it : it.skip)('debe validar audio correctamente', async () => {\n      // skipped locally: requires WASM in CI\n      const audioInfo = await sttEngine['validateAudio'](mockAudioBlob);\n      \n      expect(audioInfo.duration).toBe(30);\n      expect(audioInfo.sampleRate).toBe(44100);\n      expect(audioInfo.channels).toBe(1);\n    });\n\n    (isWasmExpected ? it : it.skip)('debe rechazar audio demasiado largo', async () => {\n      // skipped locally: requires WASM in CI\n      // Configurar duración máxima baja\n      sttEngine.updateConfig({ maxAudioDuration: 10 });\n      \n      // Simular audio largo\n      const longAudioBlob = new Blob(['long audio'], { type: 'audio/wav' });\n      Object.defineProperty(mockAudio, 'prototype', {\n        value: { duration: 60 },\n        writable: true\n      });\n\n      await expect(sttEngine.transcribeLocal(longAudioBlob)).rejects.toThrow('Audio demasiado largo');\n    });\n\n    (isWasmExpected ? it : it.skip)('debe usar modo fallback cuando WASM no está disponible', async () => {\n      // skipped locally: requires WASM in CI\n      // Simular navegador sin WASM\n      Object.defineProperty(window, 'WebAssembly', {\n        value: undefined,\n        writable: true\n      });\n\n      const fallbackEngine = new STTLocalEngine();\n      await new Promise(resolve => setTimeout(resolve, 150));\n\n      const result = await fallbackEngine.transcribeLocal(mockAudioBlob);\n      \n      expect(result.fallback).toBe(true);\n      expect(result.text).toBe('[Audio capturado - modo offline]');\n      expect(result.confidence).toBe(0.0);\n    });\n  });\n\n  describe('transcribeLocal', () => {\n    (isWasmExpected ? it : it.skip)('debe transcribir audio correctamente', async () => {\n      // skipped locally: requires WASM in CI\n      const result = await transcribeLocal(mockAudioBlob);\n      \n      expect(result).toHaveProperty('text');\n      expect(result).toHaveProperty('confidence');\n      expect(result).toHaveProperty('processingTime');\n      expect(result).toHaveProperty('model');\n      expect(result).toHaveProperty('fallback');\n    });\n\n    (isWasmExpected ? it : it.skip)('debe manejar errores de transcripción', async () => {\n      // skipped locally: requires WASM in CI\n      // Simular error en validación de audio\n      const invalidBlob = new Blob(['invalid'], { type: 'invalid' });\n      \n      const result = await transcribeLocal(invalidBlob);\n      \n      expect(result.fallback).toBe(true);\n      expect(result.text).toBe('[Audio capturado - transcripción fallida]');\n      expect(result.confidence).toBe(0.0);\n    });\n  });\n\n  describe('createLocalTranscription', () => {\n    (isWasmExpected ? it : it.skip)('debe crear transcripción local correctamente', async () => {\n      // skipped locally: requires WASM in CI\n      const userId = 'test-user';\n      const sessionId = 'test-session';\n      \n      const transcription = await createLocalTranscription(mockAudioBlob, userId, sessionId);\n      \n      expect(transcription.id).toBe('test-uuid-123');\n      expect(transcription.userId).toBe(userId);\n      expect(transcription.sessionId).toBe(sessionId);\n      expect(transcription.timestamp).toBeInstanceOf(Date);\n      expect(transcription.metadata).toEqual({\n        duration: 30,\n        sampleRate: 44100,\n        channels: 1\n      });\n    });\n\n    (isWasmExpected ? it : it.skip)('debe manejar errores en creación de transcripción', async () => {\n      // skipped locally: requires WASM in CI\n      // Simular error en transcribeLocal\n      const invalidBlob = new Blob(['invalid'], { type: 'invalid' });\n      \n      await expect(\n        createLocalTranscription(invalidBlob, 'user', 'session')\n      ).rejects.toThrow();\n    });\n  });\n\n  describe('Manejo de errores', () => {\n    it('debe manejar errores de inicialización', async () => {\n      // Simular error en inicialización\n      const errorEngine = new STTLocalEngine();\n      \n      // Forzar error\n      vi.spyOn(errorEngine as { initialize: () => Promise<void> }, 'initialize').mockRejectedValue(new Error('Init failed'));\n      \n      await new Promise(resolve => setTimeout(resolve, 150));\n      \n      // Debe usar fallback en caso de error\n      expect(errorEngine.isReady()).toBe(true);\n    });\n\n    it('debe manejar errores de carga de modelo', async () => {\n      const engine = new STTLocalEngine({ model: 'whisper-tiny' });\n      \n      // Simular error en carga de modelo\n      vi.spyOn(engine as { loadModel: (modelName: string) => Promise<void> }, 'loadModel').mockRejectedValue(new Error('Model load failed'));\n      \n      await new Promise(resolve => setTimeout(resolve, 150));\n      \n      // Debe usar fallback\n      expect(engine.isReady()).toBe(true);\n    });\n  });\n\n  describe('Compatibilidad', () => {\n    (isWasmExpected ? it : it.skip)('debe funcionar en navegadores modernos', () => {\n      // skipped locally: requires WASM in CI\n      const capabilities = detectSTTCapabilities();\n      \n      expect(capabilities.wasmSupported).toBe(true);\n      expect(capabilities.simdSupported).toBe(true);\n      expect(capabilities.modelsAvailable.length).toBeGreaterThan(0);\n    });\n\n    it('debe degradar gracefulmente en navegadores antiguos', () => {\n      // Simular navegador antiguo\n      Object.defineProperty(window, 'WebAssembly', {\n        value: undefined,\n        writable: true\n      });\n\n      const capabilities = detectSTTCapabilities();\n      \n      expect(capabilities.wasmSupported).toBe(false);\n      expect(capabilities.modelsAvailable).toEqual(['fallback']);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/tests/geolocation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/tests/integration/services.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/tests/stores/aiModeStore.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/tools/createTestUser.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":16,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":16,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[355,399],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":25,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":25,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[644,690],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[695,734],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":27,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":27,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[739,774],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[779,837],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[922,967],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[977,1033],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1038,1080],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":36,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":36,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1085,1119],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1124,1164],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1370,1444],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1468,1541],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview Script para crear usuario de prueba en Firebase\n * @version 1.0.0\n * @author AiDuxCare Development Team\n */\n\nimport { createUserWithEmailAndPassword, sendEmailVerification } from 'firebase/auth';\n\nimport { auth } from '../lib/firebase';\n\n/**\n * Crear usuario de prueba\n */\nasync function createTestUser(): Promise<void> {\n  try {\n    console.log('Creando usuario de prueba...');\n    \n    const email = 'mauricio@aiduxcare.com';\n    const password = 'aidux2025';\n    \n    // Crear usuario\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n    \n    console.log('✅ Usuario creado exitosamente:');\n    console.log(`   Email: ${user.email}`);\n    console.log(`   UID: ${user.uid}`);\n    console.log(`   Email verificado: ${user.emailVerified}`);\n    \n    // Enviar email de verificación\n    await sendEmailVerification(user);\n    console.log('Email de verificación enviado');\n    \n    console.log('\\nUsuario de prueba creado exitosamente!');\n    console.log('   Puedes hacer login con:');\n    console.log(`   Email: ${email}`);\n    console.log(`   Password: ${password}`);\n    \n  } catch (error: unknown) {\n    console.error('❌ Error creando usuario de prueba:', error);\n    \n    if (error instanceof Error) {\n      if (error.message.includes('email-already-in-use')) {\n        console.log('ℹ️  El usuario ya existe. Puedes hacer login directamente.');\n      } else {\n        console.log('Asegúrate de que Firebase esté configurado correctamente.');\n      }\n    }\n  }\n}\n\n// Ejecutar si se llama directamente\nif (typeof window === 'undefined') {\n  // Solo ejecutar en entorno Node.js\n  createTestUser();\n}\n\nexport { createTestUser };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/tools/diagnoseUser.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":16,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":16,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[463,517],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":20,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":20,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[587,656],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[784,835],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":25,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":25,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[842,898],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[928,976],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":30,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":30,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[981,1037],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1086,1144],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":36,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":36,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1257,1304],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1311,1362],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1369,1437],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1470,1530],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1599,1657],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":49,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":49,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1777,1826],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1833,1886],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":53,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1936,1985],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2443,2499],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2508,2563],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":70,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":70,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2572,2629],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2653,2720],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":75,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":75,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2748,2794],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":76,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":76,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2801,3066],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3119,3175],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3264,3304],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3438,3478],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview Script para diagnosticar el estado del usuario en Firebase\n * @version 1.0.0\n * @author AiDuxCare Development Team\n */\n\nimport { signInWithEmailAndPassword, fetchSignInMethodsForEmail } from 'firebase/auth';\n\nimport { auth } from '../lib/firebase';\nimport { emailActivationService } from '../services/emailActivationService';\n\nconst TEST_EMAIL = 'mauricio@aiduxcare.com';\nconst TEST_PASSWORD = 'aidux2025';\n\nasync function diagnoseUser() {\n  console.log('Iniciando diagnóstico del usuario...\\n');\n\n  try {\n    // 1. Verificar si el email existe en Firebase Auth\n    console.log('1) Verificando si el email existe en Firebase Auth...');\n    const signInMethods = await fetchSignInMethodsForEmail(auth, TEST_EMAIL);\n    \n    if (signInMethods.length === 0) {\n      console.log('El email NO existe en Firebase Auth');\n      console.log('Solución: Crear usuario en Firebase Auth');\n      return;\n    }\n    \n    console.log('El email existe en Firebase Auth');\n    console.log('Métodos de autenticación:', signInMethods);\n\n    // 2. Intentar login con Firebase Auth\n    console.log('\\n2) Intentando login con Firebase Auth...');\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, TEST_EMAIL, TEST_PASSWORD);\n      console.log('Login exitoso con Firebase Auth');\n      console.log('Usuario:', userCredential.user.email);\n      console.log('Email verificado:', userCredential.user.emailVerified);\n    } catch (authError) {\n      console.log('Error en login con Firebase Auth:', authError);\n      return;\n    }\n\n    // 3. Verificar si existe en Firestore\n    console.log('\\n3) Verificando si existe en Firestore...');\n    const professional = await emailActivationService.getProfessional(TEST_EMAIL);\n    \n    if (!professional) {\n      console.log('El usuario NO existe en Firestore');\n      console.log('Solución: Crear registro en Firestore');\n      \n      // Crear usuario en Firestore\n      console.log('\\nCreando usuario en Firestore...');\n      const result = await emailActivationService.registerProfessional({\n        email: TEST_EMAIL,\n        displayName: 'Mauricio Sobarzo',\n        professionalTitle: 'Fisioterapeuta',\n        specialty: 'Fisioterapia',\n        country: 'España',\n        city: 'Madrid',\n        province: 'Madrid',\n        phone: '+34600000000',\n        licenseNumber: 'FIS-12345',\n        registrationDate: new Date()\n      });\n      \n      if (result.success) {\n        console.log('Usuario creado exitosamente en Firestore');\n        console.log('Professional ID:', result.professionalId);\n        console.log('Activation Token:', result.activationToken);\n      } else {\n        console.log('Error creando usuario en Firestore:', result.message);\n      }\n    } else {\n      console.log('El usuario existe en Firestore');\n      console.log('Datos del profesional:', {\n        email: professional.email,\n        displayName: professional.displayName,\n        isActive: professional.isActive,\n        emailVerified: professional.emailVerified,\n        lastLogin: professional.lastLogin\n      });\n    }\n\n    // 4. Verificar estado de activación\n    console.log('\\n4) Verificando estado de activación...');\n    const isActive = await emailActivationService.isProfessionalActive(TEST_EMAIL);\n    console.log('Cuenta activa:', isActive);\n\n  } catch (error) {\n    console.error('Error en diagnóstico:', error);\n  }\n}\n\n// Ejecutar diagnóstico\ndiagnoseUser().then(() => {\n  console.log('\\nDiagnóstico completado');\n  // No usar process.exit en entorno de testing\n}).catch((error) => {\n  console.error('Error fatal:', error);\n  // No usar process.exit en entorno de testing\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/tools/manualClinicalTest.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":209,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":209,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8041,8114],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":212,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":212,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8167,8215],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":214,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":214,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8304,8369],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8411,8457],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":219,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":219,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8539,8603],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":222,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":222,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8645,8689],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":229,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":229,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8870,8914],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":261,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":261,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10088,10141],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":262,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":262,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10146,10201],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":263,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":263,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10206,10256],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":265,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":265,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10262,10300],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":266,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":266,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10305,10343],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":267,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":267,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10348,10396],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":268,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":268,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10401,10471],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":269,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":269,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10476,10564],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":270,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":270,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10569,10656],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":271,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":271,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10661,10751],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":272,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":272,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10756,10826],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":273,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":273,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10831,10900],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":274,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":274,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10905,10981],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview Manual Clinical Test - Transcripción Real de Óscar\n * @version 1.0.0\n * @author AiDuxCare Development Team\n */\n\nimport { SOAPGenerationService } from '../services/SOAPGenerationService';\nimport { ClinicalEntity } from '../types/nlp';\nimport { ClinicalInsight, SOAPGenerationResult } from '../types/clinical-analysis';\n\n// Transcripción real del paciente Óscar\nconst TRANSCRIPT_OSCAR = `\nOscar seguí nuevo paciente, abro micrófono: Oscar por favor para que me comentes y me cuentes qué te trae por estos lados, cuál es tu mayor molestia, cuál es tu mayor valor, por favor. Espolón calcáneo bilaterales a los dos lados, si tiene un informe. Has tenido que modificar la marcha tanto por el dolor en tus piernas pero dijo el médico le dijo el 4 L5, que el dolor local o se irradia, se va por el glúteo, por la pierna y es más hacia acá esta zona, a veces en esa zona, esto que si siempre... ¿En qué trabajas? De hostelería, estás de pie durante mucho rato y cargando peso. A lo de calcáneo, nuevos otra vez estuviste ahí y ahora un poquito... pero ¿qué es lo que más te molesta y te duele en este minuto que vamos a priorizar? La zona lumbar es lo que más. Igual vamos a ver lo de los pies, ningún problema, pero quiero priorizar lo que más te esté molestando a ti en este minuto. ¿Es más hacia tu derecha o más hacia tu izquierda o es muy central? Es justo en la zona central. ¿Y actividades normales como aprovecharte los zapatos o recoger cosas del suelo te genera mucho dolor y te quedas así como trabado? ¿No tienes algún uniforme que pueda...? Ganemos algo. Voy a dejar esto por acá. Acuéstate.\n`.trim();\n\n/**\n * Servicio para extraer entidades clínicas de transcripciones de texto\n */\nclass TranscriptProcessor {\n  \n  /**\n   * Extrae entidades clínicas del texto transcrito\n   */\n  public static extractClinicalEntities(transcript: string): ClinicalEntity[] {\n    const entities: ClinicalEntity[] = [];\n    let entityId = 1;\n\n    // Patrones para detectar síntomas\n    const symptomPatterns = [\n      { pattern: /espolón calcáneo bilaterales?/gi, text: 'espolón calcáneo bilateral', confidence: 0.95 },\n      { pattern: /dolor.*lumbar|zona lumbar|dolor.*piernas?/gi, text: 'dolor lumbar irradiado', confidence: 0.90 },\n      { pattern: /dolor.*glúteo/gi, text: 'dolor irradiado a glúteo', confidence: 0.85 },\n      { pattern: /modificar.*marcha/gi, text: 'alteración de la marcha', confidence: 0.88 },\n      { pattern: /dolor.*pies?/gi, text: 'dolor en pies', confidence: 0.80 }\n    ];\n\n    // Patrones para anatomía\n    const anatomyPatterns = [\n      { pattern: /L5|L4/gi, text: 'vértebra L4-L5', confidence: 0.85 },\n      { pattern: /calcáneo/gi, text: 'hueso calcáneo', confidence: 0.90 },\n      { pattern: /zona lumbar|lumbar/gi, text: 'región lumbar', confidence: 0.92 },\n      { pattern: /glúteo/gi, text: 'músculo glúteo', confidence: 0.88 },\n      { pattern: /piernas?/gi, text: 'extremidades inferiores', confidence: 0.85 }\n    ];\n\n    // Patrones para hallazgos\n    const findingPatterns = [\n      { pattern: /dolor central|zona central/gi, text: 'dolor de localización central', confidence: 0.87 },\n      { pattern: /trabado|rigidez/gi, text: 'limitación funcional severa', confidence: 0.85 },\n      { pattern: /de pie.*mucho rato/gi, text: 'prolongada bipedestación laboral', confidence: 0.90 }\n    ];\n\n    // Extraer síntomas\n    for (const pattern of symptomPatterns) {\n      const matches = transcript.match(pattern.pattern);\n      if (matches) {\n        entities.push({\n          id: `entity_${entityId++}`,\n          type: 'symptom',\n          text: pattern.text,\n          confidence: pattern.confidence,\n          context: matches[0]\n        });\n      }\n    }\n\n    // Extraer anatomía\n    for (const pattern of anatomyPatterns) {\n      const matches = transcript.match(pattern.pattern);\n      if (matches) {\n        entities.push({\n          id: `entity_${entityId++}`,\n          type: 'anatomy',\n          text: pattern.text,\n          confidence: pattern.confidence,\n          context: matches[0]\n        });\n      }\n    }\n\n    // Extraer hallazgos\n    for (const pattern of findingPatterns) {\n      const matches = transcript.match(pattern.pattern);\n      if (matches) {\n        entities.push({\n          id: `entity_${entityId++}`,\n          type: 'finding',\n          text: pattern.text,\n          confidence: pattern.confidence,\n          context: matches[0]\n        });\n      }\n    }\n\n    // Agregar ocupación como hallazgo relevante\n    if (transcript.toLowerCase().includes('hostelería')) {\n      entities.push({\n        id: `entity_${entityId++}`,\n        type: 'finding',\n        text: 'trabajo en hostelería con bipedestación prolongada',\n        confidence: 0.95,\n        context: 'De hostelería, estás de pie durante mucho rato y cargando peso'\n      });\n    }\n\n    return entities;\n  }\n\n  /**\n   * Genera insights clínicos basados en las entidades extraídas\n   */\n  public static generateClinicalInsights(entities: ClinicalEntity[]): ClinicalInsight[] {\n    const insights: ClinicalInsight[] = [];\n\n    // Determinar diagnóstico principal basado en síntomas\n    const hasLumbarPain = entities.some(e => e.text.includes('lumbar'));\n    const hasCalcanealSpur = entities.some(e => e.text.includes('calcáneo'));\n    const hasRadiation = entities.some(e => e.text.includes('irradiado'));\n\n    if (hasLumbarPain && hasRadiation) {\n      insights.push({\n        id: 'diagnosis_1',\n        title: 'Lumbalgia mecánica con irradiación',\n        description: 'Dolor lumbar de origen mecánico con irradiación a glúteo y extremidades inferiores, compatible con compresión radicular L4-L5',\n        confidence: 0.88,\n        category: 'diagnosis',\n        severity: 'medium',\n        timestamp: new Date(),\n        evidence: {\n          source: 'Anamnesis clínica',\n          publicationDate: new Date().toISOString()\n        }\n      });\n    }\n\n    if (hasCalcanealSpur) {\n      insights.push({\n        id: 'diagnosis_2',\n        title: 'Espolón calcáneo bilateral',\n        description: 'Presencia confirmada de espolones calcáneos bilaterales que contribuyen al dolor en extremidades inferiores',\n        confidence: 0.95,\n        category: 'diagnosis',\n        severity: 'medium',\n        timestamp: new Date()\n      });\n    }\n\n    // Tratamientos recomendados\n    insights.push({\n      id: 'treatment_1',\n      title: 'Terapia manual lumbar',\n      description: 'Técnicas de terapia manual para descompresión lumbar y mejora de la movilidad',\n      confidence: 0.85,\n      category: 'intervention',\n      severity: 'low',\n      timestamp: new Date()\n    });\n\n    insights.push({\n      id: 'treatment_2',\n      title: 'Ejercicios de fortalecimiento core',\n      description: 'Programa de ejercicios para fortalecimiento de musculatura profunda y estabilización lumbar',\n      confidence: 0.90,\n      category: 'exercise',\n      severity: 'low',\n      timestamp: new Date()\n    });\n\n    insights.push({\n      id: 'treatment_3',\n      title: 'Modificación ergonómica laboral',\n      description: 'Recomendaciones ergonómicas para trabajo en hostelería y reducción de bipedestación prolongada',\n      confidence: 0.92,\n      category: 'education',\n      severity: 'low',\n      timestamp: new Date()\n    });\n\n    insights.push({\n      id: 'treatment_4',\n      title: 'Plantillas ortopédicas',\n      description: 'Prescripción de plantillas personalizadas para manejo de espolones calcáneos',\n      confidence: 0.88,\n      category: 'intervention',\n      severity: 'low',\n      timestamp: new Date()\n    });\n\n    // Diagnóstico diferencial\n    insights.push({\n      id: 'differential_1',\n      title: 'Síndrome facetario lumbar',\n      description: 'Considerar afectación de articulaciones facetarias como causa de dolor lumbar central',\n      confidence: 0.75,\n      category: 'differential',\n      severity: 'low',\n      timestamp: new Date()\n    });\n\n    return insights;\n  }\n}\n\n/**\n * Función principal de procesamiento\n */\nasync function processOscarTranscript(): Promise<void> {\n  try {\n    console.log('Iniciando análisis de transcripción clínica de Óscar...\\n');\n\n    // 1. Extraer entidades clínicas del texto\n    console.log('Extrayendo entidades clínicas...');\n    const entities = TranscriptProcessor.extractClinicalEntities(TRANSCRIPT_OSCAR);\n    console.log(`Extraídas ${entities.length} entidades clínicas\\n`);\n\n    // 2. Generar insights clínicos\n    console.log('Generando insights clínicos...');\n    const insights = TranscriptProcessor.generateClinicalInsights(entities);\n    console.log(`Generados ${insights.length} insights clínicos\\n`);\n\n    // 3. Generar SOAP estructurado\n    console.log('Generando estructura SOAP...');\n    const soapResult: SOAPGenerationResult = await SOAPGenerationService.generateSOAP(\n      entities,\n      insights,\n      'therapist_test',\n      'oscar_session_001'\n    );\n    console.log('SOAP generado exitosamente\\n');\n\n    // 4. Preparar resultado final\n    const finalResult = {\n      patient: \"Óscar Seguí\",\n      transcript_length: TRANSCRIPT_OSCAR.length,\n      entities_extracted: entities.length,\n      insights_generated: insights.length,\n      soap: {\n        subjective: soapResult.soap.subjective.chiefComplaint,\n        objective: soapResult.soap.objective.inspection,\n        assessment: soapResult.soap.assessment.primaryDiagnosis,\n        plan: soapResult.soap.plan.interventions.slice(0, 3) // Primeras 3 intervenciones\n      },\n      metadata: {\n        qualityScore: soapResult.qualityScore,\n        reviewRequired: soapResult.reviewRequired,\n        processingTime: soapResult.processingTime,\n        complianceFlags: soapResult.complianceFlags,\n        criticalFindings: soapResult.analysisMetadata.criticalFindingsCount\n      },\n      clinical_entities: entities.map(e => ({\n        type: e.type,\n        text: e.text,\n        confidence: Math.round(e.confidence * 100)\n      })),\n      treatment_plan: insights\n        .filter(i => i.category === 'intervention' || i.category === 'exercise')\n        .map(i => i.title)\n    };\n\n    // 5. Mostrar resultado en consola\n    console.log('RESULTADO FINAL DEL ANÁLISIS CLÍNICO:');\n    console.log('=====================================\\n');\n    console.log(JSON.stringify(finalResult, null, 2));\n\n    console.log('\\nRESUMEN DE ANÁLISIS:');\n    console.log('======================');\n    console.log(`Paciente: ${finalResult.patient}`);\n    console.log(`Calidad SOAP: ${finalResult.metadata.qualityScore}/100`);\n    console.log(`Revisión requerida: ${finalResult.metadata.reviewRequired ? 'SÍ' : 'NO'}`);\n    console.log(`Flags de compliance: ${finalResult.metadata.complianceFlags.join(', ')}`);\n    console.log(`Tiempo procesamiento: ${Math.round(finalResult.metadata.processingTime)}ms`);\n    console.log(`Entidades extraídas: ${finalResult.entities_extracted}`);\n    console.log(`Insights generados: ${finalResult.insights_generated}`);\n    console.log(`Hallazgos críticos: ${finalResult.metadata.criticalFindings}`);\n\n  } catch (error) {\n    console.error('Error en el procesamiento:', error);\n    // No usar process.exit en entorno de testing\n  }\n}\n\n// Ejecutar el análisis\nprocessOscarTranscript();\n\nexport { TranscriptProcessor, processOscarTranscript };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/types/agent 2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/types/agent.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/types/clinical-analysis.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/types/clinical.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/types/forms 2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/types/forms.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/types/medicalSafety.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/types/nlp 2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/types/nlp.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/types/professionalProfile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/types/suggestions 2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/types/suggestions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/types/ui.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/types/webaudio.globals.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[72,75],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[72,75],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[106,109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[106,109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export {}\ndeclare global {\n  interface Window {\n    SpeechRecognition?: any\n    webkitSpeechRecognition?: any\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/types/wizard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/utils/checkSupabaseConnection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/utils/clearTestData.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[730,783],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1139,1192],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1214,1270],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview Utilidad para limpiar datos de prueba del localStorage\n * @version 1.0.0\n * @author AiDuxCare Development Team\n */\n\n/**\n * Limpia todos los datos de prueba del localStorage\n * Esta función debe ejecutarse al inicio de la aplicación en desarrollo\n */\nexport const clearTestData = (): void => {\n  try {\n    // Lista de claves que pueden contener datos de prueba\n    const testDataKeys = [\n      'aiduxcare-wizard-data',\n      'aiduxcare-test-data',\n      'aiduxcare-user-data',\n      'aiduxcare-form-data',\n      'aiduxcare-session-data'\n    ];\n\n    // Eliminar cada clave de datos de prueba\n    testDataKeys.forEach(key => {\n      if (localStorage.getItem(key)) {\n        localStorage.removeItem(key);\n        console.log(`🧹 Datos de prueba eliminados: ${key}`);\n      }\n    });\n\n    // Limpiar también cualquier clave que contenga \"test\" o \"demo\"\n    const allKeys = Object.keys(localStorage);\n    allKeys.forEach(key => {\n      if (key.toLowerCase().includes('test') || \n          key.toLowerCase().includes('demo') || \n          key.toLowerCase().includes('sample')) {\n        localStorage.removeItem(key);\n        console.log(`🧹 Datos de prueba eliminados: ${key}`);\n      }\n    });\n\n    console.log('✅ Limpieza de datos de prueba completada');\n  } catch (error) {\n    console.error('❌ Error al limpiar datos de prueba:', error);\n  }\n};\n\n/**\n * Verifica si hay datos de prueba en el localStorage\n */\nexport const hasTestData = (): boolean => {\n  try {\n    const testDataKeys = [\n      'aiduxcare-wizard-data',\n      'aiduxcare-test-data',\n      'aiduxcare-user-data',\n      'aiduxcare-form-data',\n      'aiduxcare-session-data'\n    ];\n\n    return testDataKeys.some(key => localStorage.getItem(key) !== null);\n  } catch (error) {\n    console.error('❌ Error al verificar datos de prueba:', error);\n    return false;\n  }\n};\n\n/**\n * Obtiene información sobre los datos almacenados en localStorage\n */\nexport const getLocalStorageInfo = (): { totalKeys: number; testDataKeys: string[] } => {\n  try {\n    const allKeys = Object.keys(localStorage);\n    const testDataKeys = allKeys.filter(key => \n      key.toLowerCase().includes('aiduxcare') ||\n      key.toLowerCase().includes('test') ||\n      key.toLowerCase().includes('demo')\n    );\n\n    return {\n      totalKeys: allKeys.length,\n      testDataKeys\n    };\n  } catch (error) {\n    console.error('❌ Error al obtener información del localStorage:', error);\n    return { totalKeys: 0, testDataKeys: [] };\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/utils/supabaseConnectionTest.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/utils/supabaseTestClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/vitest.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[304,307],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[304,307],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[628,631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[628,631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[636,639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[636,639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[683,686],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[683,686],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[826,829],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[826,829],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[899,902],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[899,902],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[927,930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[927,930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[958,961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[958,961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[987,990],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[987,990],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1015,1018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1015,1018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1102,1105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1102,1105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1141,1144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1141,1144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1174,1177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1174,1177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1207,1210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1207,1210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1241,1244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1241,1244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1274,1277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1274,1277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1307,1310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1307,1310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1340,1343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1340,1343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1377,1380],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1377,1380],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1438,1441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1438,1441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1466,1469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1466,1469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1494,1497],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1494,1497],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1549,1552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1549,1552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1577,1580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1577,1580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1605,1608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1605,1608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Declaraciones de tipos para vitest\ndeclare module 'vitest' {\n  export const describe: (name: string, fn: () => void) => void;\n  export const it: (name: string, fn: () => void | Promise<void>) => void;\n  export const test: (name: string, fn: () => void | Promise<void>) => void;\n  export const expect: any;\n  export const beforeEach: (fn: () => void | Promise<void>) => void;\n  export const afterEach: (fn: () => void | Promise<void>) => void;\n  export const beforeAll: (fn: () => void | Promise<void>) => void;\n  export const afterAll: (fn: () => void | Promise<void>) => void;\n  export const vi: {\n    fn: (implementation?: any) => any;\n    mock: (module: string, factory: () => any) => void;\n    clearAllMocks: () => void;\n    resetAllMocks: () => void;\n    restoreAllMocks: () => void;\n  };\n  export const expectTypeOf: any;\n}\n\ndeclare module '@testing-library/react' {\n  export const render: any;\n  export const screen: any;\n  export const fireEvent: any;\n  export const waitFor: any;\n  export const within: any;\n}\n\ndeclare module '@testing-library/jest-dom' {\n  export const toBeInTheDocument: any;\n  export const toHaveTextContent: any;\n  export const toHaveClass: any;\n  export const toBeVisible: any;\n  export const toBeDisabled: any;\n  export const toBeEnabled: any;\n  export const toHaveValue: any;\n  export const toBeChecked: any;\n  export const toHaveAttribute: any;\n}\n\ndeclare module 'sinon-chai' {\n  export const expect: any;\n  export const assert: any;\n  export const should: any;\n}\n\ndeclare module 'chai' {\n  export const expect: any;\n  export const assert: any;\n  export const should: any;\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/z_trash/SimpleOnboardingPage.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":53,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1384,1431],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 🏥 Simple Onboarding Page - Wizard funcional sin dependencias problemáticas\n */\n\nimport React, { useState } from 'react';\n\nexport const SimpleOnboardingPage: React.FC = () => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    profession: '',\n    country: ''\n  });\n\n  const steps = [\n    { id: 'personal', title: 'Datos Personales', description: 'Información básica' },\n    { id: 'professional', title: 'Datos Profesionales', description: 'Profesión y especialidad' },\n    { id: 'compliance', title: 'Compliance', description: 'Consentimientos y seguridad' }\n  ];\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleNextStep = () => {\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePreviousStep = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const canProceed = () => {\n    switch (currentStep) {\n      case 0:\n        return !!(formData.firstName && formData.lastName && formData.email);\n      case 1:\n        return !!(formData.profession && formData.country);\n      case 2:\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  const handleSubmit = () => {\n    console.log('Datos del formulario:', formData);\n    alert('¡Onboarding completado! Datos: ' + JSON.stringify(formData, null, 2));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"max-w-2xl w-full bg-white rounded-2xl shadow-2xl p-8\">\n        {/* Header con gradiente fucsia-azul */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold bg-gradient-to-r from-[#E91E63] to-[#3B82F6] bg-clip-text text-transparent mb-4\">\n            Registro Profesional AiDuxCare\n          </h1>\n          <p className=\"text-lg text-gray-600\">\n            Completa tu perfil en solo 3 pasos\n          </p>\n        </div>\n\n        {/* Indicadores de progreso */}\n        <div className=\"flex items-center justify-center mb-8\">\n          {steps.map((step, index) => (\n            <div key={step.id} className=\"flex items-center\">\n              <div className={`w-12 h-12 rounded-full flex items-center justify-center text-white font-bold text-lg transition-all duration-300 ${\n                index <= currentStep \n                  ? 'bg-gradient-to-r from-[#E91E63] to-[#3B82F6] shadow-lg' \n                  : 'bg-gray-300 text-gray-600'\n              }`}>\n                {index + 1}\n              </div>\n              <div className=\"ml-3\">\n                <h3 className={`font-semibold ${\n                  index <= currentStep ? 'text-gray-900' : 'text-gray-500'\n                }`}>\n                  {step.title}\n                </h3>\n                <p className={`text-sm ${\n                  index <= currentStep ? 'text-gray-600' : 'text-gray-400'\n                }`}>\n                  {step.description}\n                </p>\n              </div>\n              {index < steps.length - 1 && (\n                <div className={`w-20 h-1 mx-4 transition-all duration-300 ${\n                  index < currentStep \n                    ? 'bg-gradient-to-r from-[#E91E63] to-[#3B82F6]' \n                    : 'bg-gray-300'\n                }`} />\n              )}\n            </div>\n          ))}\n        </div>\n\n        {/* Contenido del paso actual */}\n        <div className=\"mb-8\">\n          {currentStep === 0 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-xl font-semibold text-gray-800 mb-4\">Datos Personales</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Primer Nombre *\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.firstName}\n                    onChange={(e) => handleInputChange('firstName', e.target.value)}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#3B82F6] focus:border-transparent\"\n                    placeholder=\"Tu nombre\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Primer Apellido *\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={formData.lastName}\n                    onChange={(e) => handleInputChange('lastName', e.target.value)}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#3B82F6] focus:border-transparent\"\n                    placeholder=\"Tu apellido\"\n                  />\n                </div>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Email *\n                </label>\n                <input\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => handleInputChange('email', e.target.value)}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#3B82F6] focus:border-transparent\"\n                  placeholder=\"tu@email.com\"\n                />\n              </div>\n            </div>\n          )}\n\n          {currentStep === 1 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-xl font-semibold text-gray-800 mb-4\">Datos Profesionales</h3>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Profesión *\n                </label>\n                <select\n                  value={formData.profession}\n                  onChange={(e) => handleInputChange('profession', e.target.value)}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#3B82F6] focus:border-transparent\"\n                >\n                  <option value=\"\">Selecciona tu profesión</option>\n                  <option value=\"Fisioterapia\">Fisioterapia</option>\n                  <option value=\"Medicina\">Medicina</option>\n                  <option value=\"Enfermería\">Enfermería</option>\n                  <option value=\"Psicología\">Psicología</option>\n                  <option value=\"Odontología\">Odontología</option>\n                  <option value=\"Otro\">Otro</option>\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  País *\n                </label>\n                <select\n                  value={formData.country}\n                  onChange={(e) => handleInputChange('country', e.target.value)}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#3B82F6] focus:border-transparent\"\n                >\n                  <option value=\"\">Selecciona tu país</option>\n                  <option value=\"España\">España</option>\n                  <option value=\"México\">México</option>\n                  <option value=\"Colombia\">Colombia</option>\n                  <option value=\"Argentina\">Argentina</option>\n                  <option value=\"Chile\">Chile</option>\n                  <option value=\"Otro\">Otro</option>\n                </select>\n              </div>\n            </div>\n          )}\n\n          {currentStep === 2 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-xl font-semibold text-gray-800 mb-4\">Compliance y Seguridad</h3>\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <p className=\"text-blue-800 text-sm\">\n                  Al completar este formulario, aceptas nuestros términos de servicio y política de privacidad.\n                  Tus datos serán tratados con la máxima seguridad y confidencialidad.\n                </p>\n              </div>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center\">\n                  <input type=\"checkbox\" id=\"gdpr\" className=\"w-4 h-4 text-[#3B82F6] border-gray-300 rounded focus:ring-[#3B82F6]\" />\n                  <label htmlFor=\"gdpr\" className=\"ml-2 text-sm text-gray-700\">\n                    Acepto el tratamiento de datos personales (GDPR)\n                  </label>\n                </div>\n                <div className=\"flex items-center\">\n                  <input type=\"checkbox\" id=\"terms\" className=\"w-4 h-4 text-[#3B82F6] border-gray-300 rounded focus:ring-[#3B82F6]\" />\n                  <label htmlFor=\"terms\" className=\"ml-2 text-sm text-gray-700\">\n                    Acepto los términos y condiciones\n                  </label>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Botones de navegación */}\n        <div className=\"flex justify-between\">\n          <button\n            onClick={handlePreviousStep}\n            disabled={currentStep === 0}\n            className=\"px-6 py-3 bg-gray-200 text-gray-700 font-semibold rounded-lg hover:bg-gray-300 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            Anterior\n          </button>\n\n          {currentStep === steps.length - 1 ? (\n            <button\n              onClick={handleSubmit}\n              className=\"px-8 py-3 bg-gradient-to-r from-[#E91E63] to-[#3B82F6] text-white font-semibold rounded-lg hover:from-[#D81B60] hover:to-[#2563EB] transition-all duration-200 shadow-lg hover:shadow-xl\"\n            >\n              Completar Registro\n            </button>\n          ) : (\n            <button\n              onClick={handleNextStep}\n              disabled={!canProceed()}\n              className=\"px-6 py-3 bg-gradient-to-r from-[#E91E63] to-[#3B82F6] text-white font-semibold rounded-lg hover:from-[#D81B60] hover:to-[#2563EB] transition-all duration-200 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              Siguiente\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SimpleOnboardingPage;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/z_trash/wizard/CountryCodeSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/z_trash/wizard/EmailRecoveryModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/z_trash/wizard/GeolocationPermission.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":13,"column":37,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":42},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[726,790],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[815,896],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'requestGeolocationPermission'. Either include it or remove the dependency array.","line":29,"column":6,"nodeType":"ArrayExpression","endLine":29,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, requestGeolocationPermission]","fix":{"range":[946,954],"text":"[isOpen, requestGeolocationPermission]"}}]},{"ruleId":"no-undef","severity":2,"message":"'PermissionName' is not defined.","line":47,"column":36,"nodeType":"Identifier","messageId":"undef","endLine":47,"endColumn":50},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1920,1986],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[{"ruleId":"react/prop-types","severity":2,"message":"'isOpen' is missing in props validation","line":14,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":14,"endColumn":9,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react/prop-types","severity":2,"message":"'onClose' is missing in props validation","line":15,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":15,"endColumn":10,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react/prop-types","severity":2,"message":"'onLocationDetected' is missing in props validation","line":16,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":16,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react/prop-types","severity":2,"message":"'onManualSelection' is missing in props validation","line":17,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":17,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable react/prop-types */\nimport { useState, useEffect } from 'react';\n\nimport { GeolocationData } from '../../services/geolocationService';\n\ninterface GeolocationPermissionProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onLocationDetected: (location: GeolocationData) => void;\n  onManualSelection: () => void;\n}\n\nexport const GeolocationPermission: React.FC<GeolocationPermissionProps> = ({\n  isOpen,\n  onClose,\n  onLocationDetected,\n  onManualSelection\n}) => {\n  const [permissionStatus, setPermissionStatus] = useState<'requesting' | 'granted' | 'denied' | 'error'>('requesting');\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  // Debug: Log cuando cambie isOpen\n  useEffect(() => {\n    console.log('GeolocationPermission - isOpen cambió a:', isOpen);\n    if (isOpen) {\n      console.log('GeolocationPermission - Activando geolocalización automáticamente');\n      requestGeolocationPermission();\n    }\n  }, [isOpen]);\n\n  const requestGeolocationPermission = async () => {\n    try {\n      setPermissionStatus('requesting');\n      setErrorMessage('');\n\n      // Verificar si el navegador soporta geolocalización\n      if (!navigator.geolocation) {\n        setPermissionStatus('error');\n        setErrorMessage('Tu navegador no soporta geolocalización');\n        return;\n      }\n\n      // Verificar permisos usando la API de Permisos si está disponible\n      if ('permissions' in navigator) {\n        try {\n          const permission = await (navigator as Navigator & { permissions?: Permissions }).permissions?.query({ \n            name: 'geolocation' as PermissionName \n          });\n          \n          if (permission?.state === 'denied') {\n            setPermissionStatus('denied');\n            setErrorMessage('Permiso de geolocalización denegado. Por favor, habilítalo en la configuración de tu navegador.');\n            return;\n          }\n        } catch (error) {\n          console.log('No se pudo verificar el estado de permisos:', error);\n        }\n      }\n\n      // Solicitar ubicación\n      navigator.geolocation.getCurrentPosition(\n        async () => {\n          try {\n            // Usar el servicio de geolocalización para obtener datos completos\n            const geolocationService = (await import('../../services/geolocationService')).geolocationService.getInstance();\n            const locationData = await geolocationService.detectLocation();\n            \n            if (locationData) {\n              setPermissionStatus('granted');\n              onLocationDetected(locationData);\n              onClose();\n            } else {\n              setPermissionStatus('error');\n              setErrorMessage('No se pudo obtener la información de ubicación completa');\n            }\n          } catch (error) {\n            console.error('Error al obtener datos de ubicación:', error);\n            setPermissionStatus('error');\n            setErrorMessage('Error al procesar la información de ubicación');\n          }\n        },\n        (error) => {\n          console.error('Error de geolocalización:', error);\n          \n          switch (error.code) {\n            case error.PERMISSION_DENIED:\n              setPermissionStatus('denied');\n              setErrorMessage('Permiso de geolocalización denegado. Por favor, habilítalo en la configuración de tu navegador.');\n              break;\n            case error.POSITION_UNAVAILABLE:\n              setPermissionStatus('error');\n              setErrorMessage('La información de ubicación no está disponible en este momento.');\n              break;\n            case error.TIMEOUT:\n              setPermissionStatus('error');\n              setErrorMessage('Se agotó el tiempo de espera para obtener la ubicación.');\n              break;\n            default:\n              setPermissionStatus('error');\n              setErrorMessage('Error desconocido al obtener la ubicación.');\n          }\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 60000\n        }\n      );\n    } catch (error) {\n      console.error('Error al solicitar permisos:', error);\n      setPermissionStatus('error');\n      setErrorMessage('Error al solicitar permisos de geolocalización');\n    }\n  };\n\n  const handleManualSelection = () => {\n    onManualSelection();\n    onClose();\n  };\n\n  const handleRetry = () => {\n    requestGeolocationPermission();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n        <h2 className=\"text-xl font-semibold mb-4\">Permiso de Ubicación</h2>\n        \n        {permissionStatus === 'requesting' && (\n          <div className=\"text-center py-8\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">Solicitando permiso de ubicación...</p>\n          </div>\n        )}\n\n        {permissionStatus === 'granted' && (\n          <div className=\"text-center py-8\">\n            <div className=\"text-green-600 text-6xl mb-4\">✓</div>\n            <p className=\"text-gray-600\">¡Ubicación detectada exitosamente!</p>\n          </div>\n        )}\n\n        {permissionStatus === 'denied' && (\n          <div className=\"py-4\">\n            <div className=\"text-red-600 text-6xl mb-4 text-center\">⚠</div>\n            <p className=\"text-gray-700 mb-4\">{errorMessage}</p>\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-3 mb-4\">\n              <p className=\"text-sm text-yellow-800\">\n                <strong>Para habilitar la geolocalización:</strong>\n                <br />1. Haz clic en el candado en la barra de direcciones\n                <br />2. Cambia &quot;Ubicación&quot; a &quot;Permitir&quot;\n                <br />3. Recarga la página\n              </p>\n            </div>\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={handleRetry}\n                className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n              >\n                Reintentar\n              </button>\n              <button\n                onClick={handleManualSelection}\n                className=\"flex-1 px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700\"\n              >\n                Selección Manual\n              </button>\n            </div>\n          </div>\n        )}\n\n        {permissionStatus === 'error' && (\n          <div className=\"py-4\">\n            <div className=\"text-red-600 text-6xl mb-4 text-center\">❌</div>\n            <p className=\"text-gray-700 mb-4\">{errorMessage}</p>\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={handleRetry}\n                className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n              >\n                Reintentar\n              </button>\n              <button\n                onClick={handleManualSelection}\n                className=\"flex-1 px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700\"\n              >\n                Selección Manual\n              </button>\n            </div>\n          </div>\n        )}\n\n        <div className=\"mt-6 text-center\">\n          <button\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700 underline\"\n          >\n            Cerrar\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/z_trash/wizard/GeolocationPermissionModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/z_trash/wizard/LegalComplianceModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/z_trash/wizard/LocationAwarenessModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'geolocationService' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\n\nimport { geolocationService } from '../../services/geolocationService';\n\ninterface LocationAwarenessModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onLocationSelected: (countryCode: string) => void;\n  onUseCurrentLocation: () => void;\n}\n\nexport const LocationAwarenessModal: React.FC<LocationAwarenessModalProps> = ({\n  isOpen,\n  onClose,\n  onLocationSelected,\n  onUseCurrentLocation\n}) => {\n  const [selectedCountry, setSelectedCountry] = useState<string>('');\n  const [showCountryDetails, setShowCountryDetails] = useState(false);\n\n  if (!isOpen) return null;\n\n  const geolocationService = geolocationService();\n  const availableCountries = geolocationService.getAvailableCountriesForManualSelection();\n  const importanceExplanation = geolocationService.getLocationImportanceExplanation();\n\n  const handleCountrySelect = (countryCode: string) => {\n    setSelectedCountry(countryCode);\n    setShowCountryDetails(true);\n  };\n\n  const handleConfirmCountry = () => {\n    if (selectedCountry) {\n      onLocationSelected(selectedCountry);\n      onClose();\n    }\n  };\n\n  const handleUseCurrentLocation = () => {\n    onUseCurrentLocation();\n    onClose();\n  };\n\n  const selectedCountryData = selectedCountry ? \n    geolocationService.getFiduciaryDataForCountry(selectedCountry) : null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-6 max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-2xl font-semibold text-gray-900\">\n            Ubicación y compliance legal\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 text-xl\"\n          >\n            ×\n          </button>\n        </div>\n\n        {/* Explicación de importancia */}\n        <div className=\"bg-blue-50 border-l-4 border-blue-400 p-4 mb-6\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <svg className=\"h-5 w-5 text-blue-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n              </svg>\n            </div>\n            <div className=\"ml-3\">\n              <h3 className=\"text-sm font-medium text-blue-800\">\n                ¿Por qué es importante tu ubicación real?\n              </h3>\n              <div className=\"mt-2 text-sm text-blue-700 whitespace-pre-line\">\n                {importanceExplanation}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Opciones */}\n        <div className=\"space-y-4 mb-6\">\n          <div className=\"flex space-x-4\">\n            <button\n              onClick={handleUseCurrentLocation}\n              className=\"flex-1 bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              Usar mi ubicación real (recomendado)\n            </button>\n            <button\n              onClick={() => setShowCountryDetails(false)}\n              className=\"flex-1 bg-gray-600 text-white px-4 py-3 rounded-lg hover:bg-gray-700 transition-colors\"\n            >\n              Seleccionar país manualmente\n            </button>\n          </div>\n        </div>\n\n        {/* Selección manual de país */}\n        {!showCountryDetails && (\n          <div className=\"border rounded-lg p-4\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">\n              Selecciona tu país de uso:\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              {availableCountries.map((country) => (\n                <button\n                  key={country.code}\n                  onClick={() => handleCountrySelect(country.code)}\n                  className=\"text-left p-3 border rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-colors\"\n                >\n                  <div className=\"font-medium text-gray-900\">{country.name}</div>\n                  <div className=\"text-sm text-gray-600\">\n                  {country.gdpr && 'GDPR'} {country.hipaa && 'HIPAA'}\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    Retención: {country.dataRetention} días\n                  </div>\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Detalles del país seleccionado */}\n        {showCountryDetails && selectedCountryData && (\n          <div className=\"border rounded-lg p-4 bg-gray-50\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4\">\n              Datos fiduciarios para {selectedCountryData.location.country}\n            </h3>\n            \n            <div className=\"space-y-3 mb-4\">\n              <div className=\"bg-white p-3 rounded border\">\n                <div className=\"text-sm text-gray-600\">Ubicación por defecto:</div>\n                <div className=\"font-medium\">\n                  {selectedCountryData.location.city}, {selectedCountryData.location.region}\n                </div>\n              </div>\n              \n              <div className=\"bg-white p-3 rounded border\">\n                <div className=\"text-sm text-gray-600\">Compliance legal:</div>\n                <div className=\"text-sm\">\n                  {selectedCountryData.explanation}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={handleConfirmCountry}\n                className=\"bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors\"\n              >\n                ✅ Confirmar y usar estos datos\n              </button>\n              <button\n                onClick={() => setShowCountryDetails(false)}\n                className=\"bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors\"\n              >\n                Cambiar país\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Nota importante */}\n        <div className=\"mt-6 p-4 bg-yellow-50 border-l-4 border-yellow-400\">\n          <div className=\"text-sm text-yellow-800\">\n            <strong>Nota importante:</strong> Si seleccionas un país diferente al real, \n            las regulaciones legales aplicadas pueden no ser las correctas para tu jurisdicción. \n            Esto puede afectar la protección de tus datos médicos.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/z_trash/wizard/LocationDataStep.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'geolocationService' is defined but never used.","line":12,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":45},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1645,1730],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1826,1915],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":51,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2055,2157],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'detectLocationAutomatically'. Either include it or remove the dependency array.","line":53,"column":6,"nodeType":"ArrayExpression","endLine":53,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [detectLocationAutomatically, locationData]","fix":{"range":[2198,2212],"text":"[detectLocationAutomatically, locationData]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2951,3032],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3290,3371],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3697,3778],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4301,4380],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4765,4828],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":122,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":122,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4831,4901],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4904,4962],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":155,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":155,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6178,6248],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'data.city' and 'data.province'. Either include them or remove the dependency array.","line":302,"column":6,"nodeType":"ArrayExpression","endLine":302,"endColumn":68,"suggestions":[{"desc":"Update the dependencies array to be: [detectedLocation, data.country, handleFieldChangeWithContext, data.province, data.city]","fix":{"range":[12229,12291],"text":"[detectedLocation, data.country, handleFieldChangeWithContext, data.province, data.city]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":342,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":342,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13759,13814],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * LocationDataStep - Paso 3 del Wizard de Registro\n * Ubicación y Consentimientos Legales (4 campos + 2 checkboxes del .md)\n * \n * @version 1.0.0\n * @author AiDuxCare Development Team\n */\n\nimport React, { useState, useEffect } from 'react';\n\nimport { LocationData, WizardStep, ValidationResult } from '../../types/wizard';\nimport { GeolocationData, geolocationService } from '../../services/geolocationService';\nimport { SPANISH_CITIES, getCitiesByProvince } from '../../data/spanishCities';\nimport { LegalChecklist, type LegalChecklistItem } from '../LegalChecklist';\nimport { useProfessionalProfile, ProfessionalProfile } from '../../context/ProfessionalProfileContext';\n\nimport { LocationAwarenessModal } from './LocationAwarenessModal';\n\ninterface LocationDataStepProps {\n  data: LocationData;\n  errors: Record<string, string>;\n  onFieldChange: (field: string, value: string | boolean) => void;\n  onValidation: (step: WizardStep) => ValidationResult;\n  locationData?: GeolocationData | null;\n}\n\nexport const LocationDataStep: React.FC<LocationDataStepProps> = ({\n  data,\n  errors,\n  onFieldChange,\n  locationData\n}) => {\n  const { updateWizardData } = useProfessionalProfile();\n  // const [legalCompliance, setLegalCompliance] = useState<LegalCompliance | null>(null);\n  const [detectedLocation, setDetectedLocation] = useState<GeolocationData | null>(locationData || null);\n  const [availableCities, setAvailableCities] = useState<typeof SPANISH_CITIES>([]);\n  const [showLocationAwareness, setShowLocationAwareness] = useState(false);\n  \n  // Ejecutar geolocalización automáticamente al montarse el componente\n  useEffect(() => {\n    console.log('LocationDataStep - Componente montado, verificando geolocalización...');\n    \n    // Si ya tenemos datos de ubicación detectados, usarlos\n    if (locationData) {\n      console.log('LocationDataStep - Usando datos de ubicación ya detectados:', locationData);\n      setDetectedLocation(locationData);\n      return;\n    }\n    \n    // Si no tenemos datos, ejecutar geolocalización automáticamente\n    console.log('LocationDataStep - No hay datos de ubicación, ejecutando geolocalización automática...');\n    detectLocationAutomatically();\n  }, [locationData]);\n  \n  // Función para manejar selección manual de país\n  const handleManualCountrySelection = (countryCode: string) => {\n    const geolocationService = geolocationService();\n    const fiduciaryData = geolocationService.getFiduciaryDataForCountry(countryCode);\n    \n    if (fiduciaryData) {\n      // Llenar campos con datos fiduciarios\n      if (fiduciaryData.location.city) {\n        handleFieldChangeWithContext('city', fiduciaryData.location.city);\n      }\n      if (fiduciaryData.location.region) {\n        handleFieldChangeWithContext('province', fiduciaryData.location.region);\n      }\n      if (fiduciaryData.location.country) {\n        handleFieldChangeWithContext('country', fiduciaryData.location.country);\n      }\n      \n      console.log('LocationDataStep - Datos fiduciarios aplicados para:', countryCode);\n    }\n  };\n\n  // Función para usar ubicación actual\n  const handleUseCurrentLocation = () => {\n    detectLocationAutomatically();\n  };\n\n  // Función para detectar ubicación automáticamente\n  const detectLocationAutomatically = async () => {\n    try {\n      console.log('LocationDataStep - Iniciando detección automática de ubicación...');\n      \n      // Usar el servicio de geolocalización que maneja fallbacks automáticamente\n      const geolocationService = (await import('../../services/geolocationService')).geolocationService.getInstance();\n      const newLocationData = await geolocationService.detectLocation();\n      \n      if (newLocationData) {\n        console.log('LocationDataStep - Datos de ubicación obtenidos:', newLocationData);\n        setDetectedLocation(newLocationData);\n        \n        // Llenar automáticamente los campos de ubicación si están disponibles\n        if (newLocationData.country) {\n          handleFieldChangeWithContext('country', newLocationData.country);\n        }\n        if (newLocationData.region) {\n          handleFieldChangeWithContext('province', newLocationData.region);\n        }\n        if (newLocationData.city) {\n          handleFieldChangeWithContext('city', newLocationData.city);\n        }\n      } else {\n        console.log('LocationDataStep - No se pudo obtener ubicación automáticamente');\n      }\n    } catch (error) {\n      console.error('LocationDataStep - Error en geolocalización automática:', error);\n    }\n  };\n  \n  // Usar datos de ubicación detectados si están disponibles\n  const currentData = {\n    ...data,\n    // Usar los datos del wizard que ya están mapeados correctamente\n    country: data.country,\n    province: data.province,\n    city: data.city\n  };\n  \n  console.log('LocationDataStep - Datos actuales:', currentData);\n  console.log('LocationDataStep - Datos detectados:', detectedLocation);\n  console.log('LocationDataStep - Datos del wizard:', data);\n  const [legalChecklistItems, setLegalChecklistItems] = useState<LegalChecklistItem[]>([\n    {\n      id: 'terms-accepted',\n      title: 'Acepto los Términos y Condiciones de Uso',\n      description: 'He leído y comprendo las condiciones de uso de AiDuxCare',\n      required: true,\n      category: 'terms',\n      checked: false // NO pre-cargar consentimientos\n    },\n    {\n      id: 'privacy-accepted',\n      title: 'Acepto la Política de Privacidad',\n      description: 'Autorizo el procesamiento de datos según la política de privacidad',\n      required: true,\n      category: 'privacy',\n      checked: false // NO pre-cargar consentimientos\n    },\n    {\n      id: 'medical-disclaimer',\n      title: 'Acepto el Disclaimer Médico',\n      description: 'Entiendo que AiDuxCare es un asistente y no reemplaza mi juicio clínico',\n      required: true,\n      category: 'medical',\n      checked: false // NO pre-cargar consentimientos\n    }\n  ]);\n\n  // Mapear campos del wizard a campos del contexto\n  const handleFieldChangeWithContext = (field: string, value: string | boolean) => {\n    // Solo logear cambios importantes, no cada letra\n    if (field === 'country' || field === 'province' || field === 'city') {\n      console.log(`LocationDataStep - Campo cambiado: ${field} = ${value}`);\n    }\n    \n    // Mapear campos del wizard a campos del contexto\n    const fieldMapping: Record<string, keyof ProfessionalProfile> = {\n      country: 'country',\n      province: 'province',\n      city: 'city',\n      consentGDPR: 'consentGranted',\n      consentHIPAA: 'consentGranted'\n    };\n\n    const contextField = fieldMapping[field];\n    if (contextField) {\n      updateWizardData(contextField, value);\n    }\n    \n    // También llamar al callback original para mantener compatibilidad\n    onFieldChange(field, value);\n  };\n\n  // Provincias españolas ordenadas alfabéticamente\n  const spanishProvinces = [\n    { value: 'albacete', label: 'Albacete' },\n    { value: 'alava', label: 'Álava' },\n    { value: 'alicante', label: 'Alicante' },\n    { value: 'almeria', label: 'Almería' },\n    { value: 'asturias', label: 'Asturias' },\n    { value: 'avila', label: 'Ávila' },\n    { value: 'badajoz', label: 'Badajoz' },\n    { value: 'barcelona', label: 'Barcelona' },\n    { value: 'bilbao', label: 'Bilbao' },\n    { value: 'burgos', label: 'Burgos' },\n    { value: 'caceres', label: 'Cáceres' },\n    { value: 'cadiz', label: 'Cádiz' },\n    { value: 'cantabria', label: 'Cantabria' },\n    { value: 'castellon', label: 'Castellón' },\n    { value: 'ceuta', label: 'Ceuta' },\n    { value: 'ciudad-real', label: 'Ciudad Real' },\n    { value: 'cordoba', label: 'Córdoba' },\n    { value: 'cuenca', label: 'Cuenca' },\n    { value: 'gerona', label: 'Gerona' },\n    { value: 'granada', label: 'Granada' },\n    { value: 'guadalajara', label: 'Guadalajara' },\n    { value: 'guipuzcoa', label: 'Guipúzcoa' },\n    { value: 'huelva', label: 'Huelva' },\n    { value: 'huesca', label: 'Huesca' },\n    { value: 'islas-baleares', label: 'Islas Baleares' },\n    { value: 'islas-canarias', label: 'Islas Canarias' },\n    { value: 'jaen', label: 'Jaén' },\n    { value: 'la-coruna', label: 'La Coruña' },\n    { value: 'la-rioja', label: 'La Rioja' },\n    { value: 'las-palmas', label: 'Las Palmas' },\n    { value: 'leon', label: 'León' },\n    { value: 'lerida', label: 'Lérida' },\n    { value: 'lugo', label: 'Lugo' },\n    { value: 'madrid', label: 'Madrid' },\n    { value: 'malaga', label: 'Málaga' },\n    { value: 'melilla', label: 'Melilla' },\n    { value: 'murcia', label: 'Murcia' },\n    { value: 'navarra', label: 'Navarra' },\n    { value: 'orense', label: 'Orense' },\n    { value: 'oviedo', label: 'Oviedo' },\n    { value: 'palencia', label: 'Palencia' },\n    { value: 'pamplona', label: 'Pamplona' },\n    { value: 'pontevedra', label: 'Pontevedra' },\n    { value: 'salamanca', label: 'Salamanca' },\n    { value: 'santa-cruz-tenerife', label: 'Santa Cruz de Tenerife' },\n    { value: 'santander', label: 'Santander' },\n    { value: 'segovia', label: 'Segovia' },\n    { value: 'sevilla', label: 'Sevilla' },\n    { value: 'soria', label: 'Soria' },\n    { value: 'tarragona', label: 'Tarragona' },\n    { value: 'teruel', label: 'Teruel' },\n    { value: 'toledo', label: 'Toledo' },\n    { value: 'valencia', label: 'Valencia' },\n    { value: 'valladolid', label: 'Valladolid' },\n    { value: 'vizcaya', label: 'Vizcaya' },\n    { value: 'zamora', label: 'Zamora' },\n    { value: 'zaragoza', label: 'Zaragoza' }\n  ];\n\n  // Países disponibles ordenados alfabéticamente\n  const countries = [\n    { value: 'ar', label: 'Argentina' },\n    { value: 'bo', label: 'Bolivia' },\n    { value: 'br', label: 'Brasil' },\n    { value: 'bz', label: 'Belice' },\n    { value: 'cl', label: 'Chile' },\n    { value: 'co', label: 'Colombia' },\n    { value: 'cr', label: 'Costa Rica' },\n    { value: 'cu', label: 'Cuba' },\n    { value: 'do', label: 'República Dominicana' },\n    { value: 'ec', label: 'Ecuador' },\n    { value: 'es', label: 'España' },\n    { value: 'fr', label: 'Francia' },\n    { value: 'gb', label: 'Reino Unido' },\n    { value: 'gd', label: 'Granada' },\n    { value: 'de', label: 'Alemania' },\n    { value: 'gt', label: 'Guatemala' },\n    { value: 'ht', label: 'Haití' },\n    { value: 'hn', label: 'Honduras' },\n    { value: 'it', label: 'Italia' },\n    { value: 'jm', label: 'Jamaica' },\n    { value: 'kn', label: 'San Cristóbal y Nieves' },\n    { value: 'lc', label: 'Santa Lucía' },\n    { value: 'mx', label: 'México' },\n    { value: 'ni', label: 'Nicaragua' },\n    { value: 'pa', label: 'Panamá' },\n    { value: 'pe', label: 'Perú' },\n    { value: 'pr', label: 'Puerto Rico' },\n    { value: 'pt', label: 'Portugal' },\n    { value: 'py', label: 'Paraguay' },\n    { value: 'sv', label: 'El Salvador' },\n    { value: 'sr', label: 'Surinam' },\n    { value: 'tt', label: 'Trinidad y Tobago' },\n    { value: 'us', label: 'Estados Unidos' },\n    { value: 'uy', label: 'Uruguay' },\n    { value: 'vc', label: 'San Vicente y las Granadinas' },\n    { value: 've', label: 'Venezuela' },\n    { value: 'other', label: 'Otro' }\n  ];\n\n  useEffect(() => {\n    if (detectedLocation) {\n      // Auto-completar país si se detectó ubicación\n      if (!data.country && detectedLocation.countryCode) {\n        handleFieldChangeWithContext('country', detectedLocation.countryCode.toLowerCase());\n      }\n      // Auto-completar provincia/región si está disponible\n      if (!data.province && detectedLocation.region) {\n        handleFieldChangeWithContext('province', detectedLocation.region.toLowerCase().replace(/\\s+/g, '-'));\n      }\n      // Auto-completar ciudad si está disponible\n      if (!data.city && detectedLocation.city) {\n        handleFieldChangeWithContext('city', detectedLocation.city);\n      }\n      // Obtener compliance legal para mostrar los checkboxes correctos\n      // if (detectedLocation.countryCode) {\n      //   // const compliance = geolocationService.getLegalCompliance(detectedLocation.countryCode);\n      //   // setLegalCompliance(compliance);\n      // }\n    } else if (data.country) {\n      // Si se seleccionó país manualmente, obtener compliance\n      // const compliance = geolocationService.getLegalCompliance(data.country.toUpperCase());\n      // setLegalCompliance(compliance);\n    }\n  }, [detectedLocation, data.country, handleFieldChangeWithContext]);\n\n  useEffect(() => {\n    // Actualizar ciudades disponibles cuando cambie la provincia\n    if (data.province && data.country === 'es') {\n      const cities = getCitiesByProvince(data.province);\n      setAvailableCities(cities);\n    } else {\n      setAvailableCities([]);\n    }\n  }, [data.province, data.country]);\n\n  const handleCountryChange = (countryCode: string) => {\n    handleFieldChangeWithContext('country', countryCode);\n    \n    // Obtener compliance legal para el país seleccionado\n    // const compliance = geolocationService.getLegalCompliance(countryCode.toUpperCase());\n    // setLegalCompliance(compliance);\n  };\n\n  const handleLegalChecklistChange = (itemId: string, checked: boolean) => {\n    setLegalChecklistItems(prev => \n      prev.map(item => \n        item.id === itemId ? { ...item, checked } : item\n      )\n    );\n\n    // Actualizar el estado del formulario según el tipo de consentimiento\n    if (itemId === 'terms-accepted') {\n      handleFieldChangeWithContext('consentGDPR', checked);\n    } else if (itemId === 'privacy-accepted') {\n      handleFieldChangeWithContext('consentHIPAA', checked);\n    } else if (itemId === 'medical-disclaimer') {\n      // Para el disclaimer médico, también actualizar consentGDPR como fallback\n      handleFieldChangeWithContext('consentGDPR', checked);\n    }\n  };\n\n  const handleLegalChecklistComplete = (allChecked: boolean) => {\n    // Aquí puedes manejar la lógica cuando se complete el checklist\n    console.log('Checklist legal completado:', allChecked);\n  };\n\n  return (\n    <>\n      {/* Formulario Ultra-Optimizado para 13\" sin scroll */}\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n          \n          {/* Información de ubicación detectada - Ultra-compacta */}\n          {detectedLocation && (\n            <div className=\"form-group md:col-span-2\">\n              <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-2\">\n                <div className=\"flex items-center space-x-1\">\n                  <svg className=\"h-3 w-3 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                  <div>\n                    <p className=\"text-gray-900 font-medium text-xs\">\n                      Ubicación detectada automáticamente\n                    </p>\n                    <p className=\"text-gray-600 text-xs\">\n                      {detectedLocation.country} - {detectedLocation.city || detectedLocation.region}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {/* Fila 1: País y Provincia */}\n          <div className=\"form-group\">\n            <div className=\"flex items-center justify-between mb-0.5\">\n              <label htmlFor=\"country\" className=\"block text-sm font-medium text-gray-700\">\n                País *\n              </label>\n              <button\n                type=\"button\"\n                onClick={() => setShowLocationAwareness(true)}\n                className=\"text-blue-600 hover:text-blue-800 text-xs flex items-center gap-1\"\n                title=\"Información sobre ubicación y compliance legal\"\n              >\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n                ¿Por qué es importante?\n              </button>\n            </div>\n            <select\n              id=\"country\"\n              value={currentData.country}\n              onChange={(e) => handleCountryChange(e.target.value)}\n              className={`block w-full h-8 px-2 py-1 border rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-xs ${errors.country ? 'border-red-300' : 'border-gray-200'}`}\n            >\n              <option value=\"\">Selecciona tu país</option>\n              {countries.map((country) => (\n                <option key={country.value} value={country.value}>\n                  {country.label}\n                </option>\n              ))}\n            </select>\n            {errors.country && (\n              <p className=\"text-xs text-red-600 mt-0.5\">{errors.country}</p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"province\" className=\"block text-sm font-medium text-gray-700 mb-0.5\">\n              Provincia/Estado *\n            </label>\n            <select\n              id=\"province\"\n              value={currentData.province}\n              onChange={(e) => handleFieldChangeWithContext('province', e.target.value)}\n              className={`block w-full h-8 px-2 py-1 border rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-xs ${errors.province ? 'border-red-300' : 'border-gray-200'}`}\n            >\n              <option value=\"\">Selecciona tu provincia</option>\n              {currentData.country === 'es' ? (\n                spanishProvinces.map((province) => (\n                  <option key={province.value} value={province.value}>\n                    {province.label}\n                  </option>\n                ))\n              ) : (\n                <option value=\"other\">Otro</option>\n              )}\n            </select>\n            {errors.province && (\n              <p className=\"text-xs text-red-600 mt-0.5\">{errors.province}</p>\n            )}\n          </div>\n          \n          {/* Fila 2: Ciudad - Ancho completo */}\n          <div className=\"form-group md:col-span-2\">\n            <label htmlFor=\"city\" className=\"block text-sm font-medium text-gray-700 mb-0.5\">\n              Ciudad *\n            </label>\n            {currentData.country === 'es' && currentData.province && availableCities.length > 0 ? (\n              <select\n                id=\"city\"\n                value={currentData.city}\n                onChange={(e) => handleFieldChangeWithContext('city', e.target.value)}\n                className={`block w-full h-8 px-2 py-1 border rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-xs ${errors.city ? 'border-red-300' : 'border-gray-200'}`}\n              >\n                <option value=\"\">Selecciona tu ciudad</option>\n                {availableCities.map((city) => (\n                  <option key={city.id} value={city.name}>\n                    {city.name}\n                  </option>\n                ))}\n              </select>\n            ) : (\n              <input\n                id=\"city\"\n                type=\"text\"\n                value={currentData.city}\n                onChange={(e) => handleFieldChangeWithContext('city', e.target.value)}\n                className={`block w-full h-8 px-2 py-1 border rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-xs ${errors.city ? 'border-red-300' : 'border-gray-200'}`}\n                placeholder=\"Ingresa tu ciudad\"\n              />\n            )}\n            {errors.city && (\n              <p className=\"text-xs text-red-600 mt-0.5\">{errors.city}</p>\n            )}\n          </div>\n          \n          {/* Fila 3: Consentimientos Legales - Ultra-compactos */}\n          <div className=\"form-group md:col-span-2\">\n            <h3 className=\"text-xs font-medium text-gray-900 mb-1\">\n              Consentimientos Legales *\n            </h3>\n            \n            <LegalChecklist\n              items={legalChecklistItems}\n              onItemChange={handleLegalChecklistChange}\n              onComplete={handleLegalChecklistComplete}\n              showDetails={true}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Modal de concienciación de ubicación */}\n      <LocationAwarenessModal\n        isOpen={showLocationAwareness}\n        onClose={() => setShowLocationAwareness(false)}\n        onLocationSelected={handleManualCountrySelection}\n        onUseCurrentLocation={handleUseCurrentLocation}\n      />\n    </>\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/z_trash/wizard/PersonalDataStep.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'geolocationService' is defined but never used.","line":13,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":45},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":36,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":36,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1235,1292],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1295,1360],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1363,1445],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'detectLocationAutomatically'. Either include it or remove the dependency array.","line":46,"column":6,"nodeType":"ArrayExpression","endLine":46,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [detectLocationAutomatically]","fix":{"range":[1716,1718],"text":"[detectLocationAutomatically]"}}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":78,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":78,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2830,2899],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5667,5748],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":189,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":189,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6546,6616],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":339,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":339,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11381,11548],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * PersonalDataStep - Paso 1 del Wizard de Registro\n * Formulario con Grid Simétrico Perfecto\n * \n * @version 2.0.0\n * @author AiDuxCare Development Team\n */\n\nimport React, { useState, useEffect } from 'react';\n\nimport { PersonalData } from '../../types/wizard';\nimport { emailValidationService, type EmailValidationResult } from '../../services/emailValidationService';\nimport { GeolocationData, geolocationService } from '../../services/geolocationService';\nimport { useProfessionalProfile, ProfessionalProfile } from '../../context/ProfessionalProfileContext';\n\nimport { EmailRecoveryModal } from './EmailRecoveryModal';\nimport { LocationAwarenessModal } from './LocationAwarenessModal';\nimport { GeolocationPermissionModal } from './GeolocationPermissionModal';\nimport { PhoneInput } from './PhoneInput';\nimport '../../styles/form.css';\n\ninterface PersonalDataStepProps {\n  data: PersonalData;\n  errors: Record<string, string>;\n  onFieldChange: (field: string, value: string | boolean) => void;\n  onLocationDetected?: (location: GeolocationData) => void;\n}\n\nexport const PersonalDataStep: React.FC<PersonalDataStepProps> = ({\n  data,\n  errors,\n  onFieldChange,\n  onLocationDetected\n}) => {\n  // Debug: Log de datos recibidos\n  console.log('PersonalDataStep - Datos recibidos:', data);\n  console.log('PersonalDataStep - Teléfono recibido:', data.phone);\n  console.log('PersonalDataStep - Código de país recibido:', data.phoneCountryCode);\n  \n  const { updateWizardData } = useProfessionalProfile();\n  // const [showGeolocationModal, setShowGeolocationModal] = useState(false);\n  \n  // Ejecutar geolocalización automáticamente solo una vez al montar\n  useEffect(() => {\n    detectLocationAutomatically();\n  }, []);\n\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [showLocationAwareness, setShowLocationAwareness] = useState(false);\n  const [showPermissionModal, setShowPermissionModal] = useState(false);\n\n  // Protección contra data undefined\n  const safeData = data || {\n    firstName: '',\n    lastName: '',\n    secondName: '',\n    secondLastName: '',\n    birthDate: '',\n    email: '',\n    phone: '',\n    phoneCountryCode: '+34',\n    gender: '',\n    password: '',\n    confirmPassword: ''\n  };\n  \n  // Función para detectar ubicación automáticamente\n  const detectLocationAutomatically = async () => {\n    try {\n      // Usar el servicio de geolocalización que maneja fallbacks automáticamente\n      const geolocationService = (await import('../../services/geolocationService')).geolocationService.getInstance();\n      const locationData = await geolocationService.detectLocation();\n      \n      if (locationData) {\n        // Verificar si se necesitan resetear permisos\n        if (locationData.needsPermissionReset) {\n          console.log('Permisos denegados - mostrando modal de instrucciones');\n          setShowPermissionModal(true);\n          return;\n        }\n        \n        // Llenar automáticamente los campos de ciudad y país si están disponibles\n        if (locationData.city) {\n          handleFieldChangeWithContext('city', locationData.city);\n        }\n        if (locationData.country) {\n          handleFieldChangeWithContext('country', locationData.country);\n        }\n        \n        // ACTUALIZAR AUTOMÁTICAMENTE EL CÓDIGO DE PAÍS DEL TELÉFONO\n        if (locationData.country) {\n          const countryCode = getCountryCodeFromCountry(locationData.country);\n          if (countryCode) {\n            handleFieldChangeWithContext('phoneCountryCode', countryCode);\n          }\n        }\n        \n        // Llamar al callback si existe\n        if (onLocationDetected) {\n          onLocationDetected(locationData);\n        }\n      }\n    } catch (error) {\n      console.error('PersonalDataStep - Error en geolocalización automática:', error);\n    }\n  };\n\n  // Función para obtener el código de país del teléfono basado en el nombre del país\n  const getCountryCodeFromCountry = (countryName: string): string => {\n    const countryMap: Record<string, string> = {\n      'España': '+34',\n      'Spain': '+34',\n      'Estados Unidos': '+1',\n      'United States': '+1',\n      'United States of America': '+1',\n      'Reino Unido': '+44',\n      'United Kingdom': '+44',\n      'Great Britain': '+44',\n      'Francia': '+33',\n      'France': '+33',\n      'Alemania': '+49',\n      'Germany': '+49',\n      'Italia': '+39',\n      'Italy': '+39',\n      'Países Bajos': '+31',\n      'Netherlands': '+31',\n      'Bélgica': '+32',\n      'Belgium': '+32',\n      'Portugal': '+351',\n      'México': '+52',\n      'Argentina': '+54',\n      'Chile': '+56',\n      'Colombia': '+57',\n      'Perú': '+51',\n      'Venezuela': '+58',\n      'Brasil': '+55',\n      'Uruguay': '+598',\n      'Paraguay': '+595',\n      'Bolivia': '+591',\n      'Ecuador': '+593'\n    };\n    \n    return countryMap[countryName] || '+34'; // Default a España\n  };\n\n  // Función para manejar selección manual de país\n  const handleManualCountrySelection = (countryCode: string) => {\n    const geolocationService = geolocationService();\n    const fiduciaryData = geolocationService.getFiduciaryDataForCountry(countryCode);\n    \n    if (fiduciaryData) {\n      // Llenar campos con datos fiduciarios\n      if (fiduciaryData.location.city) {\n        handleFieldChangeWithContext('city', fiduciaryData.location.city);\n      }\n      if (fiduciaryData.location.region) {\n        handleFieldChangeWithContext('province', fiduciaryData.location.region);\n      }\n      if (fiduciaryData.location.country) {\n        handleFieldChangeWithContext('country', fiduciaryData.location.country);\n      }\n      \n      console.log('PersonalDataStep - Datos fiduciarios aplicados para:', countryCode);\n    }\n  };\n\n  // Función para usar ubicación actual\n  const handleUseCurrentLocation = () => {\n    detectLocationAutomatically();\n  };\n\n  const handlePermissionModalClose = () => {\n    setShowPermissionModal(false);\n  };\n\n  const handlePermissionModalRetry = () => {\n    setShowPermissionModal(false);\n    // Reintentar después de un breve delay\n    setTimeout(() => {\n      detectLocationAutomatically();\n    }, 1000);\n  };\n\n  // Mapear campos del wizard a campos del contexto\n  const handleFieldChangeWithContext = (field: string, value: string | boolean) => {\n    // Solo logear cambios importantes, no cada letra\n    if (field === 'firstName' || field === 'lastName' || field === 'email' || field === 'city' || field === 'country' || field === 'phone' || field === 'phoneCountryCode') {\n      console.log(`PersonalDataStep - Campo cambiado: ${field} = ${value}`);\n    }\n    \n    // Actualizar el contexto del wizard\n    const fieldMapping: Record<string, keyof ProfessionalProfile> = {\n      firstName: 'fullName',\n      lastName: 'fullName', // Se maneja en el componente\n      email: 'email',\n      phone: 'phone'\n    };\n\n    const contextField = fieldMapping[field];\n    if (contextField) {\n      updateWizardData(contextField, value);\n    }\n    \n    // Llamar al callback original si existe\n    if (onFieldChange && typeof onFieldChange === 'function') {\n      onFieldChange(field, value);\n    }\n  };\n\n  // Indicador de fortaleza de contraseña\n  const checkPasswordStrength = (password: string): 'weak' | 'medium' | 'strong' => {\n    let score = 0;\n    if (password.length >= 8) score++;\n    if (/[a-z]/.test(password)) score++;\n    if (/[A-Z]/.test(password)) score++;\n    if (/[0-9]/.test(password)) score++;\n    if (/[^A-Za-z0-9]/.test(password)) score++;\n    \n    if (score <= 2) return 'weak';\n    if (score <= 3) return 'medium';\n    return 'strong';\n  };\n\n  const getPasswordStrengthText = (strength: 'weak' | 'medium' | 'strong'): string => {\n    switch (strength) {\n      case 'weak': return 'Débil';\n      case 'medium': return 'Media';\n      case 'strong': return 'Fuerte';\n      default: return 'Desconocida';\n    }\n  };\n\n  const getPasswordStrengthColor = (strength: 'weak' | 'medium' | 'strong'): string => {\n    switch (strength) {\n      case 'weak': return 'text-red-600';\n      case 'medium': return 'text-yellow-600';\n      case 'strong': return 'text-green-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  // Validación de email en tiempo real\n  const [emailValidation] = useState<EmailValidationResult>({ \n    exists: false, \n    message: '',\n    isActive: false,\n    canRecover: false,\n    canActivate: false\n  });\n  // const [isValidatingEmail, setIsValidatingEmail] = useState(false);\n  const [showRecoveryModal, setShowRecoveryModal] = useState(false);\n\n  // Función para manejar ubicación detectada (ahora se llama automáticamente)\n  // const handleLocationDetected = (location: GeolocationData) => {\n  //   console.log('Ubicación detectada en PersonalDataStep:', location);\n  //   \n  //   // Mapear país a código correcto\n  //   const countryMapping: Record<string, string> = {\n  //     'España': 'es',\n  //     'Spain': 'es',\n  //     'México': 'mx',\n  //     'Mexico': 'mx',\n  //     'Argentina': 'ar',\n  //     'Colombia': 'co',\n  //     'Chile': 'cl',\n  //     'Perú': 'pe',\n  //     'Peru': 'pe',\n  //     'Estados Unidos': 'us',\n  //     'United States': 'us'\n  //   };\n  //   \n  //   // Mapear provincia a valor del dropdown\n  //   const provinceMapping: Record<string, string> = {\n  //     'Comunidad Valenciana': 'valencia',\n  //     'Valencia': 'valencia',\n  //     'Madrid': 'madrid',\n  //     'Barcelona': 'barcelona',\n  //     'Andalucía': 'andalucia',\n  //     'Cataluña': 'cataluna',\n  //     'Galicia': 'galicia',\n  //     'Castilla y León': 'castilla-leon',\n  //     'Castilla-La Mancha': 'castilla-mancha',\n  //     'País Vasco': 'pais-vasco',\n  //     'Aragón': 'aragon',\n  //     'Asturias': 'asturias',\n  //     'Cantabria': 'cantabria',\n  //     'La Rioja': 'la-rioja',\n  //     'Navarra': 'navarra',\n  //     'Extremadura': 'extremadura',\n  //     'Murcia': 'murcia',\n  //     'Islas Baleares': 'islas-balears',\n  //     'Islas Canarias': 'islas-canarias',\n  //     'Ceuta': 'ceuta',\n  //     'Melilla': 'melilla'\n  //   };\n  //   \n  //   const countryCode = countryMapping[location.country || ''] || location.country || '';\n  //   const provinceCode = provinceMapping[location.region || ''] || location.region || '';\n  //   \n  //   console.log('Mapeo de ubicación:', {\n  //     original: { country: location.country, region: location.region },\n  //     city: location.city,\n  //     countryCode,\n  //     provinceCode\n  //   };\n  //   \n  //   // Actualizar campos del wizard\n  //   if (location.city) {\n  //     handleFieldChangeWithContext('city', location.city);\n  //   }\n  //   if (countryCode) {\n  //     handleFieldChangeWithContext('country', countryCode);\n  //     if (provinceCode) {\n  //       handleFieldChangeWithContext('province', provinceCode);\n  //     }\n  //   }\n  // };\n\n  // Función para manejar selección manual de ubicación (ya no se usa)\n  // const handleManualLocationSelection = () => {\n  //   console.log('Selección manual de ubicación');\n  //   // setShowGeolocationModal(false); // Eliminado\n  // };\n\n\n\n  // Handlers para email recovery\n  const handlePasswordRecovery = async () => {\n    try {\n      await emailValidationService.sendPasswordRecovery(safeData.email);\n      setShowRecoveryModal(false);\n    } catch (error) {\n      console.error('Error sending password recovery:', error);\n    }\n  };\n\n  // Debug: Log antes de renderizar\n  console.log('PersonalDataStep - Antes de renderizar con datos:', {\n    phone: safeData.phone,\n    phoneCountryCode: safeData.phoneCountryCode,\n    errors: errors\n  });\n\n  return (\n    <>\n      {/* Modal de geolocalización */}\n      {/* Eliminado */}\n\n      {/* Botón opcional de geolocalización - SOLO si el usuario lo solicita */}\n      {/* <div className=\"max-w-2xl mx-auto mb-6\">\n        <button\n          type=\"button\"\n          onClick={() => setShowGeolocationModal(true)}\n          className=\"inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200\"\n        >\n          <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\n          </svg>\n          Detectar ubicación automáticamente\n        </button>\n        <p className=\"text-xs text-gray-500 mt-1\">\n          Opcional: Permite completar automáticamente tu ciudad y país\n        </p>\n      </div> */}\n\n      {/* Formulario con Grid Simétrico Perfecto */}\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          \n          {/* Fila 1: Nombres */}\n          <div className=\"form-group\">\n            <label htmlFor=\"firstName\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Primer Nombre *\n            </label>\n            <input \n              id=\"firstName\" \n              type=\"text\" \n              value={safeData.firstName} \n              onChange={(e) => handleFieldChangeWithContext('firstName', e.target.value)} \n              className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.firstName ? 'border-red-300' : 'border-gray-200'}`} \n              autoComplete=\"given-name\" \n              placeholder=\"Tu nombre\"\n            />\n            {errors.firstName && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.firstName}</p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"secondName\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Segundo Nombre\n            </label>\n            <input \n              id=\"secondName\" \n              type=\"text\" \n              value={safeData.secondName || ''} \n              onChange={(e) => handleFieldChangeWithContext('secondName', e.target.value)} \n              className=\"block w-full h-12 px-4 py-3 border border-gray-200 rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base\" \n              autoComplete=\"additional-name\" \n              placeholder=\"Tu segundo nombre\"\n            />\n          </div>\n          \n          {/* Fila 2: Apellidos */}\n          <div className=\"form-group\">\n            <label htmlFor=\"lastName\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Primer Apellido *\n            </label>\n            <input \n              id=\"lastName\" \n              type=\"text\" \n              value={safeData.lastName} \n              onChange={(e) => handleFieldChangeWithContext('lastName', e.target.value)} \n              className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.lastName ? 'border-red-300' : 'border-gray-200'}`} \n              autoComplete=\"family-name\" \n              placeholder=\"Tu apellido\"\n            />\n            {errors.lastName && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.lastName}</p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"secondLastName\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Segundo Apellido\n            </label>\n            <input \n              id=\"secondLastName\" \n              type=\"text\" \n              value={safeData.secondLastName || ''} \n              onChange={(e) => handleFieldChangeWithContext('secondLastName', e.target.value)} \n              className=\"block w-full h-12 px-4 py-3 border border-gray-200 rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base\" \n              autoComplete=\"family-name\" \n              placeholder=\"Tu segundo apellido\"\n            />\n          </div>\n          \n          {/* Fila 3: Fecha y Email */}\n          <div className=\"form-group\">\n            <label htmlFor=\"birthDate\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Fecha de Nacimiento\n            </label>\n            <input \n              id=\"birthDate\" \n              type=\"date\" \n              value={safeData.birthDate} \n              onChange={(e) => handleFieldChangeWithContext('birthDate', e.target.value)} \n              className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.birthDate ? 'border-red-300' : 'border-gray-200'}`} \n            />\n            {errors.birthDate && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.birthDate}</p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Email\n            </label>\n            <input\n              id=\"email\"\n              type=\"email\"\n              value={safeData.email}\n              onChange={(e) => handleFieldChangeWithContext('email', e.target.value)}\n              className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.email ? 'border-red-300' : 'border-gray-200'}`}\n              autoComplete=\"email\"\n              placeholder=\"tu@email.com\"\n            />\n            {emailValidation && (\n              <p className={`text-sm mt-1 ${!emailValidation.exists ? 'text-green-600' : 'text-red-600'}`}>\n                {!emailValidation.exists ? 'Email válido y disponible' : emailValidation.message || 'Email ya existe'}\n              </p>\n            )}\n            {errors.email && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.email}</p>\n            )}\n          </div>\n          \n          {/* Fila 4: Teléfono y Género */}\n          <div className=\"form-group\">\n            <PhoneInput\n              value={safeData.phone}\n              onChange={(phone) => handleFieldChangeWithContext('phone', phone)}\n              countryCode={safeData.phoneCountryCode || '+34'}\n              onCountryChange={(code) => handleFieldChangeWithContext('phoneCountryCode', code)}\n              error={errors.phone}\n            />\n            {errors.phone && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.phone}</p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"gender\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Género\n            </label>\n            <select \n              id=\"gender\" \n              value={safeData.gender} \n              onChange={(e) => handleFieldChangeWithContext('gender', e.target.value)} \n              className=\"block w-full h-12 px-4 py-3 border border-gray-200 rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base\"\n            >\n              <option value=\"\">Selecciona tu género</option>\n              <option value=\"masculino\">Masculino</option>\n              <option value=\"femenino\">Femenino</option>\n              <option value=\"otro\">Otro</option>\n              <option value=\"prefiero-no-decir\">Prefiero no decir</option>\n            </select>\n          </div>\n          \n          {/* Fila 5: Contraseñas (ancho completo) */}\n          <div className=\"form-group md:col-span-2\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Contraseña\n                </label>\n                <div className=\"relative\">\n                  <input \n                    id=\"password\" \n                    type={showPassword ? \"text\" : \"password\"} \n                    value={safeData.password} \n                    onChange={(e) => handleFieldChangeWithContext('password', e.target.value)} \n                    className={`block w-full h-12 px-4 py-3 pr-12 border rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.password ? 'border-red-300' : 'border-gray-200'}`} \n                    placeholder=\"••••••••\" \n                    autoComplete=\"new-password\" \n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600\"\n                  >\n                    {showPassword ? (\n                      <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21\" />\n                      </svg>\n                    ) : (\n                      <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                      </svg>\n                    )}\n                  </button>\n                </div>\n                {safeData.password && (\n                  <div className=\"mt-1\">\n                    <span className={`text-sm ${getPasswordStrengthColor(checkPasswordStrength(safeData.password))}`}>\n                      Fortaleza: {getPasswordStrengthText(checkPasswordStrength(safeData.password))}\n                    </span>\n                  </div>\n                )}\n                {errors.password && (\n                  <p className=\"text-sm text-red-600 mt-1\">{errors.password}</p>\n                )}\n              </div>\n              \n              <div>\n                <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Confirmar Contraseña\n                </label>\n                <div className=\"relative\">\n                  <input \n                    id=\"confirmPassword\" \n                    type={showConfirmPassword ? \"text\" : \"password\"} \n                    value={safeData.confirmPassword} \n                    onChange={(e) => handleFieldChangeWithContext('confirmPassword', e.target.value)} \n                    className={`block w-full h-12 px-4 py-3 pr-12 border rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.confirmPassword ? 'border-red-300' : 'border-gray-200'}`} \n                    placeholder=\"••••••••\" \n                    autoComplete=\"new-password\" \n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                    className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600\"\n                  >\n                    {showConfirmPassword ? (\n                      <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21\" />\n                      </svg>\n                    ) : (\n                      <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                      </svg>\n                    )}\n                  </button>\n                </div>\n                {/* Validación en tiempo real de coincidencia de contraseñas */}\n                {safeData.password && safeData.confirmPassword && (\n                  <div className=\"mt-1\">\n                    {safeData.password === safeData.confirmPassword ? (\n                      <span className=\"text-sm text-green-600\">✓ Las contraseñas coinciden</span>\n                    ) : (\n                      <span className=\"text-sm text-red-600\">✗ Las contraseñas no coinciden</span>\n                    )}\n                  </div>\n                )}\n                {errors.confirmPassword && (\n                  <p className=\"text-sm text-red-600 mt-1\">{errors.confirmPassword}</p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Modal de recuperación de email */}\n      {emailValidation && (\n        <EmailRecoveryModal\n          isOpen={showRecoveryModal}\n          onClose={() => setShowRecoveryModal(false)}\n          onRecover={handlePasswordRecovery}\n        />\n      )}\n\n      {/* Modal de concienciación de ubicación */}\n      <LocationAwarenessModal\n        isOpen={showLocationAwareness}\n        onClose={() => setShowLocationAwareness(false)}\n        onLocationSelected={handleManualCountrySelection}\n        onUseCurrentLocation={handleUseCurrentLocation}\n      />\n\n      {/* Modal de permisos de geolocalización */}\n      <GeolocationPermissionModal\n        isOpen={showPermissionModal}\n        onClose={handlePermissionModalClose}\n        onRetry={handlePermissionModalRetry}\n      />\n    </>\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/z_trash/wizard/PhoneInput.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":13,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":21,"column":45,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":50},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":26,"column":47,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":52}],"suppressedMessages":[{"ruleId":"react/prop-types","severity":2,"message":"'value' is missing in props validation","line":14,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":14,"endColumn":8,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react/prop-types","severity":2,"message":"'countryCode' is missing in props validation","line":15,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":15,"endColumn":14,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react/prop-types","severity":2,"message":"'onChange' is missing in props validation","line":16,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":16,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react/prop-types","severity":2,"message":"'onCountryChange' is missing in props validation","line":17,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":17,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react/prop-types","severity":2,"message":"'error' is missing in props validation","line":18,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":18,"endColumn":8,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react/prop-types","severity":2,"message":"'disabled' is missing in props validation","line":19,"column":3,"nodeType":"Property","messageId":"missingPropType","endLine":19,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable react/prop-types */\nimport { useCallback } from 'react';\n\ninterface PhoneInputProps {\n  value: string;\n  countryCode: string;\n  onChange: (phone: string) => void;\n  onCountryChange: (code: string) => void;\n  error?: string;\n  disabled?: boolean;\n}\n\nexport const PhoneInput: React.FC<PhoneInputProps> = ({\n  value,\n  countryCode,\n  onChange,\n  onCountryChange,\n  error,\n  disabled = false\n}) => {\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const phone = e.target.value.replace(/\\D/g, ''); // Solo números\n    onChange(phone);\n  }, [onChange]);\n\n  const handleCountryChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\n    onCountryChange(e.target.value);\n  }, [onCountryChange]);\n\n  return (\n    <div className=\"space-y-2\">\n      <label htmlFor=\"phone-input\" className=\"block text-sm font-medium text-gray-700\">\n        Teléfono *\n      </label>\n      \n      <div className=\"flex gap-3\">\n        {/* Código de país - proporción más equilibrada */}\n        <select\n          id=\"country-code-select\"\n          value={countryCode}\n          onChange={handleCountryChange}\n          disabled={disabled}\n          className=\"w-20 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed text-sm text-center font-medium\"\n        >\n          <option value=\"+34\">+34</option>\n          <option value=\"+1\">+1</option>\n          <option value=\"+44\">+44</option>\n          <option value=\"+33\">+33</option>\n          <option value=\"+49\">+49</option>\n          <option value=\"+39\">+39</option>\n          <option value=\"+31\">+31</option>\n          <option value=\"+32\">+32</option>\n          <option value=\"+351\">+351</option>\n          <option value=\"+34\">+34</option>\n        </select>\n        \n        {/* Campo del número - proporción más equilibrada */}\n        <input\n          id=\"phone-input\"\n          type=\"tel\"\n          value={value || ''}\n          onChange={handlePhoneChange}\n          disabled={disabled}\n          className=\"w-40 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-100 disabled:cursor-not-allowed text-sm\"\n          placeholder=\"XXX XXX XXX\"\n        />\n      </div>\n      \n      {error && (\n        <p className=\"text-sm text-red-600\">{error}</p>\n      )}\n      \n      <p className=\"text-xs text-gray-500\">\n        Solo números, sin espacios ni caracteres especiales\n      </p>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/z_trash/wizard/ProfessionalDataStep.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1231,1305],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * ProfessionalDataStep - Paso 2 del Wizard de Registro\n * Datos Profesionales (6 campos obligatorios del .md)\n * Incluye Universidad/Institución como especifica el .md\n * \n * @version 1.0.0\n * @author AiDuxCare Development Team\n */\n\nimport React, { useState, useEffect } from 'react';\n\nimport { ProfessionalData, professionalTitles } from '../../types/wizard';\nimport { useProfessionalProfile, ProfessionalProfile } from '../../context/ProfessionalProfileContext';\n\ninterface ProfessionalDataStepProps {\n  data: ProfessionalData;\n  errors: Record<string, string>;\n  onFieldChange: (field: string, value: string) => void;\n}\n\nexport const ProfessionalDataStep: React.FC<ProfessionalDataStepProps> = ({\n  data,\n  errors,\n  onFieldChange\n}) => {\n  const { updateWizardData } = useProfessionalProfile();\n  const [showOtherUniversity, setShowOtherUniversity] = useState(false);\n  const [showOtherSpecialty, setShowOtherSpecialty] = useState(false);\n\n  // Mapear campos del wizard a campos del contexto\n  const handleFieldChangeWithContext = (field: string, value: string) => {\n    // Solo logear cambios importantes, no cada letra\n    if (field === 'professionalTitle' || field === 'specialty' || field === 'licenseNumber') {\n      console.log(`ProfessionalDataStep - Campo cambiado: ${field} = ${value}`);\n    }\n    \n    // Mapear campos del wizard a campos del contexto\n    const fieldMapping: Record<string, keyof ProfessionalProfile> = {\n      professionalTitle: 'professionalTitle',\n      specialty: 'specialty',\n      university: 'university',\n      licenseNumber: 'licenseNumber',\n      workplace: 'workplace',\n      experienceYears: 'experienceYears'\n    };\n\n    const contextField = fieldMapping[field];\n    if (contextField) {\n      updateWizardData(contextField, value);\n    }\n    \n    // También llamar al callback original para mantener compatibilidad\n    onFieldChange(field, value);\n  };\n\n  // Universidades predefinidas\n  const universities = [\n    { value: 'universidad-complutense-madrid', label: 'Universidad Complutense de Madrid' },\n    { value: 'universidad-autonoma-madrid', label: 'Universidad Autónoma de Madrid' },\n    { value: 'universidad-carlos-iii', label: 'Universidad Carlos III de Madrid' },\n    { value: 'universidad-politecnica-madrid', label: 'Universidad Politécnica de Madrid' },\n    { value: 'universidad-rey-juan-carlos', label: 'Universidad Rey Juan Carlos' },\n    { value: 'universidad-alcala', label: 'Universidad de Alcalá' },\n    { value: 'universidad-barcelona', label: 'Universidad de Barcelona' },\n    { value: 'universidad-valencia', label: 'Universidad de Valencia' },\n    { value: 'universidad-sevilla', label: 'Universidad de Sevilla' },\n    { value: 'universidad-granada', label: 'Universidad de Granada' },\n    { value: 'universidad-salamanca', label: 'Universidad de Salamanca' },\n    { value: 'universidad-navarra', label: 'Universidad de Navarra' },\n    { value: 'universidad-pompeu-fabra', label: 'Universidad Pompeu Fabra' },\n    { value: 'universidad-pais-vasco', label: 'Universidad del País Vasco' },\n    { value: 'universidad-zaragoza', label: 'Universidad de Zaragoza' },\n    { value: 'otro', label: 'Otra universidad' }\n  ];\n\n  // Especialidades por título profesional\n  const getSpecialtiesByTitle = (title: string) => {\n    if (title === 'Dr.' || title === 'Dra.') {\n      return [\n        { value: 'medicina-general', label: 'Medicina General' },\n        { value: 'cardiologia', label: 'Cardiología' },\n        { value: 'dermatologia', label: 'Dermatología' },\n        { value: 'endocrinologia', label: 'Endocrinología' },\n        { value: 'gastroenterologia', label: 'Gastroenterología' },\n        { value: 'ginecologia', label: 'Ginecología' },\n        { value: 'neurologia', label: 'Neurología' },\n        { value: 'oncologia', label: 'Oncología' },\n        { value: 'ortopedia', label: 'Ortopedia' },\n        { value: 'pediatria', label: 'Pediatría' },\n        { value: 'psiquiatria', label: 'Psiquiatría' },\n        { value: 'radiologia', label: 'Radiología' },\n        { value: 'traumatologia', label: 'Traumatología' },\n        { value: 'urologia', label: 'Urología' },\n        { value: 'otro', label: 'Otra especialidad' }\n      ];\n    } else if (title === 'FT.') {\n      return [\n        { value: 'fisioterapia-deportiva', label: 'Fisioterapia Deportiva' },\n        { value: 'fisioterapia-ortopedica', label: 'Fisioterapia Ortopédica' },\n        { value: 'fisioterapia-neurologica', label: 'Fisioterapia Neurológica' },\n        { value: 'fisioterapia-respiratoria', label: 'Fisioterapia Respiratoria' },\n        { value: 'fisioterapia-pediatrica', label: 'Fisioterapia Pediátrica' },\n        { value: 'fisioterapia-geriatrica', label: 'Fisioterapia Geriátrica' },\n        { value: 'fisioterapia-vestibular', label: 'Fisioterapia Vestibular' },\n        { value: 'fisioterapia-pelvica', label: 'Fisioterapia Pélvica' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else if (title === 'Ps.') {\n      return [\n        { value: 'psicologia-clinica', label: 'Psicología Clínica' },\n        { value: 'psicologia-infantil', label: 'Psicología Infantil' },\n        { value: 'psicologia-deportiva', label: 'Psicología Deportiva' },\n        { value: 'psicologia-laboral', label: 'Psicología Laboral' },\n        { value: 'psicologia-forense', label: 'Psicología Forense' },\n        { value: 'psicologia-social', label: 'Psicología Social' },\n        { value: 'psicologia-educativa', label: 'Psicología Educativa' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else if (title === 'Nat.') {\n      return [\n        { value: 'naturopatia-general', label: 'Naturopatía General' },\n        { value: 'naturopatia-nutricional', label: 'Naturopatía Nutricional' },\n        { value: 'naturopatia-herbal', label: 'Naturopatía Herbal' },\n        { value: 'naturopatia-homeopatica', label: 'Naturopatía Homeopática' },\n        { value: 'naturopatia-acupuntura', label: 'Naturopatía con Acupuntura' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else if (title === 'Pod.') {\n      return [\n        { value: 'podologia-general', label: 'Podología General' },\n        { value: 'podologia-quirurgica', label: 'Podología Quirúrgica' },\n        { value: 'podologia-deportiva', label: 'Podología Deportiva' },\n        { value: 'podologia-ortopedica', label: 'Podología Ortopédica' },\n        { value: 'podologia-geriatrica', label: 'Podología Geriátrica' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else if (title === 'Nut.') {\n      return [\n        { value: 'nutricion-clinica', label: 'Nutrición Clínica' },\n        { value: 'nutricion-deportiva', label: 'Nutrición Deportiva' },\n        { value: 'nutricion-pediatrica', label: 'Nutrición Pediátrica' },\n        { value: 'nutricion-geriatrica', label: 'Nutrición Geriátrica' },\n        { value: 'nutricion-oncologica', label: 'Nutrición Oncológica' },\n        { value: 'nutricion-vegetariana', label: 'Nutrición Vegetariana/Vegana' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else if (title === 'TO.') {\n      return [\n        { value: 'terapia-ocupacional-pediatrica', label: 'Terapia Ocupacional Pediátrica' },\n        { value: 'terapia-ocupacional-geriatrica', label: 'Terapia Ocupacional Geriátrica' },\n        { value: 'terapia-ocupacional-neurologica', label: 'Terapia Ocupacional Neurológica' },\n        { value: 'terapia-ocupacional-ortopedica', label: 'Terapia Ocupacional Ortopédica' },\n        { value: 'terapia-ocupacional-mental', label: 'Terapia Ocupacional en Salud Mental' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else if (title === 'Log.') {\n      return [\n        { value: 'logopedia-infantil', label: 'Logopedia Infantil' },\n        { value: 'logopedia-adultos', label: 'Logopedia en Adultos' },\n        { value: 'logopedia-neurologica', label: 'Logopedia Neurológica' },\n        { value: 'logopedia-geriatrica', label: 'Logopedia Geriátrica' },\n        { value: 'logopedia-educativa', label: 'Logopedia Educativa' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else if (title === 'Opt.') {\n      return [\n        { value: 'optica-general', label: 'Óptica General' },\n        { value: 'optica-contactologia', label: 'Contactología' },\n        { value: 'optica-baja-vision', label: 'Baja Visión' },\n        { value: 'optica-pediatrica', label: 'Óptica Pediátrica' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else if (title === 'Bio.') {\n      return [\n        { value: 'biologia-clinica', label: 'Biología Clínica' },\n        { value: 'biologia-molecular', label: 'Biología Molecular' },\n        { value: 'biologia-genetica', label: 'Genética' },\n        { value: 'biologia-microbiologia', label: 'Microbiología' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else if (title === 'Qui.') {\n      return [\n        { value: 'quiropractica-general', label: 'Quiropraxia General' },\n        { value: 'quiropractica-deportiva', label: 'Quiropraxia Deportiva' },\n        { value: 'quiropractica-pediatrica', label: 'Quiropraxia Pediátrica' },\n        { value: 'quiropractica-geriatrica', label: 'Quiropraxia Geriátrica' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    } else {\n      return [\n        { value: 'area-general', label: 'Área General' },\n        { value: 'especializacion-avanzada', label: 'Especialización Avanzada' },\n        { value: 'investigacion', label: 'Investigación' },\n        { value: 'docencia', label: 'Docencia' },\n        { value: 'administracion-sanitaria', label: 'Administración Sanitaria' },\n        { value: 'otro', label: 'Otra área' }\n      ];\n    }\n  };\n\n  const experienceLevels = [\n    { value: '0-2', label: '0-2 años' },\n    { value: '3-5', label: '3-5 años' },\n    { value: '6-10', label: '6-10 años' },\n    { value: '11-15', label: '11-15 años' },\n    { value: '16-20', label: '16-20 años' },\n    { value: '20+', label: 'Más de 20 años' }\n  ];\n\n  useEffect(() => {\n    // Mostrar campo \"otro\" para universidad si se selecciona\n    setShowOtherUniversity(data.university === 'otro');\n    \n    // Mostrar campo \"otro\" para especialidad si se selecciona\n    setShowOtherSpecialty(data.specialty === 'otro');\n  }, [data.university, data.specialty]);\n\n  const handleUniversityChange = (value: string) => {\n    handleFieldChangeWithContext('university', value);\n    if (value !== 'otro') {\n      handleFieldChangeWithContext('universityOther', '');\n    }\n  };\n\n  const handleSpecialtyChange = (value: string) => {\n    handleFieldChangeWithContext('specialty', value);\n    if (value !== 'otro') {\n      handleFieldChangeWithContext('specialtyOther', '');\n    }\n  };\n\n  return (\n    <>\n      {/* Formulario con Grid Simétrico Perfecto */}\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          \n          {/* Fila 1: Título Profesional y Especialidad */}\n          <div className=\"form-group\">\n            <label htmlFor=\"professionalTitle\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Título Profesional *\n            </label>\n            <select \n              id=\"professionalTitle\"\n              value={data.professionalTitle} \n              onChange={(e) => handleFieldChangeWithContext('professionalTitle', e.target.value)} \n              className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.professionalTitle ? 'border-red-300' : 'border-gray-200'}`}\n            >\n              <option value=\"\">Selecciona tu título</option>\n              {professionalTitles.map((title) => (\n                <option key={title.value} value={title.value}>\n                  {title.label}\n                </option>\n              ))}\n            </select>\n            {errors.professionalTitle && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.professionalTitle}</p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"specialty\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              {data.professionalTitle === 'Dr.' || data.professionalTitle === 'Dra.' \n                ? 'Especialidad *' \n                : 'Área de Expertiz'}\n            </label>\n            <select \n              id=\"specialty\"\n              value={data.specialty} \n              onChange={(e) => handleSpecialtyChange(e.target.value)} \n              className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.specialty ? 'border-red-300' : 'border-gray-200'} ${!data.professionalTitle ? 'opacity-50 cursor-not-allowed' : ''}`}\n              disabled={!data.professionalTitle}\n            >\n              <option value=\"\">\n                {data.professionalTitle === 'Dr.' || data.professionalTitle === 'Dra.' \n                  ? 'Selecciona tu especialidad' \n                  : 'Selecciona tu área'}\n              </option>\n              {data.professionalTitle && getSpecialtiesByTitle(data.professionalTitle).map((specialty) => (\n                <option key={specialty.value} value={specialty.value}>\n                  {specialty.label}\n                </option>\n              ))}\n            </select>\n            {errors.specialty && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.specialty}</p>\n            )}\n          </div>\n          \n          {/* Campo \"otro\" para especialidad - Ancho completo */}\n          {showOtherSpecialty && (\n            <div className=\"form-group md:col-span-2\">\n              <label htmlFor=\"specialtyOther\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                {data.professionalTitle === 'Dr.' || data.professionalTitle === 'Dra.' \n                  ? 'Especifica tu especialidad *' \n                  : 'Especifica tu área de expertiz *'}\n              </label>\n              <input \n                id=\"specialtyOther\"\n                type=\"text\" \n                value={data.specialtyOther || ''} \n                onChange={(e) => handleFieldChangeWithContext('specialtyOther', e.target.value)} \n                className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.specialtyOther ? 'border-red-300' : 'border-gray-200'}`}\n                placeholder={\n                  data.professionalTitle === 'Dr.' || data.professionalTitle === 'Dra.' \n                    ? 'Ej: Medicina Interna, Cirugía Vascular...' \n                    : 'Ej: Terapia Manual, Rehabilitación Deportiva...'\n                }\n              />\n              {errors.specialtyOther && (\n                <p className=\"text-sm text-red-600 mt-1\">{errors.specialtyOther}</p>\n              )}\n            </div>\n          )}\n          \n          {/* Fila 2: Universidad y Licencia */}\n          <div className=\"form-group\">\n            <label htmlFor=\"university\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Universidad/Institución *\n            </label>\n            <select \n              id=\"university\"\n              value={data.university} \n              onChange={(e) => handleUniversityChange(e.target.value)} \n              className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.university ? 'border-red-300' : 'border-gray-200'}`}\n            >\n              <option value=\"\">Selecciona tu universidad</option>\n              {universities.map((university) => (\n                <option key={university.value} value={university.value}>\n                  {university.label}\n                </option>\n              ))}\n            </select>\n            {errors.university && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.university}</p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"licenseNumber\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Número de Licencia/Colegiado *\n            </label>\n            <input \n              id=\"licenseNumber\"\n              type=\"text\" \n              value={data.licenseNumber} \n              onChange={(e) => handleFieldChangeWithContext('licenseNumber', e.target.value)} \n              className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.licenseNumber ? 'border-red-300' : 'border-gray-200'}`}\n              placeholder=\"Tu número de licencia\"\n            />\n            {errors.licenseNumber && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.licenseNumber}</p>\n            )}\n          </div>\n          \n          {/* Campo \"otro\" para universidad - Ancho completo */}\n          {showOtherUniversity && (\n            <div className=\"form-group md:col-span-2\">\n              <label htmlFor=\"universityOther\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Especifica tu universidad *\n              </label>\n              <input \n                id=\"universityOther\"\n                type=\"text\" \n                value={data.universityOther || ''} \n                onChange={(e) => handleFieldChangeWithContext('universityOther', e.target.value)} \n                className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.universityOther ? 'border-red-300' : 'border-gray-200'}`}\n                placeholder=\"Ej: Universidad de [Ciudad], Instituto [Nombre]...\"\n              />\n              {errors.universityOther && (\n                <p className=\"text-sm text-red-600 mt-1\">{errors.universityOther}</p>\n              )}\n            </div>\n          )}\n          \n          {/* Fila 3: Centro de Trabajo y Años de Experiencia */}\n          <div className=\"form-group\">\n            <label htmlFor=\"workplace\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Centro de Trabajo\n            </label>\n            <input \n              id=\"workplace\"\n              type=\"text\" \n              value={data.workplace} \n              onChange={(e) => handleFieldChangeWithContext('workplace', e.target.value)} \n              className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.workplace ? 'border-red-300' : 'border-gray-200'}`}\n              placeholder=\"Ej: Clínica, Hospital, Consulta particular...\"\n            />\n            {errors.workplace && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.workplace}</p>\n            )}\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"experienceYears\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Años de Experiencia *\n            </label>\n            <select \n              id=\"experienceYears\"\n              value={data.experienceYears} \n              onChange={(e) => handleFieldChangeWithContext('experienceYears', e.target.value)} \n              className={`block w-full h-12 px-4 py-3 border rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200 bg-white text-base ${errors.experienceYears ? 'border-red-300' : 'border-gray-200'}`}\n            >\n              <option value=\"\">Selecciona tus años de experiencia</option>\n              {experienceLevels.map((level) => (\n                <option key={level.value} value={level.value}>\n                  {level.label}\n                </option>\n              ))}\n            </select>\n            {errors.experienceYears && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.experienceYears}</p>\n            )}\n          </div>\n          \n          {/* Información adicional - Ancho completo */}\n          <div className=\"form-group md:col-span-2\">\n            <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <svg className=\"h-5 w-5 text-gray-600 mt-0.5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n                <div>\n                  <p className=\"text-sm text-gray-600\">\n                    Esta información nos ayuda a personalizar tu experiencia y asegurar que cumples con los requisitos profesionales para el uso de AiDuxCare.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]