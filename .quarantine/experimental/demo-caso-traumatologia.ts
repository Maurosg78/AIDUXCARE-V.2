#!/usr/bin/env tsx

/**
 * üß† AiDuxCare V.2 - Demostraci√≥n Cerebro Cl√≠nico
 * Caso Complejo de Traumatolog√≠a - Fisioterapia
 * Demostraci√≥n del pipeline completo: PromptFactory + ModelSelector + Vertex AI
 */

import { PromptFactory, PromptContext } from './src/core/ai/PromptFactory';
import { ModelSelector, ComplexityAnalysis } from './src/core/ai/ModelSelector';
import { vertexAIService } from './src/services/VertexAIService';

interface CasoTraumatologia {
  nombre: string;
  paciente: string;
  historia: string;
  sintomas: string;
  exploracion: string;
  antecedentes: string;
  transcripcion: string;
}

class DemostracionCerebroClinico {
  private casoComplejo: CasoTraumatologia = {
    nombre: 'Caso Complejo - Traumatolog√≠a Deportiva',
    paciente: 'Carlos Mendoza, 28 a√±os, futbolista profesional',
    historia: 'Lesi√≥n durante partido de f√∫tbol hace 3 semanas. Contacto directo con otro jugador en la rodilla izquierda. Dolor inmediato e incapacidad para continuar jugando.',
    sintomas: 'Dolor agudo en rodilla izquierda, inestabilidad al caminar, hinchaz√≥n progresiva, limitaci√≥n severa en flexi√≥n y extensi√≥n, sensaci√≥n de bloqueo articular, dolor nocturno intenso.',
    exploracion: 'Edema importante en rodilla izquierda, equimosis en cara lateral, dolor a la palpaci√≥n en ligamento lateral externo, test de Lachman positivo, test de caj√≥n anterior positivo, limitaci√≥n de movilidad: flexi√≥n 45¬∞, extensi√≥n -10¬∞.',
    antecedentes: 'Lesi√≥n previa en rodilla derecha hace 2 a√±os (meniscopat√≠a), cirug√≠a artrosc√≥pica, rehabilitaci√≥n completa. Sin otras patolog√≠as relevantes.',
    transcripcion: `Paciente de 28 a√±os, futbolista profesional, presenta lesi√≥n en rodilla izquierda durante partido hace 3 semanas. Contacto directo con otro jugador gener√≥ dolor agudo inmediato e incapacidad para continuar. Desde entonces presenta dolor intenso, inestabilidad al caminar, hinchaz√≥n progresiva y limitaci√≥n severa de movilidad. Dolor nocturno que interfiere con el sue√±o. Exploraci√≥n muestra edema importante, equimosis lateral, test de Lachman y caj√≥n anterior positivos, limitaci√≥n flexi√≥n 45¬∞ y extensi√≥n -10¬∞. Antecedentes de lesi√≥n previa en rodilla derecha con cirug√≠a artrosc√≥pica hace 2 a√±os. Paciente refiere sensaci√≥n de bloqueo articular y miedo a reca√≠da. Objetivo: retorno al deporte de alto rendimiento.`
  };

  async ejecutarDemostracion(): Promise<void> {
    console.log('üß† AIDUXCARE V.2 - DEMOSTRACI√ìN CEREBRO CL√çNICO');
    console.log('=' .repeat(80));
    console.log('üè• CASO COMPLEJO DE TRAUMATOLOG√çA DEPORTIVA');
    console.log('=' .repeat(80));
    console.log('');

    // Paso 1: Presentaci√≥n del caso
    this.presentarCaso();
    console.log('');

    // Paso 2: An√°lisis de complejidad
    await this.analizarComplejidad();
    console.log('');

    // Paso 3: Generaci√≥n de prompts especializados
    await this.generarPromptsEspecializados();
    console.log('');

    // Paso 4: Procesamiento con Vertex AI
    await this.procesarConVertexAI();
    console.log('');

    // Paso 5: Resultado final
    await this.mostrarResultadoFinal();
  }

  private presentarCaso(): void {
    console.log('üìã PRESENTACI√ìN DEL CASO');
    console.log('=' .repeat(50));
    console.log(`üë§ Paciente: ${this.casoComplejo.paciente}`);
    console.log(`üè• Especialidad: Fisioterapia Deportiva/Traumatolog√≠a`);
    console.log(`üìÖ Tiempo de evoluci√≥n: 3 semanas`);
    console.log('');
    console.log('üìñ HISTORIA CL√çNICA:');
    console.log(`   ${this.casoComplejo.historia}`);
    console.log('');
    console.log('ü©∫ S√çNTOMAS ACTUALES:');
    console.log(`   ${this.casoComplejo.sintomas}`);
    console.log('');
    console.log('üîç EXPLORACI√ìN F√çSICA:');
    console.log(`   ${this.casoComplejo.exploracion}`);
    console.log('');
    console.log('üìö ANTECEDENTES:');
    console.log(`   ${this.casoComplejo.antecedentes}`);
    console.log('');
    console.log('üéØ OBJETIVO DEL PACIENTE: Retorno al deporte de alto rendimiento');
  }

  private async analizarComplejidad(): Promise<void> {
    console.log('üéØ AN√ÅLISIS DE COMPLEJIDAD - CEREBRO CL√çNICO');
    console.log('=' .repeat(50));

    const startTime = Date.now();
    
    try {
      // An√°lisis con ModelSelector
      const analysis = await ModelSelector.analyzeAndSelectModel(
        this.casoComplejo.transcripcion, 
        'fisioterapia'
      );

      const analysisTime = Date.now() - startTime;

      console.log('üß† PROCESAMIENTO DEL CEREBRO CL√çNICO:');
      console.log(`   ‚è±Ô∏è Tiempo de an√°lisis: ${analysisTime}ms`);
      console.log(`   üéØ Complejidad detectada: ${analysis.complexity.toUpperCase()}`);
      console.log(`   üö® Banderas rojas identificadas: ${analysis.redFlags.length}`);
      
      if (analysis.redFlags.length > 0) {
        console.log('   üö® BANDERAS ROJAS DETECTADAS:');
        analysis.redFlags.forEach((flag, index) => {
          console.log(`      ${index + 1}. ${flag}`);
        });
      }

      console.log(`   üß† Modelo seleccionado: ${analysis.modelRecommendation.model}`);
      console.log(`   üí∞ Costo estimado: $${analysis.modelRecommendation.estimatedCost.toFixed(4)}`);
      console.log(`   üìä Confianza del an√°lisis: ${(analysis.confidence * 100).toFixed(1)}%`);
      console.log(`   ‚ö° Nivel de urgencia: ${analysis.urgency.toUpperCase()}`);
      console.log(`   üí° Raz√≥n de selecci√≥n: ${analysis.modelRecommendation.reason}`);

      // Guardar an√°lisis para uso posterior
      this.analysis = analysis;

    } catch (error) {
      console.error('‚ùå Error en an√°lisis de complejidad:', error);
    }
  }

  private async generarPromptsEspecializados(): Promise<void> {
    console.log('üîß GENERACI√ìN DE PROMPTS ESPECIALIZADOS');
    console.log('=' .repeat(50));

    if (!this.analysis) {
      console.log('‚ùå Error: An√°lisis no disponible');
      return;
    }

    try {
      // Crear contexto cl√≠nico
      const context: PromptContext = {
        specialty: 'fisioterapia',
        complexity: this.analysis.complexity,
        redFlags: this.analysis.redFlags,
        patientContext: this.casoComplejo.paciente,
        medicalHistory: this.casoComplejo.antecedentes
      };

      // Generar prompts especializados
      const systemPrompt = PromptFactory.generateSystemPrompt(context);
      const entityPrompt = PromptFactory.generateEntityExtractionPrompt(context, this.casoComplejo.transcripcion);
      const soapPrompt = PromptFactory.generateSOAPPrompt(context, this.casoComplejo.transcripcion, []);

      console.log('üìù PROMPTS GENERADOS:');
      console.log(`   üß† System Prompt: ${systemPrompt.length} caracteres`);
      console.log(`   üîç Entity Prompt: ${entityPrompt.length} caracteres`);
      console.log(`   üìã SOAP Prompt: ${soapPrompt.length} caracteres`);
      console.log(`   üìä Total: ${systemPrompt.length + entityPrompt.length + soapPrompt.length} caracteres`);

      console.log('');
      console.log('üß† SYSTEM PROMPT (Extracto):');
      console.log('   ' + systemPrompt.substring(0, 200) + '...');
      console.log('');
      console.log('üîç ENTITY PROMPT (Extracto):');
      console.log('   ' + entityPrompt.substring(0, 200) + '...');

      // Guardar contexto para uso posterior
      this.context = context;

    } catch (error) {
      console.error('‚ùå Error generando prompts:', error);
    }
  }

  private async procesarConVertexAI(): Promise<void> {
    console.log('üß† PROCESAMIENTO CON VERTEX AI');
    console.log('=' .repeat(50));

    if (!this.analysis || !this.context) {
      console.log('‚ùå Error: An√°lisis o contexto no disponible');
      return;
    }

    const startTime = Date.now();

    try {
      console.log(`üéØ Enviando a ${this.analysis.modelRecommendation.model}...`);
      
      // Intentar procesamiento real con Vertex AI
      let vertexResponse: any;
      
      try {
        const analysisResult = await vertexAIService.analyzeClinicalText(this.casoComplejo.transcripcion);
        
        vertexResponse = {
          model: this.analysis.modelRecommendation.model,
          complexity: this.analysis.complexity,
          redFlags: this.analysis.redFlags,
          timestamp: new Date().toISOString(),
          processingTime: Date.now() - startTime,
          warnings: analysisResult.warnings,
          suggestions: this.generarSugerenciasTraumatologia(),
          soap_analysis: analysisResult.soap,
          entities: analysisResult.entities
        };
        
        console.log('‚úÖ Respuesta real de Vertex AI obtenida');
        
      } catch (error) {
        console.log('üîÑ Vertex AI no disponible, simulando respuesta...');
        
        // Simulaci√≥n de respuesta para demostraci√≥n
        vertexResponse = this.simularRespuestaTraumatologia();
      }

      const totalTime = Date.now() - startTime;
      
      console.log(`‚è±Ô∏è Tiempo total de procesamiento: ${totalTime}ms`);
      console.log(`üß† Modelo utilizado: ${vertexResponse.model}`);
      console.log(`üìä Complejidad procesada: ${vertexResponse.complexity}`);
      console.log(`üö® Banderas rojas: ${vertexResponse.redFlags.length}`);

      // Guardar respuesta para uso posterior
      this.vertexResponse = vertexResponse;

    } catch (error) {
      console.error('‚ùå Error en procesamiento:', error);
    }
  }

  private async mostrarResultadoFinal(): Promise<void> {
    console.log('üéâ RESULTADO FINAL - CEREBRO CL√çNICO');
    console.log('=' .repeat(50));

    if (!this.vertexResponse) {
      console.log('‚ùå Error: Respuesta no disponible');
      return;
    }

    console.log('üìã AN√ÅLISIS CL√çNICO COMPLETO:');
    console.log('');

    // Mostrar advertencias si existen
    if (this.vertexResponse.warnings && this.vertexResponse.warnings.length > 0) {
      console.log('üö® ADVERTENCIAS CL√çNICAS:');
      this.vertexResponse.warnings.forEach((warning: string, index: number) => {
        console.log(`   ${index + 1}. ${warning}`);
      });
      console.log('');
    }

    // Mostrar sugerencias
    if (this.vertexResponse.suggestions && this.vertexResponse.suggestions.length > 0) {
      console.log('üí° SUGERENCIAS DE TRATAMIENTO:');
      this.vertexResponse.suggestions.forEach((suggestion: string, index: number) => {
        console.log(`   ${index + 1}. ${suggestion}`);
      });
      console.log('');
    }

    // Mostrar documento SOAP
    if (this.vertexResponse.soap_analysis) {
      console.log('üìã DOCUMENTO SOAP GENERADO:');
      console.log('');
      console.log('üìù SUBJETIVO:');
      console.log(`   ${this.vertexResponse.soap_analysis.subjective}`);
      console.log('');
      console.log('üîç OBJETIVO:');
      console.log(`   ${this.vertexResponse.soap_analysis.objective}`);
      console.log('');
      console.log('üéØ ASSESSMENT:');
      console.log(`   ${this.vertexResponse.soap_analysis.assessment}`);
      console.log('');
      console.log('üìã PLAN:');
      console.log(`   ${this.vertexResponse.soap_analysis.plan}`);
      console.log('');
    }

    // Mostrar entidades cl√≠nicas si existen
    if (this.vertexResponse.entities && this.vertexResponse.entities.length > 0) {
      console.log('üîç ENTIDADES CL√çNICAS IDENTIFICADAS:');
      this.vertexResponse.entities.slice(0, 10).forEach((entity: any) => {
        console.log(`   ‚Ä¢ ${entity.text} (${entity.type}) - Confianza: ${(entity.confidence * 100).toFixed(1)}%`);
      });
      console.log('');
    }

    // Resumen final
    console.log('üìä RESUMEN DEL PROCESAMIENTO:');
    console.log(`   üß† Modelo utilizado: ${this.vertexResponse.model}`);
    console.log(`   ‚è±Ô∏è Tiempo de procesamiento: ${this.vertexResponse.processingTime}ms`);
    console.log(`   üéØ Complejidad: ${this.vertexResponse.complexity}`);
    console.log(`   üö® Banderas rojas: ${this.vertexResponse.redFlags.length}`);
    console.log(`   üí∞ Costo estimado: $${this.analysis?.modelRecommendation.estimatedCost.toFixed(4)}`);
    console.log('');
    console.log('‚úÖ CEREBRO CL√çNICO - PROCESAMIENTO COMPLETADO');
  }

  private generarSugerenciasTraumatologia(): string[] {
    return [
      'Evaluaci√≥n ortop√©dica inmediata para confirmar lesi√≥n ligamentaria',
      'Estudios de imagen: RMN de rodilla para evaluar LCA y meniscos',
      'Programa de rehabilitaci√≥n preoperatoria si cirug√≠a indicada',
      'Control de edema con crioterapia y compresi√≥n',
      'Ejercicios de fortalecimiento de cu√°driceps y estabilizaci√≥n',
      'Progresi√≥n gradual de carga y movilidad',
      'Evaluaci√≥n biomec√°nica para prevenci√≥n de reca√≠das',
      'Plan de retorno progresivo al deporte'
    ];
  }

  private simularRespuestaTraumatologia(): any {
    return {
      model: this.analysis?.modelRecommendation.model || 'gemini-1.5-pro',
      complexity: this.analysis?.complexity || 'critical',
      redFlags: this.analysis?.redFlags || ['dolor intenso', 'inestabilidad', 'limitaci√≥n severa'],
      timestamp: new Date().toISOString(),
      processingTime: Math.random() * 2000 + 1000,
      warnings: [
        'Sospecha de lesi√≥n ligamentaria compleja (LCA + LLE)',
        'Riesgo de inestabilidad articular cr√≥nica',
        'Necesidad de evaluaci√≥n ortop√©dica urgente',
        'Posible indicaci√≥n quir√∫rgica'
      ],
      suggestions: this.generarSugerenciasTraumatologia(),
      soap_analysis: {
        subjective: 'Paciente de 28 a√±os, futbolista profesional, presenta lesi√≥n aguda en rodilla izquierda durante actividad deportiva hace 3 semanas. Dolor intenso, inestabilidad al deambular, edema progresivo y limitaci√≥n severa de movilidad. Dolor nocturno que interfiere con el sue√±o. Antecedentes de lesi√≥n previa en rodilla contralateral con cirug√≠a artrosc√≥pica.',
        objective: 'Exploraci√≥n muestra edema importante en rodilla izquierda, equimosis en cara lateral, dolor a la palpaci√≥n en ligamento lateral externo. Tests de Lachman y caj√≥n anterior positivos. Limitaci√≥n de movilidad: flexi√≥n 45¬∞, extensi√≥n -10¬∞. Inestabilidad funcional evidente.',
        assessment: 'Sospecha de lesi√≥n ligamentaria compleja en rodilla izquierda, probablemente LCA + LLE, con posible afectaci√≥n meniscal. Paciente de alto rendimiento deportivo con antecedentes de lesi√≥n contralateral. Riesgo de inestabilidad cr√≥nica si no se maneja adecuadamente.',
        plan: '1) Derivaci√≥n urgente a traumat√≥logo deportivo. 2) Estudios de imagen: RMN de rodilla. 3) Control de edema con crioterapia y compresi√≥n. 4) Programa de rehabilitaci√≥n preoperatoria si cirug√≠a indicada. 5) Evaluaci√≥n biomec√°nica post-tratamiento. 6) Plan de retorno progresivo al deporte de alto rendimiento.'
      },
      entities: [
        { text: 'rodilla izquierda', type: 'anatomy', confidence: 0.98 },
        { text: 'dolor intenso', type: 'symptom', confidence: 0.95 },
        { text: 'inestabilidad', type: 'symptom', confidence: 0.92 },
        { text: 'edema', type: 'symptom', confidence: 0.89 },
        { text: 'test de Lachman', type: 'test', confidence: 0.94 },
        { text: 'caj√≥n anterior', type: 'test', confidence: 0.91 },
        { text: 'lesi√≥n ligamentaria', type: 'diagnosis', confidence: 0.87 },
        { text: 'futbolista profesional', type: 'context', confidence: 0.96 }
      ]
    };
  }

  // Propiedades para almacenar datos del procesamiento
  private analysis?: ComplexityAnalysis;
  private context?: PromptContext;
  private vertexResponse?: any;
}

// Funci√≥n principal
async function main() {
  const demo = new DemostracionCerebroClinico();
  await demo.ejecutarDemostracion();
}

// Ejecutar si es el archivo principal
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { DemostracionCerebroClinico }; 