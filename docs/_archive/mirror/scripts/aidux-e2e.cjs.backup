/* CLI: node scripts/aidux-e2e.js [transcript.txt]
   - Lee transcript desde argv[2] o STDIN
   - Construye prompt esquema clínico
   - Llama vertexAIProxy
   - Normaliza y guarda artifacts/<ts>-raw.json y <ts>-normalized.json
   - Imprime resumen en consola
*/
const fs = require('fs');

const URL = 'https://us-central1-aiduxcare-v2-uat-dev.cloudfunctions.net/vertexAIProxy';

function nowTS(){
  const d = new Date();
  const pad = n=>String(n).padStart(2,'0');
  return `${d.getFullYear()}${pad(d.getMonth()+1)}${pad(d.getDate())}-${pad(d.getHours())}${pad(d.getMinutes())}${pad(d.getSeconds())}`;
}

function buildPrompt(transcript){
return `
Eres un asistente clínico de fisioterapia. Devuelve SIEMPRE JSON estricto con este esquema:

{
  "motivo_consulta": string,
  "hallazgos_relevantes": string[],
  "diagnosticos_probables": string[],
  "red_flags": string[],
  "evaluaciones_fisicas_sugeridas": string[],
  "plan_tratamiento_sugerido": string[],
  "riesgo_legal": "bajo" | "medio" | "alto"
}

Reglas:
- No inventes datos ausentes.
- Si un campo no aplica, usa "" o [].
- Prioriza seguridad y red flags.
- La salida debe ser SOLO el JSON, sin texto adicional.

[Contexto paciente]
Adulto activo, sin comorbilidades conocidas.

[Instrucciones]
Analiza la transcripción y completa el JSON. Si no hay red flags claras, deja el array vacío.

[Transcripción]
${transcript}`.trim();
}

const DEFAULT_TESTS = [
  "Test funcional de rango articular",
  "Palpación selectiva",
  "Pruebas de fuerza manual (MMT)",
  "Evaluación neurovascular distal",
  "Screening de banderas rojas"
];

function toArray(v){ return Array.isArray(v) ? v.map(String) : (v==null||v===''? [] : [String(v)]); }

function normalizeFromVertexText(text){
  let parsed = {};
  try { parsed = JSON.parse(String(text||'').trim()); } catch { parsed = {}; }
  const riesgo = String(parsed.riesgo_legal || 'bajo');
  const riesgoSafe = ['bajo','medio','alto'].includes(riesgo) ? riesgo : 'bajo';
  const evals = parsed.evaluaciones_fisicas_sugeridas;
  const evalsSafe = Array.isArray(evals) && evals.length>0 ? evals.map(String) : DEFAULT_TESTS;
  return {
    motivo_consulta: String(parsed.motivo_consulta || ''),
    hallazgos_relevantes: toArray(parsed.hallazgos_relevantes),
    diagnosticos_probables: toArray(parsed.diagnosticos_probables),
    red_flags: toArray(parsed.red_flags),
    evaluaciones_fisicas_sugeridas: evalsSafe,
    plan_tratamiento_sugerido: toArray(parsed.plan_tratamiento_sugerido),
    riesgo_legal: riesgoSafe
  };
}

async function main(){
  const argPath = process.argv[2];
  const transcript = argPath ? fs.readFileSync(argPath,'utf8') : fs.readFileSync(0,'utf8'); // stdin si no hay arg
  const prompt = buildPrompt(transcript);
  const payload = { action:'analyze', prompt, traceId:`cli-${nowTS()}` };

  const r = await fetch(URL, {
    method:'POST',
    headers:{'Content-Type':'application/json'},
    body: JSON.stringify(payload)
  });
  const data = await r.json();

  const ts = nowTS();
  const rawPath = `artifacts/${ts}-raw.json`;
  fs.writeFileSync(rawPath, JSON.stringify(data, null, 2));

  const normalized = normalizeFromVertexText(data?.text || '');
  const normPath = `artifacts/${ts}-normalized.json`;
  fs.writeFileSync(normPath, JSON.stringify(normalized, null, 2));

  const counts = {
    hallazgos: normalized.hallazgos_relevantes.length,
    dx: normalized.diagnosticos_probables.length,
    red_flags: normalized.red_flags.length,
    tests: normalized.evaluaciones_fisicas_sugeridas.length,
    plan: normalized.plan_tratamiento_sugerido.length
  };

  const okSchema =
    typeof normalized.motivo_consulta === 'string' &&
    Array.isArray(normalized.hallazgos_relevantes) &&
    Array.isArray(normalized.diagnosticos_probables) &&
    Array.isArray(normalized.red_flags) &&
    Array.isArray(normalized.evaluaciones_fisicas_sugeridas) &&
    Array.isArray(normalized.plan_tratamiento_sugerido) &&
    ['bajo','medio','alto'].includes(String(normalized.riesgo_legal));

  console.log(JSON.stringify({
    ok: true,
    okSchema,
    files: { raw: rawPath, normalized: normPath },
    counts
  }, null, 2));
}

main().catch(e=>{ console.error(e); process.exit(1); });

console.log('[OK] scripts/aidux-e2e.js integrated');

console.log('[OK] scripts/aidux-e2e.js integrated');
