/**
 * üß™ Script de Prueba Integrado - Sistema de Geolocalizaci√≥n y Servicios Profesionales
 * Verifica que todo el sistema funciona correctamente en conjunto
 */

import { geolocationService } from '../src/services/GeolocationService';
import { professionalServicesService } from '../src/services/ProfessionalServicesService';

async function testIntegratedSystem() {
  console.log('üß™ INICIANDO PRUEBAS DEL SISTEMA INTEGRADO');
  console.log('==========================================\n');

  try {
    // Test 1: Detecci√≥n de ubicaci√≥n real
    console.log('üìç Test 1: Detecci√≥n de ubicaci√≥n real');
    console.log('--------------------------------------');
    
    const location = await geolocationService.detectUserLocation();
    console.log('‚úÖ Ubicaci√≥n detectada:', {
      country: location.country,
      countryCode: location.countryCode,
      region: location.region,
      city: location.city,
      isDetected: location.isDetected
    });

    // Test 2: Regulaciones relevantes para ubicaci√≥n real
    console.log('\nüìã Test 2: Regulaciones relevantes para ubicaci√≥n real');
    console.log('----------------------------------------------------');
    
    const complianceConfig = await geolocationService.getRelevantRegulations();
    console.log('‚úÖ Regulaciones encontradas:', complianceConfig.regulations.length);
    complianceConfig.regulations.forEach((regulation, index) => {
      console.log(`  ${index + 1}. ${regulation.name} (${regulation.countries.join(', ')})`);
    });

    // Test 3: Servicios disponibles para ubicaci√≥n real
    console.log('\nüè• Test 3: Servicios disponibles para ubicaci√≥n real');
    console.log('------------------------------------------------');
    
    const availableServices = professionalServicesService.getAvailableServices(
      location.countryCode,
      []
    );

    console.log(`‚úÖ Servicios disponibles: ${availableServices.filter(s => s.isAvailable).length}/${availableServices.length}`);
    availableServices.forEach((availability, index) => {
      const status = availability.isAvailable ? '‚úÖ' : '‚ùå';
      console.log(`  ${index + 1}. ${status} ${availability.service.name}`);
      if (availability.certificationRequired) {
        console.log(`     üîë Requiere certificaci√≥n: ${availability.certificationType}`);
      }
    });

    // Test 4: Simulaci√≥n de diferentes escenarios de usuario
    console.log('\nüë§ Test 4: Simulaci√≥n de diferentes escenarios de usuario');
    console.log('-----------------------------------------------------');
    
    const userScenarios = [
      {
        name: 'Fisioterapeuta en Espa√±a',
        location: { country: 'Spain', countryCode: 'ES', region: 'MD', city: 'Madrid', ip: '192.168.1.1', isDetected: true },
        profession: 'Fisioterapeuta',
        certifications: []
      },
      {
        name: 'Kinesi√≥logo en Chile',
        location: { country: 'Chile', countryCode: 'CL', region: 'RM', city: 'Santiago', ip: '192.168.1.2', isDetected: true },
        profession: 'Kinesi√≥logo/a',
        certifications: []
      },
      {
        name: 'Fisioterapeuta en Canad√° con certificaci√≥n',
        location: { country: 'Canada', countryCode: 'CA', region: 'ON', city: 'Toronto', ip: '192.168.1.3', isDetected: true },
        profession: 'Fisioterapeuta',
        certifications: ['dry-needling-certification']
      },
      {
        name: 'Fisioterapeuta en Canad√° sin certificaci√≥n',
        location: { country: 'Canada', countryCode: 'CA', region: 'ON', city: 'Toronto', ip: '192.168.1.4', isDetected: true },
        profession: 'Fisioterapeuta',
        certifications: []
      },
      {
        name: 'Massage Therapist en Canad√°',
        location: { country: 'Canada', countryCode: 'CA', region: 'ON', city: 'Toronto', ip: '192.168.1.5', isDetected: true },
        profession: 'Massage Therapist',
        certifications: []
      }
    ];

    for (const scenario of userScenarios) {
      console.log(`\nüë§ ${scenario.name}`);
      console.log(`   Ubicaci√≥n: ${scenario.location.country} (${scenario.location.countryCode})`);
      console.log(`   Profesi√≥n: ${scenario.profession}`);
      console.log(`   Certificaciones: ${scenario.certifications.length > 0 ? scenario.certifications.join(', ') : 'Ninguna'}`);
      
      // Simular ubicaci√≥n
      geolocationService.setMockLocation(scenario.location);
      
      // Obtener regulaciones
      const regulations = await geolocationService.getRelevantRegulations();
      console.log(`   üìã Regulaciones aplicables: ${regulations.regulations.length}`);
      
      // Obtener servicios disponibles
      const services = professionalServicesService.getAvailableServices(
        scenario.location.countryCode,
        scenario.certifications
      );
      
      console.log(`   üè• Servicios disponibles: ${services.filter(s => s.isAvailable).length}/${services.length}`);
      
      // Mostrar servicios espec√≠ficos
      const dryNeedling = services.find(s => s.service.id === 'dry-needling');
      const massageTherapy = services.find(s => s.service.id === 'massage-therapy');
      
      if (dryNeedling) {
        const status = dryNeedling.isAvailable ? '‚úÖ' : '‚ùå';
        console.log(`   ${status} Dry Needling: ${dryNeedling.isAvailable ? 'Disponible' : 'No disponible'}`);
        if (!dryNeedling.isAvailable && dryNeedling.restrictions.length > 0) {
          console.log(`      Restricci√≥n: ${dryNeedling.restrictions[0]}`);
        }
      }
      
      if (massageTherapy) {
        const status = massageTherapy.isAvailable ? '‚úÖ' : '‚ùå';
        console.log(`   ${status} Massage Therapy: ${massageTherapy.isAvailable ? 'Disponible' : 'No disponible'}`);
      }
      
      // Limpiar cach√© para siguiente prueba
      geolocationService.clearCache();
    }

    // Test 5: Verificaci√≥n de casos espec√≠ficos mencionados por el usuario
    console.log('\nüéØ Test 5: Verificaci√≥n de casos espec√≠ficos del usuario');
    console.log('-----------------------------------------------------');
    
    // Caso 1: Dry Needling en Canad√° - Solo con certificaci√≥n
    console.log('\nüìç Caso 1: Dry Needling en Canad√°');
    geolocationService.setMockLocation({ country: 'Canada', countryCode: 'CA', region: 'ON', city: 'Toronto', ip: '192.168.1.1', isDetected: true });
    
    const dryNeedlingWithoutCert = professionalServicesService.checkServiceAvailability('dry-needling', 'CA', 'ON', []);
    const dryNeedlingWithCert = professionalServicesService.checkServiceAvailability('dry-needling', 'CA', 'ON', ['dry-needling-certification']);
    
    console.log(`   Sin certificaci√≥n: ${dryNeedlingWithoutCert?.isAvailable ? '‚úÖ Permitido' : '‚ùå No permitido'}`);
    console.log(`   Con certificaci√≥n: ${dryNeedlingWithCert?.isAvailable ? '‚úÖ Permitido' : '‚ùå No permitido'}`);
    
    if (dryNeedlingWithCert?.requirements) {
      console.log(`   Requisitos con certificaci√≥n: ${dryNeedlingWithCert.requirements.join(', ')}`);
    }
    
    // Caso 2: Dry Needling en Chile - Sin certificaci√≥n oficial requerida
    console.log('\nüìç Caso 2: Dry Needling en Chile');
    geolocationService.setMockLocation({ country: 'Chile', countryCode: 'CL', region: 'RM', city: 'Santiago', ip: '192.168.1.2', isDetected: true });
    
    const dryNeedlingChile = professionalServicesService.checkServiceAvailability('dry-needling', 'CL', 'RM', []);
    console.log(`   Resultado: ${dryNeedlingChile?.isAvailable ? '‚úÖ Permitido' : '‚ùå No permitido'}`);
    
    if (dryNeedlingChile?.requirements) {
      console.log(`   Requisitos: ${dryNeedlingChile.requirements.join(', ')}`);
    }
    
    // Caso 3: Massage Therapy - Diferencias entre Canad√° y Espa√±a
    console.log('\nüìç Caso 3: Massage Therapy - Diferencias regulatorias');
    
    // Canad√°
    geolocationService.setMockLocation({ country: 'Canada', countryCode: 'CA', region: 'ON', city: 'Toronto', ip: '192.168.1.3', isDetected: true });
    const massageCA = professionalServicesService.checkServiceAvailability('massage-therapy', 'CA', 'ON');
    console.log(`   Canad√°: ${massageCA?.isAvailable ? '‚úÖ Permitido' : '‚ùå No permitido'}`);
    if (massageCA?.requirements) {
      console.log(`   Requisitos Canad√°: ${massageCA.requirements.join(', ')}`);
    }
    
    // Espa√±a
    geolocationService.setMockLocation({ country: 'Spain', countryCode: 'ES', region: 'MD', city: 'Madrid', ip: '192.168.1.4', isDetected: true });
    const massageES = professionalServicesService.checkServiceAvailability('massage-therapy', 'ES', 'MD');
    console.log(`   Espa√±a: ${massageES?.isAvailable ? '‚úÖ Permitido' : '‚ùå No permitido'}`);
    if (massageES?.requirements) {
      console.log(`   Requisitos Espa√±a: ${massageES.requirements.join(', ')}`);
    }
    
    // Limpiar cach√©
    geolocationService.clearCache();

    console.log('\nüéâ TODAS LAS PRUEBAS INTEGRADAS COMPLETADAS EXITOSAMENTE');
    console.log('=======================================================');
    console.log('‚úÖ Detecci√≥n de ubicaci√≥n: FUNCIONANDO');
    console.log('‚úÖ Filtrado de regulaciones: FUNCIONANDO');
    console.log('‚úÖ Restricciones de servicios: FUNCIONANDO');
    console.log('‚úÖ Verificaci√≥n de certificaciones: FUNCIONANDO');
    console.log('‚úÖ Casos espec√≠ficos por pa√≠s: FUNCIONANDO');
    console.log('‚úÖ Integraci√≥n completa: FUNCIONANDO');

    // Resumen ejecutivo
    console.log('\nüìä RESUMEN EJECUTIVO');
    console.log('==================');
    console.log('üåç El sistema detecta autom√°ticamente la ubicaci√≥n del usuario');
    console.log('üìã Muestra solo las regulaciones relevantes para esa ubicaci√≥n');
    console.log('üè• Determina qu√© servicios profesionales est√°n disponibles');
    console.log('üîë Verifica certificaciones requeridas seg√∫n la regi√≥n');
    console.log('‚öñÔ∏è Respeta las diferencias regulatorias entre pa√≠ses');
    console.log('üéØ Evita confundir a los usuarios con informaci√≥n irrelevante');

  } catch (error) {
    console.error('‚ùå Error en las pruebas integradas:', error);
    process.exit(1);
  }
}

// Ejecutar pruebas
testIntegratedSystem().then(() => {
  console.log('\nüöÄ Sistema integrado listo para producci√≥n.');
  console.log('üéØ Los usuarios ver√°n informaci√≥n relevante seg√∫n su ubicaci√≥n y certificaciones.');
  process.exit(0);
}).catch((error) => {
  console.error('üí• Error fatal en las pruebas integradas:', error);
  process.exit(1);
}); 