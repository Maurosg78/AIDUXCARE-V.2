#!/usr/bin/env node

/**
 * üéØ Script de Testing: Pipeline de Bienvenida AiDuxCare
 * Prueba completa del flujo: Registro ‚Üí Verificaci√≥n ‚Üí Onboarding ‚Üí Workflow
 */

import { spawn } from 'child_process';

console.log('üéØ Iniciando Test del Pipeline de Bienvenida');
console.log('========================================\n');

// Configuraci√≥n
const BASE_URL = 'http://localhost:5173';
const EMULATOR_AUTH_URL = 'http://localhost:9099';
const EMULATOR_FIRESTORE_URL = 'http://localhost:8080';

// Datos de testing
const TEST_USER = {
  email: 'mauricio.test@aiduxcare.com',
  password: 'TestAidux2025!',
  name: 'Dr. Mauricio Test',
  profession: 'Fisioterapeuta',
  specialty: 'Fisioterapia Deportiva'
};

console.log('üìã Datos de Test:');
console.log('- Email:', TEST_USER.email);
console.log('- Nombre:', TEST_USER.name);
console.log('- Profesi√≥n:', TEST_USER.profession);
console.log('- Especialidad:', TEST_USER.specialty);
console.log('');

// Funciones de testing
async function checkEmulators() {
  console.log('1Ô∏è‚É£ Verificando emuladores Firebase...');
  
  try {
    const authResponse = await fetch(EMULATOR_AUTH_URL);
    const authStatus = authResponse.ok ? '‚úÖ Auth Emulator' : '‚ùå Auth Emulator';
    
    const firestoreResponse = await fetch(EMULATOR_FIRESTORE_URL);
    const firestoreStatus = firestoreResponse.ok ? '‚úÖ Firestore Emulator' : '‚ùå Firestore Emulator';
    
    console.log(`   ${authStatus} (puerto 9099)`);
    console.log(`   ${firestoreStatus} (puerto 8080)`);
    
    if (!authResponse.ok || !firestoreResponse.ok) {
      console.log('\n‚ùå ERROR: Emuladores no est√°n ejecut√°ndose');
      console.log('üí° Ejecuta: firebase emulators:start --only auth,firestore\n');
      process.exit(1);
    }
    
    console.log('   ‚úÖ Emuladores funcionando correctamente\n');
  } catch (error) {
    console.log('   ‚ùå Error conectando con emuladores:', error.message);
    process.exit(1);
  }
}

async function checkDevServer() {
  console.log('2Ô∏è‚É£ Verificando servidor de desarrollo...');
  
  try {
    const response = await fetch(BASE_URL);
    if (response.ok) {
      console.log('   ‚úÖ Servidor de desarrollo funcionando (puerto 5173)\n');
    } else {
      throw new Error('Servidor no responde');
    }
  } catch (error) {
    console.log('   ‚ùå ERROR: Servidor de desarrollo no est√° ejecut√°ndose');
    console.log('üí° Ejecuta: npm run dev\n');
    process.exit(1);
  }
}

function printPipelineSteps() {
  console.log('3Ô∏è‚É£ Pipeline de Testing Manual:');
  console.log('=============================\n');
  
  console.log('üéØ FLUJO COMPLETO:');
  console.log('WelcomePage ‚Üí Register ‚Üí VerifyEmail ‚Üí Onboarding ‚Üí Workflow\n');
  
  console.log('üìã PASOS A SEGUIR:');
  console.log('');
  
  console.log('PASO 1: Ir a WelcomePage');
  console.log(`üîó ${BASE_URL}`);
  console.log('   - Deber√≠a ver la p√°gina de bienvenida con login/registro');
  console.log('');
  
  console.log('PASO 2: Registrar nuevo usuario');
  console.log('   - Hacer clic en "Registrarse"');
  console.log(`   - Email: ${TEST_USER.email}`);
  console.log(`   - Password: ${TEST_USER.password}`);
  console.log(`   - Nombre: ${TEST_USER.name}`);
  console.log('   - Enviar formulario');
  console.log('');
  
  console.log('PASO 3: Verificaci√≥n de Email (EMULADOR)');
  console.log('   - NO se enviar√° email real (modo emulador)');
  console.log('   - El usuario se crea directamente como verificado');
  console.log('   - Deber√≠a redirigir a /verify-email');
  console.log('');
  
  console.log('PASO 4: Login despu√©s de registro');
  console.log('   - Volver a WelcomePage');
  console.log('   - Hacer login con las mismas credenciales');
  console.log('   - Deber√≠a redirigir a /professional-onboarding');
  console.log('');
  
  console.log('PASO 5: Completar Onboarding');
  console.log('   - Completar Informaci√≥n Personal');
  console.log('   - Completar Informaci√≥n Profesional');
  console.log('   - Aceptar Compliance y Seguridad');
  console.log('   - Finalizar onboarding');
  console.log('');
  
  console.log('PASO 6: Acceso a Workflow');
  console.log('   - Deber√≠a redirigir a /professional-workflow');
  console.log('   - ¬°Pipeline completo funcionando!');
  console.log('');
}

function printDebugInfo() {
  console.log('üîß INFORMACI√ìN DE DEBUG:');
  console.log('========================\n');
  
  console.log('üìä URLs de Monitoreo:');
  console.log(`üîó App Principal: ${BASE_URL}`);
  console.log(`üîó Auth Emulator: ${EMULATOR_AUTH_URL}`);
  console.log(`üîó Firestore Emulator: ${EMULATOR_FIRESTORE_URL}`);
  console.log('');
  
  console.log('üêõ Debugging:');
  console.log('- Abrir DevTools del navegador');
  console.log('- Verificar Console para logs de Firebase');
  console.log('- Verificar Network para llamadas a emuladores');
  console.log('- Verificar Application ‚Üí Storage para datos locales');
  console.log('');
  
  console.log('üìù Datos Esperados en Firestore:');
  console.log('- Colecci√≥n: users');
  console.log(`- Documento: [uid del usuario]`);
  console.log('- Datos: perfil profesional, onboarding completado');
  console.log('');
  
  console.log('üö® Posibles Errores:');
  console.log('- "Auth Emulator not connected": Reiniciar emuladores');
  console.log('- "Network request failed": Verificar puertos');
  console.log('- "Email not verified": Es normal en emulador');
  console.log('- Redirecci√≥n incorrecta: Verificar rutas en router.tsx');
  console.log('');
}

// Funci√≥n principal
async function main() {
  try {
    await checkEmulators();
    await checkDevServer();
    printPipelineSteps();
    printDebugInfo();
    
    console.log('‚úÖ LISTO PARA TESTING');
    console.log('=====================\n');
    console.log('üéØ Abre tu navegador y sigue los pasos del pipeline');
    console.log(`üîó Comenzar en: ${BASE_URL}`);
    console.log('');
    console.log('üí° TIP: Mant√©n las DevTools abiertas para ver logs en tiempo real');
    
  } catch (error) {
    console.error('‚ùå Error durante el setup:', error);
    process.exit(1);
  }
}

// Ejecutar
main();