#!/usr/bin/env tsx

/**
 * üß™ AiDuxCare - Test Completo del Backend
 * Script para validar todo el sistema antes de user testing
 */

import { ollamaClient, isOllamaConfigured } from '../src/lib/ollama';
import { NLPServiceOllama } from '../src/services/nlpServiceOllama';
import { RAGMedicalMCP } from '../src/core/mcp/RAGMedicalMCP';

interface TestResult {
  name: string;
  status: 'success' | 'error';
  duration: number;
  details?: any;
  error?: string;
}

interface TestCase {
  name: string;
  transcript: string;
  expectedEntities: string[];
  expectedSOAPSections: string[];
}

const TEST_CASES: TestCase[] = [
  {
    name: "Caso 1: Dolor Lumbar Agudo",
    transcript: `El paciente Carlos Mendoza lleg√≥ reportando dolor intenso en la zona lumbar baja. 
Menciona que el dolor comenz√≥ hace 3 d√≠as despu√©s de levantar una caja pesada en el trabajo. 
Durante la evaluaci√≥n observ√© tensi√≥n muscular significativa en el √°rea paravertebral L4-L5. 
Limitaci√≥n notable en la flexi√≥n anterior del tronco, alcanzando solo 30 grados.
Aplicamos masaje terap√©utico profundo y t√©cnicas de liberaci√≥n miofascial durante 20 minutos.
El paciente report√≥ alivio inmediato del 60% del dolor tras la sesi√≥n.
Plan: continuar con sesiones de fisioterapia tres veces por semana durante 2 semanas,
ejercicios de fortalecimiento del core en casa, y aplicaci√≥n de calor local antes de dormir.
Reevaluaci√≥n en una semana para evaluar progreso.`,
    expectedEntities: ['dolor lumbar', 'tensi√≥n muscular', 'L4-L5', 'flexi√≥n anterior', 'masaje terap√©utico'],
    expectedSOAPSections: ['subjective', 'objective', 'assessment', 'plan']
  },
  {
    name: "Caso 2: Rehabilitaci√≥n Post-Operatoria Rodilla",
    transcript: `Paciente Mar√≠a Gonz√°lez, segunda sesi√≥n post-cirug√≠a de menisco. 
Reporta dolor moderado 4/10 en rodilla derecha, especialmente al subir escaleras.
Evaluaci√≥n: rango de movimiento mejorado desde √∫ltima sesi√≥n, flexi√≥n 90 grados, extensi√≥n completa.
Aplicamos ejercicios de movilidad pasiva, fortalecimiento de cu√°driceps con resistencia leve.
Hidroterapia 15 minutos para reducir inflamaci√≥n.
Paciente tolera bien el tratamiento, sin complicaciones.
Objetivos: alcanzar flexi√≥n 120 grados en pr√≥ximas 2 sesiones.
Continuar ejercicios en casa, hielo post-ejercicio, control en 3 d√≠as.`,
    expectedEntities: ['post-cirug√≠a menisco', 'rodilla derecha', 'flexi√≥n 90 grados', 'cu√°driceps', 'hidroterapia'],
    expectedSOAPSections: ['subjective', 'objective', 'assessment', 'plan']
  },
  {
    name: "Caso 3: Cervicalgia Cr√≥nica",
    transcript: `Paciente Ana L√≥pez, 45 a√±os, consulta por dolor cervical cr√≥nico de 6 meses.
Refiere dolor 6/10 en regi√≥n cervical posterior, irradiado a hombro derecho.
Exploraci√≥n: limitaci√≥n rotaci√≥n derecha 30%, tensi√≥n trapecio superior bilateral.
Aplicamos t√©cnicas de liberaci√≥n miofascial y ejercicios de movilidad cervical.
Educaci√≥n postural y ergonom√≠a en el trabajo.
Plan: sesiones 2x semana, ejercicios domiciliarios diarios, control en 2 semanas.`,
    expectedEntities: ['dolor cervical cr√≥nico', 'trapecio superior', 'rotaci√≥n cervical', 'liberaci√≥n miofascial'],
    expectedSOAPSections: ['subjective', 'objective', 'assessment', 'plan']
  },
  {
    name: "Caso 4: Lesi√≥n Deportiva Aguda",
    transcript: `Paciente Juan P√©rez, 28 a√±os, futbolista amateur. Lesi√≥n en partido hace 2 d√≠as.
Reporta dolor agudo 8/10 en tobillo derecho, edema moderado, limitaci√≥n funcional completa.
Evaluaci√≥n: esguince grado II, inestabilidad anterior, dolor a la palpaci√≥n ligamento lateral externo.
Aplicamos protocolo RICE inicial, vendaje funcional, ejercicios isom√©tricos suaves.
Plan: reposo relativo 48h, hielo 20min cada 2h, elevaci√≥n, control en 3 d√≠as.
Objetivos: reducci√≥n edema, recuperaci√≥n rango movimiento, retorno progresivo actividad.`,
    expectedEntities: ['esguince grado II', 'tobillo derecho', 'edema', 'ligamento lateral externo', 'protocolo RICE'],
    expectedSOAPSections: ['subjective', 'objective', 'assessment', 'plan']
  }
];

/**
 * Test de conectividad b√°sica
 */
async function testConnectivity(): Promise<TestResult> {
  const startTime = Date.now();
  
  try {
    console.log('üîó Verificando conectividad...');
    
    // Test Ollama
    if (!isOllamaConfigured()) {
      throw new Error('Ollama no est√° configurado');
    }
    
    const health = await ollamaClient.healthCheck();
    if (health.status !== 'healthy') {
      throw new Error(`Ollama no est√° saludable: ${health.status}`);
    }
    
    const duration = Date.now() - startTime;
    
    return {
      name: 'Conectividad B√°sica',
      status: 'success',
      duration,
      details: {
        ollama_status: health.status,
        ollama_latency: health.latency_ms
      }
    };
    
  } catch (error) {
    return {
      name: 'Conectividad B√°sica',
      status: 'error',
      duration: Date.now() - startTime,
      error: error instanceof Error ? error.message : 'Error desconocido'
    };
  }
}

/**
 * Test de NLP Service
 */
async function testNLPService(): Promise<TestResult> {
  const startTime = Date.now();
  
  try {
    console.log('üß† Probando NLP Service...');
    
    const testTranscript = "Paciente reporta dolor lumbar. Evaluaci√≥n revela tensi√≥n muscular.";
    const entities = await NLPServiceOllama.extractClinicalEntities(testTranscript, false);
    
    const duration = Date.now() - startTime;
    
    return {
      name: 'NLP Service',
      status: 'success',
      duration,
      details: {
        entities_extracted: entities.length,
        sample_entities: entities.slice(0, 3).map(e => `${e.text} (${e.type})`)
      }
    };
    
  } catch (error) {
    return {
      name: 'NLP Service',
      status: 'error',
      duration: Date.now() - startTime,
      error: error instanceof Error ? error.message : 'Error desconocido'
    };
  }
}

/**
 * Test de RAG Medical
 */
async function testRAGMedical(): Promise<TestResult> {
  const startTime = Date.now();
  
  try {
    console.log('üî¨ Probando RAG Medical...');
    
    const ragResult = await RAGMedicalMCP.retrieveRelevantKnowledge('low back pain', 'fisioterapia', 2);
    
    const duration = Date.now() - startTime;
    
    return {
      name: 'RAG Medical',
      status: 'success',
      duration,
      details: {
        citations_found: ragResult.citations.length,
        confidence_score: ragResult.confidence_score,
        sample_citation: ragResult.citations[0]?.title?.substring(0, 50)
      }
    };
    
  } catch (error) {
    return {
      name: 'RAG Medical',
      status: 'error',
      duration: Date.now() - startTime,
      error: error instanceof Error ? error.message : 'Error desconocido'
    };
  }
}

/**
 * Test de caso cl√≠nico completo
 */
async function testClinicalCase(testCase: TestCase): Promise<TestResult> {
  const startTime = Date.now();
  
  try {
    console.log(`üè• Probando: ${testCase.name}`);
    
    // 1. Extracci√≥n de entidades
    const entities = await NLPServiceOllama.extractClinicalEntities(testCase.transcript, false);
    
    // 2. Generaci√≥n SOAP
    const soapNotes = await NLPServiceOllama.generateSOAPNotes(testCase.transcript, entities, false);
    
    // 3. RAG (opcional)
    let ragResult = null;
    try {
      const primaryCondition = entities.find(e => e.type === 'diagnosis')?.text || 
                              entities.find(e => e.type === 'symptom')?.text;
      if (primaryCondition) {
        ragResult = await RAGMedicalMCP.retrieveRelevantKnowledge(primaryCondition, 'fisioterapia', 1);
      }
    } catch (ragError) {
      console.warn('‚ö†Ô∏è RAG fall√≥ para este caso, continuando...');
    }
    
    const duration = Date.now() - startTime;
    
    // Validaciones
    const entityValidation = entities.length > 0;
    const soapValidation = soapNotes && 
                          testCase.expectedSOAPSections.every(section => 
                            soapNotes[section as keyof typeof soapNotes]
                          );
    
    if (!entityValidation) {
      throw new Error('No se extrajeron entidades cl√≠nicas');
    }
    
    if (!soapValidation) {
      throw new Error('SOAP incompleto o mal formateado');
    }
    
    return {
      name: testCase.name,
      status: 'success',
      duration,
      details: {
        entities_count: entities.length,
        entities_types: [...new Set(entities.map(e => e.type))],
        soap_complete: soapValidation,
        rag_used: !!ragResult,
        rag_citations: ragResult?.citations?.length || 0
      }
    };
    
  } catch (error) {
    return {
      name: testCase.name,
      status: 'error',
      duration: Date.now() - startTime,
      error: error instanceof Error ? error.message : 'Error desconocido'
    };
  }
}

/**
 * Test de performance
 */
async function testPerformance(): Promise<TestResult> {
  const startTime = Date.now();
  
  try {
    console.log('‚ö° Probando performance...');
    
    const performanceTests = [];
    
    // Test 1: Extracci√≥n de entidades r√°pida
    const entityStart = Date.now();
    await NLPServiceOllama.extractClinicalEntities("Dolor lumbar agudo", false);
    const entityTime = Date.now() - entityStart;
    performanceTests.push({ name: 'Entidades', time: entityTime });
    
    // Test 2: SOAP r√°pido
    const soapStart = Date.now();
    const entities = await NLPServiceOllama.extractClinicalEntities("Paciente con dolor", false);
    await NLPServiceOllama.generateSOAPNotes("Paciente con dolor lumbar", entities, false);
    const soapTime = Date.now() - soapStart;
    performanceTests.push({ name: 'SOAP', time: soapTime });
    
    // Test 3: RAG r√°pido
    const ragStart = Date.now();
    await RAGMedicalMCP.retrieveRelevantKnowledge('pain', 'fisioterapia', 1);
    const ragTime = Date.now() - ragStart;
    performanceTests.push({ name: 'RAG', time: ragTime });
    
    const duration = Date.now() - startTime;
    
    return {
      name: 'Performance',
      status: 'success',
      duration,
      details: {
        tests: performanceTests,
        average_time: performanceTests.reduce((sum, test) => sum + test.time, 0) / performanceTests.length
      }
    };
    
  } catch (error) {
    return {
      name: 'Performance',
      status: 'error',
      duration: Date.now() - startTime,
      error: error instanceof Error ? error.message : 'Error desconocido'
    };
  }
}

/**
 * Ejecutar todos los tests
 */
async function runAllTests(): Promise<void> {
  console.log('üß™ AiDuxCare - Test Completo del Backend');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
  
  const results: TestResult[] = [];
  
  try {
    // 1. Test de conectividad
    const connectivity = await testConnectivity();
    results.push(connectivity);
    
    if (connectivity.status === 'error') {
      console.log('‚ùå Sistema no est√° listo. Deteniendo tests.');
      return;
    }
    
    // 2. Test de servicios b√°sicos
    const nlpTest = await testNLPService();
    results.push(nlpTest);
    
    const ragTest = await testRAGMedical();
    results.push(ragTest);
    
    // 3. Test de casos cl√≠nicos
    console.log('\nüè• TESTING CASOS CL√çNICOS');
    console.log('‚ïê'.repeat(70));
    
    for (const testCase of TEST_CASES) {
      const result = await testClinicalCase(testCase);
      results.push(result);
      
      // Pausa entre tests
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // 4. Test de performance
    const performanceTest = await testPerformance();
    results.push(performanceTest);
    
    // 5. Resumen final
    console.log('\nüìä RESUMEN DE RESULTADOS');
    console.log('‚ïê'.repeat(70));
    
    const successful = results.filter(r => r.status === 'success').length;
    const total = results.length;
    const successRate = (successful / total) * 100;
    
    console.log(`‚úÖ Tests exitosos: ${successful}/${total} (${successRate.toFixed(1)}%)`);
    
    results.forEach(result => {
      const icon = result.status === 'success' ? '‚úÖ' : '‚ùå';
      console.log(`${icon} ${result.name}: ${result.duration}ms`);
      
      if (result.error) {
        console.log(`   Error: ${result.error}`);
      }
      
      if (result.details) {
        Object.entries(result.details).forEach(([key, value]) => {
          console.log(`   ${key}: ${value}`);
        });
      }
    });
    
    // 6. Recomendaciones
    console.log('\nüí° RECOMENDACIONES');
    console.log('‚ïê'.repeat(70));
    
    if (successRate >= 90) {
      console.log('üéâ Sistema listo para user testing');
      console.log('   - Todos los componentes funcionando correctamente');
      console.log('   - Performance dentro de par√°metros esperados');
      console.log('   - Puedes proceder con fisioterapeutas reales');
    } else if (successRate >= 70) {
      console.log('‚ö†Ô∏è Sistema funcional pero requiere optimizaci√≥n');
      console.log('   - Algunos componentes tienen problemas menores');
      console.log('   - Revisar errores antes de user testing');
    } else {
      console.log('‚ùå Sistema no est√° listo para user testing');
      console.log('   - M√∫ltiples componentes fallando');
      console.log('   - Requiere debugging antes de continuar');
    }
    
    // 7. M√©tricas de calidad
    const avgDuration = results.reduce((sum, r) => sum + r.duration, 0) / results.length;
    console.log(`\nüìà M√©tricas de Calidad:`);
    console.log(`   - Tiempo promedio por test: ${avgDuration.toFixed(0)}ms`);
    console.log(`   - Tasa de √©xito: ${successRate.toFixed(1)}%`);
    
    if (successRate >= 90) {
      console.log('\nüöÄ ¬°Sistema validado y listo para producci√≥n!');
    }
    
  } catch (error) {
    console.error('‚ùå Error en testing suite:', error);
    process.exit(1);
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  runAllTests().catch(error => {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
  });
} 