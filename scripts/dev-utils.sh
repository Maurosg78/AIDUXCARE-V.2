#!/bin/bash

# üõ†Ô∏è AiDuxCare V.2 - Scripts de Utilidad para Desarrolladores
# Autor: Asistente IA
# Fecha: 2025-06-23

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar ayuda
show_help() {
    echo -e "${BLUE}üè• AiDuxCare V.2 - Scripts de Utilidad${NC}"
    echo ""
    echo "Uso: ./scripts/dev-utils.sh [COMANDO]"
    echo ""
    echo "Comandos disponibles:"
    echo "  ${GREEN}setup${NC}           - Configurar entorno de desarrollo"
    echo "  ${GREEN}lint${NC}            - Ejecutar linter en todo el proyecto"
    echo "  ${GREEN}lint-fix${NC}        - Ejecutar linter con auto-fix"
    echo "  ${GREEN}test${NC}            - Ejecutar tests"
    echo "  ${GREEN}build${NC}           - Construir proyecto"
    echo "  ${GREEN}deploy${NC}          - Desplegar a Firebase"
    echo "  ${GREEN}clean${NC}           - Limpiar archivos temporales"
    echo "  ${GREEN}status${NC}          - Mostrar estado del proyecto"
    echo "  ${GREEN}marathon-status${NC} - Verificar estado del marat√≥n"
    echo "  ${GREEN}check-apis${NC}      - Verificar estado de APIs"
    echo "  ${GREEN}help${NC}            - Mostrar esta ayuda"
    echo ""
}

# Funci√≥n para configurar entorno
setup() {
    echo -e "${BLUE}üîß Configurando entorno de desarrollo...${NC}"
    
    # Verificar Node.js
    if ! command -v node &> /dev/null; then
        echo -e "${RED}‚ùå Node.js no est√° instalado${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Node.js: $(node --version)${NC}"
    
    # Instalar dependencias principales
    echo -e "${BLUE}üì¶ Instalando dependencias principales...${NC}"
    npm install
    
    # Instalar dependencias de functions
    echo -e "${BLUE}üì¶ Instalando dependencias de functions...${NC}"
    cd functions && npm install && cd ..
    
    echo -e "${GREEN}‚úÖ Entorno configurado correctamente${NC}"
}

# Funci√≥n para ejecutar linter
lint() {
    echo -e "${BLUE}üîç Ejecutando linter...${NC}"
    
    # Linter principal
    echo -e "${BLUE}üìÅ Linter principal...${NC}"
    npm run lint 2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è Linter principal no configurado${NC}"
    
    # Linter de functions
    echo -e "${BLUE}üìÅ Linter de functions...${NC}"
    cd functions && npm run lint && cd ..
    
    echo -e "${GREEN}‚úÖ Linter completado${NC}"
}

# Funci√≥n para ejecutar linter con auto-fix
lint_fix() {
    echo -e "${BLUE}üîß Ejecutando linter con auto-fix...${NC}"
    
    # Linter principal con fix
    echo -e "${BLUE}üìÅ Linter principal con fix...${NC}"
    npm run lint -- --fix 2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è Linter principal no configurado${NC}"
    
    # Linter de functions con fix
    echo -e "${BLUE}üìÅ Linter de functions con fix...${NC}"
    cd functions && npm run lint -- --fix && cd ..
    
    echo -e "${GREEN}‚úÖ Linter con auto-fix completado${NC}"
}

# Funci√≥n para ejecutar tests
test() {
    echo -e "${BLUE}üß™ Ejecutando tests...${NC}"
    
    # Tests principales
    echo -e "${BLUE}üìÅ Tests principales...${NC}"
    npm test 2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è Tests principales no configurados${NC}"
    
    # Tests de functions
    echo -e "${BLUE}üìÅ Tests de functions...${NC}"
    cd functions && npm test 2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è Tests de functions no configurados${NC}" && cd ..
    
    echo -e "${GREEN}‚úÖ Tests completados${NC}"
}

# Funci√≥n para construir proyecto
build() {
    echo -e "${BLUE}üèóÔ∏è Construyendo proyecto...${NC}"
    
    # Build principal
    echo -e "${BLUE}üìÅ Build principal...${NC}"
    npm run build
    
    # Build de functions
    echo -e "${BLUE}üìÅ Build de functions...${NC}"
    cd functions && npm run build 2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è Build de functions no configurado${NC}" && cd ..
    
    echo -e "${GREEN}‚úÖ Build completado${NC}"
}

# Funci√≥n para desplegar
deploy() {
    echo -e "${BLUE}üöÄ Desplegando a Firebase...${NC}"
    
    # Verificar Firebase CLI
    if ! command -v firebase &> /dev/null; then
        echo -e "${RED}‚ùå Firebase CLI no est√° instalado${NC}"
        echo -e "${YELLOW}üí° Instalar con: npm install -g firebase-tools${NC}"
        exit 1
    fi
    
    # Desplegar functions
    echo -e "${BLUE}üìÅ Desplegando functions...${NC}"
    firebase deploy --only functions
    
    echo -e "${GREEN}‚úÖ Despliegue completado${NC}"
}

# Funci√≥n para limpiar
clean() {
    echo -e "${BLUE}üßπ Limpiando archivos temporales...${NC}"
    
    # Limpiar node_modules (opcional)
    read -p "¬øDeseas eliminar node_modules? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}üóëÔ∏è Eliminando node_modules...${NC}"
        rm -rf node_modules
        rm -rf functions/node_modules
    fi
    
    # Limpiar archivos de build
    echo -e "${BLUE}üóëÔ∏è Eliminando archivos de build...${NC}"
    rm -rf dist
    rm -rf functions/lib
    
    # Limpiar logs
    echo -e "${BLUE}üóëÔ∏è Eliminando logs...${NC}"
    rm -f *.log
    rm -f functions/*.log
    
    echo -e "${GREEN}‚úÖ Limpieza completada${NC}"
}

# Funci√≥n para mostrar estado
status() {
    echo -e "${BLUE}üìä Estado del proyecto${NC}"
    echo ""
    
    # Estado de Git
    echo -e "${BLUE}üîç Estado de Git:${NC}"
    git status --porcelain | head -10 || echo -e "${YELLOW}‚ö†Ô∏è No es un repositorio Git${NC}"
    echo ""
    
    # Estado de dependencias
    echo -e "${BLUE}üì¶ Estado de dependencias:${NC}"
    if [ -d "node_modules" ]; then
        echo -e "${GREEN}‚úÖ Dependencias principales instaladas${NC}"
    else
        echo -e "${RED}‚ùå Dependencias principales no instaladas${NC}"
    fi
    
    if [ -d "functions/node_modules" ]; then
        echo -e "${GREEN}‚úÖ Dependencias de functions instaladas${NC}"
    else
        echo -e "${RED}‚ùå Dependencias de functions no instaladas${NC}"
    fi
    echo ""
    
    # Estado de marat√≥n
    echo -e "${BLUE}üî• Estado del marat√≥n:${NC}"
    if [ -f "warmup_marathon_log.txt" ]; then
        echo -e "${GREEN}‚úÖ Log de marat√≥n encontrado${NC}"
        echo -e "${BLUE}üìä √öltimas l√≠neas del log:${NC}"
        tail -5 warmup_marathon_log.txt
    else
        echo -e "${YELLOW}‚ö†Ô∏è Log de marat√≥n no encontrado${NC}"
    fi
    echo ""
}

# Funci√≥n para verificar estado del marat√≥n
marathon_status() {
    echo -e "${BLUE}üî• Estado del marat√≥n de calentamiento${NC}"
    echo ""
    
    if [ -f "warmup_marathon_log.txt" ]; then
        echo -e "${BLUE}üìä Estad√≠sticas del marat√≥n:${NC}"
        
        # Contar iteraciones
        total_iterations=$(grep -c "ITERACI√ìN" warmup_marathon_log.txt || echo "0")
        successful_iterations=$(grep -c "COMPLETADA EXITOSAMENTE" warmup_marathon_log.txt || echo "0")
        failed_iterations=$(grep -c "FALLO" warmup_marathon_log.txt || echo "0")
        
        echo -e "Total de iteraciones: ${total_iterations}"
        echo -e "Iteraciones exitosas: ${successful_iterations}"
        echo -e "Iteraciones fallidas: ${failed_iterations}"
        
        if [ "$total_iterations" -gt 0 ]; then
            success_rate=$((successful_iterations * 100 / total_iterations))
            echo -e "Tasa de √©xito: ${success_rate}%"
        fi
        
        echo ""
        echo -e "${BLUE}üìù √öltimas 10 l√≠neas del log:${NC}"
        tail -10 warmup_marathon_log.txt
        
        echo ""
        echo -e "${BLUE}üîç Verificar si el proceso est√° ejecut√°ndose:${NC}"
        if pgrep -f "run_warmup_marathon.sh" > /dev/null; then
            echo -e "${GREEN}‚úÖ Marat√≥n ejecut√°ndose${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è Marat√≥n no ejecut√°ndose${NC}"
        fi
    else
        echo -e "${RED}‚ùå Log de marat√≥n no encontrado${NC}"
        echo -e "${YELLOW}üí° Ejecutar: ./run_warmup_marathon.sh${NC}"
    fi
}

# Funci√≥n para verificar APIs
check_apis() {
    echo -e "${BLUE}üîç Verificando estado de APIs${NC}"
    echo ""
    
    # Verificar credenciales
    if [ -f "aiduxcare-nlp-credentials.json" ]; then
        echo -e "${GREEN}‚úÖ Credenciales encontradas${NC}"
    else
        echo -e "${RED}‚ùå Credenciales no encontradas${NC}"
    fi
    
    # Verificar Firebase
    if command -v firebase &> /dev/null; then
        echo -e "${GREEN}‚úÖ Firebase CLI instalado${NC}"
        firebase projects:list 2>/dev/null | grep aiduxcare-mvp-prod && echo -e "${GREEN}‚úÖ Proyecto aiduxcare-mvp-prod encontrado${NC}" || echo -e "${YELLOW}‚ö†Ô∏è Proyecto aiduxcare-mvp-prod no encontrado${NC}"
    else
        echo -e "${RED}‚ùå Firebase CLI no instalado${NC}"
    fi
    
    # Verificar Node.js
    if command -v node &> /dev/null; then
        echo -e "${GREEN}‚úÖ Node.js: $(node --version)${NC}"
    else
        echo -e "${RED}‚ùå Node.js no instalado${NC}"
    fi
    
    # Verificar npm
    if command -v npm &> /dev/null; then
        echo -e "${GREEN}‚úÖ npm: $(npm --version)${NC}"
    else
        echo -e "${RED}‚ùå npm no instalado${NC}"
    fi
}

# Funci√≥n principal
main() {
    case "${1:-help}" in
        "setup")
            setup
            ;;
        "lint")
            lint
            ;;
        "lint-fix")
            lint_fix
            ;;
        "test")
            test
            ;;
        "build")
            build
            ;;
        "deploy")
            deploy
            ;;
        "clean")
            clean
            ;;
        "status")
            status
            ;;
        "marathon-status")
            marathon_status
            ;;
        "check-apis")
            check_apis
            ;;
        "help"|*)
            show_help
            ;;
    esac
}

# Ejecutar funci√≥n principal
main "$@" 