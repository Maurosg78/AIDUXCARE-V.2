const functions = require('firebase-functions');
const { GoogleAuth } = require('google-auth-library');
const auth = new GoogleAuth({
  scopes: ['https://www.googleapis.com/auth/cloud-platform']
});

exports.processWithVertexAI = functions.https.onCall(async (data, context) => {
  const { prompt } = data;
  
  if (!prompt) {
    throw new functions.https.HttpsError('invalid-argument', 'Prompt requerido');
  }
  
  try {
    const client = await auth.getClient();
    const token = await client.getAccessToken();
    
    const response = await fetch(
      'https://us-central1-aiplatform.googleapis.com/v1/projects/aiduxcare-v2-uat-dev/locations/us-central1/publishers/google/models/gemini-2.5-flash:generateContent',
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token.token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          contents: [{
            role: 'user',
            parts: [{ text: prompt }]
          }],
          generationConfig: {
            temperature: 0.2,
            maxOutputTokens: 2048,
            topP: 0.8
          }
        })
      }
    );
    
    const result = await response.json();
    return {
      text: result.candidates?.[0]?.content?.parts?.[0]?.text || '',
      usage: result.usageMetadata
    };
  } catch (error) {
    console.error('Error:', error);
    throw new functions.https.HttpsError('internal', error.message);
  }
});

exports.vertexAIProxy = functions.https.onRequest(async (req, res) => {
  res.set('Access-Control-Allow-Origin', '*');
  res.set('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.set('Access-Control-Allow-Headers', 'Content-Type');
  
  if (req.method === 'OPTIONS') {
    res.status(204).send('');
    return;
  }
  
  try {
    const { text, prompt } = req.body;
    
    // PROMPT ESPECIALIZADO PARA FISIOTERAPIA/MSK CON RED FLAGS
    // Usar prompt inteligente de an√°lisis de anamnesis
    const fullPrompt = `Analiza esta consulta inicial de fisioterapia y organiza la informaci√≥n para la evaluaci√≥n:

${text}

Consideraciones importantes:
- El paciente ya est√° en consulta de fisioterapia
- Condiciones m√©dicas conocidas bajo tratamiento NO son emergencias
- Solo marca red flags si hay signos/s√≠ntomas NUEVOS y AGUDOS

Devuelve un JSON con: banderas_rojas, banderas_amarillas, sintomas_principales, condiciones_medicas, medicamentos, evaluaciones_sugeridas, precauciones, contexto_clinico, motivo_consulta`;* **Ejercicio terap√©utico:** tipo y progresi√≥n
* **Modalidades:** si aplica
* **Educaci√≥n del paciente:** puntos clave`;
    
    const client = await auth.getClient();
    const token = await client.getAccessToken();
    
    const response = await fetch(
      'https://us-central1-aiplatform.googleapis.com/v1/projects/aiduxcare-v2-uat-dev/locations/us-central1/publishers/google/models/gemini-2.0-flash-exp:generateContent',
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token.token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          contents: [{
            role: 'user',
            parts: [{ text: fullPrompt }]
          }],
          generationConfig: {
            temperature: 0.2,
            maxOutputTokens: 2048,
            topP: 0.8
          }
        })
      }
    );
    
    const result = await response.json();
    const responseText = result.candidates?.[0]?.content?.parts?.[0]?.text || '';
    
    // PARSING MEJORADO CON DETECCI√ìN DE RED FLAGS Y BANDERAS AMARILLAS
    const entities = [];
    const redFlags = [];
    const yellowFlags = [];
    let idCounter = 1;
    
    // Tracking de tiempo ahorrado (m√©trica para el dashboard)
    const startTime = Date.now();
    
    // Dividir el texto en secciones
    const sections = {
      redflags: [],
      yellowflags: [],
      conditions: [],
      symptoms: [],
      medications: [],
      tests: [],
      plan: []
    };
    
    let currentSection = null;
    const lines = responseText.split('\n');
    
    lines.forEach(line => {
      // Detectar secci√≥n actual
      if (line.includes('**Red Flags')) {
        currentSection = 'redflags';
        return;
      } else if (line.includes('**Banderas Amarillas')) {
        currentSection = 'yellowflags';
        return;
      } else if (line.includes('**Condiciones') || line.includes('**Diagn√≥stico')) {
        currentSection = 'conditions';
        return;
      } else if (line.includes('**S√≠ntomas:**')) {
        currentSection = 'symptoms';
        return;
      } else if (line.includes('**Medicamentos:**')) {
        currentSection = 'medications';
        return;
      } else if (line.includes('**Tests') || line.includes('**Evaluac')) {
        currentSection = 'tests';
        return;
      } else if (line.includes('**Plan')) {
        currentSection = 'plan';
        return;
      }
      
      // Extraer RED FLAGS
      if (currentSection === 'redflags' && line.includes('URGENCIA:')) {
        const urgencyMatch = line.match(/URGENCIA:\s*(EMERGENCY|URGENT|MODERATE)/i);
        const typeMatch = line.match(/\*\*\[?([^\]]+)\]?\*\*/);
        
        if (urgencyMatch && typeMatch) {
          const urgencyLevel = urgencyMatch[1].toUpperCase();
          const flagType = typeMatch[1].replace(/[\[\]]/g, '').trim();
          const description = line.split(':').slice(1).join(':').split('-')[0].trim();
          
          redFlags.push({
            pattern: flagType,
            action: urgencyLevel === 'EMERGENCY' ? 
              'üö® DERIVAR A URGENCIAS INMEDIATAMENTE - Documentar hora y m√©todo de derivaci√≥n' : 
              urgencyLevel === 'URGENT' ? 
              '‚ö†Ô∏è Derivar a m√©dico en <24-48h - Documentar comunicaci√≥n con paciente' : 
              '‚ö° Evaluar y considerar derivaci√≥n seg√∫n evoluci√≥n',
            urgency: urgencyLevel === 'EMERGENCY' ? 'urgent' : 
                     urgencyLevel === 'URGENT' ? 'high' : 'medium',
            description: description,
            reference: 'CPG MSK 2024'
          });
          
          // A√±adir tambi√©n como entidad cr√≠tica para visualizaci√≥n
          entities.push({
            id: String(idCounter++),
            text: `üö® RED FLAG: ${flagType}`,
            type: 'condition',
            clinicalRelevance: 'critical'
          });
        }
      }
      
      // Extraer BANDERAS AMARILLAS
      if (currentSection === 'yellowflags' && line.includes('**') && line.includes('*')) {
        const match = line.match(/\*\*([^*:]+)/);
        if (match && match[1] && !match[1].includes('No se detectaron')) {
          const yellowFlag = match[1].trim();
          yellowFlags.push(yellowFlag);
          
          // A√±adir como entidad para tracking
          entities.push({
            id: String(idCounter++),
            text: `‚ö° Bandera Amarilla: ${yellowFlag}`,
            type: 'other',
            clinicalRelevance: 'medium'
          });
        }
      }
      
      // Extraer entidades normales de las otras secciones
      if (currentSection && !['redflags', 'yellowflags'].includes(currentSection) && 
          line.includes('**') && line.includes('*')) {
        const match = line.match(/\*\*([^*:]+)/);
        if (match && match[1]) {
          const text = match[1].trim();
          if (text.length > 2 && !text.includes('No se detectaron')) {
            const types = {
              conditions: { type: 'condition', icon: 'üîç', relevance: 'high' },
              symptoms: { type: 'symptom', icon: '‚ö†Ô∏è', relevance: 'high' },
              medications: { type: 'medication', icon: 'üíä', relevance: 'medium' },
              tests: { type: 'other', icon: 'üìã', relevance: 'high' }, // Cambiado a 'other' por compatibilidad
              plan: { type: 'other', icon: 'üìù', relevance: 'medium' }
            };
            
            const config = types[currentSection] || { type: 'other', icon: 'üìå', relevance: 'medium' };
            
            entities.push({
              id: String(idCounter++),
              text: config.icon + ' ' + text,
              type: config.type,
              clinicalRelevance: config.relevance
            });
          }
        }
      }
    });

    // Calcular tiempo ahorrado estimado (15-20 min por nota bien documentada)
    const processingTime = (Date.now() - startTime) / 1000; // en segundos
    const estimatedTimeSaved = 15; // minutos promedio ahorrados
    
    // Preparar resumen con alertas prioritarias
    let summary = responseText.substring(0, 200);
    if (redFlags.length > 0) {
      summary = `‚ö†Ô∏è ALERTA: ${redFlags.length} RED FLAG(S) DETECTADO(S) - Requiere acci√≥n inmediata. ` + summary;
    } else if (yellowFlags.length > 0) {
      summary = `‚ö° ${yellowFlags.length} bandera(s) amarilla(s) detectada(s) - Factores psicosociales presentes. ` + summary;
    }

    // Respuesta estructurada compatible con tipos existentes
    res.json({
      entities: entities,
      redFlags: redFlags,
      yellowFlags: yellowFlags,
      otherFlags: {
        orange: [], // Factores psiqui√°tricos (para futuro)
        blue: [],   // Factores laborales (para futuro)
        black: []   // Factores del sistema (para futuro)
      },
      physicalTests: entities.filter(e => e.text.includes('üìã')).map(e => ({
        name: e.text.replace('üìã ', ''),
        rationale: 'Evaluaci√≥n cl√≠nica indicada',
        sensitivity: null,
        specificity: null
      })),
      standardizedMeasures: [], // NPRS, Oswestry, etc (para futuro)
      summary: summary,
      rawResponse: responseText,
      modelUsed: 'flash',
      requiresSelection: true,
      metadata: {
        processingTime: processingTime,
        estimatedTimeSaved: estimatedTimeSaved,
        timestamp: new Date().toISOString(),
        specialty: 'physiotherapy_msk'
      }
    });
    
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: error.message });
  }
});