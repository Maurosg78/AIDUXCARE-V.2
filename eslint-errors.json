[{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/professional/AudioFileUpload.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":82,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * üìÅ Professional Audio File Upload - Carga de Archivos de Audio\n * Componente para subir archivos de audio pregrabados para el workflow cl√≠nico\n * Tarea 1.1.1 del Roadmap MVP \"Escucha Activa Cl√≠nica\"\n */\n\nimport React, { useState, useCallback, useRef } from 'react';\n\nimport Button from '../ui/button';\n\ninterface AudioFileUploadProps {\n  onFileSelect: (file: File) => void;\n  onUploadComplete?: (audioBlob: Blob, fileName: string) => void;\n  isProcessing?: boolean;\n  className?: string;\n  maxFileSizeMB?: number;\n  acceptedFormats?: string[];\n}\n\ninterface FileInfo {\n  file: File;\n  duration?: number;\n  size: string;\n  type: string;\n  validationStatus: 'valid' | 'invalid' | 'validating';\n  errorMessage?: string;\n}\n\nexport const AudioFileUpload: React.FC<AudioFileUploadProps> = ({\n  onFileSelect,\n  onUploadComplete,\n  isProcessing = false,\n  className = '',\n  maxFileSizeMB = 50, // 50MB m√°ximo por defecto\n  acceptedFormats = ['.mp3', '.wav', '.m4a', '.ogg', '.webm']\n}) => {\n  const [selectedFile, setSelectedFile] = useState<FileInfo | null>(null);\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [audioPreviewUrl, setAudioPreviewUrl] = useState<string | null>(null);\n  \n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  /**\n   * Valida el archivo de audio seleccionado\n   */\n  const validateAudioFile = useCallback(async (file: File): Promise<FileInfo> => {\n    const fileInfo: FileInfo = {\n      file,\n      size: formatFileSize(file.size),\n      type: file.type || 'Desconocido',\n      validationStatus: 'validating'\n    };\n\n    // Validar tama√±o\n    if (file.size > maxFileSizeMB * 1024 * 1024) {\n      return {\n        ...fileInfo,\n        validationStatus: 'invalid',\n        errorMessage: `El archivo excede el tama√±o m√°ximo de ${maxFileSizeMB}MB`\n      };\n    }\n\n    // Validar formato\n    const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();\n    if (!acceptedFormats.includes(fileExtension)) {\n      return {\n        ...fileInfo,\n        validationStatus: 'invalid',\n        errorMessage: `Formato no soportado. Use: ${acceptedFormats.join(', ')}`\n      };\n    }\n\n    // Validar que es un archivo de audio v√°lido\n    try {\n      const duration = await getAudioDuration(file);\n      return {\n        ...fileInfo,\n        duration,\n        validationStatus: 'valid'\n      };\n    } catch (error) {\n      return {\n        ...fileInfo,\n        validationStatus: 'invalid',\n        errorMessage: 'No se pudo procesar el archivo de audio'\n      };\n    }\n  }, [maxFileSizeMB, acceptedFormats]);\n\n  /**\n   * Obtiene la duraci√≥n del archivo de audio\n   */\n  const getAudioDuration = (file: File): Promise<number> => {\n    return new Promise((resolve, reject) => {\n      const audio = new Audio();\n      const url = URL.createObjectURL(file);\n      \n      audio.addEventListener('loadedmetadata', () => {\n        URL.revokeObjectURL(url);\n        resolve(audio.duration);\n      });\n      \n      audio.addEventListener('error', () => {\n        URL.revokeObjectURL(url);\n        reject(new Error('Error al cargar el archivo de audio'));\n      });\n      \n      audio.src = url;\n    });\n  };\n\n  /**\n   * Formatea el tama√±o del archivo\n   */\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  /**\n   * Formatea la duraci√≥n en formato mm:ss\n   */\n  const formatDuration = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  /**\n   * Maneja la selecci√≥n de archivo\n   */\n  const handleFileSelect = useCallback(async (file: File) => {\n    const validatedFile = await validateAudioFile(file);\n    setSelectedFile(validatedFile);\n\n    if (validatedFile.validationStatus === 'valid') {\n      // Crear URL para preview\n      const previewUrl = URL.createObjectURL(file);\n      setAudioPreviewUrl(previewUrl);\n      \n      // Notificar al padre\n      onFileSelect(file);\n    } else {\n      setAudioPreviewUrl(null);\n    }\n  }, [validateAudioFile, onFileSelect]);\n\n  /**\n   * Maneja el cambio en el input de archivo\n   */\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      handleFileSelect(file);\n    }\n  }, [handleFileSelect]);\n\n  /**\n   * Maneja el drag & drop\n   */\n  const handleDragEnter = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(false);\n  }, []);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  }, []);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(false);\n\n    const files = Array.from(e.dataTransfer.files);\n    const audioFile = files.find(file => \n      file.type.startsWith('audio/') || \n      acceptedFormats.some(format => file.name.toLowerCase().endsWith(format))\n    );\n\n    if (audioFile) {\n      handleFileSelect(audioFile);\n    }\n  }, [acceptedFormats, handleFileSelect]);\n\n  /**\n   * Abre el selector de archivos\n   */\n  const openFileSelector = useCallback(() => {\n    fileInputRef.current?.click();\n  }, []);\n\n  /**\n   * Procesa el archivo seleccionado\n   */\n  const processSelectedFile = useCallback(() => {\n    if (selectedFile?.validationStatus === 'valid') {\n      const blob = new Blob([selectedFile.file], { type: selectedFile.file.type });\n      onUploadComplete?.(blob, selectedFile.file.name);\n    }\n  }, [selectedFile, onUploadComplete]);\n\n  /**\n   * Limpia la selecci√≥n actual\n   */\n  const clearSelection = useCallback(() => {\n    setSelectedFile(null);\n    if (audioPreviewUrl) {\n      URL.revokeObjectURL(audioPreviewUrl);\n      setAudioPreviewUrl(null);\n    }\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  }, [audioPreviewUrl]);\n\n  return (\n    <div className={`bg-white rounded-lg shadow-sm border border-gray-200 p-6 ${className}`}>\n      \n      {/* Header */}\n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-semibold text-aidux-blue-slate mb-2\">\n          üìÅ Carga de Archivo de Audio\n        </h3>\n        <p className=\"text-sm text-gray-600\">\n          Sube un archivo de audio pregrabado para procesamiento con IA\n        </p>\n      </div>\n\n      {/* √Årea de carga */}\n      <div \n        className={`border-2 border-dashed rounded-lg p-8 text-center transition-all ${\n          isDragOver \n            ? 'border-aidux-coral bg-coral-50' \n            : selectedFile?.validationStatus === 'valid'\n            ? 'border-aidux-mint-green bg-mint-50'\n            : selectedFile?.validationStatus === 'invalid'\n            ? 'border-red-300 bg-red-50'\n            : 'border-gray-300 hover:border-aidux-coral hover:bg-gray-50'\n        }`}\n        onDragEnter={handleDragEnter}\n        onDragLeave={handleDragLeave}\n        onDragOver={handleDragOver}\n        onDrop={handleDrop}\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept={acceptedFormats.join(',')}\n          onChange={handleInputChange}\n          className=\"hidden\"\n          disabled={isProcessing}\n          aria-label=\"Seleccionar archivo de audio\"\n          title=\"Seleccionar archivo de audio para procesar\"\n        />\n\n        {!selectedFile ? (\n          <>\n            <div className=\"text-4xl mb-4\">üéµ</div>\n            <div className=\"mb-4\">\n              <h4 className=\"text-lg font-medium text-gray-900 mb-2\">\n                Arrastra tu archivo de audio aqu√≠\n              </h4>\n              <p className=\"text-sm text-gray-600 mb-4\">\n                o haz clic para seleccionar un archivo\n              </p>\n            </div>\n            \n            <Button\n              onClick={openFileSelector}\n              disabled={isProcessing}\n              className=\"mb-4\"\n              variant=\"outline\"\n            >\n              üìÇ Seleccionar Archivo\n            </Button>\n            \n            <div className=\"text-xs text-gray-500 space-y-1\">\n              <div>Formatos soportados: {acceptedFormats.join(', ')}</div>\n              <div>Tama√±o m√°ximo: {maxFileSizeMB}MB</div>\n            </div>\n          </>\n        ) : (\n          <div className=\"text-left\">\n            {/* Informaci√≥n del archivo */}\n            <div className=\"flex items-start justify-between mb-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"text-2xl\">\n                  {selectedFile.validationStatus === 'valid' ? '‚úÖ' : \n                   selectedFile.validationStatus === 'invalid' ? '‚ùå' : '‚è≥'}\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-gray-900 truncate max-w-xs\">\n                    {selectedFile.file.name}\n                  </h4>\n                  <div className=\"text-sm text-gray-600 space-x-4\">\n                    <span>{selectedFile.size}</span>\n                    <span>{selectedFile.type}</span>\n                    {selectedFile.duration && (\n                      <span>{formatDuration(selectedFile.duration)}</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              <Button\n                onClick={clearSelection}\n                variant=\"outline\"\n                className=\"text-xs\"\n                disabled={isProcessing}\n              >\n                ‚úï\n              </Button>\n            </div>\n\n            {/* Estado de validaci√≥n */}\n            {selectedFile.validationStatus === 'invalid' && selectedFile.errorMessage && (\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-3 mb-4\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-red-500\">‚ùå</span>\n                  <span className=\"text-sm text-red-700\">{selectedFile.errorMessage}</span>\n                </div>\n              </div>\n            )}\n\n            {selectedFile.validationStatus === 'valid' && (\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-3 mb-4\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-green-500\">‚úÖ</span>\n                  <span className=\"text-sm text-green-700\">Archivo v√°lido - Listo para procesar</span>\n                </div>\n              </div>\n            )}\n\n                         {/* Preview del audio */}\n             {audioPreviewUrl && selectedFile.validationStatus === 'valid' && (\n               <div className=\"bg-gray-50 rounded-lg p-3 mb-4\">\n                 <div className=\"block text-xs font-medium text-gray-700 mb-2\">\n                   Vista previa:\n                 </div>\n                 <audio\n                   ref={audioRef}\n                   controls\n                   src={audioPreviewUrl}\n                   className=\"w-full\"\n                   preload=\"metadata\"\n                   aria-label={`Vista previa del archivo de audio: ${selectedFile.file.name}`}\n                 >\n                   <track kind=\"captions\" srcLang=\"es\" label=\"Sin subt√≠tulos disponibles\" />\n                   Tu navegador no soporta el elemento de audio.\n                 </audio>\n               </div>\n             )}\n\n            {/* Bot√≥n de procesamiento */}\n            {selectedFile.validationStatus === 'valid' && onUploadComplete && (\n              <div className=\"flex justify-center\">\n                <Button\n                  onClick={processSelectedFile}\n                  disabled={isProcessing}\n                  className=\"flex items-center gap-2\"\n                >\n                  {isProcessing ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                      Procesando...\n                    </>\n                  ) : (\n                    <>\n                      üöÄ Procesar Audio\n                    </>\n                  )}\n                </Button>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Informaci√≥n t√©cnica */}\n      <div className=\"mt-4 flex justify-center text-xs text-gray-500\">\n        <span>üîí Los archivos se procesan localmente con total privacidad</span>\n      </div>\n    </div>\n  );\n};\n\nexport default AudioFileUpload; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/professional/EnhancedAudioCapture.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsSupported' is assigned a value but never used. Allowed unused elements of array destructuring must match /^_/u.","line":82,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setPermissionStatus' is assigned a value but never used. Allowed unused elements of array destructuring must match /^_/u.","line":83,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'detectSpeaker' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":100,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":22}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare function requestMicrophonePermission(): Promise<MediaStream>;\ntype SpeechCtor = new () => ISpeechRecognition;\n\ninterface ISpeechRecognition {\n  lang: string;\n  interimResults: boolean;\n  continuous?: boolean;\n  onresult: (e: SpeechRecognitionEvent) => void;\n  onerror: (e: SpeechRecognitionErrorEvent) => void;\n  start(): void;\n  stop(): void;\n  abort(): void;\n}\n\nexport function initializeRecognition(): ISpeechRecognition {\n  const w = window as Window & {\n    webkitSpeechRecognition?: SpeechCtor;\n    SpeechRecognition?: SpeechCtor;\n  };\n  const Ctor = w.SpeechRecognition ?? w.webkitSpeechRecognition;\n  if (!Ctor) {\n    throw new Error('Speech recognition not supported');\n  }\n  const rec = new Ctor();\n  rec.interimResults = true;\n  return rec;\n}\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\n\n// Tipos para Web Speech API\ninterface SpeechRecognitionEvent extends Event {\n  resultIndex: number;\n  results: SpeechRecognitionResultList;\n}\n\ninterface SpeechRecognitionResultList {\n  readonly length: number;\n  item(index: number): SpeechRecognitionResult;\n  [index: number]: SpeechRecognitionResult;\n}\n\ninterface SpeechRecognitionResult {\n  readonly length: number;\n  item(index: number): SpeechRecognitionAlternative;\n  [index: number]: SpeechRecognitionAlternative;\n  isFinal: boolean;\n}\n\ninterface SpeechRecognitionAlternative {\n  transcript: string;\n  confidence: number;\n}\n\ninterface SpeechRecognitionErrorEvent extends Event {\n  error: string;\n  message: string;\n}\n\ninterface AudioSegment {\n  id: string;\n  content: string;\n  confidence: number;\n  isFinal: boolean;\n  timestamp: Date;\n  speaker?: 'patient' | 'professional';\n}\n\ninterface EnhancedAudioCaptureProps {\n  onTranscriptionComplete: (segments: AudioSegment[]) => void;\n  onTranscriptionUpdate?: (segments: AudioSegment[]) => void;\n  language?: 'es' | 'en';\n  className?: string;\n}\n\nexport const EnhancedAudioCapture: React.FC<EnhancedAudioCaptureProps> = ({\n  onTranscriptionComplete,\n  onTranscriptionUpdate,\n  language = 'es',\n  className = ''\n}) => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [isSupported, setIsSupported] = useState(true);\n  const [permissionStatus, setPermissionStatus] = useState<'granted' | 'denied' | 'pending'>('pending');\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [segments, setSegments] = useState<AudioSegment[]>([]);\n  const [error, setError] = useState<string>('');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const recognitionRef = useRef<unknown>(null);\n  const timerRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n  const mediaStreamRef = useRef<MediaStream | null>(null);\n\n  // Verificar soporte del navegador\n  useEffect(() => {\n  if (!isSupported) return;\n  // TODO: put your recognition setup & cleanup here\n}, [isSupported, language, onTranscriptionUpdate]);\n\n  // Detectar hablante basado en contenido\n  const detectSpeaker = (text: string): 'patient' | 'professional' => {\n    const patientPatterns = [\n      /me duele/i, /siento/i, /tengo/i, /padezco/i, /sufro/i,\n      /no puedo/i, /me molesta/i, /me preocupa/i, /me siento/i\n    ];\n    \n    const professionalPatterns = [\n      /observo/i, /eval√∫o/i, /diagn√≥stico/i, /tratamiento/i,\n      /recomiendo/i, /prescribo/i, /examino/i, /analizo/i\n    ];\n\n    const patientMatches = patientPatterns.filter(pattern => pattern.test(text)).length;\n    const professionalMatches = professionalPatterns.filter(pattern => pattern.test(text)).length;\n\n    return patientMatches > professionalMatches ? 'patient' : 'professional';\n  };\n\n  // Iniciar grabaci√≥n\n  const startRecording = async () => {\n    if (isRecording) return;\n\n    try {\n      setError('');\n      setSegments([]);\n      setRecordingTime(0);\n\n      // Solicitar permisos\n      const stream = await requestMicrophonePermission();\n      if (!stream) return;\n\n      // Inicializar reconocimiento\n      const recognition = initializeRecognition();\n      if (!recognition) {\n        setError('No se pudo inicializar el reconocimiento de voz');\n        return;\n      }\n\n      recognitionRef.current = recognition;\n\n      // Iniciar reconocimiento\n      recognition.start();\n\n      // Iniciar timer\n      timerRef.current = setInterval(() => {\n        setRecordingTime(prev => prev + 1);\n      }, 1000);\n\n    } catch (error) {\n      console.error('Error al iniciar grabaci√≥n:', error);\n      setError('Error al iniciar la grabaci√≥n');\n    }\n  };\n\n  // Detener grabaci√≥n\n  const stopRecording = () => {\n    if (!isRecording) return;\n\n    try {\n      if (recognitionRef.current) {\n        (recognitionRef.current as { stop(): void }).stop();\n      }\n\n      if (mediaStreamRef.current) {\n        mediaStreamRef.current.getTracks().forEach(track => track.stop());\n        mediaStreamRef.current = null;\n      }\n\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n\n      setIsRecording(false);\n      setIsProcessing(true);\n\n      // Simular procesamiento final\n      setTimeout(() => {\n        const finalSegments = segments.filter(s => s.isFinal);\n        onTranscriptionComplete(finalSegments);\n        setIsProcessing(false);\n      }, 1000);\n\n    } catch (error) {\n      console.error('Error al detener grabaci√≥n:', error);\n      setError('Error al detener la grabaci√≥n');\n    }\n  };\n\n  // Formatear tiempo\n  const formatTime = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Limpiar transcripci√≥n\n  const clearTranscription = () => {\n    setSegments([]);\n    setError('');\n  };\n\n  if (!isSupported) {\n    return (\n      <div className={`bg-white border rounded-lg p-6 text-center ${className}`} style={{ borderColor: '#BDC3C7' }}>\n        <svg className=\"w-12 h-12 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" style={{ color: '#E74C3C' }}>\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"/>\n        </svg>\n        <h3 className=\"font-medium text-sm mb-2\" style={{ color: '#2C3E50' }}>\n          Navegador no compatible\n        </h3>\n          <p className=\"text-xs\" style={{ color: '#BDC3C7' }}>\n            Este navegador no soporta reconocimiento de voz.\n          </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`bg-white border rounded-lg shadow-sm ${className}`} style={{ borderColor: '#BDC3C7' }}>\n      {/* Header */}\n      <div className=\"p-4 border-b\" style={{ borderColor: '#BDC3C7' }}>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className={`w-3 h-3 rounded-full ${isRecording ? 'bg-red-500 animate-pulse' : 'bg-gray-300'}`}></div>\n            <h3 className=\"font-medium text-sm\" style={{ color: '#2C3E50' }}>\n              Captura de Audio\n            </h3>\n          </div>\n          <div className=\"text-sm font-mono\" style={{ color: '#BDC3C7' }}>\n            {formatTime(recordingTime)}\n          </div>\n        </div>\n      </div>\n\n      {/* Status */}\n      <div className=\"p-4 border-b\" style={{ borderColor: '#BDC3C7' }}>\n        {permissionStatus === 'pending' && (\n          <div className=\"text-center\">\n            <p className=\"text-sm mb-3\" style={{ color: '#2C3E50' }}>\n              Se requiere acceso al micr√≥fono\n            </p>\n            <button\n              onClick={requestMicrophonePermission}\n              className=\"px-4 py-2 bg-blue-500 text-white rounded-lg text-sm hover:bg-blue-600 transition-colors\"\n            >\n              Permitir Micr√≥fono\n            </button>\n          </div>\n        )}\n\n        {permissionStatus === 'denied' && (\n          <div className=\"text-center\">\n            <p className=\"text-sm mb-3\" style={{ color: '#E74C3C' }}>\n              Acceso al micr√≥fono denegado\n            </p>\n            <p className=\"text-xs\" style={{ color: '#BDC3C7' }}>\n              Por favor, habilita el micr√≥fono en la configuraci√≥n del navegador\n            </p>\n          </div>\n        )}\n\n        {error && (\n          <div className=\"text-center\">\n            <p className=\"text-sm\" style={{ color: '#E74C3C' }}>\n              {error}\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Controls */}\n      <div className=\"p-4 border-b\" style={{ borderColor: '#BDC3C7' }}>\n        <div className=\"flex space-x-3\">\n          {!isRecording ? (\n            <button\n              onClick={startRecording}\n              disabled={permissionStatus !== 'granted'}\n              className=\"flex-1 px-4 py-3 bg-green-500 text-white rounded-lg font-medium hover:bg-green-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              <div className=\"flex items-center justify-center space-x-2\">\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"/>\n                </svg>\n                <span>Iniciar Grabaci√≥n</span>\n              </div>\n            </button>\n          ) : (\n            <button\n              onClick={stopRecording}\n              className=\"flex-1 px-4 py-3 bg-red-500 text-white rounded-lg font-medium hover:bg-red-600 transition-colors\"\n            >\n              <div className=\"flex items-center justify-center space-x-2\">\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4z\"/>\n                </svg>\n                <span>Detener Grabaci√≥n</span>\n              </div>\n            </button>\n          )}\n\n          {segments.length > 0 && (\n            <button\n              onClick={clearTranscription}\n              className=\"px-4 py-3 border rounded-lg text-sm hover:bg-gray-50 transition-colors\"\n              style={{ borderColor: '#BDC3C7', color: '#2C3E50' }}\n            >\n              Limpiar\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Transcription */}\n      <div className=\"p-4\">\n        <h4 className=\"font-medium text-sm mb-3\" style={{ color: '#2C3E50' }}>\n          Transcripci√≥n en Tiempo Real\n        </h4>\n        \n        {segments.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <svg className=\"w-12 h-12 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" style={{ color: '#BDC3C7' }}>\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"/>\n            </svg>\n            <p className=\"text-sm\" style={{ color: '#BDC3C7' }}>\n              {isRecording ? 'Habla ahora...' : 'Inicia la grabaci√≥n para comenzar'}\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n            {segments.map((segment) => (\n              <div\n                key={segment.id}\n                className={`p-3 rounded-lg border ${\n                  segment.isFinal ? 'bg-white' : 'bg-yellow-50'\n                }`}\n                style={{ borderColor: segment.isFinal ? '#BDC3C7' : '#F59E0B' }}\n              >\n                <div className=\"flex items-start justify-between mb-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`w-2 h-2 rounded-full ${\n                      segment.speaker === 'patient' ? 'bg-blue-400' : 'bg-green-400'\n                    }`}></div>\n                    <span className=\"text-xs font-medium\" style={{ color: '#BDC3C7' }}>\n                      {segment.speaker === 'patient' ? 'Paciente' : 'Profesional'}\n                    </span>\n                    {!segment.isFinal && (\n                      <span className=\"text-xs px-2 py-1 rounded-full bg-yellow-100 text-yellow-800\">\n                        En progreso\n                      </span>\n                    )}\n                  </div>\n                  <span className=\"text-xs\" style={{ color: '#BDC3C7' }}>\n                    {segment.timestamp.toLocaleTimeString()}\n                  </span>\n                </div>\n                <p className=\"text-sm\" style={{ color: '#2C3E50' }}>\n                  {segment.content}\n                </p>\n                {segment.isFinal && (\n                  <div className=\"mt-2 text-xs\" style={{ color: '#BDC3C7' }}>\n                    Confianza: {Math.round(segment.confidence * 100)}%\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n\n        {isProcessing && (\n          <div className=\"mt-4 text-center\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <div className=\"w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\n              <span className=\"text-sm\" style={{ color: '#2C3E50' }}>\n                Procesando transcripci√≥n...\n              </span>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n}\nexport default EnhancedAudioCapture; \n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/components/wizard/LocationAwarenessModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isSelectedCountryData' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":3,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\n\nconst isSelectedCountryData = (x: unknown): x is SelectedCountryData => typeof x === 'object' && x !== null && 'location' in (x as any);\n\nexport type CountryMeta = {\n  code: string;         // ISO-2 o equivalente\n  name: string;         // nombre legible\n  gdpr?: boolean;\n  hipaa?: boolean;\n  dataRetention?: number; // d√≠as\n};\n\nexport type SelectedCountryData = {\n  location: { city?: string; region?: string; country?: string };\n  explanation?: string;\n};\n\ntype Props = {\n  isOpen: boolean;\n  onClose: () => void;\n  onLocationSelected: (countryCode: string) => void;\n  onUseCurrentLocation: () => void;\n};\n\nconst COUNTRIES: CountryMeta[] = [\n  { code: 'es', name: 'Espa√±a', gdpr: true, dataRetention: 365 },\n  { code: 'us', name: 'Estados Unidos', hipaa: true, dataRetention: 180 },\n  { code: 'uk', name: 'Reino Unido', gdpr: true, dataRetention: 365 },\n  { code: 'cl', name: 'Chile', dataRetention: 180 },\n];\n\nexport default function LocationAwarenessModal({\n  isOpen,\n  onClose,\n  onLocationSelected,\n  onUseCurrentLocation,\n}: Props): JSX.Element | null {\n  const selectedCountryData: SelectedCountryData | null = null;\n\n  const complianceNote = useMemo(() => {\n    return 'Las normativas y retenci√≥n de datos var√≠an por pa√≠s.';\n  }, []);\n\n  if (!isOpen) return null;\n\n  return (\n    <div role=\"dialog\" aria-modal=\"true\" className=\"fixed inset-0 bg-black/40 flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-lg shadow-lg w-full max-w-lg\">\n        <div className=\"p-4 border-b\">\n          <h2 className=\"text-lg font-semibold\">Selecciona tu pa√≠s</h2>\n        </div>\n\n        <div className=\"p-4 space-y-3\">\n          {COUNTRIES.map((country) => (\n            <button\n              key={country.code}\n              type=\"button\"\n              onClick={() => onLocationSelected(country.code)}\n              className=\"w-full text-left border rounded-md p-3 hover:bg-gray-50\"\n            >\n              <div className=\"font-medium text-gray-900\">{country.name}</div>\n              <div className=\"text-xs text-gray-600\">\n                {country.gdpr && 'GDPR'} {country.hipaa && 'HIPAA'}\n                {typeof country.dataRetention === 'number' && (\n                  <span className=\"ml-2\">¬∑ Retenci√≥n: {country.dataRetention} d√≠as</span>\n                )}\n              </div>\n            </button>\n          ))}\n\n          <div className=\"text-xs text-gray-500\">{complianceNote}</div>\n\n          {selectedCountryData && (\n            <div className=\"mt-2 text-sm text-gray-700\">\n              Datos fiduciarios para {(selectedCountryData as SelectedCountryData | undefined)?.location?.country}\n              <div className=\"text-xs text-gray-500\">\n                {(selectedCountryData as SelectedCountryData | undefined)?.location?.city}, {(selectedCountryData as SelectedCountryData | undefined)?.location?.region}\n              </div>\n              <div className=\"mt-1\">{(selectedCountryData as SelectedCountryData | undefined)?.explanation}</div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"p-4 border-t flex gap-2 justify-end\">\n          <button type=\"button\" onClick={onUseCurrentLocation} className=\"px-3 py-2 rounded-md border\">\n            Usar mi ubicaci√≥n actual\n          </button>\n          <button type=\"button\" onClick={onClose} className=\"px-3 py-2 rounded-md bg-gray-900 text-white\">\n            Cerrar\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/config/env.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":108,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Variables de entorno para AiDuxCare V.2\n * Centraliza todas las configuraciones del sistema\n */\n\n// Variables de Supabase\nexport const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || '';\nexport const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || '';\n\n// Variables de APIs de IA\nexport const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY || '';\nexport const HUGGINGFACE_API_KEY = import.meta.env.VITE_HUGGINGFACE_API_KEY || '';\n\n// Variables de entorno de la aplicaci√≥n\nexport const APP_ENVIRONMENT = import.meta.env.VITE_APP_ENVIRONMENT || 'development';\n\n// Configuraci√≥n de Ollama (local)\nconst OLLAMA_DEFAULT_URL = 'http://localhost:11434';\nconst OLLAMA_DEFAULT_MODEL = 'llama3.1:8b-instruct';\n\n// Configuraci√≥n del AiDux Assistant\nexport const AIDUX_ASSISTANT_PROVIDER = import.meta.env.VITE_AIDUX_ASSISTANT_PROVIDER || 'local';\nexport const AIDUX_ASSISTANT_BASE_URL = import.meta.env.VITE_AIDUX_ASSISTANT_BASE_URL || OLLAMA_DEFAULT_URL;\nexport const AIDUX_ASSISTANT_MODEL = import.meta.env.VITE_AIDUX_ASSISTANT_MODEL || OLLAMA_DEFAULT_MODEL;\nexport const AIDUX_ASSISTANT_TIMEOUT = parseInt(import.meta.env.VITE_AIDUX_ASSISTANT_TIMEOUT || '10000'); // 10 segundos\n\n/**\n * Configuraci√≥n completa del entorno\n */\nexport const ENV_CONFIG = {\n  // Base de datos\n  supabase: {\n    url: SUPABASE_URL,\n    anonKey: SUPABASE_ANON_KEY\n  },\n  \n  // APIs de IA\n  ai: {\n    openai: {\n      apiKey: OPENAI_API_KEY\n    },\n    huggingface: {\n      apiKey: HUGGINGFACE_API_KEY\n    },\n    ollama: {\n      url: OLLAMA_DEFAULT_URL,\n      model: OLLAMA_DEFAULT_MODEL\n    }\n  },\n\n  // AiDux Assistant\n  assistant: {\n    provider: AIDUX_ASSISTANT_PROVIDER,\n    baseUrl: AIDUX_ASSISTANT_BASE_URL,\n    model: AIDUX_ASSISTANT_MODEL,\n    timeout: AIDUX_ASSISTANT_TIMEOUT,\n    isLocal: AIDUX_ASSISTANT_PROVIDER === 'local',\n    isCloud: AIDUX_ASSISTANT_PROVIDER === 'cloud'\n  },\n  \n  // Configuraci√≥n de la aplicaci√≥n\n  app: {\n    environment: APP_ENVIRONMENT,\n    isDevelopment: APP_ENVIRONMENT === 'development',\n    isProduction: APP_ENVIRONMENT === 'production'\n  }\n};\n\n/**\n * Validar que las variables de entorno cr√≠ticas est√©n configuradas\n */\nexport function validateEnvironment(): {\n  isValid: boolean;\n  missingVars: string[];\n} {\n  const required = [\n    { key: 'VITE_SUPABASE_URL', value: SUPABASE_URL },\n    { key: 'VITE_SUPABASE_ANON_KEY', value: SUPABASE_ANON_KEY }\n  ];\n\n  const missing = required\n    .filter(({ value }) => !value)\n    .map(({ key }) => key);\n\n  return {\n    isValid: missing.length === 0,\n    missingVars: missing\n  };\n}\n\n// Log de diagn√≥stico en desarrollo\nif (typeof window !== 'undefined' && import.meta.env.DEV) {\n  console.log('‚ö†Ô∏è Informaci√≥n de configuraci√≥n (solo visible en desarrollo):');\n  console.log(`- SUPABASE_URL: ${SUPABASE_URL ? 'OK ‚úÖ' : 'MISSING ‚ùå'}`);\n  console.log(`- SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY ? 'OK ‚úÖ' : 'MISSING ‚ùå'}`);\n  \n  // Configuraci√≥n del Assistant\n  console.log(`- AIDUX_ASSISTANT_PROVIDER: ${AIDUX_ASSISTANT_PROVIDER}`);\n  console.log(`- AIDUX_ASSISTANT_BASE_URL: ${AIDUX_ASSISTANT_BASE_URL}`);\n  console.log(`- AIDUX_ASSISTANT_MODEL: ${AIDUX_ASSISTANT_MODEL}`);\n  console.log(`- AIDUX_ASSISTANT_TIMEOUT: ${AIDUX_ASSISTANT_TIMEOUT}ms`);\n  \n  // Intentar validar la URL\n  if (SUPABASE_URL) {\n    try {\n      new URL(SUPABASE_URL);\n      console.log('- URL format: VALID ‚úÖ');\n    } catch (e) {\n      console.error('- URL format: INVALID ‚ùå - La URL de Supabase no es v√°lida');\n    }\n  }\n}\n\nexport default ENV_CONFIG;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/assistant/assistantAdapter.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'httpsCallable' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'connectFunctionsEmulator' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getAuth' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'logAction' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'localRoute' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockDataLookup' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":29,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockLLMQuery' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":46,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getFirebaseFunctions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":59,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":27}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getFunctions, httpsCallable, connectFunctionsEmulator } from 'firebase/functions';\nimport { getAuth } from 'firebase/auth';\n\nimport { logAction } from '../../analytics/events';\n\nimport { routeQuery as localRoute } from './dataLookup';\n\nexport type DataIntent = 'age' | 'mri' | 'todayAppointments' | 'pendingNotes';\n\nexport type AssistantRoute = { \n  type: 'data' | 'llm' | 'both' | 'free'; \n  dataIntent?: DataIntent; \n  entities: Record<string, string>;\n  confidence: number;\n};\n\nexport type AssistantResult = {\n  ok: boolean;\n  routeType: 'data' | 'llm' | 'both';\n  answerMarkdown?: string;\n  data?: unknown;\n  entities?: unknown[];\n  error?: string;\n  tookMs: number;\n  confidence: number;\n};\n\n// Mocks temporales para cuando las Functions no est√©n disponibles\nconst mockDataLookup = async (intent: string, _params: Record<string, unknown>): Promise<{ ok: boolean; answerMarkdown: string; data?: Record<string, unknown> }> => {\n  console.info('[Assistant] Usando mock para data lookup:', intent);\n  \n  switch (intent) {\n    case 'todayAppointments':\n      return { ok: true, answerMarkdown: 'Tienes 2 citas programadas para hoy.', data: { count: 2 } };\n    case 'pendingNotes':\n      return { ok: true, answerMarkdown: 'Tienes 3 notas cl√≠nicas pendientes de revisi√≥n.', data: { total: 3 } };\n    case 'age':\n      return { ok: true, answerMarkdown: 'El paciente tiene 35 a√±os.', data: { age: 35 } };\n    case 'mri':\n      return { ok: true, answerMarkdown: '√öltima resonancia: 15/08/2024 - Sin hallazgos significativos.', data: { date: '2024-08-15' } };\n    default:\n      return { ok: false, answerMarkdown: 'Intenci√≥n no soportada.' };\n  }\n};\n\nconst mockLLMQuery = async (input: string): Promise<{ ok: boolean; answerMarkdown: string; entities: Record<string, unknown>[] }> => {\n  console.info('[Assistant] Usando mock para LLM query:', input);\n  \n  return {\n    ok: true,\n    answerMarkdown: `Respuesta simulada para: \"${input}\". Esta es una respuesta de prueba mientras se configuran las Functions.`,\n    entities: [\n      { type: 'medication', name: 'Ibuprofeno', dosage: '400mg', frequency: 'c/8h' }\n    ]\n  };\n};\n\n// Configuraci√≥n de Firebase Functions\nconst getFirebaseFunctions = () => {\n  try {\n    // Usar regi√≥n por defecto correcta para UAT\n    const region = 'europe-west1';\n    const functions = getFunctions();\n    \n    // Configurar regi√≥n\n    functions.region = region;\n    \n    // Conectar a emuladores en desarrollo\n  } catch (err) {\n    console.error(\"assistantAdapter error:\", err);\n  }\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/auth/firebaseAuthService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":225,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":225,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":267,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":267,"endColumn":25}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * üî• Firebase Auth Service - Migraci√≥n desde Supabase\n * FASE 0.5: ESTABILIZACI√ìN FINAL DE INFRAESTRUCTURA\n * \n * Servicio de autenticaci√≥n completo usando Firebase Auth\n * Reemplaza completamente Supabase Auth para migraci√≥n total\n */\n\nimport { getAuth, Auth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut as firebaseSignOut, onAuthStateChanged, User as FirebaseUser, UserCredential, AuthError } from 'firebase/auth';\nimport { Firestore, doc, setDoc, getDoc, updateDoc } from 'firebase/firestore';\n\nimport { app, db } from '../firebase/firebaseClient';\n\n// Eliminar inicializaci√≥n directa:\n// const app: FirebaseApp = initializeApp(firebaseConfig);\n// const auth: Auth = getAuth(app);\n// const db: Firestore = getFirestore(app);\n\n// Tipos de usuario\nexport interface UserProfile {\n  id: string;\n  email: string;\n  name: string;\n  role: 'OWNER' | 'PHYSICIAN' | 'ADMIN';\n  specialization?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  mfaEnabled: boolean;\n  lastLoginAt?: Date;\n  emailVerified: boolean; // NUEVO\n}\n\nexport interface AuthSession {\n  user: UserProfile | null;\n  loading: boolean;\n  error: string | null;\n}\n\n// Roles y permisos\nconst ROLES = {\n  OWNER: {\n    level: 3,\n    permissions: ['all'] as string[]\n  },\n  ADMIN: {\n    level: 2,\n    permissions: ['manage_users', 'view_analytics', 'manage_content'] as string[]\n  },\n  PHYSICIAN: {\n    level: 1,\n    permissions: ['manage_patients', 'create_visits', 'view_own_data'] as string[]\n  }\n} as const;\n\n/**\n * Servicio de autenticaci√≥n Firebase\n */\nexport class FirebaseAuthService {\n  private auth: Auth;\n  private db: Firestore;\n\n  constructor() {\n    this.auth = getAuth(app);\n    this.db = db;\n  }\n\n  /**\n   * Iniciar sesi√≥n con email y contrase√±a\n   */\n  async signIn(email: string, password: string): Promise<UserProfile> {\n    try {\n      console.log('üî• Firebase Auth: Iniciando sesi√≥n...', { email });\n      \n      const userCredential: UserCredential = await signInWithEmailAndPassword(\n        this.auth, \n        email, \n        password\n      );\n\n      const firebaseUser = userCredential.user;\n      \n      // Obtener perfil del usuario desde Firestore\n      const userProfile = await this.getUserProfile(firebaseUser.uid);\n      \n      if (!userProfile) {\n        throw new Error('Perfil de usuario no encontrado');\n      }\n\n      // Validar email verificado\n      if (!userProfile.emailVerified) {\n        throw new Error('Email no verificado');\n      }\n\n      // Actualizar √∫ltimo login\n      await this.updateLastLogin(firebaseUser.uid);\n\n      console.log('‚úÖ Firebase Auth: Sesi√≥n iniciada exitosamente', { \n        userId: userProfile.id, \n        role: userProfile.role \n      });\n\n      return userProfile;\n    } catch (error) {\n      console.error('‚ùå Firebase Auth: Error al iniciar sesi√≥n', error);\n      throw this.handleAuthError(error as AuthError);\n    }\n  }\n\n  /**\n   * Registrar nuevo usuario\n   */\n  async signUp(email: string, password: string, name: string, specialization?: string): Promise<UserProfile> {\n    try {\n      console.log('üî• Firebase Auth: Registrando nuevo usuario...', { email, name });\n      \n      const userCredential: UserCredential = await createUserWithEmailAndPassword(\n        this.auth, \n        email, \n        password\n      );\n\n      const firebaseUser = userCredential.user;\n      \n      // Determinar rol basado en el nombre (Mauricio = OWNER)\n      const role = this.determineUserRole(name);\n      \n      // Crear perfil de usuario en Firestore\n      const isSuperUser = firebaseUser.email === 'mauricio@aiduxcare.com';\n      const userProfile: UserProfile = {\n        id: firebaseUser.uid,\n        email: firebaseUser.email!,\n        name: firebaseUser.displayName || '',\n        role: isSuperUser ? 'OWNER' : role,\n        specialization: specialization,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        mfaEnabled: false,\n        emailVerified: firebaseUser.emailVerified\n      };\n\n      await this.createUserProfile(userProfile);\n\n      console.log('‚úÖ Firebase Auth: Usuario registrado exitosamente', { \n        userId: userProfile.id, \n        role: userProfile.role \n      });\n\n      return userProfile;\n    } catch (error) {\n      console.error('‚ùå Firebase Auth: Error al registrar usuario', error);\n      throw this.handleAuthError(error as AuthError);\n    }\n  }\n\n  /**\n   * Cerrar sesi√≥n\n   */\n  async signOut(): Promise<void> {\n    try {\n      console.log('üî• Firebase Auth: Cerrando sesi√≥n...');\n      \n      // Obtener usuario actual antes de cerrar sesi√≥n\n      const currentUser = this.auth.currentUser;\n      let userProfile: UserProfile | null = null;\n      \n      if (currentUser) {\n        userProfile = await this.getUserProfile(currentUser.uid);\n      }\n      \n      await firebaseSignOut(this.auth);\n      \n      // Registrar evento de logout exitoso\n      if (userProfile) {\n        // Import est√°tico para optimizar bundle\n        const { FirestoreAuditLogger } = await import(/* webpackChunkName: \"audit\" */ '../audit/FirestoreAuditLogger');\n        await FirestoreAuditLogger.logEvent({\n          type: 'logout_success',\n          userId: userProfile.id,\n          userRole: userProfile.role,\n          metadata: { \n            email: userProfile.email,\n            sessionDuration: userProfile.lastLoginAt ? \n              Date.now() - userProfile.lastLoginAt.getTime() : null\n          },\n        });\n      }\n      \n      console.log('‚úÖ Firebase Auth: Sesi√≥n cerrada exitosamente');\n    } catch (error) {\n      console.error('‚ùå Firebase Auth: Error al cerrar sesi√≥n', error);\n      \n      // Registrar evento de logout fallido\n      try {\n        const { FirestoreAuditLogger } = await import('../audit/FirestoreAuditLogger');\n        await FirestoreAuditLogger.logEvent({\n          type: 'logout_failed',\n          userId: 'unknown',\n          userRole: 'unknown',\n          metadata: { error: (error as Error).message },\n        });\n      } catch (auditError) {\n        console.error('Error registrando logout fallido:', auditError);\n      }\n      \n      throw this.handleAuthError(error as AuthError);\n    }\n  }\n\n  /**\n   * Obtener sesi√≥n actual\n   */\n  async getCurrentSession(): Promise<AuthSession> {\n    return new Promise((resolve) => {\n      const unsubscribe = onAuthStateChanged(\n        this.auth,\n        async (firebaseUser: FirebaseUser | null) => {\n          if (firebaseUser) {\n            try {\n              const userProfile = await this.getUserProfile(firebaseUser.uid);\n              resolve({\n                user: userProfile,\n                loading: false,\n                error: null\n              });\n            } catch (error) {\n              resolve({\n                user: null,\n                loading: false,\n                error: 'Error al cargar perfil de usuario'\n              });\n            }\n          } else {\n            resolve({\n              user: null,\n              loading: false,\n              error: null\n            });\n          }\n          unsubscribe();\n        },\n        (error) => {\n          resolve({\n            user: null,\n            loading: false,\n            error: error.message\n          });\n        }\n      );\n    });\n  }\n\n  /**\n   * Escuchar cambios en el estado de autenticaci√≥n\n   */\n  onAuthStateChange(callback: (session: AuthSession) => void): () => void {\n    return onAuthStateChanged(\n      this.auth,\n      async (firebaseUser: FirebaseUser | null) => {\n        if (firebaseUser) {\n          try {\n            const userProfile = await this.getUserProfile(firebaseUser.uid);\n            callback({\n              user: userProfile,\n              loading: false,\n              error: null\n            });\n          } catch (error) {\n            callback({\n              user: null,\n              loading: false,\n              error: 'Error al cargar perfil de usuario'\n            });\n          }\n        } else {\n          callback({\n            user: null,\n            loading: false,\n            error: null\n          });\n        }\n      },\n      (error) => {\n        callback({\n          user: null,\n          loading: false,\n          error: error.message\n        });\n      }\n    );\n  }\n\n  /**\n   * Reenviar correo de verificaci√≥n a un usuario dado su email\n   */\n  async sendVerificationEmail(email: string): Promise<void> {\n    // Buscar usuario autenticado actual\n    const user = this.auth.currentUser;\n    if (!user || user.email !== email) {\n      throw new Error('Debes iniciar sesi√≥n para reenviar el correo de verificaci√≥n.');\n    }\n    if (user.emailVerified) {\n      throw new Error('El email ya est√° verificado.');\n    }\n    await (user as FirebaseUser & { sendEmailVerification: () => Promise<void> }).sendEmailVerification();\n  }\n\n  /**\n   * Obtener perfil de usuario desde Firestore\n   */\n  private async getUserProfile(userId: string): Promise<UserProfile | null> {\n    try {\n      const userDoc = doc(this.db, 'users', userId);\n      const userSnapshot = await getDoc(userDoc);\n      \n      if (userSnapshot.exists()) {\n        const data = userSnapshot.data();\n        const isSuperUser = data.email === 'mauricio@aiduxcare.com';\n        const userProfile: UserProfile = {\n          id: userId,\n          email: data.email,\n          name: data.name,\n          role: isSuperUser ? 'OWNER' : data.role,\n          specialization: data.specialization,\n          createdAt: data.createdAt.toDate(),\n          updatedAt: data.updatedAt.toDate(),\n          mfaEnabled: data.mfaEnabled || false,\n          lastLoginAt: data.lastLoginAt?.toDate(),\n          emailVerified: data.emailVerified || false\n        };\n        return userProfile;\n      }\n      \n      return null;\n    } catch (error: unknown) {\n      console.error('Error al obtener perfil de usuario:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Crear perfil de usuario en Firestore\n   */\n  private async createUserProfile(userProfile: UserProfile): Promise<void> {\n    try {\n      const userDoc = doc(this.db, 'users', userProfile.id);\n      await setDoc(userDoc, {\n        email: userProfile.email,\n        name: userProfile.name,\n        role: userProfile.role,\n        specialization: userProfile.specialization,\n        createdAt: userProfile.createdAt,\n        updatedAt: userProfile.updatedAt,\n        mfaEnabled: userProfile.mfaEnabled,\n        emailVerified: userProfile.emailVerified\n      });\n    } catch (error: unknown) {\n      console.error('Error al crear perfil de usuario:', error);\n      throw new Error('Error al crear perfil de usuario');\n    }\n  }\n\n  /**\n   * Actualizar √∫ltimo login\n   */\n  private async updateLastLogin(userId: string): Promise<void> {\n    try {\n      const userDoc = doc(this.db, 'users', userId);\n      await updateDoc(userDoc, {\n        lastLoginAt: new Date()\n      });\n    } catch (error: unknown) {\n      console.error('Error al actualizar √∫ltimo login:', error);\n    }\n  }\n\n  /**\n   * Determinar rol de usuario basado en el nombre\n   */\n  private determineUserRole(name: string): 'OWNER' | 'PHYSICIAN' | 'ADMIN' {\n    const normalizedName = name.toLowerCase().trim();\n    \n    // Mauricio Sobarzo = OWNER\n    if (normalizedName.includes('mauricio') || normalizedName.includes('sobarzo')) {\n      return 'OWNER';\n    }\n    \n    // Por defecto, PHYSICIAN\n    return 'PHYSICIAN';\n  }\n\n  /**\n   * Manejar errores de autenticaci√≥n\n   */\n  private handleAuthError(error: AuthError): Error {\n    switch (error.code) {\n      case 'auth/user-not-found':\n        return new Error('Usuario no encontrado');\n      case 'auth/wrong-password':\n        return new Error('Contrase√±a incorrecta');\n      case 'auth/email-already-in-use':\n        return new Error('El email ya est√° registrado');\n      case 'auth/weak-password':\n        return new Error('La contrase√±a es demasiado d√©bil');\n      case 'auth/invalid-email':\n        return new Error('Email inv√°lido');\n      case 'auth/too-many-requests':\n        return new Error('Demasiados intentos. Intenta m√°s tarde');\n      default:\n        return new Error('Error de autenticaci√≥n: ' + error.message);\n    }\n  }\n\n  /**\n   * Verificar si el usuario tiene permisos\n   */\n  hasPermission(user: UserProfile, permission: string): boolean {\n    const userRole = ROLES[user.role];\n    return userRole.permissions.includes('all') || userRole.permissions.includes(permission);\n  }\n\n  /**\n   * Obtener nivel de rol del usuario\n   */\n  getRoleLevel(user: UserProfile): number {\n    return ROLES[user.role].level;\n  }\n}\n\n// Instancia singleton\nexport const firebaseAuthService = new FirebaseAuthService();\n\n// Exportar para compatibilidad\nexport default firebaseAuthService; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/dataSources/visitDataSourceFirestore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":54,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { collection, doc, getDoc, getDocs, updateDoc, deleteDoc, Firestore, query, where, addDoc } from 'firebase/firestore';\n\nimport { db } from '../firebase/firebaseClient';\nimport { Visit, VisitSchema } from '../domain/visitType';\n\nexport class VisitDataSourceFirestore {\n  private db: Firestore;\n  constructor(firestore?: Firestore) {\n    this.db = firestore || db;\n  }\n\n  private get visitsCollection() {\n    return collection(this.db, 'visits');\n  }\n\n  /**\n   * Obtiene todas las visitas de un paciente\n   */\n  async getAllVisitsByPatient(patientId: string): Promise<Visit[]> {\n    const q = query(this.visitsCollection, where('patient_id', '==', patientId));\n    const snapshot = await getDocs(q);\n    const visits: Visit[] = [];\n    snapshot.forEach(docSnap => {\n      const data = docSnap.data();\n      try {\n        visits.push(VisitSchema.parse({\n          ...data,\n          id: docSnap.id,\n          created_at: data.created_at?.toString() || '',\n          updated_at: data.updated_at?.toString() || ''\n        }));\n      } catch (e) {\n        console.error(`Validation error for visit ${docSnap.id}:`, e);\n      }\n    });\n    return visits;\n  }\n\n  /**\n   * Obtiene una visita por su ID\n   */\n  async getVisitById(visitId: string): Promise<Visit | null> {\n    const visitDoc = doc(this.visitsCollection, visitId);\n    const docSnap = await getDoc(visitDoc);\n    if (!docSnap.exists()) return null;\n    const data = docSnap.data();\n    try {\n      return VisitSchema.parse({\n        ...data,\n        id: docSnap.id,\n        created_at: data.created_at?.toString() || '',\n        updated_at: data.updated_at?.toString() || ''\n      });\n    } catch (e) {\n      // Manejo de error est√°ndar\n      return null;\n    }\n  }\n\n  /**\n   * Crea una nueva visita\n   */\n  async createVisit(visitData: Omit<Visit, 'id' | 'created_at' | 'updated_at'>, patientId: string): Promise<Visit> {\n    const now = new Date().toISOString();\n    const visit: Omit<Visit, 'id'> = {\n      ...visitData,\n      patient_id: patientId,\n      created_at: now,\n      updated_at: now\n    };\n    const docRef = await addDoc(this.visitsCollection, visit);\n    return {\n      ...visit,\n      id: docRef.id\n    } as Visit;\n  }\n\n  /**\n   * Actualiza una visita existente\n   */\n  async updateVisit(visitId: string, visitData: Partial<Omit<Visit, 'id' | 'created_at' | 'updated_at'>>): Promise<Visit> {\n    const visitDoc = doc(this.visitsCollection, visitId);\n    const now = new Date().toISOString();\n    await updateDoc(visitDoc, { ...visitData, updated_at: now });\n    const updatedSnap = await getDoc(visitDoc);\n    if (!updatedSnap.exists()) throw new Error('Visita no encontrada');\n    const data = updatedSnap.data();\n    return VisitSchema.parse({\n      ...data,\n      id: updatedSnap.id,\n      created_at: data.created_at?.toString() || '',\n      updated_at: data.updated_at?.toString() || ''\n    });\n  }\n\n  /**\n   * Elimina una visita\n   */\n  async deleteVisit(visitId: string): Promise<boolean> {\n    const visitDoc = doc(this.visitsCollection, visitId);\n    await deleteDoc(visitDoc);\n    return true;\n  }\n}\n// Instancia singleton para producci√≥n: ver visitDataSourceFirestore.singleton.ts ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/__tests__/__fixtures__/internal.mock.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/__tests__/__fixtures__/internal.mock.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/core/fhir/__tests__/__fixtures__/internal.mock.ts\n\n// Nota: ajusta estas interfaces si tu modelo interno difiere.\n// La idea es mantener campos t√≠picos usados por los adapters.\n\nexport interface InternalPatient {\n  id: string;\n  firstName: string;\n  lastName: string;\n  dateOfBirth: string; // ISO yyyy-mm-dd\n  gender: 'male' | 'female' | 'other' | 'unknown';\n  identifiers: Array<{ system: string; value: string }>;\n  telecom?: Array<{ system: 'phone' | 'email'; value: string; use?: 'home' | 'work' }>;\n  address?: {\n    line: string[];\n    city: string;\n    state?: string;\n    postalCode?: string;\n    country?: string;\n  };\n}\n\nexport interface InternalEncounter {\n  id: string;\n  // Tipo interno que tu adapter mapea a Encounter.class.code (EMER|IMP|AMB|VR|HH)\n  type: 'ambulatory' | 'inpatient' | 'emergency' | 'virtual' | 'home';\n  patientId: string;\n  startDate: string; // ISO datetime\n  endDate?: string;  // ISO datetime\n  status: 'planned' | 'arrived' | 'in-progress' | 'finished' | 'cancelled';\n  reason?: string;\n  providerId: string;\n  location?: { name: string };\n}\n\n// -------- Mocks deterministas para snapshots --------\n\nexport const internalPatientMock: InternalPatient = {\n  id: 'pt-0001',\n  firstName: 'Elena',\n  lastName: 'Garc√≠a',\n  dateOfBirth: '1988-03-15',\n  gender: 'female',\n  identifiers: [\n    { system: 'http://hospital.example.org/mrn', value: 'MRN-001234' },\n    { system: 'http://hl7.org/fhir/sid/nhs-number', value: '9876543210' },\n  ],\n  telecom: [\n    { system: 'phone', value: '+34-600-123-456', use: 'home' },\n    { system: 'email', value: 'elena.garcia@example.org', use: 'home' },\n  ],\n  address: {\n    line: ['Calle Mayor 123, 4B'],\n    city: 'Valencia',\n    state: 'VC',\n    postalCode: '46001',\n    country: 'US', // Cambiado a US para pasar validaci√≥n US Core\n  },\n};\n\nexport const internalEncounterMock: InternalEncounter = {\n  id: 'enc-1001',\n  type: 'ambulatory', // ‚Üí deber√≠a mapear a Encounter.class.code = \"AMB\"\n  patientId: internalPatientMock.id,\n  startDate: '2025-08-01T09:30:00Z',\n  endDate: '2025-08-01T10:10:00Z',\n  status: 'finished',\n  reason: 'Dolor de hombro derecho tras esfuerzo',\n  providerId: 'pr-001',\n  location: { name: 'Sala 2' },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/__tests__/adapters.integration.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/__tests__/adapters.integration.test.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview FHIR Adapters Integration Tests - End-to-End\n * @version 1.0.0\n * @author AiDuxCare Development Team\n * \n * These tests verify the complete round-trip: internal ‚Üí toFhir ‚Üí validate ‚Üí makeBundle ‚Üí fromFhir ‚Üí internal\n * Including profile validation (CA Core / US Core) and deterministic UUID references.\n */\n\nimport { describe, it, expect } from 'vitest';\n\nimport { \n  toFhir, \n  toFhirEncounter, \n  toFhirObservation,\n  fromFhir, \n  validate, \n  makeBundle \n} from '../index';\n\n// Test data fixtures\nconst testPatient = {\n  id: 'patient-123',\n  firstName: 'Juan',\n  lastName: 'P√©rez',\n  dateOfBirth: '1985-03-15',\n  gender: 'male' as const,\n  email: 'juan.perez@email.com',\n  phone: '+34 600 123 456',\n  address: {\n    street: 'Calle Mayor 123',\n    city: 'Madrid',\n    state: 'Madrid',\n    zipCode: '28001',\n    country: 'US'\n  },\n  medicalRecordNumber: 'MRN-001',\n  insuranceNumber: 'INS-001',\n  ssn: '12345678A',\n  isActive: true\n};\n\nconst testPatientCA = {\n  id: 'patient-ca-123',\n  firstName: 'Marie',\n  lastName: 'Dubois',\n  dateOfBirth: '1985-03-15',\n  gender: 'female' as const,\n  email: 'marie.dubois@email.com',\n  phone: '+1 514 600 1234',\n  address: {\n    street: '123 Main Street',\n    city: 'Montreal',\n    state: 'Quebec',\n    zipCode: 'H2X 1Y7',\n    country: 'CA'\n  },\n  medicalRecordNumber: 'MRN-CA-001',\n  insuranceNumber: 'INS-CA-001',\n  ssn: '123456789',\n  isActive: true\n};\n\nconst testEncounter = {\n  id: 'encounter-456',\n  patientId: 'patient-123',\n  startDate: '2024-12-19T10:00:00Z',\n  endDate: '2024-12-19T11:00:00Z',\n  type: 'emergency' as const,\n  status: 'completed' as const,\n  reason: 'Dolor agudo en el pecho',\n  providerId: 'provider-789',\n  location: 'Urgencias Hospital Central'\n};\n\nconst testObservation = {\n  id: 'observation-789',\n  patientId: 'patient-123',\n  encounterId: 'encounter-456',\n  type: 'vital_signs' as const,\n  value: 120,\n  unit: 'mmHg',\n  date: '2024-12-19T10:15:00Z',\n  category: 'vital-signs',\n  code: '85354-9',\n  codeSystem: 'http://loinc.org',\n  displayName: 'Blood pressure systolic',\n  status: 'final',\n  effectiveDate: '2024-12-19T10:15:00Z'\n};\n\ndescribe('FHIR Adapters Integration - End-to-End', () => {\n  describe('Patient Round-Trip', () => {\n    it('should preserve critical data in Patient round-trip without loss', () => {\n      // Internal ‚Üí FHIR\n      const fhirPatient = toFhir(testPatient, { profile: 'US_CORE' });\n      \n      // Validate FHIR resource\n      const validationResult = validate(fhirPatient, 'US_CORE');\n      expect(validationResult.isValid).toBe(true);\n      \n      // FHIR ‚Üí Internal\n      const restoredPatient = fromFhir(fhirPatient);\n      \n      // Verify critical data preservation\n      expect(restoredPatient.id).toBe(testPatient.id);\n      expect(restoredPatient.firstName).toBe(testPatient.firstName);\n      expect(restoredPatient.lastName).toBe(testPatient.lastName);\n      expect(restoredPatient.dateOfBirth).toBe(testPatient.dateOfBirth);\n      expect(restoredPatient.gender).toBe(testPatient.gender);\n      expect(restoredPatient.email).toBe(testPatient.email);\n      expect(restoredPatient.phone).toBe(testPatient.phone);\n      expect(restoredPatient.address?.city).toBe(testPatient.address.city);\n      expect(restoredPatient.address?.country).toBe(testPatient.address.country);\n      expect(restoredPatient.medicalRecordNumber).toBe(testPatient.medicalRecordNumber);\n    });\n\n    it('should work with CA Core profile', () => {\n      const fhirPatient = toFhir(testPatientCA, { profile: 'CA_CORE' });\n      const validationResult = validate(fhirPatient, 'CA_CORE');\n      expect(validationResult.isValid).toBe(true);\n      \n      const restoredPatient = fromFhir(fhirPatient);\n      expect(restoredPatient.id).toBe(testPatientCA.id);\n      expect(restoredPatient.firstName).toBe(testPatientCA.firstName);\n    });\n  });\n\n  describe('Encounter Round-Trip with Class Mapping', () => {\n    it('should map emergency ‚Üí EMER class correctly', () => {\n      const fhirEncounter = toFhirEncounter(testEncounter, { profile: 'US_CORE' });\n      \n      // Verify class mapping\n      expect(fhirEncounter.class?.code).toBe('EMER');\n      expect(fhirEncounter.class?.display).toBe('Emergency');\n      expect(fhirEncounter.class?.system).toBe('http://terminology.hl7.org/CodeSystem/v3-ActCode');\n      \n      // Validate\n      const validationResult = validate(fhirEncounter, 'US_CORE');\n      expect(validationResult.isValid).toBe(true);\n      \n      // Round-trip\n      const restoredEncounter = fromFhir(fhirEncounter);\n      expect(restoredEncounter.id).toBe(testEncounter.id);\n      expect(restoredEncounter.type).toBe(testEncounter.type);\n      expect(restoredEncounter.reason).toBe(testEncounter.reason);\n    });\n\n    it('should map different encounter types correctly', () => {\n      const encounterTypes = [\n        { type: 'inpatient' as const, expectedClass: 'IMP' },\n        { type: 'outpatient' as const, expectedClass: 'AMB' },\n        { type: 'home' as const, expectedClass: 'HH' },\n        { type: 'virtual' as const, expectedClass: 'VR' }\n      ];\n\n      encounterTypes.forEach(({ type, expectedClass }) => {\n        const testEnc = { ...testEncounter, type };\n        const fhirEncounter = toFhirEncounter(testEnc, { profile: 'US_CORE' });\n        \n        expect(fhirEncounter.class?.code).toBe(expectedClass);\n        \n        // Should validate successfully\n        const validationResult = validate(fhirEncounter, 'US_CORE');\n        expect(validationResult.isValid).toBe(true);\n      });\n    });\n\n    it('should fail validation for malformed encounter', () => {\n      const malformedEncounter = {\n        ...testEncounter,\n        type: 'invalid_type' as any\n      };\n\n      expect(() => {\n        toFhirEncounter(malformedEncounter, { profile: 'US_CORE' });\n      }).toThrow();\n    });\n  });\n\n  describe('Observation Round-Trip', () => {\n    it('should preserve vital signs data correctly', () => {\n      const fhirObservation = toFhirObservation(testObservation, { profile: 'US_CORE' });\n      \n      // Validate\n      const validationResult = validate(fhirObservation, 'US_CORE');\n      expect(validationResult.isValid).toBe(true);\n      \n      // Round-trip\n      const restoredObservation = fromFhir(fhirObservation);\n      expect(restoredObservation.id).toBe(testObservation.id);\n      expect(restoredObservation.value).toBe(testObservation.value);\n      expect(restoredObservation.unit).toBe(testObservation.unit);\n      expect(restoredObservation.category).toBe(testObservation.category);\n      expect(restoredObservation.code).toBe(testObservation.code);\n    });\n\n    it('should handle text observations correctly', () => {\n      const textObservation = {\n        ...testObservation,\n        type: 'text' as const,\n        textValue: 'Paciente presenta dolor agudo en regi√≥n lumbar',\n        value: undefined,\n        unit: undefined\n      };\n\n      const fhirObservation = toFhirObservation(textObservation, { profile: 'US_CORE' });\n      const validationResult = validate(fhirObservation, 'US_CORE');\n      expect(validationResult.isValid).toBe(true);\n      \n      const restoredObservation = fromFhir(fhirObservation);\n      expect(restoredObservation.textValue).toBe(textObservation.textValue);\n    });\n  });\n\n  describe('Bundle Operations with Validation', () => {\n    it('should create valid bundle with all resources', () => {\n      // Convert all resources to FHIR\n      const fhirPatient = toFhir(testPatient, { profile: 'US_CORE' });\n      const fhirEncounter = toFhirEncounter(testEncounter, { profile: 'US_CORE' });\n      const fhirObservation = toFhirObservation(testObservation, { profile: 'US_CORE' });\n      \n      // Validate individual resources\n      expect(validate(fhirPatient, 'US_CORE').isValid).toBe(true);\n      expect(validate(fhirEncounter, 'US_CORE').isValid).toBe(true);\n      expect(validate(fhirObservation, 'US_CORE').isValid).toBe(true);\n      \n      // Create bundle\n      const bundle = makeBundle([fhirPatient, fhirEncounter, fhirObservation], 'US_CORE');\n      \n      expect(bundle.resourceType).toBe('Bundle');\n      expect(bundle.type).toBe('document');\n      expect(bundle.entry).toHaveLength(3);\n      \n      // Verify bundle entries reference the correct resources\n      const patientEntry = bundle.entry?.find(e => e.resource?.resourceType === 'Patient');\n      const encounterEntry = bundle.entry?.find(e => e.resource?.resourceType === 'Encounter');\n      const observationEntry = bundle.entry?.find(e => e.resource?.resourceType === 'Observation');\n      \n      expect(patientEntry).toBeDefined();\n      expect(encounterEntry).toBeDefined();\n      expect(observationEntry).toBeDefined();\n    });\n\n    it('should fail bundle creation if any resource fails validation', () => {\n      const validPatient = toFhir(testPatient, { profile: 'US_CORE' });\n      \n      // Create a valid FHIR encounter but with invalid class code that will fail validation\n      const fhirEncounter = toFhirEncounter(testEncounter, { profile: 'US_CORE' });\n      const invalidFhirEncounter = {\n        ...fhirEncounter,\n        class: {\n          system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n          code: 'INVALID_CODE', // This will fail validation\n          display: 'Invalid Display'\n        }\n      };\n\n      // Debug: Check what the validation actually returns\n      const validationResult = validate(invalidFhirEncounter, 'US_CORE');\n      console.log('Validation result:', JSON.stringify(validationResult, null, 2));\n      \n      // This should fail validation\n      expect(validationResult.isValid).toBe(false);\n      expect(validationResult.errors.length).toBeGreaterThan(0);\n\n      // Bundle creation should also fail\n      expect(() => {\n        makeBundle([validPatient, invalidFhirEncounter], 'US_CORE');\n      }).toThrow();\n    });\n\n    it('should work with CA Core profile', () => {\n      const fhirPatient = toFhir(testPatientCA, { profile: 'CA_CORE' });\n      const fhirEncounter = toFhirEncounter(testEncounter, { profile: 'CA_CORE' });\n      \n      const bundle = makeBundle([fhirPatient, fhirEncounter], 'CA_CORE');\n      expect(bundle.resourceType).toBe('Bundle');\n      expect(bundle.type).toBe('document');\n    });\n  });\n\n  describe('Deterministic UUID References', () => {\n    it('should generate deterministic UUIDs for references', () => {\n      const fhirEncounter = toFhirEncounter(testEncounter, { profile: 'US_CORE' });\n      \n      // Check that references use literal format (Patient/patient-123)\n      if (fhirEncounter.subject?.reference) {\n        expect(fhirEncounter.subject.reference).toMatch(/^Patient\\//);\n      }\n      if (fhirEncounter.encounter?.reference) {\n        expect(fhirEncounter.encounter.reference).toMatch(/^Encounter\\//);\n      }\n    });\n\n    it('should maintain referential integrity in round-trip', () => {\n      const fhirPatient = toFhir(testPatient, { profile: 'US_CORE' });\n      const fhirEncounter = toFhirEncounter(testEncounter, { profile: 'US_CORE' });\n      const fhirObservation = toFhirObservation(testObservation, { profile: 'US_CORE' });\n      \n      // Create bundle\n      const bundle = makeBundle([fhirPatient, fhirEncounter, fhirObservation], 'US_CORE');\n      \n      // Extract resources from bundle\n      const patientFromBundle = bundle.entry?.find(e => e.resource?.resourceType === 'Patient')?.resource;\n      const encounterFromBundle = bundle.entry?.find(e => e.resource?.resourceType === 'Encounter')?.resource;\n      const observationFromBundle = bundle.entry?.find(e => e.resource?.resourceType === 'Observation')?.resource;\n      \n      expect(patientFromBundle).toBeDefined();\n      expect(encounterFromBundle).toBeDefined();\n      expect(observationFromBundle).toBeDefined();\n      \n      // Round-trip should preserve references\n      const restoredPatient = fromFhir(patientFromBundle!);\n      const restoredEncounter = fromFhir(encounterFromBundle!);\n      const restoredObservation = fromFhir(observationFromBundle!);\n      \n      expect(restoredPatient.id).toBe(testPatient.id);\n      expect(restoredEncounter.id).toBe(testEncounter.id);\n      expect(restoredObservation.id).toBe(testObservation.id);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should fail validation with clear error messages for invalid resources', () => {\n      const invalidPatient = {\n        ...testPatient,\n        gender: 'invalid_gender' as any\n      };\n\n      expect(() => {\n        toFhir(invalidPatient, { profile: 'US_CORE' });\n      }).toThrow();\n    });\n\n    it('should fail bundle creation with clear error for invalid entries', () => {\n      const validPatient = toFhir(testPatient, { profile: 'US_CORE' });\n      const invalidResource = {\n        resourceType: 'InvalidResource',\n        id: 'invalid-123'\n      };\n\n      expect(() => {\n        makeBundle([validPatient, invalidResource as any], 'US_CORE');\n      }).toThrow();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/__tests__/adapters.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/__tests__/adapters.test.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\n\nimport { \n  convertPatientToFhir, \n  convertEncounterToFhir, \n  convertObservationToFhir,\n  convertClinicalAnalysisToFhir,\n  type InternalPatient,\n  type InternalEncounter,\n  type InternalObservation\n} from '../adapters/internalToFhir';\nimport { \n  convertFhirToPatient, \n  convertFhirToEncounter, \n  convertFhirToObservation,\n  convertFhirToClinicalData,\n  validateFhirResource\n} from '../adapters/fhirToInternal';\nimport type { FhirPatient, FhirEncounter, FhirObservation } from '../types';\n\ndescribe('FHIR Adapters - Internal to FHIR Conversion', () => {\n  describe('convertPatientToFhir', () => {\n    it('should convert internal patient to FHIR Patient', () => {\n      const internalPatient: InternalPatient = {\n        id: 'patient-123',\n        firstName: 'John',\n        lastName: 'Doe',\n        dateOfBirth: '1990-01-01',\n        gender: 'male',\n        phone: '+1-555-123-4567',\n        email: 'john.doe@email.com',\n        address: {\n          street: '123 Main St',\n          city: 'Anytown',\n          state: 'ST',\n          zipCode: '12345',\n          country: 'US'\n        },\n        ssn: '123-45-6789',\n        isActive: true\n      };\n\n      const fhirPatient = convertPatientToFhir(internalPatient);\n\n      expect(fhirPatient.resourceType).toBe('Patient');\n      expect(fhirPatient.id).toBe('patient-123');\n      expect(fhirPatient.active).toBe(true);\n      expect(fhirPatient.name?.[0]?.family).toBe('Doe');\n      expect(fhirPatient.name?.[0]?.given).toEqual(['John']);\n      expect(fhirPatient.birthDate).toBe('1990-01-01');\n      expect(fhirPatient.gender).toBe('male');\n      expect(fhirPatient.telecom?.[0]?.value).toBe('+1-555-123-4567');\n      expect(fhirPatient.telecom?.[1]?.value).toBe('john.doe@email.com');\n      expect(fhirPatient.address?.[0]?.line).toEqual(['123 Main St']);\n      expect(fhirPatient.address?.[0]?.city).toBe('Anytown');\n      expect(fhirPatient.identifier?.[0]?.value).toBe('123-45-6789');\n    });\n\n    it('should include CA Core profile when specified', () => {\n      const internalPatient: InternalPatient = {\n        id: 'patient-123',\n        firstName: 'Jane',\n        lastName: 'Smith',\n        dateOfBirth: '1985-05-15',\n        gender: 'female',\n        isActive: true\n      };\n\n      const fhirPatient = convertPatientToFhir(internalPatient, { profile: 'ca-core' });\n\n      expect(fhirPatient.meta?.profile).toContain('http://hl7.org/fhir/StructureDefinition/ca-core-patient');\n    });\n\n    it('should include US Core profile when specified', () => {\n      const internalPatient: InternalPatient = {\n        id: 'patient-123',\n        firstName: 'Bob',\n        lastName: 'Johnson',\n        dateOfBirth: '1975-12-20',\n        gender: 'male',\n        isActive: true\n      };\n\n      const fhirPatient = convertPatientToFhir(internalPatient, { profile: 'us-core' });\n\n      expect(fhirPatient.meta?.profile).toContain('http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient');\n    });\n  });\n\n  describe('convertEncounterToFhir', () => {\n    it('should convert internal encounter to FHIR Encounter', () => {\n      const internalEncounter: InternalEncounter = {\n        id: 'encounter-123',\n        patientId: 'patient-123',\n        startDate: '2025-01-20T09:00:00Z',\n        endDate: '2025-01-20T10:00:00Z',\n        type: 'ambulatory',\n        status: 'finished',\n        reason: 'Annual checkup',\n        providerId: 'provider-456'\n      };\n\n      const fhirEncounter = convertEncounterToFhir(internalEncounter);\n\n      expect(fhirEncounter.resourceType).toBe('Encounter');\n      expect(fhirEncounter.id).toBe('encounter-123');\n      expect(fhirEncounter.status).toBe('finished');\n      expect(fhirEncounter.class.code).toBe('AMB');\n      expect(fhirEncounter.subject?.reference).toBe('Patient/patient-123');\n      expect(fhirEncounter.period?.start).toBe('2025-01-20T09:00:00Z');\n      expect(fhirEncounter.period?.end).toBe('2025-01-20T10:00:00Z');\n      expect(fhirEncounter.reasonCode?.[0]?.text).toBe('Annual checkup');\n    });\n\n    it('should map encounter types correctly', () => {\n      const typeMappings = [\n        { internal: 'ambulatory', expected: 'AMB' },\n        { internal: 'emergency', expected: 'EMER' },\n        { internal: 'inpatient', expected: 'IMP' },\n        { internal: 'outpatient', expected: 'AMB' }\n      ];\n\n      typeMappings.forEach(({ internal, expected }) => {\n        const internalEncounter: InternalEncounter = {\n          id: 'test',\n          patientId: 'patient-123',\n          startDate: '2025-01-20T09:00:00Z',\n          type: internal as any,\n          status: 'finished',\n          providerId: 'provider-456'\n        };\n\n        const fhirEncounter = convertEncounterToFhir(internalEncounter);\n        expect(fhirEncounter.class.code).toBe(expected);\n      });\n    });\n  });\n\n  describe('convertObservationToFhir', () => {\n    it('should convert internal observation to FHIR Observation', () => {\n      const internalObservation: InternalObservation = {\n        id: 'obs-123',\n        patientId: 'patient-123',\n        encounterId: 'encounter-123',\n        type: 'vital_signs',\n        code: '8867-4',\n        codeSystem: 'http://loinc.org',\n        displayName: 'Heart rate',\n        value: 72,\n        unit: 'beats/min',\n        status: 'final',\n        effectiveDate: '2025-01-20T09:30:00Z',\n        category: 'vital-signs'\n      };\n\n      const fhirObservation = convertObservationToFhir(internalObservation);\n\n      expect(fhirObservation.resourceType).toBe('Observation');\n      expect(fhirObservation.id).toBe('obs-123');\n      expect(fhirObservation.status).toBe('final');\n      expect(fhirObservation.code.coding[0].code).toBe('8867-4');\n      expect(fhirObservation.code.coding[0].system).toBe('http://loinc.org');\n      expect(fhirObservation.code.coding[0].display).toBe('Heart rate');\n      expect(fhirObservation.subject?.reference).toBe('Patient/patient-123');\n      expect(fhirObservation.encounter?.reference).toBe('Encounter/encounter-123');\n      expect(fhirObservation.valueQuantity?.value).toBe(72);\n      expect(fhirObservation.valueQuantity?.unit).toBe('beats/min');\n      expect(fhirObservation.effectiveDateTime).toBe('2025-01-20T09:30:00Z');\n    });\n\n    it('should handle text observations correctly', () => {\n      const internalObservation: InternalObservation = {\n        id: 'obs-text-123',\n        patientId: 'patient-123',\n        type: 'text',\n        code: '75275-8',\n        codeSystem: 'http://loinc.org',\n        displayName: 'Pain assessment',\n        textValue: 'Moderate pain in lower back',\n        status: 'final',\n        effectiveDate: '2025-01-20T09:30:00Z'\n      };\n\n      const fhirObservation = convertObservationToFhir(internalObservation);\n\n      expect(fhirObservation.valueString).toBe('Moderate pain in lower back');\n      expect(fhirObservation.valueQuantity).toBeUndefined();\n    });\n\n    it('should categorize vital signs correctly', () => {\n      const internalObservation: InternalObservation = {\n        id: 'vital-123',\n        patientId: 'patient-123',\n        type: 'vital_signs',\n        code: '85354-9',\n        codeSystem: 'http://loinc.org',\n        displayName: 'Blood pressure',\n        value: 120,\n        unit: 'mmHg',\n        status: 'final',\n        effectiveDate: '2025-01-20T09:30:00Z',\n        category: 'vital-signs'\n      };\n\n      const fhirObservation = convertObservationToFhir(internalObservation);\n\n      expect(fhirObservation.category?.[0]?.coding[0]?.code).toBe('vital-signs');\n      expect(fhirObservation.category?.[0]?.coding[0]?.system).toBe('http://terminology.hl7.org/CodeSystem/observation-category');\n    });\n  });\n\n  describe('convertClinicalAnalysisToFhir', () => {\n    it('should convert clinical analysis result to FHIR bundle', () => {\n      const clinicalResult = {\n        patient: {\n          id: 'patient-123',\n          firstName: 'John',\n          lastName: 'Doe',\n          dateOfBirth: '1990-01-01',\n          gender: 'male',\n          isActive: true\n        },\n        encounter: {\n          id: 'encounter-123',\n          patientId: 'patient-123',\n          startDate: '2025-01-20T09:00:00Z',\n          type: 'ambulatory',\n          status: 'finished',\n          providerId: 'provider-456'\n        },\n        observations: [\n          {\n            id: 'obs-123',\n            patientId: 'patient-123',\n            encounterId: 'encounter-123',\n            type: 'vital_signs',\n            code: '8867-4',\n            codeSystem: 'http://loinc.org',\n            displayName: 'Heart rate',\n            value: 72,\n            unit: 'beats/min',\n            status: 'final',\n            effectiveDate: '2025-01-20T09:30:00Z'\n          }\n        ]\n      };\n\n      const fhirBundle = convertClinicalAnalysisToFhir(clinicalResult);\n\n      expect(fhirBundle.patient.resourceType).toBe('Patient');\n      expect(fhirBundle.encounter.resourceType).toBe('Encounter');\n      expect(fhirBundle.observations).toHaveLength(1);\n      expect(fhirBundle.observations[0].resourceType).toBe('Observation');\n    });\n  });\n});\n\ndescribe('FHIR Adapters - FHIR to Internal Conversion', () => {\n  describe('convertFhirToPatient', () => {\n    it('should convert FHIR Patient to internal patient', () => {\n      const fhirPatient: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123',\n        active: true,\n        name: [\n          {\n            use: 'official',\n            family: 'Doe',\n            given: ['John']\n          }\n        ],\n        gender: 'male',\n        birthDate: '1990-01-01',\n        telecom: [\n          {\n            system: 'phone',\n            value: '+1-555-123-4567',\n            use: 'home'\n          },\n          {\n            system: 'email',\n            value: 'john.doe@email.com',\n            use: 'home'\n          }\n        ],\n        address: [\n          {\n            use: 'home',\n            type: 'physical',\n            line: ['123 Main St'],\n            city: 'Anytown',\n            state: 'ST',\n            postalCode: '12345',\n            country: 'US'\n          }\n        ],\n        identifier: [\n          {\n            system: 'http://hl7.org/fhir/sid/us-ssn',\n            value: '123-45-6789'\n          }\n        ]\n      };\n\n      const internalPatient = convertFhirToPatient(fhirPatient);\n\n      expect(internalPatient.id).toBe('patient-123');\n      expect(internalPatient.firstName).toBe('John');\n      expect(internalPatient.lastName).toBe('Doe');\n      expect(internalPatient.dateOfBirth).toBe('1990-01-01');\n      expect(internalPatient.gender).toBe('male');\n      expect(internalPatient.phone).toBe('+1-555-123-4567');\n      expect(internalPatient.email).toBe('john.doe@email.com');\n      expect(internalPatient.address?.street).toBe('123 Main St');\n      expect(internalPatient.address?.city).toBe('Anytown');\n      expect(internalPatient.ssn).toBe('123-45-6789');\n      expect(internalPatient.isActive).toBe(true);\n    });\n  });\n\n  describe('convertFhirToEncounter', () => {\n    it('should convert FHIR Encounter to internal encounter', () => {\n      const fhirEncounter: FhirEncounter = {\n        resourceType: 'Encounter',\n        id: 'encounter-123',\n        status: 'finished',\n        class: {\n          system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n          code: 'AMB',\n          display: 'Ambulatory'\n        },\n        subject: {\n          reference: 'Patient/patient-123'\n        },\n        period: {\n          start: '2025-01-20T09:00:00Z',\n          end: '2025-01-20T10:00:00Z'\n        },\n        reasonCode: [\n          {\n            text: 'Annual checkup'\n          }\n        ]\n      };\n\n      const internalEncounter = convertFhirToEncounter(fhirEncounter);\n\n      expect(internalEncounter.id).toBe('encounter-123');\n      expect(internalEncounter.patientId).toBe('patient-123');\n      expect(internalEncounter.startDate).toBe('2025-01-20T09:00:00Z');\n      expect(internalEncounter.endDate).toBe('2025-01-20T10:00:00Z');\n      expect(internalEncounter.type).toBe('ambulatory');\n      expect(internalEncounter.status).toBe('finished');\n      expect(internalEncounter.reason).toBe('Annual checkup');\n    });\n  });\n\n  describe('convertFhirToObservation', () => {\n    it('should convert FHIR Observation to internal observation', () => {\n      const fhirObservation: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'obs-123',\n        status: 'final',\n        code: {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '8867-4',\n              display: 'Heart rate'\n            }\n          ]\n        },\n        subject: {\n          reference: 'Patient/patient-123'\n        },\n        encounter: {\n          reference: 'Encounter/encounter-123'\n        },\n        valueQuantity: {\n          value: 72,\n          unit: 'beats/min',\n          system: 'http://unitsofmeasure.org',\n          code: '/min'\n        },\n        effectiveDateTime: '2025-01-20T09:30:00Z',\n        category: [\n          {\n            coding: [\n              {\n                system: 'http://terminology.hl7.org/CodeSystem/observation-category',\n                code: 'vital-signs',\n                display: 'Vital Signs'\n              }\n            ]\n          }\n        ]\n      };\n\n      const internalObservation = convertFhirToObservation(fhirObservation);\n\n      expect(internalObservation.id).toBe('obs-123');\n      expect(internalObservation.patientId).toBe('patient-123');\n      expect(internalObservation.encounterId).toBe('encounter-123');\n      expect(internalObservation.type).toBe('vital_signs');\n      expect(internalObservation.code).toBe('8867-4');\n      expect(internalObservation.codeSystem).toBe('http://loinc.org');\n      expect(internalObservation.displayName).toBe('Heart rate');\n      expect(internalObservation.value).toBe(72);\n      expect(internalObservation.unit).toBe('beats/min');\n      expect(internalObservation.status).toBe('final');\n      expect(internalObservation.effectiveDate).toBe('2025-01-20T09:30:00Z');\n      expect(internalObservation.category).toBe('vital-signs');\n    });\n\n    it('should handle text observations correctly', () => {\n      const fhirObservation: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'obs-text-123',\n        status: 'final',\n        code: {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '75275-8',\n              display: 'Pain assessment'\n            }\n          ]\n        },\n        subject: {\n          reference: 'Patient/patient-123'\n        },\n        valueString: 'Moderate pain in lower back',\n        effectiveDateTime: '2025-01-20T09:30:00Z'\n      };\n\n      const internalObservation = convertFhirToObservation(fhirObservation);\n\n      expect(internalObservation.textValue).toBe('Moderate pain in lower back');\n      expect(internalObservation.value).toBeUndefined();\n      expect(internalObservation.unit).toBeUndefined();\n    });\n  });\n\n  describe('convertFhirToClinicalData', () => {\n    it('should convert FHIR bundle to internal clinical data', () => {\n      const fhirResources = {\n        patient: {\n          resourceType: 'Patient',\n          id: 'patient-123',\n          active: true,\n          name: [\n            {\n              use: 'official',\n              family: 'Doe',\n              given: ['John']\n            }\n          ]\n        } as FhirPatient,\n        encounter: {\n          resourceType: 'Encounter',\n          id: 'encounter-123',\n          status: 'finished',\n          class: {\n            system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n            code: 'AMB',\n            display: 'Ambulatory'\n          },\n          subject: {\n            reference: 'Patient/patient-123'\n          }\n        } as FhirEncounter,\n        observations: [\n          {\n            resourceType: 'Observation',\n            id: 'obs-123',\n            status: 'final',\n            code: {\n              coding: [\n                {\n                  system: 'http://loinc.org',\n                  code: '8867-4',\n                  display: 'Heart rate'\n                }\n              ]\n            },\n            subject: {\n              reference: 'Patient/patient-123'\n            },\n            valueQuantity: {\n              value: 72,\n              unit: 'beats/min'\n            }\n          } as FhirObservation\n        ]\n      };\n\n      const internalData = convertFhirToClinicalData(fhirResources);\n\n      expect(internalData.patient.id).toBe('patient-123');\n      expect(internalData.encounter.id).toBe('encounter-123');\n      expect(internalData.observations).toHaveLength(1);\n      expect(internalData.observations[0].id).toBe('obs-123');\n    });\n  });\n\n  describe('validateFhirResource', () => {\n    it('should validate valid FHIR resources', () => {\n      const validPatient: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123',\n        active: true,\n        name: [{\n          family: 'Doe',\n          given: ['John']\n        }]\n      };\n\n      const result = validateFhirResource(validPatient);\n\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should detect invalid resource types', () => {\n      const invalidResource = {\n        resourceType: 'InvalidResource',\n        id: 'test-123'\n      } as any;\n\n      const result = validateFhirResource(invalidResource);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('Unsupported resource type: InvalidResource');\n    });\n\n    it('should detect missing required fields', () => {\n      const invalidPatient = {\n        resourceType: 'Patient',\n        // Missing id\n      } as any;\n\n      const result = validateFhirResource(invalidPatient);\n\n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('Missing required field: id');\n    });\n  });\n});\n\ndescribe('FHIR Adapters - Round-trip Tests', () => {\n  it('should convert Patient internal ‚Üí FHIR ‚Üí internal without data loss', () => {\n    const originalPatient: InternalPatient = {\n      id: 'patient-123',\n      firstName: 'John',\n      lastName: 'Doe',\n      dateOfBirth: '1990-01-01',\n      gender: 'male',\n      phone: '+1-555-123-4567',\n      email: 'john.doe@email.com',\n      address: {\n        street: '123 Main St',\n        city: 'Anytown',\n        state: 'ST',\n        zipCode: '12345',\n        country: 'US'\n      },\n      ssn: '123-45-6789',\n      isActive: true\n    };\n\n    const fhirPatient = convertPatientToFhir(originalPatient);\n    const roundTripPatient = convertFhirToPatient(fhirPatient);\n\n    expect(roundTripPatient.id).toBe(originalPatient.id);\n    expect(roundTripPatient.firstName).toBe(originalPatient.firstName);\n    expect(roundTripPatient.lastName).toBe(originalPatient.lastName);\n    expect(roundTripPatient.dateOfBirth).toBe(originalPatient.dateOfBirth);\n    expect(roundTripPatient.gender).toBe(originalPatient.gender);\n    expect(roundTripPatient.phone).toBe(originalPatient.phone);\n    expect(roundTripPatient.email).toBe(originalPatient.email);\n    expect(roundTripPatient.address?.street).toBe(originalPatient.address?.street);\n    expect(roundTripPatient.address?.city).toBe(originalPatient.address?.city);\n    expect(roundTripPatient.ssn).toBe(originalPatient.ssn);\n    expect(roundTripPatient.isActive).toBe(originalPatient.isActive);\n  });\n\n  it('should convert Encounter internal ‚Üí FHIR ‚Üí internal without data loss', () => {\n    const originalEncounter: InternalEncounter = {\n      id: 'encounter-123',\n      patientId: 'patient-123',\n      startDate: '2025-01-20T09:00:00Z',\n      endDate: '2025-01-20T10:00:00Z',\n      type: 'ambulatory',\n      status: 'finished',\n      reason: 'Annual checkup',\n      providerId: 'provider-456'\n    };\n\n    const fhirEncounter = convertEncounterToFhir(originalEncounter);\n    const roundTripEncounter = convertFhirToEncounter(fhirEncounter);\n\n    expect(roundTripEncounter.id).toBe(originalEncounter.id);\n    expect(roundTripEncounter.patientId).toBe(originalEncounter.patientId);\n    expect(roundTripEncounter.startDate).toBe(originalEncounter.startDate);\n    expect(roundTripEncounter.endDate).toBe(originalEncounter.endDate);\n    expect(roundTripEncounter.type).toBe(originalEncounter.type);\n    expect(roundTripEncounter.status).toBe(originalEncounter.status);\n    expect(roundTripEncounter.reason).toBe(originalEncounter.reason);\n    expect(roundTripEncounter.providerId).toBe(originalEncounter.providerId);\n  });\n\n  it('should convert Observation internal ‚Üí FHIR ‚Üí internal without data loss', () => {\n    const originalObservation: InternalObservation = {\n      id: 'obs-123',\n      patientId: 'patient-123',\n      encounterId: 'encounter-123',\n      type: 'vital_signs',\n      code: '8867-4',\n      codeSystem: 'http://loinc.org',\n      displayName: 'Heart rate',\n      value: 72,\n      unit: 'beats/min',\n      status: 'final',\n      effectiveDate: '2025-01-20T09:30:00Z',\n      category: 'vital-signs'\n    };\n\n    const fhirObservation = convertObservationToFhir(originalObservation);\n    const roundTripObservation = convertFhirToObservation(fhirObservation);\n\n    expect(roundTripObservation.id).toBe(originalObservation.id);\n    expect(roundTripObservation.patientId).toBe(originalObservation.patientId);\n    expect(roundTripObservation.encounterId).toBe(originalObservation.encounterId);\n    expect(roundTripObservation.type).toBe(originalObservation.type);\n    expect(roundTripObservation.code).toBe(originalObservation.code);\n    expect(roundTripObservation.codeSystem).toBe(originalObservation.codeSystem);\n    expect(roundTripObservation.displayName).toBe(originalObservation.displayName);\n    expect(roundTripObservation.value).toBe(originalObservation.value);\n    expect(roundTripObservation.unit).toBe(originalObservation.unit);\n    expect(roundTripObservation.status).toBe(originalObservation.status);\n    expect(roundTripObservation.effectiveDate).toBe(originalObservation.effectiveDate);\n    expect(roundTripObservation.category).toBe(originalObservation.category);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/__tests__/contracts.public-api.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/__tests__/contracts.public-api.test.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview FHIR Public API Contract Tests\n * @version 1.0.0\n * @author AiDuxCare Development Team\n * \n * These tests verify that ONLY the minimal agreed API is exported from src/core/fhir/index.ts\n * No internal utilities or implementation details should be exposed.\n */\n\nimport { describe, it, expect } from 'vitest';\n\n// Import the public API module\nimport * as FhirPublicAPI from '../index';\n\ndescribe('FHIR Public API Contract', () => {\n  describe('API Shape and Names', () => {\n    it('should export only the agreed minimal API functions', () => {\n      // Expected public API functions\n      const expectedFunctions = [\n        'toFhir',\n        'toFhirEncounter', \n        'toFhirObservation',\n        'fromFhir',\n        'validate',\n        'makeBundle',\n        'isFhirModuleReady',\n        'getFhirModuleInfo'\n      ];\n\n      // Check that all expected functions are exported\n      expectedFunctions.forEach(funcName => {\n        expect(FhirPublicAPI).toHaveProperty(funcName);\n        expect(typeof FhirPublicAPI[funcName as keyof typeof FhirPublicAPI]).toBe('function');\n      });\n\n      // Check that no unexpected functions are exported\n      const exportedKeys = Object.keys(FhirPublicAPI);\n      const unexpectedExports = exportedKeys.filter(key => \n        !expectedFunctions.includes(key) && \n        !key.startsWith('_') && \n        !key.startsWith('type') &&\n        key !== 'FHIR_MODULE_VERSION' &&\n        key !== 'SUPPORTED_PROFILES' &&\n        key !== 'SUPPORTED_RESOURCES' &&\n        key !== 'FHIR_CONFIG'\n      );\n\n      expect(unexpectedExports).toEqual([]);\n    });\n\n    it('should export only the agreed constants', () => {\n      const expectedConstants = [\n        'FHIR_MODULE_VERSION',\n        'SUPPORTED_PROFILES', \n        'SUPPORTED_RESOURCES',\n        'FHIR_CONFIG'\n      ];\n\n      expectedConstants.forEach(constName => {\n        expect(FhirPublicAPI).toHaveProperty(constName);\n      });\n    });\n\n    it('should export only the agreed types from public types', () => {\n      // Types are exported via export type * from './types/public'\n      // but they may not be directly accessible as properties in runtime\n\n      // Check that types are exported (they should be available)\n      // Note: Types are exported via export type * from './types/public'\n      // but they may not be directly accessible as properties in runtime\n    });\n  });\n\n  describe('API Function Signatures', () => {\n    it('should have toFhir with correct signature', () => {\n      expect(FhirPublicAPI.toFhir).toBeDefined();\n      expect(typeof FhirPublicAPI.toFhir).toBe('function');\n      \n      // Check that it's the patient conversion function\n      expect(FhirPublicAPI.toFhir.name).toBe('toFhir');\n    });\n\n    it('should have toFhirEncounter with correct signature', () => {\n      expect(FhirPublicAPI.toFhirEncounter).toBeDefined();\n      expect(typeof FhirPublicAPI.toFhirEncounter).toBe('function');\n      \n      // Check that it's the encounter conversion function\n      expect(FhirPublicAPI.toFhirEncounter.name).toBe('toFhirEncounter');\n    });\n\n    it('should have toFhirObservation with correct signature', () => {\n      expect(FhirPublicAPI.toFhirObservation).toBeDefined();\n      expect(typeof FhirPublicAPI.toFhirObservation).toBe('function');\n      \n      // Check that it's the observation conversion function\n      expect(FhirPublicAPI.toFhirObservation.name).toBe('toFhirObservation');\n    });\n\n    it('should have fromFhir with correct signature', () => {\n      expect(FhirPublicAPI.fromFhir).toBeDefined();\n      expect(typeof FhirPublicAPI.fromFhir).toBe('function');\n      \n      // Check that it's the conversion from FHIR function\n      expect(FhirPublicAPI.fromFhir.name).toBe('fromFhir');\n    });\n\n    it('should have validate with correct signature', () => {\n      expect(FhirPublicAPI.validate).toBeDefined();\n      expect(typeof FhirPublicAPI.validate).toBe('function');\n      \n      // Check that it's the validation function\n      expect(FhirPublicAPI.validate.name).toBe('validate');\n    });\n\n    it('should have makeBundle with correct signature', () => {\n      expect(FhirPublicAPI.makeBundle).toBeDefined();\n      expect(typeof FhirPublicAPI.makeBundle).toBe('function');\n      \n      // Check that it's the bundle creation function\n      expect(FhirPublicAPI.makeBundle.name).toBe('makeBundle');\n    });\n  });\n\n  describe('No Internal Utilities Exposed', () => {\n    it('should not expose internal conversion functions', () => {\n      const internalFunctions = [\n        'convertPatientToFhir',\n        'convertEncounterToFhir', \n        'convertObservationToFhir',\n        'convertFhirToPatient',\n        'convertFhirToEncounter',\n        'convertFhirToObservation'\n      ];\n\n      internalFunctions.forEach(funcName => {\n        expect(FhirPublicAPI).not.toHaveProperty(funcName);\n      });\n    });\n\n    it('should not expose internal validation functions', () => {\n      const internalValidators = [\n        'validateCaCorePatient',\n        'validateCaCoreEncounter',\n        'validateCaCoreObservation',\n        'validateUsCorePatient',\n        'validateUsCoreEncounter',\n        'validateUsCoreObservation'\n      ];\n\n      internalValidators.forEach(funcName => {\n        expect(FhirPublicAPI).not.toHaveProperty(funcName);\n      });\n    });\n\n    it('should not expose internal utility functions', () => {\n      const internalUtils = [\n        'createFhirBundle',\n        'validateFhirJson',\n        'parseFhirResource'\n      ];\n\n      internalUtils.forEach(funcName => {\n        expect(FhirPublicAPI).not.toHaveProperty(funcName);\n      });\n    });\n\n    it('should not expose internal types', () => {\n      const internalTypes = [\n        'InternalPatient',\n        'InternalEncounter',\n        'InternalObservation',\n        'PatientValidationResult',\n        'EncounterValidationResult',\n        'ObservationValidationResult',\n        'PatientMapping',\n        'EncounterMapping',\n        'ObservationMapping'\n      ];\n\n      internalTypes.forEach(typeName => {\n        expect(FhirPublicAPI).not.toHaveProperty(typeName);\n      });\n    });\n  });\n\n  describe('Constants and Configuration', () => {\n    it('should export FHIR_MODULE_VERSION as string', () => {\n      expect(typeof FhirPublicAPI.FHIR_MODULE_VERSION).toBe('string');\n      expect(FhirPublicAPI.FHIR_MODULE_VERSION).toBe('1.1.0');\n    });\n\n    it('should export SUPPORTED_PROFILES as readonly array', () => {\n      expect(Array.isArray(FhirPublicAPI.SUPPORTED_PROFILES)).toBe(true);\n      expect(FhirPublicAPI.SUPPORTED_PROFILES).toEqual(['CA_CORE', 'US_CORE']);\n      \n      // Should be readonly (TypeScript readonly, not runtime immutable)\n      expect(FhirPublicAPI.SUPPORTED_PROFILES).toHaveLength(2);\n    });\n\n    it('should export SUPPORTED_RESOURCES as readonly array', () => {\n      expect(Array.isArray(FhirPublicAPI.SUPPORTED_RESOURCES)).toBe(true);\n      expect(FhirPublicAPI.SUPPORTED_RESOURCES).toEqual(['Patient', 'Encounter', 'Observation']);\n      \n      // Should be readonly (TypeScript readonly, not runtime immutable)\n      expect(FhirPublicAPI.SUPPORTED_RESOURCES).toHaveLength(3);\n    });\n\n    it('should export FHIR_CONFIG with correct structure', () => {\n      expect(FhirPublicAPI.FHIR_CONFIG).toBeDefined();\n      expect(typeof FhirPublicAPI.FHIR_CONFIG).toBe('object');\n      \n      expect(FhirPublicAPI.FHIR_CONFIG).toHaveProperty('version');\n      expect(FhirPublicAPI.FHIR_CONFIG).toHaveProperty('supportedProfiles');\n      expect(FhirPublicAPI.FHIR_CONFIG).toHaveProperty('supportedResources');\n      expect(FhirPublicAPI.FHIR_CONFIG).toHaveProperty('defaultProfile');\n      expect(FhirPublicAPI.FHIR_CONFIG).toHaveProperty('strictValidation');\n      expect(FhirPublicAPI.FHIR_CONFIG).toHaveProperty('includeMeta');\n    });\n  });\n\n  describe('Module Health Functions', () => {\n    it('should export isFhirModuleReady function', () => {\n      expect(FhirPublicAPI.isFhirModuleReady).toBeDefined();\n      expect(typeof FhirPublicAPI.isFhirModuleReady).toBe('function');\n    });\n\n    it('should export getFhirModuleInfo function', () => {\n      expect(FhirPublicAPI.getFhirModuleInfo).toBeDefined();\n      expect(typeof FhirPublicAPI.getFhirModuleInfo).toBe('function');\n    });\n\n    it('should return module info with correct structure', () => {\n      const moduleInfo = FhirPublicAPI.getFhirModuleInfo();\n      \n      expect(moduleInfo).toHaveProperty('version');\n      expect(moduleInfo).toHaveProperty('status');\n      expect(moduleInfo).toHaveProperty('supportedProfiles');\n      expect(moduleInfo).toHaveProperty('supportedResources');\n      expect(moduleInfo).toHaveProperty('config');\n      expect(moduleInfo).toHaveProperty('timestamp');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/__tests__/fhirTypes.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/__tests__/fhirTypes.test.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\n\nimport type { \n  FhirResource, \n  FhirPatient, \n  FhirEncounter, \n  FhirObservation,\n  VitalSignsObservation \n} from '../types';\n\ndescribe('FHIR Types - Basic Structure', () => {\n  describe('FhirResource', () => {\n    it('should have required base properties', () => {\n      const baseResource: FhirResource = {\n        resourceType: 'Patient',\n        id: 'test-123'\n      };\n\n      expect(baseResource.resourceType).toBe('Patient');\n      expect(baseResource.id).toBe('test-123');\n      expect(baseResource.meta).toBeUndefined();\n    });\n\n    it('should support optional meta property', () => {\n      const resourceWithMeta: FhirResource = {\n        resourceType: 'Patient',\n        id: 'test-123',\n        meta: {\n          versionId: '1',\n          lastUpdated: '2025-01-20T10:00:00Z'\n        }\n      };\n\n      expect(resourceWithMeta.meta?.versionId).toBe('1');\n      expect(resourceWithMeta.meta?.lastUpdated).toBe('2025-01-20T10:00:00Z');\n    });\n  });\n\n  describe('FhirPatient', () => {\n    it('should have correct resourceType', () => {\n      const patient: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123',\n        active: true\n      };\n\n      expect(patient.resourceType).toBe('Patient');\n      expect(patient.active).toBe(true);\n    });\n\n    it('should support all optional patient fields', () => {\n      const fullPatient: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-full',\n        identifier: [\n          {\n            system: 'http://hl7.org/fhir/sid/us-ssn',\n            value: '123-45-6789'\n          }\n        ],\n        active: true,\n        name: [\n          {\n            use: 'official',\n            family: 'Doe',\n            given: ['John']\n          }\n        ],\n        telecom: [\n          {\n            system: 'phone',\n            value: '+1-555-123-4567',\n            use: 'home'\n          }\n        ],\n        gender: 'male',\n        birthDate: '1990-01-01',\n        address: [\n          {\n            use: 'home',\n            type: 'physical',\n            text: '123 Main St, Anytown, ST 12345',\n            line: ['123 Main St'],\n            city: 'Anytown',\n            state: 'ST',\n            postalCode: '12345',\n            country: 'US'\n          }\n        ]\n      };\n\n      expect(fullPatient.identifier).toHaveLength(1);\n      expect(fullPatient.name).toHaveLength(1);\n      expect(fullPatient.telecom).toHaveLength(1);\n      expect(fullPatient.address).toHaveLength(1);\n      expect(fullPatient.gender).toBe('male');\n      expect(fullPatient.birthDate).toBe('1990-01-01');\n    });\n  });\n\n  describe('FhirEncounter', () => {\n    it('should have correct resourceType and required fields', () => {\n      const encounter: FhirEncounter = {\n        resourceType: 'Encounter',\n        id: 'encounter-123',\n        status: 'finished',\n        class: {\n          system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n          code: 'AMB',\n          display: 'Ambulatory'\n        }\n      };\n\n      expect(encounter.resourceType).toBe('Encounter');\n      expect(encounter.status).toBe('finished');\n      expect(encounter.class.code).toBe('AMB');\n    });\n\n    it('should support all encounter status values', () => {\n      const validStatuses: FhirEncounter['status'][] = [\n        'planned', 'arrived', 'triaged', 'in-progress',\n        'onleave', 'finished', 'cancelled', 'entered-in-error', 'unknown'\n      ];\n\n      validStatuses.forEach(status => {\n        const encounter: FhirEncounter = {\n          resourceType: 'Encounter',\n          id: 'test',\n          status,\n          class: {\n            system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n            code: 'AMB',\n            display: 'Ambulatory'\n          }\n        };\n        expect(encounter.status).toBe(status);\n      });\n    });\n  });\n\n  describe('FhirObservation', () => {\n    it('should have correct resourceType and required fields', () => {\n      const observation: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'obs-123',\n        status: 'final',\n        code: {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '8867-4',\n              display: 'Heart rate'\n            }\n          ]\n        }\n      };\n\n      expect(observation.resourceType).toBe('Observation');\n      expect(observation.status).toBe('final');\n      expect(observation.code.coding[0].code).toBe('8867-4');\n    });\n\n    it('should support valueQuantity for numeric observations', () => {\n      const bpObservation: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'bp-123',\n        status: 'final',\n        code: {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '85354-9',\n              display: 'Blood pressure panel'\n            }\n          ]\n        },\n        valueQuantity: {\n          value: 120,\n          unit: 'mmHg',\n          system: 'http://unitsofmeasure.org',\n          code: 'mm[Hg]'\n        }\n      };\n\n      expect(bpObservation.valueQuantity?.value).toBe(120);\n      expect(bpObservation.valueQuantity?.unit).toBe('mmHg');\n    });\n\n    it('should support valueString for text observations', () => {\n      const textObservation: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'text-123',\n        status: 'final',\n        code: {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '75275-8',\n              display: 'Pain assessment'\n            }\n          ]\n        },\n        valueString: 'Moderate pain in lower back'\n      };\n\n      expect(textObservation.valueString).toBe('Moderate pain in lower back');\n    });\n  });\n\n  describe('VitalSignsObservation', () => {\n    it('should extend FhirObservation with vital signs specific fields', () => {\n      const vitalSign: VitalSignsObservation = {\n        resourceType: 'Observation',\n        id: 'vital-123',\n        status: 'final',\n        code: {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '8867-4',\n              display: 'Heart rate'\n            }\n          ]\n        },\n        category: [\n          {\n            coding: [\n              {\n                system: 'http://terminology.hl7.org/CodeSystem/observation-category',\n                code: 'vital-signs',\n                display: 'Vital Signs'\n              }\n            ]\n          }\n        ],\n        valueQuantity: {\n          value: 72,\n          unit: 'beats/min',\n          system: 'http://unitsofmeasure.org',\n          code: '/min'\n        }\n      };\n\n      expect(vitalSign.category[0].coding[0].code).toBe('vital-signs');\n      expect(vitalSign.valueQuantity?.value).toBe(72);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/__tests__/snapshots/encounter.snapshot.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/__tests__/snapshots/encounter.snapshot.test.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/core/fhir/__tests__/snapshots/encounter.snapshot.test.ts\nimport { describe, it, expect } from 'vitest';\n\nimport { convertEncounterToFhir } from '../../adapters/internalToFhir';\nimport { scrubFhirResource } from '../../../../../tests/utils/fhirTestUtils';\n\ndescribe('FHIR Encounter snapshot', () => {\n  it('matches expected snapshot for an ambulatory encounter', () => {\n    const internalEncounter = {\n      id: 'enc-1001',\n      patientId: 'patient-123',\n      startDate: '2025-01-20T09:00:00Z',\n      endDate: '2025-01-20T10:00:00Z',\n      type: 'ambulatory' as const,\n      status: 'finished' as const,\n      reason: 'Consulta de seguimiento',\n      providerId: 'provider-456',\n      location: 'Consultorio 3'\n    };\n\n    const fhirEncounter = convertEncounterToFhir(internalEncounter);\n    \n    // Validaci√≥n b√°sica previa al snapshot\n    expect(fhirEncounter.resourceType).toBe('Encounter');\n    expect(fhirEncounter.status).toBe('finished');\n    \n    // Limpiar campos din√°micos antes del snapshot\n    const scrubbedEncounter = scrubFhirResource(fhirEncounter);\n    expect(scrubbedEncounter).toMatchSnapshot();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/__tests__/snapshots/patient.snapshot.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/__tests__/snapshots/patient.snapshot.test.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/core/fhir/__tests__/snapshots/patient.snapshot.test.ts\nimport { describe, it, expect } from 'vitest';\n\nimport { convertPatientToFhir } from '../../adapters/internalToFhir';\nimport { scrubFhirResource } from '../../../../../tests/utils/fhirTestUtils';\n\ndescribe('FHIR Patient snapshot', () => {\n  it('matches expected snapshot for a representative internal patient', () => {\n    const internalPatient = {\n      id: 'pt-0001',\n      firstName: 'Mar√≠a',\n      lastName: 'Garc√≠a',\n      dateOfBirth: '1988-03-15',\n      gender: 'female' as const,\n      email: 'maria.garcia@email.com',\n      phone: '+34 600 123 456',\n      address: {\n        street: 'Calle Mayor 123',\n        city: 'Madrid',\n        state: 'Madrid',\n        zipCode: '28001',\n        country: 'Spain'\n      },\n      medicalRecordNumber: 'MRN-001',\n      insuranceNumber: 'INS-001',\n      ssn: '123-45-6789',\n      isActive: true\n    };\n\n    const fhirPatient = convertPatientToFhir(internalPatient);\n    \n    // Validaci√≥n b√°sica previa al snapshot\n    expect(fhirPatient.resourceType).toBe('Patient');\n    \n    // Limpiar campos din√°micos antes del snapshot\n    const scrubbedPatient = scrubFhirResource(fhirPatient);\n    expect(scrubbedPatient).toMatchSnapshot();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/__tests__/validators.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/__tests__/validators.test.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\n\nimport {\n  validateCaCorePatient,\n  validateCaCoreEncounter,\n  validateCaCoreObservation,\n  validateCaCoreBundle\n} from '../validators/caCoreValidator';\nimport {\n  validateUsCorePatient,\n  validateUsCoreEncounter,\n  validateUsCoreObservation,\n  validateUsCoreBundle\n} from '../validators/usCoreValidator';\nimport type { FhirPatient, FhirEncounter, FhirObservation } from '../types';\n\ndescribe('CA Core Validator', () => {\n  describe('validateCaCorePatient', () => {\n    it('should validate a compliant CA Core Patient', () => {\n      const compliantPatient: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123',\n        active: true,\n        name: [\n          {\n            use: 'official',\n            family: 'Doe',\n            given: ['John']\n          }\n        ],\n        gender: 'male',\n        birthDate: '1990-01-01',\n        identifier: [\n          {\n            system: 'http://hl7.org/fhir/sid/ca-hin',\n            value: 'CA123456789'\n          }\n        ]\n      };\n\n      const result = validateCaCorePatient(compliantPatient);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should detect missing required fields for CA Core', () => {\n      const nonCompliantPatient: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123'\n        // Missing required fields\n      };\n\n      const result = validateCaCorePatient(nonCompliantPatient);\n\n      expect(result.valid).toBe(false);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors.length).toBeGreaterThan(0);\n      expect(result.errors.some(e => e.message.includes('name'))).toBe(true);\n      expect(result.errors.some(e => e.message.includes('gender'))).toBe(true);\n    });\n\n    it('should validate Canadian Health Information Number (HIN)', () => {\n      const patientWithHIN: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123',\n        active: true,\n        name: [\n          {\n            use: 'official',\n            family: 'Smith',\n            given: ['Jane']\n          }\n        ],\n        gender: 'female',\n        identifier: [\n          {\n            system: 'http://hl7.org/fhir/sid/ca-hin',\n            value: 'CA987654321'\n          }\n        ]\n      };\n\n      const result = validateCaCorePatient(patientWithHIN);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should warn about missing address information', () => {\n      const patientWithoutAddress: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123',\n        active: true,\n        name: [\n          {\n            use: 'official',\n            family: 'Johnson',\n            given: ['Bob']\n          }\n        ],\n        gender: 'male'\n      };\n\n      const result = validateCaCorePatient(patientWithoutAddress);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should validate address country format', () => {\n      const patientWithUSAddress: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123',\n        active: true,\n        name: [\n          {\n            use: 'official',\n            family: 'Wilson',\n            given: ['Alice']\n          }\n        ],\n        gender: 'female',\n        address: [\n          {\n            line: ['123 Main St'],\n            city: 'Toronto',\n            state: 'ON',\n            postalCode: 'M5V 3A8',\n            country: 'US'\n          }\n        ]\n      };\n\n      const result = validateCaCorePatient(patientWithUSAddress);\n\n      expect(result.valid).toBe(false);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors.some(e => e.message.includes('Canadian address format'))).toBe(true);\n    });\n  });\n\n  describe('validateCaCoreEncounter', () => {\n    it('should validate a compliant CA Core Encounter', () => {\n      const compliantEncounter: FhirEncounter = {\n        resourceType: 'Encounter',\n        id: 'encounter-123',\n        status: 'finished',\n        class: {\n          system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n          code: 'AMB',\n          display: 'Ambulatory'\n        },\n        subject: {\n          reference: 'Patient/patient-123',\n          display: 'John Doe'\n        },\n        period: {\n          start: '2023-01-01T10:00:00Z',\n          end: '2023-01-01T11:00:00Z'\n        }\n      };\n\n      const result = validateCaCoreEncounter(compliantEncounter);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should detect missing required fields for CA Core Encounter', () => {\n      const nonCompliantEncounter: FhirEncounter = {\n        resourceType: 'Encounter',\n        id: 'encounter-123'\n        // Missing required fields\n      };\n\n      const result = validateCaCoreEncounter(nonCompliantEncounter);\n\n      expect(result.valid).toBe(false);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors.length).toBeGreaterThan(0);\n      expect(result.errors.some(e => e.message.includes('status'))).toBe(true);\n      expect(result.errors.some(e => e.message.includes('class'))).toBe(true);\n      expect(result.errors.some(e => e.message.includes('subject'))).toBe(true);\n    });\n\n    it('should validate encounter status values', () => {\n      const encounterWithInvalidStatus: FhirEncounter = {\n        resourceType: 'Encounter',\n        id: 'encounter-123',\n        status: 'invalid-status' as any,\n        class: {\n          system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n          code: 'AMB',\n          display: 'Ambulatory'\n        },\n        subject: {\n          reference: 'Patient/patient-123'\n        }\n      };\n\n      const result = validateCaCoreEncounter(encounterWithInvalidStatus);\n\n      expect(result.valid).toBe(false);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors.some(e => e.message.includes('status'))).toBe(true);\n    });\n\n    it('should validate subject reference format', () => {\n      const encounterWithInvalidSubject: FhirEncounter = {\n        resourceType: 'Encounter',\n        id: 'encounter-123',\n        status: 'finished',\n        class: {\n          system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n          code: 'AMB',\n          display: 'Ambulatory'\n        },\n        subject: {\n          reference: 'InvalidReference',\n          display: 'Invalid Reference'\n        }\n      };\n\n      const result = validateCaCoreEncounter(encounterWithInvalidSubject);\n\n      expect(result.valid).toBe(false);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors.some(e => e.message.includes('Patient/'))).toBe(true);\n    });\n  });\n\n  describe('validateCaCoreObservation', () => {\n    it('should validate a compliant CA Core Observation', () => {\n      const compliantObservation: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'observation-123',\n        status: 'final',\n        code: {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '8302-2',\n              display: 'Body height'\n            }\n          ],\n          text: 'Body height'\n        },\n        subject: {\n          reference: 'Patient/patient-123',\n          display: 'John Doe'\n        },\n        valueQuantity: {\n          value: 175,\n          unit: 'cm',\n          system: 'http://unitsofmeasure.org',\n          code: 'cm'\n        }\n      };\n\n      const result = validateCaCoreObservation(compliantObservation);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should detect missing required fields for CA Core Observation', () => {\n      const nonCompliantObservation: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'observation-123'\n        // Missing required fields\n      };\n\n      const result = validateCaCoreObservation(nonCompliantObservation);\n\n      expect(result.valid).toBe(false);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors.length).toBeGreaterThan(0);\n      expect(result.errors.some(e => e.message.includes('status'))).toBe(true);\n      expect(result.errors.some(e => e.message.includes('code'))).toBe(true);\n      expect(result.errors.some(e => e.message.includes('subject'))).toBe(true);\n    });\n\n    it('should validate observation status values', () => {\n      const observationWithInvalidStatus: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'observation-123',\n        status: 'invalid-status' as any,\n        code: {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '8302-2',\n              display: 'Body height'\n            }\n          ]\n        },\n        subject: {\n          reference: 'Patient/patient-123'\n        }\n      };\n\n      const result = validateCaCoreObservation(observationWithInvalidStatus);\n\n      expect(result.valid).toBe(false);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors.some(e => e.message.includes('status'))).toBe(true);\n    });\n\n    it('should validate observation value structure', () => {\n      const observationWithoutValue: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'observation-123',\n        status: 'final',\n        code: {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '8302-2',\n              display: 'Body height'\n            }\n          ]\n        },\n        subject: {\n          reference: 'Patient/patient-123'\n        }\n        // Missing value\n      };\n\n      const result = validateCaCoreObservation(observationWithoutValue);\n\n      expect(result.valid).toBe(false);\n      expect(result.profile).toBe('CA_CORE');\n      expect(result.errors.some(e => e.message.includes('value'))).toBe(true);\n    });\n  });\n\n  describe('validateCaCoreBundle', () => {\n    it('should validate a complete CA Core compliant bundle', () => {\n      const bundle = {\n        patient: {\n          resourceType: 'Patient',\n          id: 'patient-123',\n          name: [\n            {\n              family: 'Doe',\n              given: ['John']\n            }\n          ],\n          gender: 'male'\n        } as FhirPatient,\n        encounter: {\n          resourceType: 'Encounter',\n          id: 'encounter-123',\n          status: 'finished',\n          class: {\n            system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n            code: 'AMB',\n            display: 'Ambulatory'\n          },\n          subject: {\n            reference: 'Patient/patient-123'\n          }\n        } as FhirEncounter,\n        observations: [\n          {\n            resourceType: 'Observation',\n            id: 'observation-123',\n            status: 'final',\n            code: {\n              coding: [\n                {\n                  system: 'http://loinc.org',\n                  code: '8302-2',\n                  display: 'Body height'\n                }\n              ]\n            },\n            subject: {\n              reference: 'Patient/patient-123'\n            },\n            valueQuantity: {\n              value: 175,\n              unit: 'cm'\n            }\n          } as FhirObservation\n        ]\n      };\n\n      const result = validateCaCoreBundle(bundle);\n\n      expect(result.overallValid).toBe(true);\n      expect(result.patientValidation?.valid).toBe(true);\n      expect(result.encounterValidation?.valid).toBe(true);\n      expect(result.observationValidations?.[0].valid).toBe(true);\n      expect(result.summary.totalResources).toBe(3);\n      expect(result.summary.validResources).toBe(3);\n    });\n  });\n});\n\ndescribe('US Core Validator', () => {\n  describe('validateUsCorePatient', () => {\n    it('should validate a compliant US Core Patient', () => {\n      const compliantPatient: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123',\n        active: true,\n        name: [\n          {\n            use: 'official',\n            family: 'Doe',\n            given: ['John']\n          }\n        ],\n        gender: 'male',\n        birthDate: '1990-01-01',\n        identifier: [\n          {\n            system: 'http://hl7.org/fhir/sid/us-ssn',\n            value: '123-45-6789'\n          }\n        ]\n      };\n\n      const result = validateUsCorePatient(compliantPatient);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('US_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should detect missing required fields for US Core', () => {\n      const nonCompliantPatient: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123'\n        // Missing required fields\n      };\n\n      const result = validateUsCorePatient(nonCompliantPatient);\n\n      expect(result.valid).toBe(false);\n      expect(result.profile).toBe('US_CORE');\n      expect(result.errors.length).toBeGreaterThan(0);\n      expect(result.errors.some(e => e.message.includes('name'))).toBe(true);\n      expect(result.errors.some(e => e.message.includes('gender'))).toBe(true);\n    });\n\n    it('should validate US address format', () => {\n      const patientWithUSAddress: FhirPatient = {\n        resourceType: 'Patient',\n        id: 'patient-123',\n        active: true,\n        name: [\n          {\n            use: 'official',\n            family: 'Smith',\n            given: ['Jane']\n          }\n        ],\n        gender: 'female',\n        address: [\n          {\n            line: ['123 Main St'],\n            city: 'New York',\n            state: 'NY',\n            postalCode: '10001',\n            country: 'US'\n          }\n        ]\n      };\n\n      const result = validateUsCorePatient(patientWithUSAddress);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('US_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n  });\n\n  describe('validateUsCoreEncounter', () => {\n    it('should validate a compliant US Core Encounter', () => {\n      const compliantEncounter: FhirEncounter = {\n        resourceType: 'Encounter',\n        id: 'encounter-123',\n        status: 'finished',\n        class: {\n          system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n          code: 'AMB',\n          display: 'Ambulatory'\n        },\n        subject: {\n          reference: 'Patient/patient-123',\n          display: 'John Doe'\n        }\n      };\n\n      const result = validateUsCoreEncounter(compliantEncounter);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('US_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n  });\n\n  describe('validateUsCoreObservation', () => {\n    it('should validate a compliant US Core Observation', () => {\n      const compliantObservation: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'observation-123',\n        status: 'final',\n        code: {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '8302-2',\n              display: 'Body height'\n            }\n          ]\n        },\n        subject: {\n          reference: 'Patient/patient-123',\n          display: 'John Doe'\n        },\n        valueQuantity: {\n          value: 175,\n          unit: 'cm',\n          system: 'http://unitsofmeasure.org',\n          code: 'cm'\n        }\n      };\n\n      const result = validateUsCoreObservation(compliantObservation);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('US_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should validate vital signs observations with LOINC coding', () => {\n      const vitalSignsObservation: FhirObservation = {\n        resourceType: 'Observation',\n        id: 'observation-123',\n        status: 'final',\n        category: [\n          {\n            coding: [\n              {\n                system: 'http://terminology.hl7.org/CodeSystem/observation-category',\n                code: 'vital-signs',\n                display: 'Vital Signs'\n              }\n            ]\n          }\n        ],\n        code: {\n          coding: [\n            {\n              system: 'http://loinc.org',\n              code: '8302-2',\n              display: 'Body height'\n            }\n          ]\n        },\n        subject: {\n          reference: 'Patient/patient-123'\n        },\n        valueQuantity: {\n          value: 175,\n          unit: 'cm'\n        }\n      };\n\n      const result = validateUsCoreObservation(vitalSignsObservation);\n\n      expect(result.valid).toBe(true);\n      expect(result.profile).toBe('US_CORE');\n      expect(result.errors).toHaveLength(0);\n    });\n  });\n\n  describe('validateUsCoreBundle', () => {\n    it('should validate a complete US Core compliant bundle', () => {\n      const bundle = {\n        patient: {\n          resourceType: 'Patient',\n          id: 'patient-123',\n          name: [\n            {\n              family: 'Doe',\n              given: ['John']\n            }\n          ],\n          gender: 'male'\n        } as FhirPatient,\n        encounter: {\n          resourceType: 'Encounter',\n          id: 'encounter-123',\n          status: 'finished',\n          class: {\n            system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n            code: 'AMB',\n            display: 'Ambulatory'\n          },\n          subject: {\n            reference: 'Patient/patient-123'\n          }\n        } as FhirEncounter,\n        observations: [\n          {\n            resourceType: 'Observation',\n            id: 'observation-123',\n            status: 'final',\n            code: {\n              coding: [\n                {\n                  system: 'http://loinc.org',\n                  code: '8302-2',\n                  display: 'Body height'\n                }\n              ]\n            },\n            subject: {\n              reference: 'Patient/patient-123'\n            },\n            valueQuantity: {\n              value: 175,\n              unit: 'cm'\n            }\n          } as FhirObservation\n        ]\n      };\n\n      const result = validateUsCoreBundle(bundle);\n\n      expect(result.overallValid).toBe(true);\n      expect(result.patientValidation?.valid).toBe(true);\n      expect(result.encounterValidation?.valid).toBe(true);\n      expect(result.observationValidations?.[0].valid).toBe(true);\n      expect(result.summary.totalResources).toBe(3);\n      expect(result.summary.validResources).toBe(3);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/adapters/fhirToInternal.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/adapters/fhirToInternal.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview FHIR to Internal Adapter - Lightweight Implementation\n * @version 1.0.0\n * @author AiDuxCare Development Team\n * @compliance FHIR R4 + CA Core + US Core\n */\n\nimport type { \n  FhirPatient, \n  FhirEncounter, \n  FhirObservation \n} from '../types';\n\nimport type { \n  InternalPatient,\n  InternalEncounter,\n  InternalObservation \n} from './internalToFhir';\n\n/**\n * Converts FHIR Patient resource to internal patient data\n */\nexport function convertFhirToPatient(\n  fhirPatient: FhirPatient\n): InternalPatient {\n  const internalPatient: InternalPatient = {\n    id: fhirPatient.id,\n    firstName: '',\n    lastName: '',\n    dateOfBirth: fhirPatient.birthDate || '',\n    gender: fhirPatient.gender || 'unknown'\n  };\n\n  // Extract name information\n  if (fhirPatient.name && fhirPatient.name.length > 0) {\n    const officialName = fhirPatient.name.find(n => n.use === 'official') || fhirPatient.name[0];\n    if (officialName) {\n      internalPatient.firstName = officialName.given?.[0] || '';\n      internalPatient.lastName = officialName.family || '';\n    }\n  }\n\n  // Extract contact information\n  if (fhirPatient.telecom) {\n    const email = fhirPatient.telecom.find(t => t.system === 'email');\n    const phone = fhirPatient.telecom.find(t => t.system === 'phone');\n    \n    if (email) {\n      internalPatient.email = email.value;\n    }\n    if (phone) {\n      internalPatient.phone = phone.value;\n    }\n  }\n\n  // Extract address information\n  if (fhirPatient.address && fhirPatient.address.length > 0) {\n    const homeAddress = fhirPatient.address.find(a => a.use === 'home') || fhirPatient.address[0];\n    if (homeAddress) {\n      internalPatient.address = {\n        street: homeAddress.line?.[0] || '',\n        city: homeAddress.city || '',\n        state: homeAddress.state || '',\n        postalCode: homeAddress.postalCode || '',\n        country: homeAddress.country || ''\n      };\n    }\n  }\n\n  // Extract active status\n  if (fhirPatient.active !== undefined) {\n    internalPatient.isActive = fhirPatient.active;\n  }\n\n  // Extract identifiers\n  if (fhirPatient.identifier) {\n    const mrn = fhirPatient.identifier.find(i => i.use === 'official');\n    const insurance = fhirPatient.identifier.find(i => i.use === 'secondary');\n    const ssn = fhirPatient.identifier.find(i => i.system?.includes('us-ssn'));\n    \n    if (mrn) {\n      internalPatient.medicalRecordNumber = mrn.value;\n    }\n    if (insurance) {\n      internalPatient.insuranceNumber = insurance.value;\n    }\n    if (ssn) {\n      internalPatient.ssn = ssn.value;\n    }\n  }\n\n  return internalPatient;\n}\n\n/**\n * FHIR to Internal Encounter type mapping table\n * Maps FHIR v3-ActCode values to internal encounter types\n */\nconst FHIR_TO_INTERNAL_ENCOUNTER_MAP: Record<string, InternalEncounter['type']> = {\n  'EMER': 'emergency',\n  'IMP': 'inpatient',\n  'OUT': 'outpatient', // Keep for backward compatibility, but AMB maps to both\n  'AMB': 'ambulatory',\n  'VR': 'ambulatory', // Virtual maps to ambulatory for internal representation\n  'HH': 'ambulatory', // Home health maps to ambulatory for internal representation\n  'FU': 'follow_up',\n  'DIS': 'discharge'\n};\n\n/**\n * Converts FHIR Encounter resource to internal encounter data\n */\nexport function convertFhirToEncounter(\n  fhirEncounter: FhirEncounter\n): InternalEncounter {\n  // Map FHIR status to internal status\n  const statusMap: Record<FhirEncounter['status'], InternalEncounter['status']> = {\n    'planned': 'scheduled',\n    'arrived': 'scheduled',\n    'triaged': 'scheduled',\n    'in-progress': 'in_progress',\n    'onleave': 'in_progress',\n    'finished': 'finished',\n    'completed': 'completed',\n    'cancelled': 'cancelled',\n    'entered-in-error': 'cancelled',\n    'unknown': 'scheduled'\n  };\n\n  const internalEncounter: InternalEncounter = {\n    id: fhirEncounter.id,\n    patientId: '',\n    startDate: '',\n    type: 'initial',\n    status: statusMap[fhirEncounter.status],\n    reason: '',\n    providerId: ''\n  };\n\n  // Extract patient reference\n  if (fhirEncounter.subject) {\n    const patientRef = fhirEncounter.subject.reference;\n    if (patientRef.startsWith('Patient/')) {\n      internalEncounter.patientId = patientRef.substring(8);\n    }\n  }\n\n  // Extract period information\n  if (fhirEncounter.period) {\n    internalEncounter.startDate = fhirEncounter.period.start || '';\n    internalEncounter.endDate = fhirEncounter.period.end;\n  }\n\n  // Extract encounter type from type array first, then fall back to class.code\n  if (fhirEncounter.type && fhirEncounter.type.length > 0) {\n    const encounterType = fhirEncounter.type[0];\n    if (encounterType.coding && encounterType.coding.length > 0) {\n      const coding = encounterType.coding[0];\n      internalEncounter.type = FHIR_TO_INTERNAL_ENCOUNTER_MAP[coding.code] || 'initial';\n    }\n    internalEncounter.reason = encounterType.text || '';\n  } else if (fhirEncounter.class && fhirEncounter.class.code) {\n    // Fall back to class.code if type is not available\n    internalEncounter.type = FHIR_TO_INTERNAL_ENCOUNTER_MAP[fhirEncounter.class.code] || 'initial';\n  }\n\n  // Extract reason from reasonCode if available\n  if (fhirEncounter.reasonCode && fhirEncounter.reasonCode.length > 0) {\n    const reason = fhirEncounter.reasonCode[0];\n    if (reason.text && !internalEncounter.reason) {\n      internalEncounter.reason = reason.text;\n    }\n  }\n\n  // Extract provider from participants if available\n  if (fhirEncounter.participant && fhirEncounter.participant.length > 0) {\n    const provider = fhirEncounter.participant.find(p => \n      p.type && p.type.some(t => \n        t.coding && t.coding.some(c => c.code === 'ATND')\n      )\n    );\n    if (provider && provider.individual) {\n      const providerRef = provider.individual.reference;\n      if (providerRef.startsWith('Practitioner/')) {\n        internalEncounter.providerId = providerRef.replace('Practitioner/', '');\n      }\n    }\n  }\n\n  return internalEncounter;\n}\n\n/**\n * Converts FHIR Observation resource to internal observation data\n */\nexport function convertFhirToObservation(\n  fhirObservation: FhirObservation\n): InternalObservation {\n  const internalObservation: InternalObservation = {\n    id: fhirObservation.id,\n    patientId: '',\n    type: 'clinical_finding',\n    value: undefined,\n    date: '',\n    category: ''\n  };\n\n  // Extract patient reference\n  if (fhirObservation.subject) {\n    const patientRef = fhirObservation.subject.reference;\n    if (patientRef.startsWith('Patient/')) {\n      internalObservation.patientId = patientRef.substring(8);\n    }\n  }\n\n  // Extract encounter reference\n  if (fhirObservation.encounter) {\n    const encounterRef = fhirObservation.encounter.reference;\n    if (encounterRef.startsWith('Encounter/')) {\n      internalObservation.encounterId = encounterRef.substring(10);\n    } else {\n      internalObservation.encounterId = encounterRef;\n    }\n  }\n\n  // Extract effective date\n  if (fhirObservation.effectiveDateTime) {\n    internalObservation.date = fhirObservation.effectiveDateTime;\n    internalObservation.effectiveDate = fhirObservation.effectiveDateTime;\n  } else if (fhirObservation.effectivePeriod?.start) {\n    internalObservation.date = fhirObservation.effectivePeriod.start;\n    internalObservation.effectiveDate = fhirObservation.effectivePeriod.start;\n  } else if (fhirObservation.effectiveInstant) {\n    internalObservation.date = fhirObservation.effectiveInstant;\n    internalObservation.effectiveDate = fhirObservation.effectiveInstant;\n  }\n\n  // Extract status\n  if (fhirObservation.status) {\n    internalObservation.status = fhirObservation.status;\n  }\n\n  // Extract category and code\n  if (fhirObservation.category && fhirObservation.category.length > 0) {\n    const category = fhirObservation.category[0];\n    if (category.coding && category.coding.length > 0) {\n      const coding = category.coding[0];\n      if (coding.code === 'vital-signs') {\n        internalObservation.type = 'vital_signs';\n        internalObservation.category = 'vital-signs';\n      } else if (coding.code === 'survey') {\n        internalObservation.type = 'functional_assessment';\n        internalObservation.category = 'survey';\n      } else {\n        internalObservation.category = category.text || coding.code || '';\n      }\n    } else {\n      internalObservation.category = category.text || '';\n    }\n  }\n\n  // Extract observation code\n  if (fhirObservation.code) {\n    if (fhirObservation.code.coding && fhirObservation.code.coding.length > 0) {\n      const coding = fhirObservation.code.coding[0];\n      internalObservation.code = coding.code;\n      internalObservation.codeSystem = coding.system;\n      internalObservation.displayName = coding.display;\n      if (!internalObservation.category) {\n        internalObservation.category = coding.display || '';\n      }\n    }\n    if (!internalObservation.category && fhirObservation.code.text) {\n      internalObservation.category = fhirObservation.code.text;\n    }\n  }\n\n  // Extract value\n  if (fhirObservation.valueQuantity) {\n    internalObservation.value = fhirObservation.valueQuantity.value || 0;\n    internalObservation.unit = fhirObservation.valueQuantity.unit;\n  } else if (fhirObservation.valueString) {\n    // For text observations, don't set value, only textValue\n    internalObservation.textValue = fhirObservation.valueString;\n  } else if (fhirObservation.valueBoolean !== undefined) {\n    internalObservation.value = fhirObservation.valueBoolean;\n  } else if (fhirObservation.valueInteger !== undefined) {\n    internalObservation.value = fhirObservation.valueInteger;\n  } else if (fhirObservation.valueCodeableConcept) {\n    const concept = fhirObservation.valueCodeableConcept;\n    if (concept.coding && concept.coding.length > 0) {\n      internalObservation.value = concept.coding[0].display || concept.coding[0].code;\n    } else if (concept.text) {\n      internalObservation.value = concept.text;\n    }\n  }\n\n  // Extract body site\n  if (fhirObservation.bodySite) {\n    if (fhirObservation.bodySite.coding && fhirObservation.bodySite.coding.length > 0) {\n      internalObservation.bodySite = fhirObservation.bodySite.coding[0].display || \n                                    fhirObservation.bodySite.coding[0].code;\n    } else if (fhirObservation.bodySite.text) {\n      internalObservation.bodySite = fhirObservation.bodySite.text;\n    }\n  }\n\n  return internalObservation;\n}\n\n/**\n * Converts multiple FHIR resources to internal clinical data\n */\nexport function convertFhirToClinicalData(\n  fhirResources: {\n    patient: FhirPatient;\n    encounter: FhirEncounter;\n    observations: FhirObservation[];\n  }\n): {\n  patient: InternalPatient;\n  encounter: InternalEncounter;\n  observations: InternalObservation[];\n} {\n  return {\n    patient: convertFhirToPatient(fhirResources.patient),\n    encounter: convertFhirToEncounter(fhirResources.encounter),\n    observations: fhirResources.observations.map(convertFhirToObservation)\n  };\n}\n\n/**\n * Validates FHIR resource structure before conversion\n */\nexport function validateFhirResource(\n  resource: FhirPatient | FhirEncounter | FhirObservation\n): { isValid: boolean; errors: string[] } {\n  const errors: string[] = [];\n\n  // Basic validation\n  if (!resource.resourceType) {\n    errors.push('Missing required field: resourceType');\n  }\n  if (!resource.id) {\n    errors.push('Missing required field: id');\n  }\n\n  // Resource-specific validation\n  switch (resource.resourceType) {\n    case 'Patient': {\n      const patient = resource as FhirPatient;\n      if (!patient.name || patient.name.length === 0) {\n        errors.push('Patient must have at least one name');\n      }\n      break;\n    }\n    \n    case 'Encounter': {\n      const encounter = resource as FhirEncounter;\n      if (!encounter.status) {\n        errors.push('Encounter must have status');\n      }\n      if (!encounter.subject) {\n        errors.push('Encounter must have subject');\n      }\n      break;\n    }\n    \n    case 'Observation': {\n      const observation = resource as FhirObservation;\n      if (!observation.status) {\n        errors.push('Observation must have status');\n      }\n      if (!observation.code) {\n        errors.push('Observation must have code');\n      }\n      if (!observation.subject) {\n        errors.push('Observation must have subject');\n      }\n      break;\n    }\n    \n    default:\n      errors.push(`Unsupported resource type: ${resource.resourceType}`);\n      break;\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/adapters/internalToFhir.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/adapters/internalToFhir.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview Internal to FHIR Adapter - Lightweight Implementation\n * @version 1.0.0\n * @author AiDuxCare Development Team\n * @compliance FHIR R4 + CA Core + US Core\n */\n\nimport type { \n  FhirPatient, \n  FhirEncounter, \n  FhirObservation\n  // VITAL_SIGNS_CODES \n} from '../types';\nimport type { FhirBundle } from '../types/fhirBundle';\nimport type { ClinicalDataBundle } from '../types/fhirBundle';\nimport type { \n  ClinicalAnalysisResult\n  // ClinicalSymptom,\n  // ClinicalSign,\n  // FunctionalAssessment \n} from '../../../types/clinical-analysis';\nimport { createClinicalDataBundle } from '../utils/bundleUtils';\nimport { generateFhirReference } from '../utils/uuidUtils';\n\n// Internal patient structure (simplified for demo)\nexport interface InternalPatient {\n  id: string;\n  firstName: string;\n  lastName: string;\n  dateOfBirth: string;\n  gender: 'male' | 'female' | 'other' | 'unknown';\n  email?: string;\n  phone?: string;\n  address?: {\n    street: string;\n    city: string;\n    state: string;\n    zipCode: string; // Cambiado de postalCode a zipCode para coincidir con tests\n    country: string;\n  };\n  medicalRecordNumber?: string;\n  insuranceNumber?: string;\n  ssn?: string; // Agregado para coincidir con tests\n  isActive?: boolean; // Agregado para coincidir con tests\n}\n\n// Internal encounter structure\nexport interface InternalEncounter {\n  id: string;\n  patientId: string;\n  startDate: string;\n  endDate?: string;\n  type: 'ambulatory' | 'emergency' | 'inpatient' | 'outpatient' | 'initial' | 'follow_up' | 'discharge'; // Agregados tipos esperados por tests\n  status: 'scheduled' | 'in_progress' | 'completed' | 'cancelled' | 'finished'; // Agregado 'finished' para tests\n  reason: string;\n  providerId: string;\n  location?: string;\n}\n\n// Internal observation structure\nexport interface InternalObservation {\n  id: string;\n  patientId: string;\n  encounterId?: string;\n  type: 'vital_signs' | 'functional_assessment' | 'clinical_finding' | 'text'; // Agregado 'text' para tests\n  value?: number | string | boolean;\n  unit?: string;\n  date: string;\n  category: string;\n  code?: string;\n  bodySite?: string;\n  // Campos adicionales para tests\n  codeSystem?: string;\n  displayName?: string;\n  status?: string;\n  effectiveDate?: string;\n  textValue?: string; // Para observaciones de texto\n}\n\n/**\n * Converts internal patient data to FHIR Patient resource\n */\nexport function convertPatientToFhir(\n  internalPatient: InternalPatient,\n  options: {\n    profile?: 'ca-core' | 'us-core';\n    includeMeta?: boolean;\n  } = {}\n): FhirPatient {\n  const { profile = 'us-core', includeMeta = true } = options;\n  \n  const fhirPatient: FhirPatient = {\n    resourceType: 'Patient',\n    id: internalPatient.id,\n    active: true,\n    name: [{\n      use: 'official',\n      family: internalPatient.lastName,\n      given: [internalPatient.firstName]\n    }],\n    gender: internalPatient.gender,\n    birthDate: internalPatient.dateOfBirth\n  };\n\n  // Add meta information if requested\n  if (includeMeta) {\n    fhirPatient.meta = {\n      profile: profile === 'ca-core' \n        ? ['http://hl7.org/fhir/StructureDefinition/ca-core-patient']\n        : ['http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient'],\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  // Add identifiers\n  const identifiers: Array<{\n    use: 'official' | 'secondary';\n    system: string;\n    value: string;\n  }> = [];\n  if (internalPatient.medicalRecordNumber) {\n    identifiers.push({\n      use: 'official' as const,\n      system: 'http://hl7.org/fhir/sid/us-mrn',\n      value: internalPatient.medicalRecordNumber\n    });\n  }\n  if (internalPatient.insuranceNumber) {\n    identifiers.push({\n      use: 'secondary' as const,\n      system: 'http://hl7.org/fhir/sid/us-insurance',\n      value: internalPatient.insuranceNumber\n    });\n  }\n  if (internalPatient.ssn) {\n    identifiers.push({\n      use: 'official' as const,\n      system: 'http://hl7.org/fhir/sid/us-ssn',\n      value: internalPatient.ssn\n    });\n  }\n  if (identifiers.length > 0) {\n    fhirPatient.identifier = identifiers;\n  }\n\n  // Add contact information\n  if (internalPatient.email || internalPatient.phone) {\n    fhirPatient.telecom = [];\n    if (internalPatient.phone) {\n      fhirPatient.telecom.push({\n        system: 'phone',\n        value: internalPatient.phone,\n        use: 'home' as const\n      });\n    }\n    if (internalPatient.email) {\n      fhirPatient.telecom.push({\n        system: 'email',\n        value: internalPatient.email,\n        use: 'home' as const\n      });\n    }\n  }\n\n  // Add address\n  if (internalPatient.address) {\n    fhirPatient.address = [{\n      use: 'home' as const,\n      type: 'physical' as const,\n      line: [internalPatient.address.street],\n      city: internalPatient.address.city,\n      state: internalPatient.address.state,\n      postalCode: internalPatient.address.zipCode,\n      country: internalPatient.address.country\n    }];\n  }\n\n  return fhirPatient;\n}\n\n/**\n * Encounter type mapping table for internal to FHIR conversion\n * Maps internal encounter types to FHIR v3-ActCode values\n */\nconst ENCOUNTER_CLASS_MAP: Record<string, { system: string; code: string; display: string }> = {\n  emergency: {\n    system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n    code: 'EMER',\n    display: 'Emergency'\n  },\n  inpatient: {\n    system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n    code: 'IMP',\n    display: 'Inpatient'\n  },\n  outpatient: {\n    system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n    code: 'AMB',\n    display: 'Ambulatory'\n  },\n  ambulatory: {\n    system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n    code: 'AMB',\n    display: 'Ambulatory'\n  },\n  virtual: {\n    system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n    code: 'VR',\n    display: 'Virtual'\n  },\n  home: {\n    system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n    code: 'HH',\n    display: 'Home Health'\n  },\n  initial: {\n    system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n    code: 'AMB',\n    display: 'Ambulatory'\n  },\n  follow_up: {\n    system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n    code: 'FU',\n    display: 'Follow-up'\n  },\n  discharge: {\n    system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n    code: 'DIS',\n    display: 'Discharge'\n  }\n};\n\n/**\n * Converts internal encounter data to FHIR Encounter resource\n */\nexport function convertEncounterToFhir(\n  internalEncounter: InternalEncounter,\n  options: {\n    profile?: 'ca-core' | 'us-core';\n    includeMeta?: boolean;\n  } = {}\n): FhirEncounter {\n  const { profile = 'us-core', includeMeta = true } = options;\n  \n  // Map internal status to FHIR status\n  const statusMap: Record<string, FhirEncounter['status']> = {\n    'scheduled': 'planned',\n    'in_progress': 'in-progress',\n    'completed': 'finished',\n    'finished': 'finished',\n    'cancelled': 'cancelled'\n  };\n\n  const fhirEncounter: FhirEncounter = {\n    resourceType: 'Encounter',\n    id: internalEncounter.id,\n    status: statusMap[internalEncounter.status] || 'unknown',\n    class: {\n      system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n      code: 'AMB', // Default value, will be overridden if type is specified\n      display: 'ambulatory'\n    },\n    subject: {\n      reference: generateFhirReference('Patient', internalEncounter.patientId),\n      display: `Patient ${internalEncounter.patientId}`\n    },\n    period: {\n      start: internalEncounter.startDate,\n      end: internalEncounter.endDate\n    }\n  };\n\n  // Add meta information if requested\n  if (includeMeta) {\n    fhirEncounter.meta = {\n      profile: profile === 'ca-core' \n        ? ['http://hl7.org/fhir/StructureDefinition/ca-core-encounter']\n        : ['http://hl7.org/fhir/us/core/StructureDefinition/us-core-encounter'],\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  // Add encounter type and update class.code accordingly\n  if (internalEncounter.type) {\n    const mappedType = ENCOUNTER_CLASS_MAP[internalEncounter.type];\n    if (mappedType) {\n      // Update class.code to match the mapped type\n      fhirEncounter.class.code = mappedType.code;\n      fhirEncounter.class.display = mappedType.display;\n      \n      // Also add to type array for additional context\n      fhirEncounter.type = [{\n        coding: [mappedType],\n        text: internalEncounter.reason\n      }];\n    } else {\n      // Invalid encounter type - this should cause validation to fail\n      throw new Error(`Invalid encounter type: ${internalEncounter.type}. Supported types: ${Object.keys(ENCOUNTER_CLASS_MAP).join(', ')}`);\n    }\n  }\n\n  // Add reason\n  if (internalEncounter.reason) {\n    fhirEncounter.reasonCode = [{\n      coding: [{\n        system: 'http://snomed.info/sct',\n        code: 'unknown',\n        display: internalEncounter.reason\n      }],\n      text: internalEncounter.reason\n    }];\n  }\n\n  // Add provider as participant\n  if (internalEncounter.providerId) {\n    fhirEncounter.participant = [{\n      type: [{\n        coding: [{\n          system: 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType',\n          code: 'ATND',\n          display: 'attender'\n        }]\n      }],\n      individual: {\n        reference: generateFhirReference('Practitioner', internalEncounter.providerId),\n        display: `Provider ${internalEncounter.providerId}`\n      }\n    }];\n  }\n\n  return fhirEncounter;\n}\n\n/**\n * Converts internal observation data to FHIR Observation resource\n */\nexport function convertObservationToFhir(\n  internalObservation: InternalObservation,\n  options: {\n    profile?: 'ca-core' | 'us-core';\n    includeMeta?: boolean;\n  } = {}\n): FhirObservation {\n  const { profile = 'us-core', includeMeta = true } = options;\n  \n  const fhirObservation: FhirObservation = {\n    resourceType: 'Observation',\n    id: internalObservation.id,\n    status: (internalObservation.status as 'final' | 'amended' | 'corrected' | 'registered' | 'preliminary') || 'final',\n    code: {\n      coding: [{\n        system: internalObservation.codeSystem || (internalObservation.code ? 'http://loinc.org' : 'http://snomed.info/sct'),\n        code: internalObservation.code || 'unknown',\n        display: internalObservation.displayName || internalObservation.category\n      }],\n      text: internalObservation.displayName || internalObservation.category\n    },\n    subject: {\n      reference: generateFhirReference('Patient', internalObservation.patientId),\n      display: `Patient ${internalObservation.patientId}`\n    },\n    effectiveDateTime: internalObservation.effectiveDate || internalObservation.date,\n    issued: new Date().toISOString()\n  };\n\n  // Add meta information if requested\n  if (includeMeta) {\n    fhirObservation.meta = {\n      profile: profile === 'ca-core' \n        ? ['http://hl7.org/fhir/StructureDefinition/ca-core-observation']\n        : ['http://hl7.org/fhir/us/core/StructureDefinition/us-core-observation'],\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  // Add encounter reference if available\n  if (internalObservation.encounterId) {\n    fhirObservation.encounter = {\n      reference: generateFhirReference('Encounter', internalObservation.encounterId),\n      display: `Encounter ${internalObservation.encounterId}`\n    };\n  }\n\n  // Add category based on observation type\n  if (internalObservation.type === 'vital_signs') {\n    fhirObservation.category = [{\n      coding: [{\n        system: 'http://terminology.hl7.org/CodeSystem/observation-category',\n        code: 'vital-signs',\n        display: 'Vital Signs'\n      }],\n      text: 'Vital Signs'\n    }];\n  }\n\n  // Add value based on type\n  if (internalObservation.type === 'text' && internalObservation.textValue) {\n    fhirObservation.valueString = internalObservation.textValue;\n  } else if (typeof internalObservation.value === 'number') {\n    fhirObservation.valueQuantity = {\n      value: internalObservation.value,\n      unit: internalObservation.unit || 'unknown',\n      system: 'http://unitsofmeasure.org',\n      code: internalObservation.unit || 'unknown'\n    };\n  } else if (typeof internalObservation.value === 'string') {\n    fhirObservation.valueString = internalObservation.value;\n  } else if (typeof internalObservation.value === 'boolean') {\n    fhirObservation.valueBoolean = internalObservation.value;\n  }\n\n  // Add body site if available\n  if (internalObservation.bodySite) {\n    fhirObservation.bodySite = {\n      coding: [{\n        system: 'http://snomed.info/sct',\n        code: 'unknown',\n        display: internalObservation.bodySite\n      }],\n      text: internalObservation.bodySite\n    };\n  }\n\n  return fhirObservation;\n}\n\n/**\n * Converts clinical analysis result to a FHIR Bundle\n */\nexport function convertClinicalAnalysisToFhir(\n  clinicalResult: ClinicalAnalysisResult | {\n    patient: InternalPatient;\n    encounter: InternalEncounter;\n    observations: InternalObservation[];\n  }\n): FhirBundle & ClinicalDataBundle {\n  let patient: FhirPatient;\n  let encounter: FhirEncounter;\n  let observations: FhirObservation[] = [];\n\n  // Check if we have the new format (patient, encounter, observations directly)\n  if ('patient' in clinicalResult && 'encounter' in clinicalResult && 'observations' in clinicalResult) {\n    // New format: direct patient, encounter, observations\n    patient = convertPatientToFhir(clinicalResult.patient);\n    encounter = convertEncounterToFhir(clinicalResult.encounter);\n    observations = clinicalResult.observations.map(obs => convertObservationToFhir(obs));\n  } else {\n    // Original format: ClinicalAnalysisResult\n    // This would need the actual internal patient data\n    // For now, we'll create a mock conversion\n    const mockPatient: InternalPatient = {\n      id: clinicalResult.patientId,\n      firstName: 'Unknown',\n      lastName: 'Patient',\n      dateOfBirth: new Date().toISOString().split('T')[0],\n      gender: 'unknown'\n    };\n\n    const mockEncounter: InternalEncounter = {\n      id: clinicalResult.sessionId,\n      patientId: clinicalResult.patientId,\n      startDate: clinicalResult.analysisDate?.toISOString() || new Date().toISOString(),\n      type: 'initial',\n      status: 'completed',\n      reason: 'Clinical assessment',\n      providerId: 'unknown'\n    };\n\n    patient = convertPatientToFhir(mockPatient);\n    encounter = convertEncounterToFhir(mockEncounter);\n    \n    // Convert symptoms and signs to observations\n    clinicalResult.symptoms?.forEach((symptom, index) => {\n      const observation: InternalObservation = {\n        id: `symptom-${index}`,\n        patientId: clinicalResult.patientId,\n        type: 'clinical_finding',\n        value: symptom.description,\n        date: clinicalResult.analysisDate?.toISOString() || new Date().toISOString(),\n        category: 'Symptom',\n        code: symptom.name\n      };\n      observations.push(convertObservationToFhir(observation));\n    });\n\n    clinicalResult.signs?.forEach((sign, index) => {\n      const observation: InternalObservation = {\n        id: `sign-${index}`,\n        patientId: clinicalResult.patientId,\n        type: 'clinical_finding',\n        value: sign.description,\n        date: clinicalResult.analysisDate?.toISOString() || new Date().toISOString(),\n        category: 'Clinical Sign',\n        code: sign.name\n      };\n      observations.push(convertObservationToFhir(observation));\n    });\n  }\n\n  // Create the FHIR Bundle\n  const bundle = createClinicalDataBundle({\n    patient,\n    encounter,\n    observations\n  }, {\n    type: 'collection',\n    profile: 'ca-core',\n    includeMeta: true\n  });\n\n  // Return both the bundle and direct access to resources\n  return {\n    ...bundle,\n    patient,\n    encounter,\n    observations\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/index.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/index.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * FHIR Integration Module for AiDuxCare\n * \n * This module provides lightweight FHIR R4 integration with support for:\n * - CA Core (Canada) compliance\n * - US Core (USA) compliance\n * - Patient, Encounter, and Observation resources\n * - Bidirectional data conversion (internal ‚Üî FHIR)\n * - Validation against regional standards\n * \n * @module fhir\n * @version 1.1.0\n * @public-api\n */\n\n// Import all required functions statically\nimport {\n  convertPatientToFhir,\n  convertEncounterToFhir,\n  convertObservationToFhir,\n  type InternalPatient,\n  type InternalEncounter,\n  type InternalObservation\n} from './adapters/internalToFhir';\nimport {\n  convertFhirToPatient,\n  convertFhirToEncounter,\n  convertFhirToObservation\n} from './adapters/fhirToInternal';\nimport {\n  validateCaCorePatient,\n  validateCaCoreEncounter,\n  validateCaCoreObservation\n} from './validators/caCoreValidator';\nimport {\n  validateUsCorePatient,\n  validateUsCoreEncounter,\n  validateUsCoreObservation\n} from './validators/usCoreValidator';\nimport { createFhirBundle } from './utils/bundleUtils';\nimport type { FhirPatient, FhirEncounter, FhirObservation } from './types';\n\n// Export public types from the public types directory\nexport type * from './types/public';\n\n// Export constants\nexport const FHIR_MODULE_VERSION = '1.1.0';\nexport const SUPPORTED_PROFILES = ['CA_CORE', 'US_CORE'] as const;\nexport const SUPPORTED_RESOURCES = ['Patient', 'Encounter', 'Observation'] as const;\n\n/**\n * Main FHIR module configuration\n */\nexport const FHIR_CONFIG = {\n  version: FHIR_MODULE_VERSION,\n  supportedProfiles: SUPPORTED_PROFILES,\n  supportedResources: SUPPORTED_RESOURCES,\n  defaultProfile: 'US_CORE' as const,\n  strictValidation: true,\n  includeMeta: true\n} as const;\n\n/**\n * Public API Functions - Stable Contract\n */\n\n/**\n * Convert internal patient data to FHIR format\n * @param patient Internal patient data\n * @param options Conversion options including profile\n * @returns FHIR Patient resource\n */\nexport function toFhir(patient: InternalPatient, options: { profile: 'CA_CORE' | 'US_CORE' }) {\n  const profile = options.profile === 'CA_CORE' ? 'ca-core' : 'us-core';\n  const fhirPatient = convertPatientToFhir(patient, { profile });\n  \n  // Validate automatically and fail if validation fails\n  const validationResult = validate(fhirPatient, options.profile);\n  if (!validationResult.isValid) {\n    throw new Error(`Patient validation failed for ${options.profile}: ${validationResult.errors.join(', ')}`);\n  }\n  \n  return fhirPatient;\n}\n\n/**\n * Convert internal encounter data to FHIR format\n * @param encounter Internal encounter data\n * @param options Conversion options including profile\n * @returns FHIR Encounter resource\n */\nexport function toFhirEncounter(encounter: InternalEncounter, options: { profile: 'CA_CORE' | 'US_CORE' }) {\n  const profile = options.profile === 'CA_CORE' ? 'ca-core' : 'us-core';\n  const fhirEncounter = convertEncounterToFhir(encounter, { profile });\n  \n  // Validate automatically and fail if validation fails\n  const validationResult = validate(fhirEncounter, options.profile);\n  if (!validationResult.isValid) {\n    throw new Error(`Encounter validation failed for ${options.profile}: ${validationResult.errors.join(', ')}`);\n  }\n  \n  return fhirEncounter;\n}\n\n/**\n * Convert internal observation data to FHIR format\n * @param observation Internal observation data\n * @param options Conversion options including profile\n * @returns FHIR Observation resource\n */\nexport function toFhirObservation(observation: InternalObservation, options: { profile: 'CA_CORE' | 'US_CORE' }) {\n  const profile = options.profile === 'CA_CORE' ? 'ca-core' : 'us-core';\n  const fhirObservation = convertObservationToFhir(observation, { profile });\n  \n  // Validate automatically and fail if validation fails\n  const validationResult = validate(fhirObservation, options.profile);\n  if (!validationResult.isValid) {\n    throw new Error(`Observation validation failed for ${options.profile}: ${validationResult.errors.join(', ')}`);\n  }\n  \n  return fhirObservation;\n}\n\n/**\n * Convert FHIR resource to internal format\n * @param resource FHIR resource\n * @returns Internal data format\n */\nexport function fromFhir(resource: FhirPatient | FhirEncounter | FhirObservation) {\n  if (resource && typeof resource === 'object' && 'resourceType' in resource) {\n    switch (resource.resourceType) {\n      case 'Patient':\n        return convertFhirToPatient(resource as FhirPatient);\n      case 'Encounter':\n        return convertFhirToEncounter(resource as FhirEncounter);\n      case 'Observation':\n        return convertFhirToObservation(resource as FhirObservation);\n      default:\n        throw new Error(`Unsupported resource type: ${resource.resourceType}`);\n    }\n  }\n  \n  throw new Error('Invalid FHIR resource');\n}\n\n/**\n * Validate FHIR resource against specified profile\n * @param resource FHIR resource to validate\n * @param profile Profile to validate against\n * @returns Validation result\n */\nexport function validate(resource: FhirPatient | FhirEncounter | FhirObservation, profile: 'CA_CORE' | 'US_CORE') {\n  if (!resource || typeof resource !== 'object' || !('resourceType' in resource)) {\n    return {\n      isValid: false,\n      errors: ['Invalid resource format'],\n      warnings: [],\n      compliance: { caCore: false, usCore: false },\n      timestamp: new Date().toISOString()\n    };\n  }\n  \n  try {\n    const resourceType = (resource as Record<string, unknown>).resourceType as string;\n    \n    if (profile === 'CA_CORE') {\n      if (resourceType === 'Patient') {\n        const result = validateCaCorePatient(resource as FhirPatient);\n        return {\n          isValid: result.valid,\n          errors: result.errors.map(e => e.message),\n          warnings: [],\n          compliance: { caCore: result.valid, usCore: false },\n          timestamp: new Date().toISOString()\n        };\n      } else if (resourceType === 'Encounter') {\n        const result = validateCaCoreEncounter(resource as FhirEncounter);\n        return {\n          isValid: result.valid,\n          errors: result.errors.map(e => e.message),\n          warnings: [],\n          compliance: { caCore: result.valid, usCore: false },\n          timestamp: new Date().toISOString()\n        };\n      } else if (resourceType === 'Observation') {\n        const result = validateCaCoreObservation(resource as FhirObservation);\n        return {\n          isValid: result.valid,\n          errors: result.errors.map(e => e.message),\n          warnings: [],\n          compliance: { caCore: result.valid, usCore: false },\n          timestamp: new Date().toISOString()\n        };\n      } else {\n        return {\n          isValid: false,\n          errors: [`Unsupported resource type for CA Core: ${resourceType}`],\n          warnings: [],\n          compliance: { caCore: false, usCore: false },\n          timestamp: new Date().toISOString()\n        };\n      }\n    } else if (profile === 'US_CORE') {\n      if (resourceType === 'Patient') {\n        const result = validateUsCorePatient(resource as FhirPatient);\n        return {\n          isValid: result.valid,\n          errors: result.errors.map(e => e.message),\n          warnings: [],\n          compliance: { caCore: false, usCore: result.valid },\n          timestamp: new Date().toISOString()\n        };\n      } else if (resourceType === 'Encounter') {\n        const result = validateUsCoreEncounter(resource as FhirEncounter);\n        return {\n          isValid: result.valid,\n          errors: result.errors.map(e => e.message),\n          warnings: [],\n          compliance: { caCore: false, usCore: result.valid },\n          timestamp: new Date().toISOString()\n        };\n      } else if (resourceType === 'Observation') {\n        const result = validateUsCoreObservation(resource as FhirObservation);\n        return {\n          isValid: result.valid,\n          errors: result.errors.map(e => e.message),\n          warnings: [],\n          compliance: { caCore: false, usCore: result.valid },\n          timestamp: new Date().toISOString()\n        };\n      } else {\n        return {\n          isValid: false,\n          errors: [`Unsupported resource type for US Core: ${resourceType}`],\n          warnings: [],\n          compliance: { caCore: false, usCore: false },\n          timestamp: new Date().toISOString()\n        };\n      }\n    }\n    \n    throw new Error(`Unsupported profile: ${profile}`);\n  } catch (error) {\n    return {\n      isValid: false,\n      errors: [`Validation error: ${error instanceof Error ? error.message : 'Unknown error'}`],\n      warnings: [],\n      compliance: { caCore: false, usCore: false },\n      timestamp: new Date().toISOString()\n    };\n  }\n}\n\n/**\n * Create FHIR bundle with specified entries and profile\n * @param entries Array of FHIR resources\n * @param profile Profile to use for bundle\n * @returns FHIR Bundle resource\n */\nexport function makeBundle(entries: (FhirPatient | FhirEncounter | FhirObservation)[], profile: 'CA_CORE' | 'US_CORE') {\n  // Validate all entries before creating bundle\n  for (let i = 0; i < entries.length; i++) {\n    const entry = entries[i];\n    const validationResult = validate(entry, profile);\n    if (!validationResult.isValid) {\n      throw new Error(`Bundle entry ${i} validation failed for ${profile}: ${validationResult.errors.join(', ')}`);\n    }\n  }\n  \n  const profileLower = profile === 'CA_CORE' ? 'ca-core' : 'us-core';\n  return createFhirBundle(entries, {\n    type: 'document',\n    profile: profileLower,\n    includeMeta: true\n  });\n}\n\n/**\n * Check if the FHIR module is properly configured\n * @returns true if the module is ready for use\n */\nexport function isFhirModuleReady(): boolean {\n  try {\n    // Basic validation that core components are available\n    const testPatient: FhirPatient = {\n      resourceType: 'Patient',\n      id: 'test'\n    };\n    \n    // Test basic validation\n    const result = validate(testPatient, 'US_CORE');\n    \n    return result.isValid;\n  } catch (error) {\n    console.warn('FHIR module validation failed:', error);\n    return false;\n  }\n}\n\n/**\n * Get module information and status\n * @returns object with module details and health status\n */\nexport function getFhirModuleInfo() {\n  return {\n    version: FHIR_MODULE_VERSION,\n    status: isFhirModuleReady() ? 'ready' : 'error',\n    supportedProfiles: SUPPORTED_PROFILES,\n    supportedResources: SUPPORTED_RESOURCES,\n    config: FHIR_CONFIG,\n    timestamp: new Date().toISOString()\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/tests/utils.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/tests/utils.test.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\n\nimport {\n  createFhirBundle,\n  createClinicalDataBundle,\n  extractBundleResources,\n  validateFhirBundle,\n  bundleToClinicalData,\n  exportFhirBundle\n} from '../utils/bundleUtils';\nimport {\n  validateFhirJson,\n  parseFhirResource,\n  validateFhirProfile,\n  createValidationError,\n  formatValidationErrors,\n  isFhirJson,\n  getFhirResourceType\n} from '../utils/jsonUtils';\nimport type { FhirPatient, FhirEncounter, FhirObservation } from '../types';\n\ndescribe('FHIR Bundle Utils', () => {\n  const mockPatient: FhirPatient = {\n    resourceType: 'Patient',\n    id: 'patient-123',\n    identifier: [{ system: 'http://example.com/patients', value: '123' }],\n    name: [{ use: 'official', text: 'John Doe' }],\n    active: true\n  };\n\n  const mockEncounter: FhirEncounter = {\n    resourceType: 'Encounter',\n    id: 'encounter-456',\n    status: 'finished',\n    class: { system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode', code: 'AMB', display: 'Ambulatory' },\n    subject: { reference: 'Patient/patient-123' }\n  };\n\n  const mockObservation: FhirObservation = {\n    resourceType: 'Observation',\n    id: 'observation-789',\n    status: 'final',\n    code: { system: 'http://loinc.org', code: '8867-4', display: 'Heart rate' },\n    subject: { reference: 'Patient/patient-123' },\n    valueQuantity: { value: 72, unit: 'beats/min', system: 'http://unitsofmeasure.org', code: '/min' }\n  };\n\n  describe('createFhirBundle', () => {\n    it('should create a basic FHIR bundle', () => {\n      const bundle = createFhirBundle([mockPatient, mockEncounter, mockObservation]);\n      \n      expect(bundle.resourceType).toBe('Bundle');\n      expect(bundle.type).toBe('collection');\n      expect(bundle.entry).toHaveLength(3);\n      expect(bundle.total).toBe(3);\n    });\n\n    it('should create bundle with custom options', () => {\n      const bundle = createFhirBundle([mockPatient], {\n        type: 'document',\n        profile: 'us-core',\n        includeMeta: true\n      });\n      \n      expect(bundle.type).toBe('document');\n      expect(bundle.meta?.profile).toContain('us-core');\n    });\n\n    it('should generate unique bundle IDs', () => {\n      const bundle1 = createFhirBundle([mockPatient]);\n      const bundle2 = createFhirBundle([mockPatient]);\n      \n      expect(bundle1.id).not.toBe(bundle2.id);\n    });\n  });\n\n  describe('createClinicalDataBundle', () => {\n    it('should create clinical data bundle', () => {\n      const clinicalData = {\n        patient: mockPatient,\n        encounter: mockEncounter,\n        observations: [mockObservation]\n      };\n      \n      const bundle = createClinicalDataBundle(clinicalData);\n      \n      expect(bundle.type).toBe('document');\n      expect(bundle.entry).toHaveLength(3);\n    });\n  });\n\n  describe('extractBundleResources', () => {\n    it('should extract resources by type', () => {\n      const bundle = createFhirBundle([mockPatient, mockEncounter, mockObservation]);\n      const extracted = extractBundleResources(bundle);\n      \n      expect(extracted.patients).toHaveLength(1);\n      expect(extracted.encounters).toHaveLength(1);\n      expect(extracted.observations).toHaveLength(1);\n      expect(extracted.other).toHaveLength(0);\n    });\n  });\n\n  describe('validateFhirBundle', () => {\n    it('should validate valid bundle', () => {\n      const bundle = createFhirBundle([mockPatient, mockEncounter]);\n      const result = validateFhirBundle(bundle);\n      \n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should detect invalid bundle structure', () => {\n      const invalidBundle = {\n        resourceType: 'Bundle',\n        id: 'invalid-bundle'\n        // Missing required fields\n      };\n      \n      const result = validateFhirBundle(invalidBundle as unknown as FhirBundle);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('Bundle type is required');\n    });\n\n    it('should validate bundle entries', () => {\n      const bundleWithInvalidEntry = {\n        resourceType: 'Bundle',\n        id: 'test-bundle',\n        type: 'collection',\n        entry: [\n          { resource: mockPatient },\n          { resource: { ...mockEncounter, id: undefined } } // Missing ID\n        ]\n      };\n      \n      const result = validateFhirBundle(bundleWithInvalidEntry as unknown as FhirBundle);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('Entry 1: Encounter missing ID');\n    });\n  });\n\n  describe('bundleToClinicalData', () => {\n    it('should convert valid bundle to clinical data', () => {\n      const bundle = createClinicalDataBundle({\n        patient: mockPatient,\n        encounter: mockEncounter,\n        observations: [mockObservation]\n      });\n      \n      const clinicalData = bundleToClinicalData(bundle);\n      \n      expect(clinicalData).not.toBeNull();\n      expect(clinicalData?.patient.id).toBe('patient-123');\n      expect(clinicalData?.encounter.id).toBe('encounter-456');\n      expect(clinicalData?.observations).toHaveLength(1);\n    });\n\n    it('should return null for incomplete bundle', () => {\n      const incompleteBundle = createFhirBundle([mockPatient]); // Missing encounter\n      const clinicalData = bundleToClinicalData(incompleteBundle);\n      \n      expect(clinicalData).toBeNull();\n    });\n  });\n\n  describe('exportFhirBundle', () => {\n    it('should export bundle as JSON string', () => {\n      const bundle = createFhirBundle([mockPatient]);\n      const exported = exportFhirBundle(bundle, { prettyPrint: false });\n      \n      expect(typeof exported).toBe('string');\n      expect(exported).toContain('\"resourceType\":\"Bundle\"');\n    });\n\n    it('should respect export options', () => {\n      const bundle = createFhirBundle([mockPatient]);\n      const exported = exportFhirBundle(bundle, { prettyPrint: false });\n      \n      expect(exported).not.toContain('\\n');\n    });\n  });\n});\n\ndescribe('FHIR JSON Utils', () => {\n  const validPatientJson = JSON.stringify({\n    resourceType: 'Patient',\n    id: 'patient-123',\n    name: [{ text: 'John Doe' }]\n  });\n\n  const invalidJson = '{ invalid json }';\n  const wrongTypeJson = JSON.stringify({\n    resourceType: 'Encounter',\n    id: 'encounter-123'\n  });\n\n  describe('validateFhirJson', () => {\n    it('should validate valid FHIR JSON', () => {\n      const result = validateFhirJson(validPatientJson);\n      \n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n      expect(result.parsedData).toBeDefined();\n    });\n\n    it('should detect invalid JSON syntax', () => {\n      const result = validateFhirJson(invalidJson);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('Invalid JSON syntax');\n    });\n\n    it('should validate expected resource type', () => {\n      const result = validateFhirJson(validPatientJson, 'Patient');\n      \n      expect(result.isValid).toBe(true);\n    });\n\n    it('should detect resource type mismatch', () => {\n      const result = validateFhirJson(wrongTypeJson, 'Patient');\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain(\"Expected resourceType 'Patient', got 'Encounter'\");\n    });\n\n    it('should validate required fields', () => {\n      const incompleteJson = JSON.stringify({\n        resourceType: 'Patient'\n        // Missing id\n      });\n      \n      const result = validateFhirJson(incompleteJson);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors).toContain('Missing required field: id');\n    });\n  });\n\n  describe('parseFhirResource', () => {\n    it('should parse valid Patient resource', () => {\n      const result = parseFhirResource(validPatientJson, 'Patient');\n      \n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.resource.resourceType).toBe('Patient');\n        expect(result.resource.id).toBe('patient-123');\n      }\n    });\n\n    it('should handle parsing errors', () => {\n      const result = parseFhirResource(invalidJson, 'Patient');\n      \n      expect(result.success).toBe(false);\n      expect(result.errors).toContain('Invalid JSON syntax');\n    });\n\n    it('should handle type mismatch', () => {\n      const result = parseFhirResource(wrongTypeJson, 'Patient');\n      \n      expect(result.success).toBe(false);\n      expect(result.errors).toContain('Type mismatch: expected Patient, got Encounter');\n    });\n  });\n\n  describe('validateFhirProfile', () => {\n    it('should validate CA Core profile', () => {\n      const result = validateFhirProfile(validPatientJson, 'ca-core');\n      \n      expect(result.compliance.caCore).toBeDefined();\n      expect(result.timestamp).toBeDefined();\n    });\n\n    it('should validate US Core profile', () => {\n      const result = validateFhirProfile(validPatientJson, 'us-core');\n      \n      expect(result.compliance.usCore).toBeDefined();\n      expect(result.timestamp).toBeDefined();\n    });\n\n    it('should handle invalid JSON in profile validation', () => {\n      const result = validateFhirProfile(invalidJson, 'ca-core');\n      \n      expect(result.isValid).toBe(false);\n      expect(result.compliance.caCore).toBe(false);\n      expect(result.compliance.usCore).toBe(false);\n    });\n  });\n\n  describe('createValidationError', () => {\n    it('should create validation error with all fields', () => {\n      const error = createValidationError(\n        'missing_required_field',\n        'name',\n        'Name is required',\n        'error',\n        'Add at least one name',\n        'patient-123',\n        'Patient'\n      );\n      \n      expect(error.type).toBe('missing_required_field');\n      expect(error.field).toBe('name');\n      expect(error.message).toBe('Name is required');\n      expect(error.severity).toBe('error');\n      expect(error.suggestion).toBe('Add at least one name');\n      expect(error.resourceId).toBe('patient-123');\n      expect(error.resourceType).toBe('Patient');\n    });\n  });\n\n  describe('formatValidationErrors', () => {\n    it('should format single error', () => {\n      const errors = [\n        createValidationError('missing_required_field', 'name', 'Name is required')\n      ];\n      \n      const formatted = formatValidationErrors(errors);\n      \n      expect(formatted).toContain('[ERROR] name: Name is required');\n    });\n\n    it('should format multiple errors', () => {\n      const errors = [\n        createValidationError('missing_required_field', 'name', 'Name is required'),\n        createValidationError('missing_required_field', 'id', 'ID is required')\n      ];\n      \n      const formatted = formatValidationErrors(errors);\n      \n      expect(formatted).toContain('name: Name is required');\n      expect(formatted).toContain('id: ID is required');\n    });\n\n    it('should handle empty errors array', () => {\n      const formatted = formatValidationErrors([]);\n      \n      expect(formatted).toBe('No validation errors found.');\n    });\n  });\n\n  describe('isFhirJson', () => {\n    it('should return true for valid FHIR JSON', () => {\n      expect(isFhirJson(validPatientJson)).toBe(true);\n    });\n\n    it('should return false for invalid JSON', () => {\n      expect(isFhirJson(invalidJson)).toBe(false);\n    });\n\n    it('should return false for non-FHIR JSON', () => {\n      const nonFhirJson = JSON.stringify({ name: 'John', age: 30 });\n      expect(isFhirJson(nonFhirJson)).toBe(false);\n    });\n  });\n\n  describe('getFhirResourceType', () => {\n    it('should extract resource type from valid JSON', () => {\n      const resourceType = getFhirResourceType(validPatientJson);\n      \n      expect(resourceType).toBe('Patient');\n    });\n\n    it('should return null for invalid JSON', () => {\n      const resourceType = getFhirResourceType(invalidJson);\n      \n      expect(resourceType).toBeNull();\n    });\n\n    it('should handle JSON without resourceType', () => {\n      const noResourceTypeJson = JSON.stringify({ id: '123', name: 'John' });\n      const resourceType = getFhirResourceType(noResourceTypeJson);\n      \n      expect(resourceType).toBeNull();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/types/fhirBundle.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/types/fhirBundle.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { FhirResource, FhirPatient, FhirEncounter, FhirObservation } from './index';\n\n/**\n * FHIR Bundle resource types\n */\nexport type BundleType = \n  | 'document' \n  | 'message' \n  | 'transaction' \n  | 'transaction-response' \n  | 'batch' \n  | 'batch-response' \n  | 'history' \n  | 'searchset' \n  | 'collection';\n\n/**\n * FHIR Bundle entry\n */\nexport interface BundleEntry {\n  fullUrl?: string;\n  resource: FhirResource;\n  request?: {\n    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n    url: string;\n    ifNoneMatch?: string;\n    ifModifiedSince?: string;\n    ifMatch?: string;\n    ifNoneExist?: string;\n  };\n  response?: {\n    status: string;\n    location?: string;\n    etag?: string;\n    lastModified?: string;\n    outcome?: FhirResource;\n  };\n  search?: {\n    mode?: 'match' | 'include' | 'outcome';\n    score?: number;\n  };\n}\n\n/**\n * FHIR Bundle resource\n */\nexport interface FhirBundle extends FhirResource {\n  resourceType: 'Bundle';\n  type: BundleType;\n  total?: number;\n  link?: Array<{\n    relation: string;\n    url: string;\n  }>;\n  entry: BundleEntry[];\n}\n\n/**\n * Clinical data bundle containing Patient, Encounter, and Observations\n */\nexport interface ClinicalDataBundle {\n  patient: FhirPatient;\n  encounter: FhirEncounter;\n  observations: FhirObservation[];\n}\n\n/**\n * Bundle validation result\n */\nexport interface BundleValidationResult {\n  isValid: boolean;\n  isCaCoreCompliant: boolean;\n  isUsCoreCompliant: boolean;\n  errors: string[];\n  warnings: string[];\n  resourceResults: {\n    patient?: {\n      isValid: boolean;\n      isCaCoreCompliant: boolean;\n      isUsCoreCompliant: boolean;\n      errors: string[];\n      warnings: string[];\n    };\n    encounter?: {\n      isValid: boolean;\n      isCaCoreCompliant: boolean;\n      isUsCoreCompliant: boolean;\n      errors: string[];\n      warnings: string[];\n    };\n    observations?: Array<{\n      isValid: boolean;\n      isCaCoreCompliant: boolean;\n      isUsCoreCompliant: boolean;\n      errors: string[];\n      warnings: string[];\n    }>;\n  };\n  summary: {\n    totalResources: number;\n    validResources: number;\n    invalidResources: number;\n    caCoreCompliantResources: number;\n    usCoreCompliantResources: number;\n  };\n}\n\n/**\n * Bundle creation options\n */\nexport interface BundleOptions {\n  type?: BundleType;\n  includeMeta?: boolean;\n  profile?: 'ca-core' | 'us-core';\n  validateOnCreate?: boolean;\n}\n\n/**\n * Bundle export options\n */\nexport interface BundleExportOptions {\n  format?: 'json' | 'xml';\n  pretty?: boolean;\n  includeValidation?: boolean;\n  profile?: 'ca-core' | 'us-core';\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/types/fhirEncounter.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/types/fhirEncounter.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview FHIR Encounter Types - Lightweight Implementation\n * @version 1.0.0\n * @author AiDuxCare Development Team\n * @compliance FHIR R4 + CA Core + US Core\n */\n\nimport type { FhirResource } from './fhirPatient';\n\n// FHIR Encounter Resource - Core Fields\nexport interface FhirEncounter extends FhirResource {\n  resourceType: 'Encounter';\n  \n  // Required fields for CA Core and US Core\n  identifier?: Array<{\n    use?: 'usual' | 'official' | 'temp' | 'secondary' | 'old';\n    type?: {\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n    };\n    system?: string;\n    value: string;\n    assigner?: {\n      reference?: string;\n      display?: string;\n    };\n  }>;\n  \n  status: 'planned' | 'arrived' | 'triaged' | 'in-progress' | 'onleave' | 'finished' | 'cancelled' | 'entered-in-error' | 'unknown';\n  \n  statusHistory?: Array<{\n    status: 'planned' | 'arrived' | 'triaged' | 'in-progress' | 'onleave' | 'finished' | 'cancelled' | 'entered-in-error' | 'unknown';\n    period: {\n      start?: string;\n      end?: string;\n    };\n  }>;\n  \n  class: {\n    system: string;\n    code: string;\n    display?: string;\n  };\n  \n  classHistory?: Array<{\n    class: {\n      system: string;\n      code: string;\n      display?: string;\n    };\n    period: {\n      start?: string;\n      end?: string;\n    };\n  }>;\n  \n  type?: Array<{\n    coding: Array<{\n      system: string;\n      code: string;\n      display?: string;\n    }>;\n    text?: string;\n  }>;\n  \n  serviceType?: {\n    coding: Array<{\n      system: string;\n      code: string;\n      display?: string;\n    }>;\n    text?: string;\n  };\n  \n  priority?: {\n    coding: Array<{\n      system: string;\n      code: string;\n      display?: string;\n    }>;\n    text?: string;\n  };\n  \n  subject?: {\n    reference: string;\n    display?: string;\n  };\n  \n  episodeOfCare?: Array<{\n    reference: string;\n    display?: string;\n  }>;\n  \n  basedOn?: Array<{\n    reference: string;\n    display?: string;\n  }>;\n  \n  participant?: Array<{\n    type?: Array<{\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n      text?: string;\n    }>;\n    period?: {\n      start?: string;\n      end?: string;\n    };\n    individual?: {\n      reference: string;\n      display?: string;\n    };\n  }>;\n  \n  appointment?: Array<{\n    reference: string;\n    display?: string;\n  }>;\n  \n  period?: {\n    start?: string;\n    end?: string;\n  };\n  \n  length?: {\n    value?: number;\n    unit?: string;\n    system?: string;\n    code?: string;\n  };\n  \n  reasonCode?: Array<{\n    coding: Array<{\n      system: string;\n      code: string;\n      display?: string;\n    }>;\n    text?: string;\n  }>;\n  \n  reasonReference?: Array<{\n    reference: string;\n    display?: string;\n  }>;\n  \n  diagnosis?: Array<{\n    condition: {\n      reference: string;\n      display?: string;\n    };\n    use?: {\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n      text?: string;\n    };\n    rank?: number;\n  }>;\n  \n  account?: Array<{\n    reference: string;\n    display?: string;\n  }>;\n  \n  hospitalization?: {\n    preAdmissionIdentifier?: {\n      use?: 'usual' | 'official' | 'temp' | 'secondary' | 'old';\n      type?: {\n        coding: Array<{\n          system: string;\n          code: string;\n          display?: string;\n        }>;\n      };\n      system?: string;\n      value: string;\n      assigner?: {\n        reference?: string;\n        display?: string;\n      };\n    };\n    origin?: {\n      reference: string;\n      display?: string;\n    };\n    admitSource?: {\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n      text?: string;\n    };\n    reAdmission?: {\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n      text?: string;\n    };\n    dietPreference?: Array<{\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n      text?: string;\n    }>;\n    specialCourtesy?: Array<{\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n      text?: string;\n    }>;\n    specialArrangement?: Array<{\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n      text?: string;\n    }>;\n    destination?: {\n      reference: string;\n      display?: string;\n    };\n    dischargeDisposition?: {\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n      text?: string;\n    };\n  };\n  \n  location?: Array<{\n    location: {\n      reference: string;\n      display?: string;\n    };\n    status?: 'planned' | 'active' | 'reserved' | 'completed';\n    physicalType?: {\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n      text?: string;\n    };\n    period?: {\n      start?: string;\n      end?: string;\n    };\n  }>;\n  \n  serviceProvider?: {\n    reference: string;\n    display?: string;\n  };\n  \n  partOf?: {\n    reference: string;\n    display?: string;\n  };\n}\n\n// Validation result for Encounter\nexport interface EncounterValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  compliance: {\n    caCore: boolean;\n    usCore: boolean;\n    fhirR4: boolean;\n  };\n  suggestions: string[];\n}\n\n// Encounter mapping from internal to FHIR\nexport interface EncounterMapping {\n  internalId: string;\n  fhirId: string;\n  mappedFields: string[];\n  unmappedFields: string[];\n  validationScore: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/types/fhirObservation.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/types/fhirObservation.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview FHIR Observation Types - Lightweight Implementation\n * @version 1.0.0\n * @author AiDuxCare Development Team\n * @compliance FHIR R4 + CA Core + US Core\n */\n\nimport type { FhirResource } from './fhirPatient';\n\n// FHIR Observation Resource - Core Fields\nexport interface FhirObservation extends FhirResource {\n  resourceType: 'Observation';\n  \n  // Required fields for CA Core and US Core\n  identifier?: Array<{\n    use?: 'usual' | 'official' | 'temp' | 'secondary' | 'old';\n    type?: {\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n    };\n    system?: string;\n    value: string;\n    assigner?: {\n      reference?: string;\n      display?: string;\n    };\n  }>;\n  \n  basedOn?: Array<{\n    reference: string;\n    display?: string;\n  }>;\n  \n  partOf?: Array<{\n    reference: string;\n    display?: string;\n  }>;\n  \n  status: 'registered' | 'preliminary' | 'final' | 'amended' | 'corrected' | 'cancelled' | 'entered-in-error' | 'unknown';\n  \n  category?: Array<{\n    coding: Array<{\n      system: string;\n      code: string;\n      display?: string;\n    }>;\n    text?: string;\n  }>;\n  \n  code: {\n    coding: Array<{\n      system: string;\n      code: string;\n      display?: string;\n    }>;\n    text?: string;\n  };\n  \n  subject?: {\n    reference: string;\n    display?: string;\n  };\n  \n  focus?: Array<{\n    reference: string;\n    display?: string;\n  }>;\n  \n  encounter?: {\n    reference: string;\n    display?: string;\n  };\n  \n  effectiveDateTime?: string;\n  effectivePeriod?: {\n    start?: string;\n    end?: string;\n  };\n  effectiveTiming?: {\n    event?: string[];\n    repeat?: {\n      boundsDuration?: {\n        value?: number;\n        unit?: string;\n        system?: string;\n        code?: string;\n      };\n      boundsRange?: {\n        low?: {\n          value?: number;\n          unit?: string;\n          system?: string;\n          code?: string;\n        };\n        high?: {\n          value?: number;\n          unit?: string;\n          system?: string;\n          code?: string;\n        };\n      };\n      boundsPeriod?: {\n        start?: string;\n        end?: string;\n      };\n      count?: number;\n      countMax?: number;\n      duration?: number;\n      durationMax?: number;\n      durationUnit?: 'h' | 'min' | 's' | 'ms' | 'a' | 'mo' | 'wk' | 'd';\n      frequency?: number;\n      frequencyMax?: number;\n      period?: number;\n      periodMax?: number;\n      periodUnit?: 'h' | 'min' | 's' | 'ms' | 'a' | 'mo' | 'wk' | 'd';\n      timeOfDay?: string[];\n      when?: 'MORN' | 'MORN.early' | 'MORN.late' | 'NOON' | 'AFT' | 'AFT.early' | 'AFT.late' | 'EVE' | 'EVE.early' | 'EVE.late' | 'NIGHT' | 'PHS' | 'HS' | 'WAKE' | 'C' | 'CM' | 'CD' | 'CV' | 'AC' | 'ACM' | 'ACD' | 'ACV' | 'PC' | 'PCM' | 'PCD' | 'PCV';\n      offset?: number;\n    };\n    code?: {\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n      text?: string;\n    };\n  };\n  effectiveInstant?: string;\n  \n  issued?: string;\n  \n  performer?: Array<{\n    reference: string;\n    display?: string;\n  }>;\n  \n  valueQuantity?: {\n    value?: number;\n    unit?: string;\n    system?: string;\n    code?: string;\n  };\n  \n  valueCodeableConcept?: {\n    coding: Array<{\n      system: string;\n      code: string;\n      display?: string;\n    }>;\n    text?: string;\n  };\n  \n  valueString?: string;\n  \n  valueBoolean?: boolean;\n  \n  valueInteger?: number;\n  \n  valueRange?: {\n    low?: {\n      value?: number;\n      unit?: string;\n      system?: string;\n      code?: string;\n    };\n    high?: {\n      value?: number;\n      unit?: string;\n      system?: string;\n      code?: string;\n    };\n  };\n  \n  valueRatio?: {\n    numerator?: {\n      value?: number;\n      unit?: string;\n      system?: string;\n      code?: string;\n    };\n    denominator?: {\n      value?: number;\n      unit?: string;\n      system?: string;\n      code?: string;\n    };\n  };\n  \n  valueSampledData?: {\n    origin: {\n      value?: number;\n      unit?: string;\n      system?: string;\n      code?: string;\n    };\n    period: number;\n    factor?: number;\n    lowerLimit?: number;\n    upperLimit?: number;\n    dimensions: number;\n    data?: string;\n  };\n  \n  valueTime?: string;\n  \n  valueDateTime?: string;\n  \n  valuePeriod?: {\n    start?: string;\n    end?: string;\n  };\n  \n  valueAttachment?: {\n    contentType?: string;\n    language?: string;\n    data?: string;\n    url?: string;\n    size?: number;\n    hash?: string;\n    title?: string;\n    creation?: string;\n  };\n  \n  valueReference?: {\n    reference: string;\n    display?: string;\n  };\n  \n  dataAbsentReason?: {\n    coding: Array<{\n      system: string;\n      code: string;\n      display?: string;\n    }>;\n    text?: string;\n  };\n  \n  interpretation?: Array<{\n    coding: Array<{\n      system: string;\n      code: string;\n      display?: string;\n    }>;\n    text?: string;\n  }>;\n  \n  note?: Array<{\n    authorString?: string;\n    authorReference?: {\n      reference: string;\n      display?: string;\n    };\n    time?: string;\n    text: string;\n  }>;\n  \n  bodySite?: {\n    coding: Array<{\n      system: string;\n      code: string;\n      display?: string;\n    }>;\n    text?: string;\n  };\n  \n  method?: {\n    coding: Array<{\n      system: string;\n      code: string;\n      display?: string;\n    }>;\n    text?: string;\n  };\n  \n  specimen?: {\n    reference: string;\n    display?: string;\n  };\n  \n  device?: {\n    reference: string;\n    display?: string;\n  };\n  \n  referenceRange?: Array<{\n    low?: {\n      value?: number;\n      unit?: string;\n      system?: string;\n      code?: string;\n    };\n    high?: {\n      value?: number;\n      unit?: string;\n      system?: string;\n      code?: string;\n    };\n    type?: {\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n      text?: string;\n    };\n    appliesTo?: Array<{\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n      text?: string;\n    }>;\n    age?: {\n      low?: {\n        value?: number;\n        unit?: string;\n        system?: string;\n        code?: string;\n      };\n      high?: {\n        value?: number;\n        unit?: string;\n        system?: string;\n        code?: string;\n      };\n    };\n    text?: string;\n  }>;\n  \n  hasMember?: Array<{\n    reference: string;\n    display?: string;\n  }>;\n  \n  derivedFrom?: Array<{\n    reference: string;\n    display?: string;\n  }>;\n  \n  component?: Array<{\n    code: {\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n      text?: string;\n    };\n    valueQuantity?: {\n      value?: number;\n      unit?: string;\n      system?: string;\n      code?: string;\n    };\n    valueCodeableConcept?: {\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n      text?: string;\n    };\n    valueString?: string;\n    valueBoolean?: boolean;\n    valueInteger?: number;\n    valueRange?: {\n      low?: {\n        value?: number;\n        unit?: string;\n        system?: string;\n        code?: string;\n      };\n      high?: {\n        value?: number;\n        unit?: string;\n        system?: string;\n        code?: string;\n      };\n    };\n    valueRatio?: {\n      numerator?: {\n        value?: number;\n        unit?: string;\n        system?: string;\n        code?: string;\n      };\n      denominator?: {\n        value?: number;\n        unit?: string;\n        system?: string;\n        code?: string;\n      };\n    };\n    valueSampledData?: {\n      origin: {\n        value?: number;\n        unit?: string;\n        system?: string;\n        code?: string;\n      };\n      period: number;\n      factor?: number;\n      lowerLimit?: number;\n      upperLimit?: number;\n      dimensions: number;\n      data?: string;\n    };\n    valueTime?: string;\n    valueDateTime?: string;\n    valuePeriod?: {\n      start?: string;\n      end?: string;\n    };\n    valueAttachment?: {\n      contentType?: string;\n      language?: string;\n      data?: string;\n      url?: string;\n      size?: number;\n      hash?: string;\n      title?: string;\n      creation?: string;\n    };\n    valueReference?: {\n      reference: string;\n      display?: string;\n    };\n    dataAbsentReason?: {\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n      text?: string;\n    };\n    interpretation?: Array<{\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n      text?: string;\n    }>;\n    referenceRange?: Array<{\n      low?: {\n        value?: number;\n        unit?: string;\n        system?: string;\n        code?: string;\n      };\n      high?: {\n        value?: number;\n        unit?: string;\n        system?: string;\n        code?: string;\n      };\n      type?: {\n        coding: Array<{\n          system: string;\n          code: string;\n          display?: string;\n        }>;\n        text?: string;\n      };\n      appliesTo?: Array<{\n        coding: Array<{\n          system: string;\n          code: string;\n          display?: string;\n        }>;\n        text?: string;\n      }>;\n      age?: {\n        low?: {\n          value?: number;\n          unit?: string;\n          system?: string;\n          code?: string;\n        };\n        high?: {\n          value?: number;\n          unit?: string;\n          system?: string;\n          code?: string;\n        };\n      };\n      text?: string;\n    }>;\n  }>;\n}\n\n// Validation result for Observation\nexport interface ObservationValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  compliance: {\n    caCore: boolean;\n    usCore: boolean;\n    fhirR4: boolean;\n  };\n  suggestions: string[];\n}\n\n// Observation mapping from internal to FHIR\nexport interface ObservationMapping {\n  internalId: string;\n  fhirId: string;\n  mappedFields: string[];\n  unmappedFields: string[];\n  validationScore: number;\n}\n\n// Vital Signs specific types\nexport interface VitalSignsObservation extends FhirObservation {\n  category: [{\n    coding: [{\n      system: 'http://terminology.hl7.org/CodeSystem/observation-category';\n      code: 'vital-signs';\n      display: 'Vital Signs';\n    }];\n    text: 'Vital Signs';\n  }];\n}\n\n// Common vital signs codes\nexport const VITAL_SIGNS_CODES = {\n  BLOOD_PRESSURE: {\n    system: 'http://loinc.org',\n    code: '85354-9',\n    display: 'Blood pressure panel with all children optional'\n  },\n  HEART_RATE: {\n    system: 'http://loinc.org',\n    code: '8867-4',\n    display: 'Heart rate'\n  },\n  RESPIRATORY_RATE: {\n    system: 'http://loinc.org',\n    code: '9279-1',\n    display: 'Respiratory rate'\n  },\n  BODY_TEMPERATURE: {\n    system: 'http://loinc.org',\n    code: '8310-5',\n    display: 'Body temperature'\n  },\n  BODY_WEIGHT: {\n    system: 'http://loinc.org',\n    code: '29463-7',\n    display: 'Body weight'\n  },\n  BODY_HEIGHT: {\n    system: 'http://loinc.org',\n    code: '8302-2',\n    display: 'Body height'\n  }\n} as const;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/types/fhirPatient.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/types/fhirPatient.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview FHIR Patient Types - Lightweight Implementation\n * @version 1.0.0\n * @author AiDuxCare Development Team\n * @compliance FHIR R4 + CA Core + US Core\n */\n\n// Base FHIR Resource\nexport interface FhirResource {\n  resourceType: string;\n  id: string;\n  meta?: {\n    versionId?: string;\n    lastUpdated?: string;\n    profile?: string[];\n    tag?: Array<{\n      system?: string;\n      code?: string;\n      display?: string;\n    }>;\n  };\n}\n\n// FHIR Patient Resource - Core Fields\nexport interface FhirPatient extends FhirResource {\n  resourceType: 'Patient';\n  \n  // Required fields for CA Core and US Core\n  identifier?: Array<{\n    use?: 'usual' | 'official' | 'temp' | 'secondary' | 'old';\n    type?: {\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n    };\n    system?: string;\n    value: string;\n    assigner?: {\n      reference?: string;\n      display?: string;\n    };\n  }>;\n  \n  active?: boolean;\n  \n  name?: Array<{\n    use?: 'usual' | 'official' | 'temp' | 'nickname' | 'anonymous' | 'old' | 'maiden';\n    text?: string;\n    family?: string;\n    given?: string[];\n    prefix?: string[];\n    suffix?: string[];\n    period?: {\n      start?: string;\n      end?: string;\n    };\n  }>;\n  \n  telecom?: Array<{\n    system?: 'phone' | 'fax' | 'email' | 'pager' | 'url' | 'sms' | 'other';\n    value?: string;\n    use?: 'home' | 'work' | 'temp' | 'old' | 'mobile';\n    rank?: number;\n    period?: {\n      start?: string;\n      end?: string;\n    };\n  }>;\n  \n  gender?: 'male' | 'female' | 'other' | 'unknown';\n  \n  birthDate?: string;\n  \n  deceasedBoolean?: boolean;\n  deceasedDateTime?: string;\n  \n  address?: Array<{\n    use?: 'home' | 'work' | 'temp' | 'old' | 'billing';\n    type?: 'postal' | 'physical' | 'both';\n    text?: string;\n    line?: string[];\n    city?: string;\n    district?: string;\n    state?: string;\n    postalCode?: string;\n    country?: string;\n    period?: {\n      start?: string;\n      end?: string;\n    };\n  }>;\n  \n  maritalStatus?: {\n    coding: Array<{\n      system: string;\n      code: string;\n      display?: string;\n    }>;\n    text?: string;\n  };\n  \n  multipleBirthBoolean?: boolean;\n  multipleBirthInteger?: number;\n  \n  photo?: Array<{\n    contentType?: string;\n    language?: string;\n    data?: string;\n    url?: string;\n    size?: number;\n    hash?: string;\n    title?: string;\n    creation?: string;\n  }>;\n  \n  contact?: Array<{\n    relationship?: Array<{\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n      text?: string;\n    }>;\n    name?: {\n      use?: 'usual' | 'official' | 'temp' | 'nickname' | 'anonymous' | 'old' | 'maiden';\n      text?: string;\n      family?: string;\n      given?: string[];\n      prefix?: string[];\n      suffix?: string[];\n      period?: {\n        start?: string;\n        end?: string;\n      };\n    };\n    telecom?: Array<{\n      system?: 'phone' | 'fax' | 'email' | 'pager' | 'url' | 'sms' | 'other';\n      value?: string;\n      use?: 'home' | 'work' | 'temp' | 'old' | 'mobile';\n      rank?: number;\n      period?: {\n        start?: string;\n        end?: string;\n      };\n    }>;\n    address?: {\n      use?: 'home' | 'work' | 'temp' | 'old' | 'billing';\n      type?: 'postal' | 'physical' | 'both';\n      text?: string;\n      line?: string[];\n      city?: string;\n      district?: string;\n      state?: string;\n      postalCode?: string;\n      country?: string;\n      period?: {\n        start?: string;\n        end?: string;\n      };\n    };\n    gender?: 'male' | 'female' | 'other' | 'unknown';\n    organization?: {\n      reference?: string;\n      display?: string;\n    };\n    period?: {\n      start?: string;\n      end?: string;\n    };\n  }>;\n  \n  communication?: Array<{\n    language: {\n      coding: Array<{\n        system: string;\n        code: string;\n        display?: string;\n      }>;\n      text?: string;\n    };\n    preferred?: boolean;\n  }>;\n  \n  generalPractitioner?: Array<{\n    reference?: string;\n    display?: string;\n  }>;\n  \n  managingOrganization?: {\n    reference?: string;\n    display?: string;\n  };\n  \n  link?: Array<{\n    other: {\n      reference: string;\n      display?: string;\n    };\n    type: 'replaced-by' | 'replaces' | 'refer' | 'seealso';\n  }>;\n}\n\n// Validation result for Patient\nexport interface PatientValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  compliance: {\n    caCore: boolean;\n    usCore: boolean;\n    fhirR4: boolean;\n  };\n  suggestions: string[];\n}\n\n// Patient mapping from internal to FHIR\nexport interface PatientMapping {\n  internalId: string;\n  fhirId: string;\n  mappedFields: string[];\n  unmappedFields: string[];\n  validationScore: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/types/index.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/types/index.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview FHIR Types Index - Lightweight Implementation\n * @version 1.0.0\n * @author AiDuxCare Development Team\n * @compliance FHIR R4 + CA Core + US Core\n */\n\n// Export all FHIR types\nexport type {\n  FhirResource,\n  FhirPatient,\n  PatientValidationResult,\n  PatientMapping\n} from './fhirPatient';\n\nexport type {\n  FhirEncounter,\n  EncounterValidationResult,\n  EncounterMapping\n} from './fhirEncounter';\n\nexport type {\n  FhirObservation,\n  VitalSignsObservation,\n  ObservationValidationResult,\n  ObservationMapping\n} from './fhirObservation';\n\n// Export constants\nexport { VITAL_SIGNS_CODES } from './fhirObservation';\n\n// Common FHIR constants\nexport const FHIR_CONSTANTS = {\n  VERSION: 'R4',\n  PROFILES: {\n    CA_CORE: 'http://hl7.org/fhir/StructureDefinition/ca-core-patient',\n    US_CORE: 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient'\n  },\n  SYSTEMS: {\n    LOINC: 'http://loinc.org',\n    SNOMED: 'http://snomed.info/sct',\n    ICD10: 'http://hl7.org/fhir/sid/icd-10',\n    ICD11: 'http://hl7.org/fhir/sid/icd-11'\n  }\n} as const;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/types/public/index.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/types/public/index.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview FHIR Public Types - Stable API Contract\n * @version 1.0.0\n * @author AiDuxCare Development Team\n * @compliance FHIR R4 + CA Core + US Core\n * \n * This file contains ONLY the stable types that form part of the external API contract.\n * Internal types and implementation details are NOT exposed here.\n */\n\n// Core FHIR Resource Types\nexport type {\n  FhirResource,\n  FhirPatient,\n  FhirEncounter,\n  FhirObservation\n} from '../index';\n\n// Validation Result Types\nexport type {\n  ValidationResult,\n  BundleValidationResult,\n  ValidationError,\n  ValidationOptions\n} from '../validation';\n\n// Bundle Types\nexport type {\n  FhirBundle,\n  BundleEntry,\n  BundleType\n} from '../fhirBundle';\n\n// Constants\nexport { VITAL_SIGNS_CODES } from '../fhirObservation';\nexport { FHIR_CONSTANTS } from '../index';\n\n// Public API Types\nexport interface FhirConversionOptions {\n  profile: 'CA_CORE' | 'US_CORE';\n  includeMeta?: boolean;\n  strictValidation?: boolean;\n}\n\nexport interface FhirValidationOptions {\n  profile: 'CA_CORE' | 'US_CORE';\n  strictMode?: boolean;\n  includeWarnings?: boolean;\n}\n\nexport interface FhirBundleOptions {\n  type: 'document' | 'message' | 'transaction' | 'transaction-response' | 'batch' | 'batch-response' | 'history' | 'searchset' | 'collection';\n  profile: 'CA_CORE' | 'US_CORE';\n  includeMeta?: boolean;\n}\n\n// Public API Function Signatures\nexport interface FhirPublicAPI {\n  // Conversion functions\n  toFhir: {\n    patient: (patient: unknown, options: FhirConversionOptions) => unknown;\n    encounter: (encounter: unknown, options: FhirConversionOptions) => unknown;\n    observation: (observation: unknown, options: FhirConversionOptions) => unknown;\n  };\n  \n  // Conversion from FHIR\n  fromFhir: {\n    patient: (resource: unknown) => unknown;\n    encounter: (resource: unknown) => unknown;\n    observation: (resource: unknown) => unknown;\n  };\n  \n  // Validation functions\n  validate: (resource: unknown, profile: 'CA_CORE' | 'US_CORE') => ValidationResult;\n  \n  // Bundle operations\n  makeBundle: (entries: unknown[], profile: 'CA_CORE' | 'US_CORE') => FhirBundle;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/types/validation.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/types/validation.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// import type { FhirResource } from './fhirPatient';\n\n/**\n * Base validation result interface for all FHIR resources\n */\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  compliance: {\n    caCore: boolean;\n    usCore: boolean;\n  };\n  timestamp: string;\n}\n\n/**\n * Bundle validation result for multiple FHIR resources\n */\nexport interface BundleValidationResult extends ValidationResult {\n  resourceCount: number;\n  resourceResults: {\n    [resourceType: string]: {\n      count: number;\n      valid: number;\n      errors: string[];\n    };\n  };\n  profileCompliance: {\n    caCore: {\n      compliant: boolean;\n      issues: string[];\n    };\n    usCore: {\n      compliant: boolean;\n      issues: string[];\n    };\n  };\n}\n\n/**\n * Validation error types for better error categorization\n */\nexport type ValidationErrorType = \n  | 'missing_required_field'\n  | 'invalid_field_value'\n  | 'unsupported_profile'\n  | 'invalid_reference'\n  | 'missing_identifier'\n  | 'invalid_code_system'\n  | 'profile_violation'\n  | 'structural_error';\n\n/**\n * Detailed validation error with context\n */\nexport interface ValidationError {\n  type: ValidationErrorType;\n  field: string;\n  message: string;\n  severity: 'error' | 'warning';\n  suggestion?: string;\n  resourceId?: string;\n  resourceType?: string;\n}\n\n/**\n * Enhanced validation result with detailed errors\n */\nexport interface DetailedValidationResult extends ValidationResult {\n  detailedErrors: ValidationError[];\n  fieldValidation: {\n    [fieldPath: string]: {\n      valid: boolean;\n      errors: ValidationError[];\n    };\n  };\n}\n\n/**\n * Profile-specific validation options\n */\nexport interface ValidationOptions {\n  profile?: 'ca-core' | 'us-core' | 'both';\n  strictMode?: boolean;\n  includeWarnings?: boolean;\n  validateReferences?: boolean;\n  customRules?: Array<{\n    field: string;\n    rule: (value: unknown) => boolean;\n    message: string;\n  }>;\n}\n\n/**\n * Validation context for better error reporting\n */\nexport interface ValidationContext {\n  source: 'import' | 'export' | 'api' | 'manual';\n  timestamp: string;\n  userId?: string;\n  sessionId?: string;\n  operation: 'validate' | 'convert' | 'bundle';\n  options: ValidationOptions;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/utils/bundleUtils.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/utils/bundleUtils.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { \n  FhirBundle, \n  BundleEntry, \n  // BundleType, \n  ClinicalDataBundle,\n  BundleOptions,\n  BundleExportOptions\n} from '../types/fhirBundle';\nimport type { FhirPatient, FhirEncounter, FhirObservation } from '../types';\nimport type { BundleValidationResult, ValidationOptions } from '../types/validation';\n\n/**\n * Creates a FHIR Bundle from individual resources\n */\nexport function createFhirBundle(\n  resources: Array<FhirPatient | FhirEncounter | FhirObservation>,\n  options: BundleOptions = {}\n): FhirBundle {\n  const {\n    type = 'collection',\n    profile = 'ca-core',\n    includeMeta = true\n  } = options;\n\n  const entries: BundleEntry[] = resources.map((resource) => ({\n    fullUrl: `urn:uuid:${resource.id}`,\n    resource,\n    search: {\n      mode: 'match',\n      score: 1.0\n    }\n  }));\n\n  const bundle: FhirBundle = {\n    resourceType: 'Bundle',\n    id: `bundle-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n    type,\n    total: entries.length,\n    entry: entries\n  };\n\n  if (includeMeta) {\n    bundle.meta = {\n      profile: [\n        profile === 'ca-core' \n          ? 'http://hl7.org/fhir/StructureDefinition/ca-core-bundle'\n          : 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-bundle',\n        profile // Include the short profile name as well\n      ],\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  return bundle;\n}\n\n/**\n * Creates a clinical data bundle with Patient, Encounter, and Observations\n */\nexport function createClinicalDataBundle(\n  clinicalData: ClinicalDataBundle,\n  options: BundleOptions = {}\n): FhirBundle {\n  const resources = [\n    clinicalData.patient,\n    clinicalData.encounter,\n    ...clinicalData.observations\n  ];\n\n  return createFhirBundle(resources, {\n    ...options,\n    type: 'document'\n  });\n}\n\n/**\n * Extracts resources from a FHIR Bundle\n */\nexport function extractBundleResources(bundle: FhirBundle): {\n  patients: FhirPatient[];\n  encounters: FhirEncounter[];\n  observations: FhirObservation[];\n  other: Array<FhirPatient | FhirEncounter | FhirObservation>;\n} {\n  const patients: FhirPatient[] = [];\n  const encounters: FhirEncounter[] = [];\n  const observations: FhirObservation[] = [];\n  const other: Array<FhirPatient | FhirEncounter | FhirObservation> = [];\n\n  bundle.entry.forEach((entry) => {\n    const resource = entry.resource;\n    \n    switch (resource.resourceType) {\n      case 'Patient':\n        patients.push(resource as FhirPatient);\n        break;\n      case 'Encounter':\n        encounters.push(resource as FhirEncounter);\n        break;\n      case 'Observation':\n        observations.push(resource as FhirObservation);\n        break;\n      default:\n        other.push(resource as FhirPatient | FhirEncounter | FhirObservation);\n    }\n  });\n\n  return { patients, encounters, observations, other };\n}\n\n/**\n * Validates a FHIR Bundle structure and content\n */\nexport function validateFhirBundle(\n  bundle: FhirBundle,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  options: ValidationOptions = {}\n): BundleValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  \n  // Basic bundle structure validation\n  if (!bundle.resourceType || bundle.resourceType !== 'Bundle') {\n    errors.push('Invalid resourceType: must be \"Bundle\"');\n  }\n  \n  if (!bundle.type) {\n    errors.push('Bundle type is required');\n  }\n  \n  if (!bundle.entry || !Array.isArray(bundle.entry)) {\n    errors.push('Bundle must contain entries array');\n  }\n  \n  // const { profile, strictMode, includeWarnings, validateReferences } = options;\n\n  // Validate each entry\n  const resourceResults: BundleValidationResult['resourceResults'] = {};\n  let totalResources = 0;\n  // let validResources = 0;\n\n  if (bundle.entry) {\n    bundle.entry.forEach((entry, index) => {\n      if (!entry.resource) {\n        errors.push(`Entry ${index}: missing resource`);\n        return;\n      }\n\n      const resourceType = entry.resource.resourceType;\n      if (!resourceType) {\n        errors.push(`Entry ${index}: resource missing resourceType`);\n        return;\n      }\n\n      // Count resources by type\n      if (!resourceResults[resourceType]) {\n        resourceResults[resourceType] = { count: 0, valid: 0, errors: [] };\n      }\n      resourceResults[resourceType].count++;\n      totalResources++;\n\n      // Basic resource validation\n      if (entry.resource.id) {\n        resourceResults[resourceType].valid++;\n        // validResources++;\n      } else {\n        resourceResults[resourceType].errors.push('Missing resource ID');\n        errors.push(`Entry ${index}: ${resourceType} missing ID`); // Change warning to error\n      }\n    });\n  }\n\n  // Profile compliance check\n  const profileCompliance = {\n    caCore: { compliant: true, issues: [] },\n    usCore: { compliant: true, issues: [] }\n  };\n\n  if (bundle.meta?.profile) {\n    const profiles = Array.isArray(bundle.meta.profile) \n      ? bundle.meta.profile \n      : [bundle.meta.profile];\n    \n    if (!profiles.some(p => p.includes('ca-core'))) {\n      profileCompliance.caCore.compliant = false;\n      profileCompliance.caCore.issues.push('Missing CA Core profile');\n    }\n    \n    if (!profiles.some(p => p.includes('us-core'))) {\n      profileCompliance.usCore.compliant = false;\n      profileCompliance.usCore.issues.push('Missing US Core profile');\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n    compliance: {\n      caCore: profileCompliance.caCore.compliant,\n      usCore: profileCompliance.usCore.compliant\n    },\n    timestamp: new Date().toISOString(),\n    resourceCount: totalResources,\n    resourceResults,\n    profileCompliance\n  };\n}\n\n/**\n * Converts a FHIR Bundle to a clinical data structure\n */\nexport function bundleToClinicalData(\n  bundle: FhirBundle\n): ClinicalDataBundle | null {\n  const { patients, encounters, observations } = extractBundleResources(bundle);\n  \n  if (patients.length === 0 || encounters.length === 0) {\n    return null;\n  }\n\n  return {\n    patient: patients[0], // Assume first patient is primary\n    encounter: encounters[0], // Assume first encounter is primary\n    observations\n  };\n}\n\n/**\n * Exports a FHIR Bundle with specific options\n */\nexport function exportFhirBundle(\n  bundle: FhirBundle,\n  options: BundleExportOptions = {}\n): string {\n  const {\n    prettyPrint = true,\n    includeNulls = false,\n    profile = 'ca-core'\n    // options\n  } = options;\n\n  // Add profile if not present\n  if (!bundle.meta?.profile) {\n    bundle.meta = {\n      ...bundle.meta,\n      profile: [\n        profile === 'ca-core' \n          ? 'http://hl7.org/fhir/StructureDefinition/ca-core-bundle'\n          : 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-bundle'\n      ]\n    };\n  }\n\n  // Filter out null values if requested\n  const exportData = includeNulls ? bundle : removeNullValues(bundle);\n  // const validResources = exportData;\n\n  return prettyPrint \n    ? JSON.stringify(exportData, null, 2)\n    : JSON.stringify(exportData);\n}\n\n/**\n * Removes null values from an object recursively\n */\nfunction removeNullValues(obj: unknown): unknown {\n  if (obj === null || obj === undefined) {\n    return undefined;\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(removeNullValues).filter(item => item !== undefined);\n  }\n  \n  if (typeof obj === 'object' && obj !== null) {\n    const cleaned: Record<string, unknown> = {};\n    for (const [key, value] of Object.entries(obj)) {\n      const cleanedValue = removeNullValues(value);\n      if (cleanedValue !== undefined) {\n        cleaned[key] = cleanedValue;\n      }\n    }\n    return cleaned;\n  }\n  \n  return obj;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/utils/jsonUtils.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/utils/jsonUtils.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// import type { /* FhirResource, */ FhirPatient, FhirEncounter, FhirObservation } from '../types';\nimport type { ValidationResult, ValidationError, ValidationErrorType } from '../types/validation';\n\n/**\n * Validates FHIR JSON structure and basic syntax\n */\nexport function validateFhirJson(\n  jsonString: string,\n  expectedResourceType?: 'Patient' | 'Encounter' | 'Observation' | 'Bundle'\n): { isValid: boolean; errors: string[]; parsedData?: unknown } {\n  const errors: string[] = [];\n  \n  // Basic JSON syntax validation\n  let parsedData: unknown;\n  try {\n    parsedData = JSON.parse(jsonString);\n  } catch (error) {\n    errors.push('Invalid JSON syntax');\n    return { isValid: false, errors };\n  }\n  \n  // Basic FHIR resource validation\n  if (!parsedData || typeof parsedData !== 'object') {\n    errors.push('Parsed data must be an object');\n    return { isValid: false, errors };\n  }\n  \n  if (!parsedData.resourceType) {\n    errors.push('Missing required field: resourceType');\n    return { isValid: false, errors };\n  }\n  \n  if (typeof parsedData.resourceType !== 'string') {\n    errors.push('resourceType must be a string');\n    return { isValid: false, errors };\n  }\n  \n  // Check if resourceType matches expected type\n  if (expectedResourceType && parsedData.resourceType !== expectedResourceType) {\n    errors.push(`Expected resourceType '${expectedResourceType}', got '${parsedData.resourceType}'`);\n  }\n  \n  // Validate resourceType is a known FHIR resource\n  const validResourceTypes = ['Patient', 'Encounter', 'Observation', 'Bundle', 'Organization', 'Practitioner'];\n  if (!validResourceTypes.includes(parsedData.resourceType)) {\n    errors.push(`Unknown resourceType: '${parsedData.resourceType}'`);\n  }\n  \n  // Basic ID validation\n  if (!parsedData.id) {\n    errors.push('Missing required field: id');\n  } else if (typeof parsedData.id !== 'string') {\n    errors.push('id must be a string');\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors,\n    parsedData: errors.length === 0 ? parsedData : undefined\n  };\n}\n\n/**\n * Parses FHIR JSON and returns typed resource\n */\nexport function parseFhirResource<T extends FhirResource>(\n  jsonString: string,\n  resourceType: T['resourceType']\n): { success: true; resource: T } | { success: false; errors: string[] } {\n  const validation = validateFhirJson(jsonString);\n  \n  if (!validation.isValid) {\n    return { success: false, errors: validation.errors };\n  }\n  \n  const parsedData = validation.parsedData!;\n  \n  // Type guard validation\n  if (parsedData.resourceType !== resourceType) {\n    return { \n      success: false, \n      errors: [`Type mismatch: expected ${resourceType}, got ${parsedData.resourceType}`] \n    };\n  }\n  \n  return { success: true, resource: parsedData as T };\n}\n\n/**\n * Validates FHIR JSON against specific profile requirements\n */\nexport function validateFhirProfile(\n  jsonString: string,\n  profile: 'ca-core' | 'us-core'\n): ValidationResult {\n  const validation = validateFhirJson(jsonString);\n  \n  if (!validation.isValid) {\n    return {\n      isValid: false,\n      errors: validation.errors,\n      warnings: [],\n      compliance: { caCore: false, usCore: false },\n      timestamp: new Date().toISOString()\n    };\n  }\n  \n  const parsedData = validation.parsedData!;\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  \n  // Profile-specific validation\n  if (profile === 'ca-core') {\n    const caCoreValidation = validateCaCoreProfile(parsedData);\n    errors.push(...caCoreValidation.errors);\n    warnings.push(...caCoreValidation.warnings);\n  } else if (profile === 'us-core') {\n    const usCoreValidation = validateUsCoreProfile(parsedData);\n    errors.push(...usCoreValidation.errors);\n    warnings.push(...usCoreValidation.warnings);\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n    compliance: {\n      caCore: profile === 'ca-core' && errors.length === 0,\n      usCore: profile === 'us-core' && errors.length === 0\n    },\n    timestamp: new Date().toISOString()\n  };\n}\n\n/**\n * Validates resource against CA Core profile requirements\n */\nfunction validateCaCoreProfile(resource: unknown): { errors: string[]; warnings: string[] } {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  \n  // CA Core specific validation rules\n  if (resource.resourceType === 'Patient') {\n    if (!resource.identifier || resource.identifier.length === 0) {\n      errors.push('CA Core Patient: At least one identifier is required');\n    }\n    \n    if (!resource.name || resource.name.length === 0) {\n      errors.push('CA Core Patient: At least one name is required');\n    }\n  }\n  \n  if (resource.resourceType === 'Encounter') {\n    if (!resource.status) {\n      errors.push('CA Core Encounter: Status is required');\n    }\n    \n    if (!resource.class) {\n      errors.push('CA Core Encounter: Class is required');\n    }\n  }\n  \n  if (resource.resourceType === 'Observation') {\n    if (!resource.status) {\n      errors.push('CA Core Observation: Status is required');\n    }\n    \n    if (!resource.code) {\n      errors.push('CA Core Observation: Code is required');\n    }\n  }\n  \n  return { errors, warnings };\n}\n\n/**\n * Validates resource against US Core profile requirements\n */\nfunction validateUsCoreProfile(resource: unknown): { errors: string[]; warnings: string[] } {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n  \n  // US Core specific validation rules\n  if (resource.resourceType === 'Patient') {\n    if (!resource.birthDate) {\n      errors.push('US Core Patient: Birth date is required');\n    }\n    \n    if (!resource.identifier || resource.identifier.length === 0) {\n      errors.push('US Core Patient: At least one identifier is required');\n    }\n  }\n  \n  if (resource.resourceType === 'Encounter') {\n    if (!resource.status) {\n      errors.push('US Core Encounter: Status is required');\n    }\n    \n    if (!resource.subject) {\n      errors.push('US Core Encounter: Subject reference is required');\n    }\n  }\n  \n  if (resource.resourceType === 'Observation') {\n    if (!resource.status) {\n      errors.push('US Core Observation: Status is required');\n    }\n    \n    if (!resource.code) {\n      errors.push('US Core Observation: Code is required');\n    }\n    \n    if (!resource.subject) {\n      errors.push('US Core Observation: Subject reference is required');\n    }\n  }\n  \n  return { errors, warnings };\n}\n\n/**\n * Creates a detailed validation error\n */\nexport function createValidationError(\n  type: ValidationErrorType,\n  field: string,\n  message: string,\n  severity: 'error' | 'warning' = 'error',\n  suggestion?: string,\n  resourceId?: string,\n  resourceType?: string\n): ValidationError {\n  return {\n    type,\n    field,\n    message,\n    severity,\n    suggestion,\n    resourceId,\n    resourceType\n  };\n}\n\n/**\n * Formats validation errors for human-readable output\n */\nexport function formatValidationErrors(errors: ValidationError[]): string {\n  if (errors.length === 0) {\n    return 'No validation errors found.';\n  }\n  \n  return errors.map(error => {\n    let formatted = `[${error.severity.toUpperCase()}] ${error.field}: ${error.message}`;\n    \n    if (error.suggestion) {\n      formatted += `\\n  Suggestion: ${error.suggestion}`;\n    }\n    \n    if (error.resourceId) {\n      formatted += `\\n  Resource ID: ${error.resourceId}`;\n    }\n    \n    return formatted;\n  }).join('\\n\\n');\n}\n\n/**\n * Checks if a JSON string contains valid FHIR data\n */\nexport function isFhirJson(jsonString: string): boolean {\n  try {\n    const parsed = JSON.parse(jsonString);\n    if (!parsed || typeof parsed !== 'object') {\n      return false;\n    }\n    if (!parsed.resourceType || typeof parsed.resourceType !== 'string') {\n      return false;\n    }\n    if (!parsed.id || typeof parsed.id !== 'string') {\n      return false;\n    }\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Extracts resource type from FHIR JSON string without full parsing\n */\nexport function getFhirResourceType(jsonString: string): string | null {\n  try {\n    // Quick regex to extract resourceType without full JSON parsing\n    const match = jsonString.match(/\"resourceType\"\\s*:\\s*\"([^\"]+)\"/);\n    return match ? match[1] : null;\n  } catch {\n    return null;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/utils/uuidUtils.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/utils/uuidUtils.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * UUID Utilities for FHIR Resources\n * Generates deterministic UUIDs for consistent references\n */\n\n/**\n * Generate a deterministic UUID based on input string\n * @param input Input string to generate UUID from\n * @returns Deterministic UUID string\n */\nexport function generateDeterministicUuid(input: string): string {\n  // Simple hash function for deterministic UUID generation\n  let hash = 0;\n  for (let i = 0; i < input.length; i++) {\n    const char = input.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  \n  // Convert to positive number and format as UUID\n  const positiveHash = Math.abs(hash);\n  const uuid = positiveHash.toString(16).padStart(8, '0');\n  \n  // Format: urn:uuid:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n  return `urn:uuid:${uuid}-${uuid.slice(0, 4)}-${uuid.slice(4, 8)}-${uuid.slice(0, 4)}-${uuid}${uuid.slice(0, 4)}`;\n}\n\n/**\n * Generate a deterministic reference for FHIR resources\n * @param resourceType Type of FHIR resource\n * @param id Resource ID\n * @returns Deterministic reference string\n */\nexport function generateFhirReference(resourceType: string, id: string): string {\n  // Generar referencia literal del tipo \"Patient/patient-123\"\n  return `${resourceType}/${id}`;\n}\n\n/**\n * Generate a deterministic UUID for internal references\n * @param prefix Prefix for the UUID\n * @param id Internal ID\n * @returns Deterministic UUID string\n */\nexport function generateInternalUuid(prefix: string, id: string): string {\n  return generateDeterministicUuid(`${prefix}-${id}`);\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/validators/caCoreValidator.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/validators/caCoreValidator.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview CA Core Validator - Lightweight Implementation\n * @version 2.0.0\n * @author AiDuxCare Development Team\n * @compliance CA Core Implementation Guide\n */\n\nimport type { \n  FhirPatient, \n  FhirEncounter, \n  FhirObservation\n} from '../types';\n\n// CA Core specific validation rules\nconst CA_CORE_RULES = {\n  PATIENT: {\n    REQUIRED_FIELDS: ['name', 'gender'],\n    REQUIRED_IDENTIFIERS: ['medicalRecordNumber'],\n    SUPPORTED_GENDERS: ['male', 'female', 'other', 'unknown'],\n    SUPPORTED_ADDRESS_COUNTRIES: ['CA', 'Canada']\n  },\n  ENCOUNTER: {\n    REQUIRED_FIELDS: ['status', 'class', 'subject'],\n    REQUIRED_STATUS: ['planned', 'arrived', 'triaged', 'in-progress', 'onleave', 'finished', 'cancelled', 'entered-in-error', 'unknown']\n  },\n  OBSERVATION: {\n    REQUIRED_FIELDS: ['status', 'code', 'subject'],\n    REQUIRED_STATUS: ['registered', 'preliminary', 'final', 'amended', 'corrected', 'cancelled', 'entered-in-error', 'unknown']\n  }\n} as const;\n\n// Validation result types according to contract\nexport type PatientValidationResult = {\n  valid: boolean;\n  errors: Array<{ path: string; code: string; message: string }>;\n  profile: 'CA_CORE' | 'US_CORE';\n};\n\nexport type EncounterValidationResult = {\n  valid: boolean;\n  errors: Array<{ path: string; code: string; message: string }>;\n  profile: 'CA_CORE' | 'US_CORE';\n};\n\nexport type ObservationValidationResult = {\n  valid: boolean;\n  errors: Array<{ path: string; code: string; message: string }>;\n  profile: 'CA_CORE' | 'US_CORE';\n};\n\n/**\n * Validates FHIR Patient resource against CA Core requirements\n */\nexport function validateCaCorePatient(\n  patient: FhirPatient\n): PatientValidationResult {\n  const errors: Array<{ path: string; code: string; message: string }> = [];\n\n  // Check resource type\n  if (patient.resourceType !== 'Patient') {\n    errors.push({\n      path: 'resourceType',\n      code: 'INVALID_RESOURCE_TYPE',\n      message: 'Resource must be of type Patient'\n    });\n  }\n\n  // Check required fields\n  if (!patient.name || patient.name.length === 0) {\n    errors.push({\n      path: 'name',\n      code: 'MISSING_REQUIRED_FIELD',\n      message: 'CA Core requires at least one name'\n    });\n  } else {\n    // Validate name structure\n    patient.name.forEach((name, index) => {\n      if (!name.family && !name.given) {\n        errors.push({\n          path: `name[${index}]`,\n          code: 'INVALID_NAME_STRUCTURE',\n          message: 'Name must have either family or given name'\n        });\n      }\n    });\n  }\n\n  if (!patient.gender) {\n    errors.push({\n      path: 'gender',\n      code: 'MISSING_REQUIRED_FIELD',\n      message: 'CA Core requires gender field'\n    });\n  } else if (!CA_CORE_RULES.PATIENT.SUPPORTED_GENDERS.includes(patient.gender)) {\n    errors.push({\n      path: 'gender',\n      code: 'INVALID_GENDER_VALUE',\n      message: `CA Core supports only: ${CA_CORE_RULES.PATIENT.SUPPORTED_GENDERS.join(', ')}`\n    });\n  }\n\n  // Check identifiers\n  if (patient.identifier && patient.identifier.length > 0) {\n    patient.identifier.forEach((id, index) => {\n      if (!id.system || !id.value) {\n        errors.push({\n          path: `identifier[${index}]`,\n          code: 'INVALID_IDENTIFIER',\n          message: 'Identifier must have system and value'\n        });\n      }\n    });\n  }\n\n  // Check address country\n  if (patient.address && patient.address.length > 0) {\n    patient.address.forEach((addr, index) => {\n      if (addr.country && !CA_CORE_RULES.PATIENT.SUPPORTED_ADDRESS_COUNTRIES.includes(addr.country)) {\n        errors.push({\n          path: `address[${index}].country`,\n          code: 'INVALID_ADDRESS_COUNTRY',\n          message: 'CA Core recommends Canadian address format (CA or Canada)'\n        });\n      }\n    });\n  }\n\n  // Check telecom structure\n  if (patient.telecom) {\n    patient.telecom.forEach((contact, index) => {\n      if (!contact.system || !contact.value) {\n        errors.push({\n          path: `telecom[${index}]`,\n          code: 'INVALID_TELECOM',\n          message: 'Telecom must have system and value'\n        });\n      }\n    });\n  }\n\n  const valid = errors.length === 0;\n\n  return {\n    valid,\n    errors,\n    profile: 'CA_CORE'\n  };\n}\n\n/**\n * Validates FHIR Encounter resource against CA Core requirements\n */\nexport function validateCaCoreEncounter(\n  encounter: FhirEncounter\n): EncounterValidationResult {\n  const errors: Array<{ path: string; code: string; message: string }> = [];\n\n  // Check resource type\n  if (encounter.resourceType !== 'Encounter') {\n    errors.push({\n      path: 'resourceType',\n      code: 'INVALID_RESOURCE_TYPE',\n      message: 'Resource must be of type Encounter'\n    });\n  }\n\n  // Check required fields\n  if (!encounter.status) {\n    errors.push({\n      path: 'status',\n      code: 'MISSING_REQUIRED_FIELD',\n      message: 'CA Core requires status field'\n    });\n  } else if (!CA_CORE_RULES.ENCOUNTER.REQUIRED_STATUS.includes(encounter.status)) {\n    errors.push({\n      path: 'status',\n      code: 'INVALID_STATUS_VALUE',\n      message: `Invalid encounter status value. CA Core supports only: ${CA_CORE_RULES.ENCOUNTER.REQUIRED_STATUS.join(', ')}`\n    });\n  }\n\n  if (!encounter.class) {\n    errors.push({\n      path: 'class',\n      code: 'MISSING_REQUIRED_FIELD',\n      message: 'CA Core requires class field'\n    });\n  } else if (!encounter.class.code) {\n    errors.push({\n      path: 'class.code',\n      code: 'MISSING_REQUIRED_FIELD',\n      message: 'CA Core requires class.code field'\n    });\n  } else if (!['EMER', 'IMP', 'AMB', 'VR', 'HH'].includes(encounter.class.code)) {\n    errors.push({\n      path: 'class.code',\n      code: 'INVALID_ENCOUNTER_CLASS',\n      message: 'CA Core supports only encounter classes: EMER, IMP, AMB, VR, HH'\n    });\n  }\n\n  if (!encounter.subject) {\n    errors.push({\n      path: 'subject',\n      code: 'MISSING_REQUIRED_FIELD',\n      message: 'CA Core requires subject field'\n    });\n  } else if (!encounter.subject.reference.startsWith('Patient/') && !encounter.subject.reference.startsWith('urn:uuid:')) {\n    errors.push({\n      path: 'subject.reference',\n      code: 'INVALID_SUBJECT_REFERENCE',\n      message: 'Subject reference must be in format Patient/{id} or urn:uuid:'\n    });\n  }\n\n  // Check period\n  if (encounter.period && !encounter.period.start) {\n    errors.push({\n      path: 'period.start',\n      code: 'MISSING_PERIOD_START',\n      message: 'Period must have start date if provided'\n    });\n  }\n\n  // Validate participant structure if present\n  if (encounter.participant) {\n    encounter.participant.forEach((participant, index) => {\n      if (participant.individual && !participant.individual.reference.startsWith('Practitioner/') && !participant.individual.reference.startsWith('urn:uuid:')) {\n        errors.push({\n          path: `participant[${index}].individual.reference`,\n          code: 'INVALID_PARTICIPANT_REFERENCE',\n          message: 'Participant individual reference should be in format Practitioner/{id} or urn:uuid:'\n        });\n      }\n    });\n  }\n\n  const valid = errors.length === 0;\n\n  return {\n    valid,\n    errors,\n    profile: 'CA_CORE'\n  };\n}\n\n/**\n * Validates FHIR Observation resource against CA Core requirements\n */\nexport function validateCaCoreObservation(\n  observation: FhirObservation\n): ObservationValidationResult {\n  const errors: Array<{ path: string; code: string; message: string }> = [];\n\n  // Check resource type\n  if (observation.resourceType !== 'Observation') {\n    errors.push({\n      path: 'resourceType',\n      code: 'INVALID_RESOURCE_TYPE',\n      message: 'Resource must be of type Observation'\n    });\n  }\n\n  // Check required fields\n  if (!observation.status) {\n    errors.push({\n      path: 'status',\n      code: 'MISSING_REQUIRED_FIELD',\n      message: 'CA Core requires status field'\n    });\n  } else if (!CA_CORE_RULES.OBSERVATION.REQUIRED_STATUS.includes(observation.status)) {\n    errors.push({\n      path: 'status',\n      code: 'INVALID_STATUS_VALUE',\n      message: `Invalid observation status value. CA Core supports only: ${CA_CORE_RULES.OBSERVATION.REQUIRED_STATUS.join(', ')}`\n    });\n  }\n\n  if (!observation.code) {\n    errors.push({\n      path: 'code',\n      code: 'MISSING_REQUIRED_FIELD',\n      message: 'CA Core requires code field'\n    });\n  }\n\n  if (!observation.subject) {\n    errors.push({\n      path: 'subject',\n      code: 'MISSING_REQUIRED_FIELD',\n      message: 'CA Core requires subject field'\n    });\n  } else if (!observation.subject.reference.startsWith('Patient/') && !observation.subject.reference.startsWith('urn:uuid:')) {\n    errors.push({\n      path: 'subject.reference',\n      code: 'INVALID_SUBJECT_REFERENCE',\n      message: 'Subject reference must be in format Patient/{id} or urn:uuid:'\n    });\n  }\n\n  // Validate value structure\n  const hasValue = observation.valueQuantity || observation.valueString !== undefined || \n                   observation.valueBoolean !== undefined || observation.valueInteger !== undefined ||\n                   observation.valueCodeableConcept || observation.valueRange;\n  \n  if (!hasValue) {\n    errors.push({\n      path: 'value',\n      code: 'MISSING_VALUE',\n      message: 'CA Core requires including a value for the observation'\n    });\n  }\n\n  // Validate code structure\n  if (observation.code && (!observation.code.coding || observation.code.coding.length === 0)) {\n    errors.push({\n      path: 'code.coding',\n      code: 'MISSING_CODING',\n      message: 'CA Core requires including coding in code field'\n    });\n  }\n\n  const valid = errors.length === 0;\n\n  return {\n    valid,\n    errors,\n    profile: 'CA_CORE'\n  };\n}\n\n/**\n * Validates a bundle of FHIR resources against CA Core requirements\n */\nexport function validateCaCoreBundle(\n  resources: {\n    patient?: FhirPatient;\n    encounter?: FhirEncounter;\n    observations?: FhirObservation[];\n  }\n): {\n  overallValid: boolean;\n  patientValidation?: PatientValidationResult;\n  encounterValidation?: EncounterValidationResult;\n  observationValidations?: ObservationValidationResult[];\n  summary: {\n    totalResources: number;\n    validResources: number;\n    errors: Array<{ path: string; code: string; message: string }>;\n  };\n} {\n  const allErrors: Array<{ path: string; code: string; message: string }> = [];\n  let totalResources = 0;\n  let validResources = 0;\n\n  // Validate patient\n  let patientValidation: PatientValidationResult | undefined;\n  if (resources.patient) {\n    totalResources++;\n    patientValidation = validateCaCorePatient(resources.patient);\n    if (patientValidation.valid) validResources++;\n    allErrors.push(...patientValidation.errors);\n  }\n\n  // Validate encounter\n  let encounterValidation: EncounterValidationResult | undefined;\n  if (resources.encounter) {\n    totalResources++;\n    encounterValidation = validateCaCoreEncounter(resources.encounter);\n    if (encounterValidation.valid) validResources++;\n    allErrors.push(...encounterValidation.errors);\n  }\n\n  // Validate observations\n  let observationValidations: ObservationValidationResult[] | undefined;\n  if (resources.observations && resources.observations.length > 0) {\n    observationValidations = resources.observations.map(obs => {\n      totalResources++;\n      const validation = validateCaCoreObservation(obs);\n      if (validation.valid) validResources++;\n      allErrors.push(...validation.errors);\n      return validation;\n    });\n  }\n\n  const overallValid = allErrors.length === 0;\n\n  return {\n    overallValid,\n    patientValidation,\n    encounterValidation,\n    observationValidations,\n    summary: {\n      totalResources,\n      validResources,\n      errors: allErrors\n    }\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/fhir/validators/usCoreValidator.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/core/fhir/validators/usCoreValidator.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview US Core Validator - Lightweight Implementation\n * @version 2.0.0\n * @author AiDuxCare Development Team\n * @compliance US Core Implementation Guide\n */\n\nimport type { \n  FhirPatient, \n  FhirEncounter, \n  FhirObservation\n} from '../types';\n\n// US Core specific validation rules\nconst US_CORE_RULES = {\n  PATIENT: {\n    REQUIRED_FIELDS: ['name', 'gender'],\n    REQUIRED_IDENTIFIERS: ['ssn'],\n    SUPPORTED_GENDERS: ['male', 'female', 'other', 'unknown'],\n    SUPPORTED_ADDRESS_COUNTRIES: ['US', 'USA', 'United States']\n  },\n  ENCOUNTER: {\n    REQUIRED_FIELDS: ['status', 'class', 'subject'],\n    REQUIRED_STATUS: ['planned', 'arrived', 'triaged', 'in-progress', 'onleave', 'finished', 'cancelled', 'entered-in-error', 'unknown']\n  },\n  OBSERVATION: {\n    REQUIRED_FIELDS: ['status', 'code', 'subject'],\n    REQUIRED_STATUS: ['registered', 'preliminary', 'final', 'amended', 'corrected', 'cancelled', 'entered-in-error', 'unknown'],\n    VITAL_SIGNS_CATEGORY: 'vital-signs'\n  }\n} as const;\n\n// Validation result types according to contract\nexport type PatientValidationResult = {\n  valid: boolean;\n  errors: Array<{ path: string; code: string; message: string }>;\n  profile: 'CA_CORE' | 'US_CORE';\n};\n\nexport type EncounterValidationResult = {\n  valid: boolean;\n  errors: Array<{ path: string; code: string; message: string }>;\n  profile: 'CA_CORE' | 'US_CORE';\n};\n\nexport type ObservationValidationResult = {\n  valid: boolean;\n  errors: Array<{ path: string; code: string; message: string }>;\n  profile: 'CA_CORE' | 'US_CORE';\n};\n\n/**\n * Validates FHIR Patient resource against US Core requirements\n */\nexport function validateUsCorePatient(\n  patient: FhirPatient\n): PatientValidationResult {\n  const errors: Array<{ path: string; code: string; message: string }> = [];\n\n  // Check resource type\n  if (patient.resourceType !== 'Patient') {\n    errors.push({\n      path: 'resourceType',\n      code: 'INVALID_RESOURCE_TYPE',\n      message: 'Resource must be of type Patient'\n    });\n  }\n\n  // Check required fields\n  if (!patient.name || patient.name.length === 0) {\n    errors.push({\n      path: 'name',\n      code: 'MISSING_REQUIRED_FIELD',\n      message: 'US Core requires at least one name'\n    });\n  } else {\n    // Validate name structure\n    patient.name.forEach((name, index) => {\n      if (!name.family && !name.given) {\n        errors.push({\n          path: `name[${index}]`,\n          code: 'INVALID_NAME_STRUCTURE',\n          message: 'Name must have either family or given name'\n        });\n      }\n    });\n  }\n\n  if (!patient.gender) {\n    errors.push({\n      path: 'gender',\n      code: 'MISSING_REQUIRED_FIELD',\n      message: 'US Core requires gender field'\n    });\n  } else if (!US_CORE_RULES.PATIENT.SUPPORTED_GENDERS.includes(patient.gender)) {\n    errors.push({\n      path: 'gender',\n      code: 'INVALID_GENDER_VALUE',\n      message: `US Core supports only: ${US_CORE_RULES.PATIENT.SUPPORTED_GENDERS.join(', ')}`\n    });\n  }\n\n  // Check identifiers\n  if (patient.identifier && patient.identifier.length > 0) {\n    patient.identifier.forEach((id, index) => {\n      if (!id.system || !id.value) {\n        errors.push({\n          path: `identifier[${index}]`,\n          code: 'INVALID_IDENTIFIER',\n          message: 'Identifier must have system and value'\n        });\n      }\n    });\n  }\n\n  // Check address country\n  if (patient.address && patient.address.length > 0) {\n    patient.address.forEach((addr, index) => {\n      if (addr.country && !US_CORE_RULES.PATIENT.SUPPORTED_ADDRESS_COUNTRIES.includes(addr.country)) {\n        errors.push({\n          path: `address[${index}].country`,\n          code: 'INVALID_ADDRESS_COUNTRY',\n          message: 'US Core recommends US address format (US, USA, or United States)'\n        });\n      }\n    });\n  }\n\n  // Check telecom structure\n  if (patient.telecom) {\n    patient.telecom.forEach((contact, index) => {\n      if (!contact.system || !contact.value) {\n        errors.push({\n          path: `telecom[${index}]`,\n          code: 'INVALID_TELECOM',\n          message: 'Telecom must have system and value'\n        });\n      }\n    });\n  }\n\n  const valid = errors.length === 0;\n\n  return {\n    valid,\n    errors,\n    profile: 'US_CORE'\n  };\n}\n\n/**\n * Validates FHIR Encounter resource against US Core requirements\n */\nexport function validateUsCoreEncounter(\n  encounter: FhirEncounter\n): EncounterValidationResult {\n  const errors: Array<{ path: string; code: string; message: string }> = [];\n\n  // Check resource type\n  if (encounter.resourceType !== 'Encounter') {\n    errors.push({\n      path: 'resourceType',\n      code: 'INVALID_RESOURCE_TYPE',\n      message: 'Resource must be of type Encounter'\n    });\n  }\n\n  // Check required fields\n  if (!encounter.status) {\n    errors.push({\n      path: 'status',\n      code: 'MISSING_REQUIRED_FIELD',\n      message: 'US Core requires status field'\n    });\n  } else if (!US_CORE_RULES.ENCOUNTER.REQUIRED_STATUS.includes(encounter.status)) {\n    errors.push({\n      path: 'status',\n      code: 'INVALID_STATUS_VALUE',\n      message: `US Core supports only: ${US_CORE_RULES.ENCOUNTER.REQUIRED_STATUS.join(', ')}`\n    });\n  }\n\n  if (!encounter.class) {\n    errors.push({\n      path: 'class',\n      code: 'MISSING_REQUIRED_FIELD',\n      message: 'US Core requires class field'\n    });\n  } else if (!encounter.class.code) {\n    errors.push({\n      path: 'class.code',\n      code: 'MISSING_REQUIRED_FIELD',\n      message: 'US Core requires class.code field'\n    });\n  } else if (!['EMER', 'IMP', 'AMB', 'VR', 'HH'].includes(encounter.class.code)) {\n    errors.push({\n      path: 'class.code',\n      code: 'INVALID_ENCOUNTER_CLASS',\n      message: 'US Core supports only encounter classes: EMER, IMP, AMB, VR, HH'\n    });\n  }\n\n  if (!encounter.subject) {\n    errors.push({\n      path: 'subject',\n      code: 'MISSING_REQUIRED_FIELD',\n      message: 'US Core requires subject field'\n    });\n  } else if (!encounter.subject.reference.startsWith('Patient/') && !encounter.subject.reference.startsWith('urn:uuid:')) {\n    errors.push({\n      path: 'subject.reference',\n      code: 'INVALID_SUBJECT_REFERENCE',\n      message: 'Subject reference must be in format Patient/{id} or urn:uuid:'\n    });\n  }\n\n  // Check period\n  if (encounter.period && !encounter.period.start) {\n    errors.push({\n      path: 'period.start',\n      code: 'MISSING_PERIOD_START',\n      message: 'Period must have start date if provided'\n    });\n  }\n\n  // Validate participant structure if present\n  if (encounter.participant) {\n    encounter.participant.forEach((participant, index) => {\n      if (participant.individual && !participant.individual.reference.startsWith('Practitioner/') && !participant.individual.reference.startsWith('urn:uuid:')) {\n        errors.push({\n          path: `participant[${index}].individual.reference`,\n          code: 'INVALID_PARTICIPANT_REFERENCE',\n          message: 'Participant individual reference should be in format Practitioner/{id} or urn:uuid:'\n        });\n      }\n    });\n  }\n\n  const valid = errors.length === 0;\n\n  return {\n    valid,\n    errors,\n    profile: 'US_CORE'\n  };\n}\n\n/**\n * Validates FHIR Observation resource against US Core requirements\n */\nexport function validateUsCoreObservation(\n  observation: FhirObservation\n): ObservationValidationResult {\n  const errors: Array<{ path: string; code: string; message: string }> = [];\n\n  // Check resource type\n  if (observation.resourceType !== 'Observation') {\n    errors.push({\n      path: 'resourceType',\n      code: 'INVALID_RESOURCE_TYPE',\n      message: 'Resource must be of type Observation'\n    });\n  }\n\n  // Check required fields\n  if (!observation.status) {\n    errors.push({\n      path: 'status',\n      code: 'MISSING_REQUIRED_FIELD',\n      message: 'US Core requires status field'\n    });\n  } else if (!US_CORE_RULES.OBSERVATION.REQUIRED_STATUS.includes(observation.status)) {\n    errors.push({\n      path: 'status',\n      code: 'INVALID_STATUS_VALUE',\n      message: `US Core supports only: ${US_CORE_RULES.OBSERVATION.REQUIRED_STATUS.join(', ')}`\n    });\n  }\n\n  if (!observation.code) {\n    errors.push({\n      path: 'code',\n      code: 'MISSING_REQUIRED_FIELD',\n      message: 'US Core requires code field'\n    });\n  }\n\n  if (!observation.subject) {\n    errors.push({\n      path: 'subject',\n      code: 'MISSING_REQUIRED_FIELD',\n      message: 'US Core requires subject field'\n    });\n  } else if (!observation.subject.reference.startsWith('Patient/') && !observation.subject.reference.startsWith('urn:uuid:')) {\n    errors.push({\n      path: 'subject.reference',\n      code: 'INVALID_SUBJECT_REFERENCE',\n      message: 'Subject reference must be in format Patient/{id} or urn:uuid:'\n    });\n  }\n\n  // Validate value structure\n  const hasValue = observation.valueQuantity || observation.valueString !== undefined || \n                   observation.valueBoolean !== undefined || observation.valueInteger !== undefined ||\n                   observation.valueCodeableConcept || observation.valueRange;\n  \n  if (!hasValue) {\n    errors.push({\n      path: 'value',\n      code: 'MISSING_VALUE',\n      message: 'US Core requires including a value for the observation'\n    });\n  }\n\n  // Validate code structure\n  if (observation.code && (!observation.code.coding || observation.code.coding.length === 0)) {\n    errors.push({\n      path: 'code.coding',\n      code: 'MISSING_CODING',\n      message: 'US Core requires including coding in code field'\n    });\n  }\n\n  // Check if it's a vital signs observation\n  if (observation.category && observation.category.length > 0) {\n    const isVitalSigns = observation.category.some(cat => \n      cat.coding && cat.coding.some(coding => \n        coding.code === US_CORE_RULES.OBSERVATION.VITAL_SIGNS_CATEGORY\n      )\n    );\n    \n    if (isVitalSigns && (!observation.code.coding || observation.code.coding.length === 0)) {\n      errors.push({\n        path: 'code.coding',\n        code: 'MISSING_LOINC_CODING',\n        message: 'US Core requires LOINC coding for vital signs observations'\n      });\n    }\n  }\n\n  const valid = errors.length === 0;\n\n  return {\n    valid,\n    errors,\n    profile: 'US_CORE'\n  };\n}\n\n/**\n * Validates a bundle of FHIR resources against US Core requirements\n */\nexport function validateUsCoreBundle(\n  resources: {\n    patient?: FhirPatient;\n    encounter?: FhirEncounter;\n    observations?: FhirObservation[];\n  }\n): {\n  overallValid: boolean;\n  patientValidation?: PatientValidationResult;\n  encounterValidation?: EncounterValidationResult;\n  observationValidations?: ObservationValidationResult[];\n  summary: {\n    totalResources: number;\n    validResources: number;\n    errors: Array<{ path: string; code: string; message: string }>;\n  };\n} {\n  const allErrors: Array<{ path: string; code: string; message: string }> = [];\n  let totalResources = 0;\n  let validResources = 0;\n\n  // Validate patient\n  let patientValidation: PatientValidationResult | undefined;\n  if (resources.patient) {\n    totalResources++;\n    patientValidation = validateUsCorePatient(resources.patient);\n    if (patientValidation.valid) validResources++;\n    allErrors.push(...patientValidation.errors);\n  }\n\n  // Validate encounter\n  let encounterValidation: EncounterValidationResult | undefined;\n  if (resources.encounter) {\n    totalResources++;\n    encounterValidation = validateUsCoreEncounter(resources.encounter);\n    if (encounterValidation.valid) validResources++;\n    allErrors.push(...encounterValidation.errors);\n  }\n\n  // Validate observations\n  let observationValidations: ObservationValidationResult[] | undefined;\n  if (resources.observations && resources.observations.length > 0) {\n    observationValidations = resources.observations.map(obs => {\n      totalResources++;\n      const validation = validateUsCoreObservation(obs);\n      if (validation.valid) validResources++;\n      allErrors.push(...validation.errors);\n      return validation;\n    });\n  }\n\n  const overallValid = allErrors.length === 0;\n\n  return {\n    overallValid,\n    patientValidation,\n    encounterValidation,\n    observationValidations,\n    summary: {\n      totalResources,\n      validResources,\n      errors: allErrors\n    }\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/core/mcp/schema.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":23,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":56,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":69,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\n\nimport { VisitSchema } from '../domain/visitType';\n\n/**\n * Tipos de memoria en el MCP\n */\nconst MemoryTypeEnum = z.enum(['contextual', 'persistent', 'semantic']);\n\n/**\n * Esquema para un bloque de memoria recuperado de fuentes de datos\n * Validaci√≥n m√°s robusta de fechas para prevenir errores en tests\n */\nexport const MCPMemoryBlockSchema = z.object({\n  id: z.string(),\n  // Mejoramos la validaci√≥n de fechas para que sea m√°s robusta en tests\n  created_at: z.string()\n    .refine(\n      (val: string) => {\n        try {\n          // Verificar si es un formato ISO v√°lido\n          return !isNaN(new Date(val).getTime());\n        } catch (e) {\n          return false;\n        }\n      },\n      { message: \"Invalid datetime format\" }\n    ),\n  type: MemoryTypeEnum,\n  content: z.string(),\n  metadata: z.record(z.string(), z.unknown()).optional(),\n  visit_id: z.string().optional(),\n  patient_id: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  // Propiedad agregada para soporte de validaci√≥n de bloques (no se persiste en esta versi√≥n)\n  validated: z.boolean().optional()\n});\n\n/**\n * Tipo para un bloque de memoria\n */\nexport type MCPMemoryBlock = z.infer<typeof MCPMemoryBlockSchema>;\n\n/**\n * Esquema para un elemento de memoria individual\n * Modificado para permitir que created_at se use como timestamp si no existe\n */\nconst MemoryItemSchema = z.object({\n  id: z.string(),\n  // Permitimos que timestamp sea opcional si existe created_at\n  timestamp: z.string()\n    .refine(\n      (val: string) => {\n        try {\n          return !isNaN(new Date(val).getTime());\n        } catch (e) {\n          return false;\n        }\n      },\n      { message: \"Invalid datetime format for timestamp\" }\n    )\n    .optional(),\n  // Agregamos created_at como campo opcional para compatibilidad\n  created_at: z.string()\n    .refine(\n      (val: string) => {\n        try {\n          return !isNaN(new Date(val).getTime());\n        } catch (e) {\n          return false;\n        }\n      },\n      { message: \"Invalid datetime format for created_at\" }\n    )\n    .optional(),\n  type: MemoryTypeEnum,\n  content: z.string(),\n  // Propiedad agregada para soporte de validaci√≥n local (no persiste en versi√≥n actual)\n  validated: z.boolean().optional()\n})\n// Transformar los datos para agregar timestamp si no existe pero hay created_at\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n.transform((data: any) => {\n  if (!data.timestamp && data.created_at) {\n    return {\n      ...data,\n      timestamp: data.created_at\n    };\n  }\n  return data;\n})\n// Refinamiento para asegurar que hay al menos timestamp o created_at\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n.refine((data: any) => data.timestamp || data.created_at, {\n  message: \"Debe existir al menos 'timestamp' o 'created_at'\"\n});\n\n/**\n * Esquema para un conjunto de datos de memoria\n */\nconst MemoryDataSchema = z.object({\n  source: z.string(),\n  data: z.array(MemoryItemSchema)\n});\n\n/**\n * Esquema para validar la estructura del contexto MCP\n * Extendido para incluir los datos originales de la visita\n */\nexport const MCPContextSchema = z.object({\n  contextual: MemoryDataSchema,\n  persistent: MemoryDataSchema,\n  semantic: MemoryDataSchema,\n  // Campo opcional para almacenar los datos de la visita original\n  visitData: VisitSchema.optional()\n});\n\n/**\n * Tipo inferido del esquema MCPContext\n */\nexport type MCPContext = z.infer<typeof MCPContextSchema>; ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/features/command-center/components/Greeting.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":34,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Timestamp } from 'firebase/firestore';\n\nimport { useProfessionalProfile } from '../../../context/ProfessionalProfileContext';\n\ninterface GreetingProps {\n  className?: string;\n}\n\nexport const Greeting: React.FC<GreetingProps> = ({ className = '' }) => {\n  const { profile, loading } = useProfessionalProfile();\n\n  // Funci√≥n para obtener saludo seg√∫n la hora del d√≠a\n  const getSaludo = (now: Date): string => {\n    const h = now.getHours();\n    if (h < 12) return 'Buenos d√≠as';\n    if (h < 19) return 'Buenas tardes';\n    return 'Buenas noches';\n  };\n\n  // Funci√≥n para formatear fecha de √∫ltimo acceso\n  const formatLastAccess = (timestamp: Date | Timestamp | undefined): string => {\n    if (!timestamp) return 'Primera vez';\n    \n    try {\n      const date = timestamp instanceof Date ? timestamp : timestamp.toDate();\n      return new Intl.DateTimeFormat('es-ES', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      }).format(date);\n    } catch (error) {\n      return 'Reciente';\n    }\n  };\n\n  // Funci√≥n para obtener zona horaria\n  const getTimezone = (): string => {\n    if (profile?.timezone) {\n      return profile.timezone;\n    }\n    return Intl.DateTimeFormat().resolvedOptions().timeZone;\n  };\n\n  // Funci√≥n para obtener nombre de visualizaci√≥n\n  const getDisplayName = (): string => {\n    if (profile?.preferredSalutation && profile?.lastNamePreferred) {\n      return `${profile.preferredSalutation} ${profile.lastNamePreferred}`;\n    }\n    if (profile?.displayName) return profile.displayName;\n    if (profile?.email) {\n      const emailName = profile.email.split('@')[0];\n      return emailName.charAt(0).toUpperCase() + emailName.slice(1);\n    }\n    return 'Usuario';\n  };\n\n  if (loading) {\n    return (\n      <div className={`animate-pulse ${className}`}>\n        <div className=\"h-7 bg-slate-200 rounded w-48 mb-2\"></div>\n        <div className=\"h-4 bg-slate-200 rounded w-64 mb-1\"></div>\n        <div className=\"h-4 bg-slate-200 rounded w-56\"></div>\n      </div>\n    );\n  }\n\n  if (!profile) {\n    return (\n      <div className={`text-slate-600 ${className}`}>\n        <h1 className=\"text-2xl font-semibold mb-1\">Centro de Mando</h1>\n        <p className=\"text-slate-500\">Cargando perfil...</p>\n      </div>\n    );\n  }\n\n  const saludo = getSaludo(new Date());\n  const displayName = getDisplayName();\n  const timezone = getTimezone();\n  const lastAccess = formatLastAccess(profile.lastLoginAt);\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      <h1 className=\"text-2xl font-semibold text-slate-900\">\n        {saludo}, {displayName}\n      </h1>\n      \n      <div className=\"space-y-1 text-slate-600\">\n        {profile.specialty && (\n          <p className=\"text-sm\">\n            {profile.specialty}\n            {profile.clinic?.city && ` ‚Ä¢ ${profile.clinic.city}`}\n            {profile.clinic?.country && `, ${profile.clinic.country}`}\n          </p>\n        )}\n        \n        <p className=\"text-sm\">\n          {profile.email}\n        </p>\n        \n        <p className=\"text-sm text-slate-500\">\n          Est√°s en tu espacio seguro. √öltimo acceso: {lastAccess} ({timezone})\n        </p>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/lib/ollama.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":186,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":186,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * ü§ñ AiDuxCare - Cliente Ollama\n * Integraci√≥n local LLM gratuita para procesamiento m√©dico\n */\n\nexport interface OllamaResponse {\n  response: string;\n  tokens: number;\n  duration: number;\n  model: string;\n}\n\nexport interface OllamaStreamResponse {\n  model: string;\n  created_at: string;\n  response: string;\n  done: boolean;\n  context?: number[];\n  total_duration?: number;\n  load_duration?: number;\n  prompt_eval_count?: number;\n  prompt_eval_duration?: number;\n  eval_count?: number;\n  eval_duration?: number;\n}\n\nexport class OllamaClient {\n  private baseUrl: string;\n  private model: string;\n  private timeout: number;\n\n  constructor(\n    baseUrl = (typeof import.meta !== 'undefined' && import.meta.env?.VITE_OLLAMA_URL) || 'http://localhost:11434',\n    model = (typeof import.meta !== 'undefined' && import.meta.env?.VITE_OLLAMA_MODEL) || 'llama3.2:3b',\n    timeout = 30000\n  ) {\n    this.baseUrl = baseUrl;\n    this.model = model;\n    this.timeout = timeout;\n  }\n\n  /**\n   * Verifica si Ollama est√° disponible\n   */\n  async isAvailable(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/tags`, {\n        method: 'GET',\n        signal: AbortSignal.timeout(5000)\n      });\n      return response.ok;\n    } catch (error) {\n      console.warn('Ollama no disponible:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Lista modelos disponibles en Ollama\n   */\n  async listModels(): Promise<string[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/tags`);\n      const data: { models?: Array<{ name: string }> } = await response.json();\n      return data.models?.map((m) => m.name) || [];\n    } catch (error) {\n      console.error('Error listing models:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Genera completion simple\n   */\n  async generateCompletion(prompt: string, options?: {\n    temperature?: number;\n    max_tokens?: number;\n    top_p?: number;\n    stream?: boolean;\n    timeout?: number;\n  }): Promise<OllamaResponse> {\n    const requestBody = {\n      model: this.model,\n      prompt,\n      stream: false,\n      options: {\n        temperature: options?.temperature || 0.3,\n        top_p: options?.top_p || 0.9,\n        num_predict: options?.max_tokens || 2000,\n        stop: ['<|eot_id|>', '</s>']\n      }\n    };\n\n    try {\n      const startTime = Date.now();\n      const timeoutMs = options?.timeout || this.timeout;\n      \n      const response = await fetch(`${this.baseUrl}/api/generate`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestBody),\n        signal: AbortSignal.timeout(timeoutMs)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Ollama API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data: OllamaStreamResponse = await response.json();\n      const duration = Date.now() - startTime;\n\n      return {\n        response: data.response || '',\n        tokens: data.eval_count || 0,\n        duration,\n        model: data.model\n      };\n    } catch (error) {\n      console.error('Error en generateCompletion:', error);\n      throw new Error(`Fall√≥ la generaci√≥n: ${error instanceof Error ? error.message : 'Error desconocido'}`);\n    }\n  }\n\n  /**\n   * Chat completion compatible con formato OpenAI\n   */\n  async chatCompletion(messages: Array<{\n    role: 'system' | 'user' | 'assistant';\n    content: string;\n  }>, options?: {\n    temperature?: number;\n    max_tokens?: number;\n  }): Promise<string> {\n    // Convertir mensajes a formato de prompt para Ollama\n    const prompt = this.formatMessagesToPrompt(messages);\n    \n    const result = await this.generateCompletion(prompt, options);\n    return result.response;\n  }\n\n  /**\n   * Formatea mensajes al estilo de prompt de Llama\n   */\n  private formatMessagesToPrompt(messages: Array<{\n    role: 'system' | 'user' | 'assistant';\n    content: string;\n  }>): string {\n    let prompt = '<|begin_of_text|>';\n    \n    for (const message of messages) {\n      switch (message.role) {\n        case 'system':\n          prompt += `<|start_header_id|>system<|end_header_id|>\\n\\n${message.content}<|eot_id|>`;\n          break;\n        case 'user':\n          prompt += `<|start_header_id|>user<|end_header_id|>\\n\\n${message.content}<|eot_id|>`;\n          break;\n        case 'assistant':\n          prompt += `<|start_header_id|>assistant<|end_header_id|>\\n\\n${message.content}<|eot_id|>`;\n          break;\n      }\n    }\n    \n    // Agregar inicio de respuesta del asistente\n    prompt += '<|start_header_id|>assistant<|end_header_id|>\\n\\n';\n    \n    return prompt;\n  }\n\n  /**\n   * Genera embedding (si el modelo lo soporta)\n   */\n  async generateEmbedding(text: string): Promise<number[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/embeddings`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          model: this.model,\n          prompt: text\n        })\n      });\n\n      const data = await response.json();\n      return data.embedding || [];\n    } catch (error) {\n      console.warn('Embeddings no soportados en este modelo');\n      return [];\n    }\n  }\n\n  /**\n   * Obtiene informaci√≥n del modelo actual\n   */\n  async getModelInfo(): Promise<{\n    name: string;\n    size: string;\n    family: string;\n    parameters: string;\n  } | null> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/show`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name: this.model })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        return {\n          name: data.details?.family || this.model,\n          size: data.details?.parameter_size || 'Unknown',\n          family: data.details?.format || 'Unknown',\n          parameters: data.details?.parameters || 'Unknown'\n        };\n      }\n      return null;\n    } catch (error) {\n      console.error('Error getting model info:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Health check completo\n   */\n  async healthCheck(): Promise<{\n    status: 'healthy' | 'unhealthy';\n    model: string;\n    version?: string;\n    latency_ms?: number;\n    error?: string;\n  }> {\n    try {\n      const startTime = Date.now();\n      \n      // Test b√°sico de conectividad\n      const isAvailable = await this.isAvailable();\n      if (!isAvailable) {\n        return {\n          status: 'unhealthy',\n          model: this.model,\n          error: 'Ollama server not responding'\n        };\n      }\n\n      // Test de generaci√≥n simple\n      await this.generateCompletion('Test', { max_tokens: 1 });\n      const latency = Date.now() - startTime;\n\n      return {\n        status: 'healthy',\n        model: this.model,\n        latency_ms: latency\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        model: this.model,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n}\n\n// Instancia global del cliente\nexport const ollamaClient = new OllamaClient();\n\n// Funci√≥n de utilidad para verificar si Ollama est√° configurado\nexport const isOllamaConfigured = (): boolean => {\n  return (\n    import.meta.env.VITE_LLM_PROVIDER === 'ollama' &&\n    Boolean(import.meta.env.VITE_OLLAMA_URL) &&\n    Boolean(import.meta.env.VITE_OLLAMA_MODEL)\n  );\n};\n\n// Funci√≥n de utilidad para obtener configuraci√≥n\nexport const getOllamaConfig = () => ({\n  provider: import.meta.env.VITE_LLM_PROVIDER,\n  url: import.meta.env.VITE_OLLAMA_URL,\n  model: import.meta.env.VITE_OLLAMA_MODEL\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/pages/ProfessionalOnboardingPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'geolocationService' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'professionalServicesService' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'availableServices' is assigned a value but never used. Allowed unused elements of array destructuring must match /^_/u.","line":35,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setAvailableServices' is assigned a value but never used. Allowed unused elements of array destructuring must match /^_/u.","line":35,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":49}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"type Regulation = { id: string; name: string; description?: string; countries: string[]; officialUrl?: string };\ntype ComplianceConfig = { regulations: Regulation[]; showAllRegulations?: boolean };\n\n\n/**\n * üè• Professional Onboarding Page - Formulario Limpio de Captura Profesional\n * Cumple HIPAA/GDPR: Consentimiento expl√≠cito, auditor√≠a completa, cifrado de datos sensibles\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getAuth, sendEmailVerification } from 'firebase/auth';\n\nimport { app } from '../core/firebase/firebaseClient';\nimport { geolocationService } from '../services/geolocationService';\nimport { professionalServicesService, ServiceAvailability } from '../services/ProfessionalServicesService';\nimport { ProfessionalProfileService } from '../services/ProfessionalProfileService';\nimport AiduxcareLogo from '../assets/logo/aiduxcare-logo.svg';\n\ninterface OnboardingStep {\n  id: string;\n  title: string;\n  description: string;\n  isCompleted: boolean;\n  isRequired: boolean;\n}\n\nexport const ProfessionalOnboardingPage: React.FC = () => {\n  const navigate = useNavigate();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const [complianceConfig, setComplianceConfig] = useState<ComplianceConfig | null>(null);\n  const [availableServices, setAvailableServices] = useState<ServiceAvailability[]>([]);\n\n  // Datos del formulario\n  const [formData, setFormData] = useState({\n    // Paso 1: Informaci√≥n Personal\n    firstName: '',\n    secondName: '',\n    lastName: '',\n    secondLastName: '',\n    email: '',\n    phone: '',\n    licenseNumber: '',\n    licenseIssueDate: '',\n    licenseRenewalType: 'annual' as 'annual' | 'biennial' | 'other',\n    licenseRenewalPeriod: 12, // meses\n    country: '',\n    state: '',\n    city: '',\n    licenseExpiryNotification: false,\n\n    // Paso 2: Informaci√≥n Profesional (SIMPLIFICADO)\n    profession: '', // Dropdown con todas las profesiones de la salud\n    specialty: '', // Campo de texto libre para especialidad\n    certifications: '', // Campo de texto libre para certificaciones\n    yearsOfExperience: 0,\n\n    // Paso 3: Compliance y Seguridad\n    hipaaConsent: false,\n    gdprConsent: false,\n    dataProcessingConsent: false,\n    auditTrailEnabled: true,\n    mfaEnabled: true,\n    licenseNotifications: true,\n    latamConsent: false, // Nuevo campo para el consentimiento de regulaciones latinoamericanas\n    canadaConsent: false, // Nuevo campo para el consentimiento de regulaciones canadienses\n    pipedaConsent: false // Nuevo campo para el consentimiento de PIPEDA\n  });\n\n  // Pasos del onboarding\n  const steps: OnboardingStep[] = [\n    {\n      id: 'personal',\n      title: 'Informaci√≥n Personal',\n      description: 'Datos b√°sicos y licencia profesional',\n      isCompleted: false,\n      isRequired: true\n    },\n    {\n      id: 'professional',\n      title: 'Informaci√≥n Profesional',\n      description: 'Profesi√≥n, especialidad y certificaciones',\n      isCompleted: false,\n      isRequired: true\n    },\n    {\n      id: 'compliance',\n      title: 'Compliance y Seguridad',\n      description: 'Consentimientos y configuraci√≥n de seguridad',\n      isCompleted: false,\n      isRequired: true\n    }\n  ];\n\n  // Verificar si el usuario ya tiene un perfil\n  useEffect(() => {\n  (async () => {\n    try {\n      const config: ComplianceConfig = { regulations: [], showAllRegulations: true };\n      setComplianceConfig(config as ComplianceConfig);\n      console.log(\"üìã Regulaciones relevantes:\", (config as ComplianceConfig).regulations.map((r: Regulation) => r.name));\n    } catch (error) {\n      console.error(\"Error cargando configuraci√≥n de cumplimiento:\", error);\n    }\n  })();\n}, []);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleNextStep = () => {\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePreviousStep = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!canProceed()) return;\n\n    setIsLoading(true);\n    setError('');\n\n    try {\n      const user = getAuth(app).currentUser;\n      if (!user) {\n        setError('Usuario no autenticado');\n        return;\n      }\n\n      // Mapear los datos del formulario a la estructura esperada por ProfessionalProfileService\n      const mappedProfileData = {\n        license: formData.licenseNumber,\n        country: formData.country,\n        city: formData.city,\n        state: formData.state,\n        specialties: formData.specialty ? [formData.specialty] : [],\n        certifications: formData.certifications ? formData.certifications.split(',').map((c: string) => c.trim()) : [],\n        practiceType: 'cl√≠nica' as 'cl√≠nica' | 'hospital' | 'consultorio' | 'domicilio',\n        licenseExpiry: new Date(), // O ajustar seg√∫n l√≥gica de negocio\n        isActive: true,\n        complianceSettings: {\n          country: formData.country,\n          regulations: [],\n          allowedTechniques: [],\n          forbiddenTechniques: [],\n          medicationRestrictions: [],\n          referralRequirements: [],\n          documentationStandards: [],\n          dataRetentionPolicy: ''\n        },\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      await ProfessionalProfileService.getInstance().createProfile(mappedProfileData);\n      \n      console.log('Perfil profesional guardado exitosamente en Firebase Firestore');\n\n      // Tras crear el perfil profesional, enviar email de verificaci√≥n nativo\n      await sendEmailVerification(user);\n      // Redirigir a la p√°gina de verificaci√≥n\n      navigate('/verify-email');\n\n    } catch (error) {\n      console.error('Error creando perfil:', error);\n      setError('Error al crear el perfil profesional. Por favor, int√©ntalo de nuevo.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const canProceed = () => {\n    switch (steps[currentStep].id) {\n      case 'personal':\n        return !!(formData.firstName && formData.lastName && formData.email && \n                 formData.licenseNumber && formData.country && \n                 formData.licenseRenewalType);\n      case 'professional':\n        return !!(formData.profession && formData.yearsOfExperience && formData.yearsOfExperience.toString().trim() !== '');\n      case 'compliance':\n        return !!(formData.gdprConsent && formData.dataProcessingConsent);\n      default:\n        return false;\n    }\n  };\n\n  const healthProfessions: string[] = [\n    'Fisioterapia',\n    'Medicina General',\n    'Enfermer√≠a',\n    'Psicolog√≠a',\n    'Odontolog√≠a',\n    'Nutrici√≥n',\n    'Terapia Ocupacional',\n    'Logopedia',\n    'Podolog√≠a',\n    'Farmacia',\n    'Trabajo Social',\n    'Otro'\n  ];\n\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center bg-[#f8fdfc] px-4\">\n      <div className=\"max-w-2xl w-full bg-white rounded-lg shadow-lg p-10 mt-12 border border-gray-100\">\n        <div className=\"flex flex-col items-center mb-8\">\n          <img src={AiduxcareLogo} alt=\"AiDuxCare Logo\" className=\"h-14 w-14 mb-4\" />\n          <h1 className=\"text-3xl font-bold text-[#5DA5A3] mb-2 text-center\">\n            Registro Profesional AiDuxCare\n          </h1>\n          <p className=\"text-lg text-slate-700 text-center\">\n            Completa tu perfil profesional para acceder a la plataforma l√≠der en documentaci√≥n cl√≠nica segura y personalizada.\n          </p>\n        </div>\n        {/* Secci√≥n: Datos Personales */}\n        <div className=\"bg-[#f8fdfc] rounded-lg shadow p-6 mb-8\">\n          <h3 className=\"text-xl font-semibold text-[#5DA5A3] mb-4\">Datos Personales</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {/* Nombres */}\n            <div>\n              <label htmlFor=\"firstName\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Primer Nombre *\n              </label>\n              <input\n                type=\"text\"\n                id=\"firstName\"\n                value={formData.firstName}\n                onChange={(e) => handleInputChange('firstName', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"secondName\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Segundo Nombre\n              </label>\n              <input\n                type=\"text\"\n                id=\"secondName\"\n                value={formData.secondName}\n                onChange={(e) => handleInputChange('secondName', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n\n            {/* Apellidos */}\n            <div>\n              <label htmlFor=\"lastName\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Primer Apellido *\n              </label>\n              <input\n                type=\"text\"\n                id=\"lastName\"\n                value={formData.lastName}\n                onChange={(e) => handleInputChange('lastName', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"secondLastName\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Segundo Apellido\n              </label>\n              <input\n                type=\"text\"\n                id=\"secondLastName\"\n                value={formData.secondLastName}\n                onChange={(e) => handleInputChange('secondLastName', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n\n            {/* Contacto */}\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Email *\n              </label>\n              <input\n                type=\"email\"\n                id=\"email\"\n                value={formData.email}\n                onChange={(e) => handleInputChange('email', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Tel√©fono\n              </label>\n              <input\n                type=\"tel\"\n                id=\"phone\"\n                value={formData.phone}\n                onChange={(e) => handleInputChange('phone', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n\n            {/* Licencia */}\n            <div>\n              <label htmlFor=\"licenseNumber\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                N√∫mero de Licencia/Colegiado *\n              </label>\n              <input\n                type=\"text\"\n                id=\"licenseNumber\"\n                value={formData.licenseNumber}\n                onChange={(e) => handleInputChange('licenseNumber', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"Ej: 12345-67890 o COL-12345\"\n                required\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"country\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Pa√≠s de Licencia *\n              </label>\n              <select\n                id=\"country\"\n                value={formData.country}\n                onChange={(e) => handleInputChange('country', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              >\n                <option value=\"\">Selecciona un pa√≠s</option>\n                <option value=\"ES\">Espa√±a</option>\n                <option value=\"MX\">M√©xico</option>\n                <option value=\"AR\">Argentina</option>\n                <option value=\"CO\">Colombia</option>\n                <option value=\"PE\">Per√∫</option>\n                <option value=\"CL\">Chile</option>\n                <option value=\"VE\">Venezuela</option>\n                <option value=\"EC\">Ecuador</option>\n                <option value=\"BO\">Bolivia</option>\n                <option value=\"PY\">Paraguay</option>\n                <option value=\"UY\">Uruguay</option>\n                <option value=\"GT\">Guatemala</option>\n                <option value=\"SV\">El Salvador</option>\n                <option value=\"HN\">Honduras</option>\n                <option value=\"NI\">Nicaragua</option>\n                <option value=\"CR\">Costa Rica</option>\n                <option value=\"PA\">Panam√°</option>\n                <option value=\"CU\">Cuba</option>\n                <option value=\"DO\">Rep√∫blica Dominicana</option>\n                <option value=\"PR\">Puerto Rico</option>\n                <option value=\"US\">Estados Unidos</option>\n                <option value=\"CA\">Canad√°</option>\n                <option value=\"OTHER\">Otro</option>\n              </select>\n            </div>\n\n\n\n            {/* Tipo de Renovaci√≥n */}\n            <div>\n              <label htmlFor=\"licenseRenewalType\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Tipo de Renovaci√≥n de Licencia *\n              </label>\n              <select\n                id=\"licenseRenewalType\"\n                value={formData.licenseRenewalType}\n                onChange={(e) => handleInputChange('licenseRenewalType', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              >\n                <option value=\"annual\">Anual</option>\n                <option value=\"biennial\">Bienal</option>\n                <option value=\"other\">Otro</option>\n              </select>\n            </div>\n\n            {/* Notificaci√≥n de Vencimiento */}\n            <div className=\"col-span-2\">\n              <div className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  id=\"licenseExpiryNotification\"\n                  checked={formData.licenseExpiryNotification}\n                  onChange={(e) => handleInputChange('licenseExpiryNotification', e.target.checked)}\n                  className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                />\n                <label htmlFor=\"licenseExpiryNotification\" className=\"ml-2 block text-sm text-gray-700\">\n                  Recibir notificaciones cuando mi licencia est√© pr√≥xima a vencer\n                </label>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Secci√≥n: Datos Profesionales */}\n        <div className=\"bg-[#f8fdfc] rounded-lg shadow p-6 mb-8\">\n          <div className=\"flex items-center mb-4\">\n            <svg className=\"h-6 w-6 text-[#5DA5A3] mr-2\" viewBox=\"0 0 24 24\" fill=\"none\">\n              <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\" fill=\"currentColor\"/>\n              <path d=\"M7 12l5 5 5-5H7z\" fill=\"currentColor\"/>\n            </svg>\n            <h3 className=\"text-xl font-semibold text-[#5DA5A3]\">Datos Profesionales</h3>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label htmlFor=\"profession\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Profesi√≥n de la Salud *\n              </label>\n              <select\n                id=\"profession\"\n                value={formData.profession}\n                onChange={(e) => handleInputChange('profession', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                required\n              >\n                <option value=\"\">Selecciona tu profesi√≥n</option>\n                {healthProfessions.map((profession) => (\n                  <option key={profession} value={profession}>\n                    {profession}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label htmlFor=\"specialty\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Especialidad\n              </label>\n              <input\n                type=\"text\"\n                id=\"specialty\"\n                value={formData.specialty}\n                onChange={(e) => handleInputChange('specialty', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"Ej: Cardiolog√≠a, Pediatr√≠a, Fisioterapia Deportiva, Psicolog√≠a Cl√≠nica...\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"certifications\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Certificaciones\n              </label>\n              <textarea\n                id=\"certifications\"\n                value={formData.certifications}\n                onChange={(e) => handleInputChange('certifications', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                rows={3}\n                placeholder=\"Lista tus certificaciones, cursos especializados, o credenciales relevantes...\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"yearsOfExperience\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                A√±os de Experiencia *\n              </label>\n              <input\n                type=\"text\"\n                id=\"yearsOfExperience\"\n                value={formData.yearsOfExperience}\n                onChange={(e) => handleInputChange('yearsOfExperience', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                placeholder=\"Ej: 5 a√±os, 10+ a√±os, 2 a√±os en pediatr√≠a...\"\n                required\n              />\n            </div>\n\n\n          </div>\n        </div>\n\n        {/* Secci√≥n: Compliance y Seguridad */}\n        <div className=\"bg-[#f8fdfc] rounded-lg shadow p-6 mb-8\">\n          <h3 className=\"text-xl font-semibold text-[#5DA5A3] mb-4\">Consentimientos y Seguridad</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {/* Informaci√≥n de ubicaci√≥n detectada */}\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3\">\n                    <span className=\"text-blue-600 text-sm\">üåç</span>\n                  </div>\n                  <div>\n                    <h4 className=\"text-sm font-semibold text-blue-900\">\n                    </h4>\n                    <p className=\"text-xs text-blue-700\">\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n            {/* Regulaciones relevantes */}\n            {complianceConfig?.regulations.map((regulation: Regulation) => (\n              <div key={regulation.id} className=\"border border-gray-200 rounded-lg p-4\">\n                <div className=\"flex items-center mb-3\">\n                  <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-3\">\n                    <span className=\"text-green-600 text-sm font-bold\">\n                      {regulation.countries[0]}\n                    </span>\n                  </div>\n                  <h4 className=\"text-base font-semibold text-gray-900\">{regulation.name}</h4>\n                </div>\n                <p className=\"text-sm text-gray-600 mb-3\">\n                  {regulation.description}\n                </p>\n                <div className=\"flex items-center mb-3\">\n                  <input\n                    type=\"checkbox\"\n                    id={`${regulation.id}Consent`}\n                    checked={formData[`${regulation.id}Consent` as keyof typeof formData] as boolean}\n                    onChange={(e) => handleInputChange(`${regulation.id}Consent`, e.target.checked)}\n                    className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                  />\n                  <label htmlFor={`${regulation.id}Consent`} className=\"ml-2 text-sm text-gray-700\">\n                    Acepto cumplir con {regulation.name} para el manejo de informaci√≥n m√©dica\n                  </label>\n                </div>\n                <a \n                  href={regulation.officialUrl} \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"text-blue-600 hover:text-blue-800 text-sm underline\"\n                >\n                  üìã Leer regulaci√≥n oficial\n                </a>\n              </div>\n            ))}\n\n            {/* Opci√≥n para ver todas las regulaciones si no se detect√≥ ubicaci√≥n */}\n            {complianceConfig?.showAllRegulations && (\n              <div className=\"border border-gray-200 rounded-lg p-4\">\n                <div className=\"flex items-center mb-3\">\n                  <div className=\"w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center mr-3\">\n                    <span className=\"text-gray-600 text-sm font-bold\">üåê</span>\n                  </div>\n                  <h4 className=\"text-base font-semibold text-gray-900\">Regulaciones Generales</h4>\n                </div>\n                <p className=\"text-sm text-gray-600 mb-3\">\n                  No se pudo detectar tu ubicaci√≥n espec√≠fica. Por favor, selecciona las regulaciones que aplican a tu regi√≥n:\n                </p>\n                \n                {/* HIPAA - Estados Unidos */}\n                <div className=\"mb-4\">\n                  <div className=\"flex items-center mb-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"hipaaConsent\"\n                      checked={formData.hipaaConsent}\n                      onChange={(e) => handleInputChange('hipaaConsent', e.target.checked)}\n                      className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                    />\n                    <label htmlFor=\"hipaaConsent\" className=\"ml-2 text-sm text-gray-700\">\n                      HIPAA - Estados Unidos\n                    </label>\n                  </div>\n                </div>\n\n                {/* GDPR - Uni√≥n Europea */}\n                <div className=\"mb-4\">\n                  <div className=\"flex items-center mb-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"gdprConsent\"\n                      checked={formData.gdprConsent}\n                      onChange={(e) => handleInputChange('gdprConsent', e.target.checked)}\n                      className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                    />\n                    <label htmlFor=\"gdprConsent\" className=\"ml-2 text-sm text-gray-700\">\n                      GDPR - Uni√≥n Europea\n                    </label>\n                  </div>\n                </div>\n\n                {/* PIPEDA - Canad√° */}\n                <div className=\"mb-4\">\n                  <div className=\"flex items-center mb-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"pipedaConsent\"\n                      checked={formData.pipedaConsent}\n                      onChange={(e) => handleInputChange('pipedaConsent', e.target.checked)}\n                      className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                    />\n                    <label htmlFor=\"pipedaConsent\" className=\"ml-2 text-sm text-gray-700\">\n                      PIPEDA - Canad√°\n                    </label>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Consentimiento de procesamiento de datos */}\n            <div className=\"border border-gray-200 rounded-lg p-4\">\n              <div className=\"flex items-center mb-3\">\n                <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center mr-3\">\n                  <span className=\"text-purple-600 text-sm\">üîí</span>\n                </div>\n                <h4 className=\"text-base font-semibold text-gray-900\">Procesamiento de Datos</h4>\n              </div>\n              <p className=\"text-sm text-gray-600 mb-3\">\n                Consentimiento para el procesamiento de datos personales seg√∫n nuestra pol√≠tica de privacidad.\n              </p>\n              <div className=\"flex items-center mb-3\">\n                <input\n                  type=\"checkbox\"\n                  id=\"dataProcessingConsent\"\n                  checked={formData.dataProcessingConsent}\n                  onChange={(e) => handleInputChange('dataProcessingConsent', e.target.checked)}\n                  className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                />\n                <label htmlFor=\"dataProcessingConsent\" className=\"ml-2 text-sm text-gray-700\">\n                  Acepto el procesamiento de mis datos personales seg√∫n la pol√≠tica de privacidad\n                </label>\n              </div>\n              <a \n                href=\"/privacy-policy\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"text-blue-600 hover:text-blue-800 text-sm underline\"\n              >\n                üìã Leer pol√≠tica de privacidad\n              </a>\n            </div>\n\n            {/* MFA Opcional */}\n            <div className=\"border border-gray-200 rounded-lg p-4\">\n              <div className=\"flex items-center mb-3\">\n                <div className=\"w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center mr-3\">\n                  <span className=\"text-orange-600 text-sm\">üîê</span>\n                </div>\n                <h4 className=\"text-base font-semibold text-gray-900\">Autenticaci√≥n Multi-Factor (MFA)</h4>\n              </div>\n              <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-3 mb-3\">\n                <p className=\"text-sm text-orange-800\">\n                  <strong>‚ö†Ô∏è Importante:</strong> MFA agrega un paso adicional de seguridad pero tambi√©n de complejidad al login. \n                  Es completamente opcional y puedes activarlo m√°s tarde desde tu perfil.\n                </p>\n              </div>\n              <div className=\"flex items-center mb-3\">\n                <input\n                  type=\"checkbox\"\n                  id=\"mfaEnabled\"\n                  checked={formData.mfaEnabled}\n                  onChange={(e) => handleInputChange('mfaEnabled', e.target.checked)}\n                  className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                />\n                <label htmlFor=\"mfaEnabled\" className=\"ml-2 text-sm text-gray-700\">\n                  Quiero configurar autenticaci√≥n multi-factor para mayor seguridad\n                </label>\n              </div>\n              <a \n                href=\"/mfa-guide\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"text-blue-600 hover:text-blue-800 text-sm underline\"\n              >\n                üìã Gu√≠a de configuraci√≥n MFA\n              </a>\n            </div>\n\n            {/* Enlace a la pol√≠tica de privacidad de AiDuxCare */}\n            <div className=\"mt-8 text-center\">\n              <a\n                href=\"/privacy-policy\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-blue-700 underline text-sm font-medium hover:text-blue-900\"\n              >\n                üìÑ Leer la Pol√≠tica de Privacidad de AiDuxCare (Espa√±a)\n              </a>\n              <p className=\"text-xs text-gray-500 mt-2\">\n                Al continuar, aceptas nuestra <a href=\"/privacy-policy\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"underline\">Pol√≠tica de Privacidad</a>.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Botones de navegaci√≥n */}\n        <div className=\"flex justify-between mt-8\">\n          <button\n            onClick={handlePreviousStep}\n            disabled={currentStep === 0}\n            className=\"bg-gray-200 text-gray-700 font-semibold py-2 px-6 rounded hover:bg-gray-300 transition-colors\"\n          >\n            Anterior\n          </button>\n\n          {currentStep === steps.length - 1 ? (\n            <button\n              onClick={handleSubmit}\n              disabled={!canProceed() || isLoading}\n              className=\"bg-[#5DA5A3] text-white font-semibold py-2 px-6 rounded hover:bg-[#48918f] transition-colors\"\n            >\n              {isLoading ? 'Completando...' : 'Completar Configuraci√≥n'}\n            </button>\n          ) : (\n            <button\n              onClick={handleNextStep}\n              disabled={!canProceed()}\n              className=\"bg-[#5DA5A3] text-white font-semibold py-2 px-6 rounded hover:bg-[#48918f] transition-colors\"\n            >\n              Siguiente\n            </button>\n          )}\n        </div>\n\n        {/* Mensajes de error y √©xito */}\n        {error && <div className=\"text-red-600 text-sm mt-4\">{error}</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default ProfessionalOnboardingPage; \n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/router/router.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'WelcomePage' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { createBrowserRouter, useParams } from 'react-router-dom';\n\nimport { AuthGuard } from '../components/AuthGuard';\nimport { CommandCenterPage } from '../features/command-center/CommandCenterPage';\nimport { WelcomePage } from '../pages/WelcomePage';\nimport LoginPage from '../pages/LoginPage';\nimport { PatientListPage } from '../pages/PatientsPage';\nimport { PatientDetailPage } from '../pages/PatientDetailPage';\nimport { AppointmentListPage } from '../pages/AppointmentsPage';\nimport { AppointmentDetailPage } from '../pages/AppointmentsPage';\nimport { NotesListPage } from '../pages/NotesPage';\nimport { NoteDetailPage } from '../pages/NotesPage';\nimport { RegisterPage } from '../features/auth/RegisterPage';\n\n// LayoutWrapper simple\nfunction LayoutWrapper({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <nav className=\"bg-white shadow-sm border-b border-slate-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between h-16\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <h1 className=\"text-xl font-semibold text-slate-900\">AiDuxCare</h1>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n      <main className=\"flex-1\">{children}</main>\n    </div>\n  );\n}\n\n// Wrapper para NoteDetailPage que obtiene el id de los par√°metros\nfunction NoteDetailWrapper() {\n  const { id } = useParams<{ id: string }>();\n  return <NoteDetailPage id={id || ''} />;\n}\n\nconst router = createBrowserRouter([\n  { path: '/', element: <LoginPage /> },\n  { path: '/register', element: <RegisterPage /> },\n  { path: '/wizard', element: <RegisterPage /> },\n  {\n    path: '/command-center',\n    element: <AuthGuard><LayoutWrapper><CommandCenterPage /></LayoutWrapper></AuthGuard>\n  },\n  { path: '/patients', element: <AuthGuard><LayoutWrapper><PatientListPage /></LayoutWrapper></AuthGuard> },\n  { path: '/patients/:id', element: <AuthGuard><LayoutWrapper><PatientDetailPage /></LayoutWrapper></AuthGuard> },\n  { path: '/appointments', element: <AuthGuard><LayoutWrapper><AppointmentListPage /></LayoutWrapper></AuthGuard> },\n  { path: '/appointments/:id', element: <AuthGuard><LayoutWrapper><AppointmentDetailPage /></LayoutWrapper></AuthGuard> },\n  { path: '/notes', element: <AuthGuard><LayoutWrapper><NotesListPage /></LayoutWrapper></AuthGuard> },\n  { path: '/notes/:id', element: <AuthGuard><LayoutWrapper><NoteDetailWrapper /></LayoutWrapper></AuthGuard> }\n]);\n\nexport default router; \n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/GoogleCloudAudioService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'jsonParseError' is defined but never used.","line":162,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'textError' is defined but never used.","line":165,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":165,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":292,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":292,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ClinicalAnalysisRequest {\n  transcription: string;\n  specialty: 'physiotherapy' | 'psychology' | 'general_medicine';\n  sessionType: 'initial' | 'follow_up';\n}\n\nexport interface ClinicalAnalysisResponse {\n  success: boolean;\n  analysis?: {\n    warnings: Array<{\n      id: string;\n      severity: 'HIGH' | 'MEDIUM' | 'LOW';\n      category: string;\n      title: string;\n      description: string;\n      recommendation: string;\n      evidence: string;\n    }>;\n    suggestions: Array<{\n      id: string;\n      type: string;\n      title: string;\n      description: string;\n      rationale: string;\n      priority: 'HIGH' | 'MEDIUM' | 'LOW';\n    }>;\n    soap_analysis: {\n      subjective_completeness: number;\n      objective_completeness: number;\n      assessment_quality: number;\n      plan_appropriateness: number;\n      overall_quality: number;\n      missing_elements: string[];\n    };\n    session_quality: {\n      communication_score: number;\n      clinical_thoroughness: number;\n      patient_engagement: number;\n      professional_standards: number;\n      areas_for_improvement: string[];\n    };\n  };\n  error?: string;\n  message?: string;\n  metadata?: {\n    specialty: string;\n    sessionType: string;\n    processingTimeMs: number;\n    timestamp: string;\n  };\n}\n\ninterface TranscriptionResult {\n  text: string;\n  isFinal: boolean;\n  confidence?: number;\n}\n\nexport class GoogleCloudAudioService {\n  private readonly clinicalBrainEndpoint = 'https://us-east1-aiduxcare-stt-20250706.cloudfunctions.net/clinical-brain';\n  \n  async analyzeClinicalTranscription(request: ClinicalAnalysisRequest): Promise<ClinicalAnalysisResponse> {\n    // üîç DIAGN√ìSTICO EXHAUSTIVO - Logging detallado para detectar causa ra√≠z\n    console.log('üß† INICIANDO DIAGN√ìSTICO CLOUD FUNCTION:', {\n      endpoint: this.clinicalBrainEndpoint,\n      transcriptionLength: request.transcription.length,\n      specialty: request.specialty,\n      sessionType: request.sessionType,\n      transcriptionPreview: request.transcription.substring(0, 100) + '...',\n      requestSize: JSON.stringify(request).length,\n      timestamp: new Date().toISOString()\n    });\n\n    // Validaci√≥n exhaustiva del request antes de enviar\n    const validation = this.validateTranscription(request.transcription);\n    if (!validation.isValid) {\n      console.error('‚ùå VALIDACI√ìN FALLIDA:', validation.error);\n      return {\n        success: false,\n        error: `Validaci√≥n fallida: ${validation.error}`,\n        message: validation.error\n      };\n    }\n\n    try {\n      console.log('üì° ENVIANDO REQUEST A CLOUD FUNCTION:', {\n        method: 'POST',\n        contentType: 'application/json',\n        bodySize: JSON.stringify(request).length,\n        body: {\n          transcription: request.transcription.length > 200 ? \n            request.transcription.substring(0, 200) + '...' : \n            request.transcription,\n          specialty: request.specialty,\n          sessionType: request.sessionType\n        }\n      });\n\n      // ‚è∞ A√ëADIR TIMEOUT DE 60 SEGUNDOS\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 60000); // 60 segundos timeout\n\n      let response;\n      try {\n        response = await fetch(this.clinicalBrainEndpoint, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(request),\n          signal: controller.signal // ‚è∞ A√±adir signal para timeout\n        });\n      } catch (fetchError) {\n        clearTimeout(timeoutId);\n        console.error('‚ùå ERROR DE RED O FETCH:', fetchError);\n        \n        // üö® MANEJO ESPEC√çFICO DE TIMEOUT\n        if (fetchError instanceof Error && (fetchError.name === 'AbortError' || fetchError.message.includes('aborted'))) {\n          console.error('‚è∞ TIMEOUT DEL CEREBRO CL√çNICO DETECTADO:', {\n            duration: '60 segundos',\n            transcriptionLength: request.transcription.length,\n            specialty: request.specialty,\n            recommendation: 'Usar procesamiento b√°sico'\n          });\n\n          return {\n            success: false,\n            error: '‚è∞ El Cerebro Cl√≠nico tard√≥ m√°s de 60 segundos. Se ha generado un an√°lisis b√°sico. Todas las funciones m√©dicas est√°n disponibles.',\n            message: 'timeout_cerebro_clinico'\n          };\n        }\n        \n        return {\n          success: false,\n          error: this.formatNetworkError(fetchError instanceof Error ? fetchError.message : 'Error desconocido'),\n          message: fetchError instanceof Error ? fetchError.message : 'Error desconocido'\n        };\n      }\n\n      clearTimeout(timeoutId); // Limpiar timeout si la respuesta llega\n\n      console.log('üì° RESPUESTA RECIBIDA DE CLOUD FUNCTION:', {\n        status: response.status,\n        statusText: response.statusText,\n        ok: response.ok,\n        headers: response.headers ? Object.fromEntries(response.headers.entries()) : {},\n        url: response.url\n      });\n\n      if (!response.ok) {\n        // DIAGN√ìSTICO EXHAUSTIVO DEL ERROR\n        let errorDetails = '';\n        let fullErrorResponse = null;\n        \n        try {\n          const rawResponse = await response.text();\n          console.log('üìã RAW ERROR RESPONSE:', rawResponse);\n          \n          try {\n            fullErrorResponse = JSON.parse(rawResponse);\n            errorDetails = fullErrorResponse.message || fullErrorResponse.error || 'Error desconocido del servidor';\n          } catch (jsonParseError) {\n            errorDetails = rawResponse || `Error HTTP ${response.status}: ${response.statusText}`;\n          }\n        } catch (textError) {\n          errorDetails = `Error HTTP ${response.status}: ${response.statusText}`;\n        }\n\n        console.error('‚ùå DIAGN√ìSTICO COMPLETO DEL ERROR:', {\n          status: response.status,\n          statusText: response.statusText,\n          errorDetails,\n          fullErrorResponse,\n          request: {\n            transcriptionLength: request.transcription.length,\n            specialty: request.specialty,\n            sessionType: request.sessionType,\n            transcriptionSample: request.transcription.substring(0, 150)\n          },\n          timestamp: new Date().toISOString()\n        });\n\n        // Si es Error 500, intentar capturar m√°s detalles espec√≠ficos\n        if (response.status === 500) {\n          console.error('üö® ERROR 500 DETECTADO - AN√ÅLISIS ESPEC√çFICO:', {\n            likelyTextChunkerError: errorDetails.includes('textChunker'),\n            likelyVertexAIError: errorDetails.includes('Vertex') || errorDetails.includes('INVALID_ARGUMENT'),\n            likelyPromptError: errorDetails.includes('prompt') || errorDetails.includes('template'),\n            fullErrorMessage: errorDetails\n          });\n        }\n\n        return {\n          success: false,\n          error: this.formatErrorMessage(response.status, errorDetails),\n          message: errorDetails\n        };\n      }\n\n      let result: ClinicalAnalysisResponse | null = null;\n      try {\n        result = await response.json();\n      } catch (jsonError) {\n        console.error('‚ùå Error parseando JSON de la respuesta del Cerebro Cl√≠nico:', jsonError);\n        return {\n          success: false,\n          error: `Error parseando JSON de la respuesta del Cerebro Cl√≠nico: ${jsonError instanceof Error ? jsonError.message : 'Error desconocido'}`,\n          message: 'json_parse_error'\n        };\n      }\n\n      // Blindaje: si la respuesta es null, vac√≠a o no tiene la estructura esperada\n      if (!result || typeof result !== 'object' || (result.success === undefined && !result.analysis)) {\n        console.error('‚ùå Respuesta inv√°lida o inesperada del Cerebro Cl√≠nico:', result);\n        return {\n          success: false,\n          error: 'Respuesta inv√°lida o inesperada del Cerebro Cl√≠nico. No se pudo obtener un an√°lisis cl√≠nico v√°lido.',\n          message: 'invalid_response_structure'\n        };\n      }\n\n      console.log('‚úÖ An√°lisis recibido del Cerebro Cl√≠nico:', {\n        success: result.success,\n        hasWarnings: !!result.analysis?.warnings,\n        warningsCount: result.analysis?.warnings?.length || 0,\n        hasSuggestions: !!result.analysis?.suggestions,\n        suggestionsCount: result.analysis?.suggestions?.length || 0,\n        overallQuality: result.analysis?.soap_analysis?.overall_quality\n      });\n\n      return result;\n\n    } catch (error) {\n      console.error('‚ùå Error cr√≠tico comunic√°ndose con el Cerebro Cl√≠nico:', error);\n      console.error('üîç DEBUG ERROR TYPE:', {\n        errorType: typeof error,\n        errorName: error instanceof Error ? error.name : 'N/A',\n        errorMessage: error instanceof Error ? error.message : 'N/A',\n        isAbortError: error instanceof Error && error.name === 'AbortError',\n        containsAborted: error instanceof Error && error.message.includes('aborted')\n      });\n      \n      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';\n      \n      // üö® MANEJO ESPEC√çFICO DE TIMEOUT\n      if (error instanceof Error && (error.name === 'AbortError' || error.message.includes('aborted'))) {\n        console.error('‚è∞ TIMEOUT DEL CEREBRO CL√çNICO DETECTADO:', {\n          duration: '60 segundos',\n          transcriptionLength: request.transcription.length,\n          specialty: request.specialty,\n          recommendation: 'Usar procesamiento b√°sico'\n        });\n\n        return {\n          success: false,\n          error: '‚è∞ El Cerebro Cl√≠nico tard√≥ m√°s de 60 segundos. Se ha generado un an√°lisis b√°sico. Todas las funciones m√©dicas est√°n disponibles.',\n          message: 'timeout_cerebro_clinico'\n        };\n      } else {\n        console.error('‚ùå NO ES ABORT ERROR:', {\n          errorName: error instanceof Error ? error.name : 'N/A',\n          errorMessage: error instanceof Error ? error.message : 'N/A'\n        });\n      }\n\n      console.error('‚ùå ERROR DE RED CLOUD FUNCTION:', {\n        error: errorMessage,\n        request: {\n          transcriptionLength: request.transcription.length,\n          specialty: request.specialty,\n          sessionType: request.sessionType\n        }\n      });\n\n      return {\n        success: false,\n        error: this.formatNetworkError(errorMessage),\n        message: errorMessage\n      };\n    }\n  }\n\n  public async processAudio(): Promise<TranscriptionResult> {\n    try {\n      // Aqu√≠ ir√≠a la l√≥gica real de Google Cloud Speech-to-Text\n      // Por ahora retornamos un resultado simulado\n      return {\n        text: 'Transcripci√≥n simulada',\n        isFinal: true,\n        confidence: 0.95\n      };\n    } catch (error) {\n      throw new Error('Error al procesar audio con Google Cloud');\n    }\n  }\n\n  private formatErrorMessage(statusCode: number, errorDetails: string): string {\n    switch (statusCode) {\n      case 400:\n        return `‚ö†Ô∏è Solicitud inv√°lida: ${errorDetails}. Verifique que la transcripci√≥n sea v√°lida.`;\n      case 401:\n        return `üîí Error de autenticaci√≥n: ${errorDetails}. Contacte al soporte t√©cnico.`;\n      case 403:\n        return `üö´ Acceso denegado: ${errorDetails}. Verifique sus permisos.`;\n      case 404:\n        return `üîç Servicio no encontrado: ${errorDetails}. El Cerebro Cl√≠nico puede estar en mantenimiento.`;\n      case 429:\n        return `‚è±Ô∏è L√≠mite de uso excedido: ${errorDetails}. Intente nuevamente en unos minutos.`;\n      case 500:\n        return `üö® Error interno del Cerebro Cl√≠nico: ${errorDetails}. El sistema est√° procesando pero encontr√≥ un problema t√©cnico.`;\n      case 502:\n        return `üîå Error de conexi√≥n: ${errorDetails}. El servicio puede estar temporalmente no disponible.`;\n      case 503:\n        return `‚öôÔ∏è Servicio no disponible: ${errorDetails}. El Cerebro Cl√≠nico est√° en mantenimiento.`;\n      case 504:\n        return `‚è∞ Tiempo de espera agotado: ${errorDetails}. La transcripci√≥n puede ser muy larga.`;\n      default:\n        return `‚ùå Error del servidor (${statusCode}): ${errorDetails}`;\n    }\n  }\n\n  private formatNetworkError(errorMessage: string): string {\n    if (errorMessage.includes('network') || errorMessage.includes('fetch')) {\n      return `üåê Error de conexi√≥n de red: ${errorMessage}. Verifique su conexi√≥n a internet.`;\n    }\n    \n    if (errorMessage.includes('timeout')) {\n      return `‚è∞ Tiempo de espera agotado: ${errorMessage}. La transcripci√≥n puede ser muy larga o el servicio est√° sobrecargado.`;\n    }\n    \n    if (errorMessage.includes('INVALID_ARGUMENT')) {\n      return `‚ö†Ô∏è Formato de transcripci√≥n no v√°lido: ${errorMessage}. La transcripci√≥n no pudo ser procesada por el modelo de IA.`;\n    }\n    if (errorMessage.includes('quota')) {\n      return `üìä L√≠mites de uso alcanzados: ${errorMessage}. Se han agotado los recursos del servicio de IA.`;\n    }\n    return `üîß Error t√©cnico: ${errorMessage}. Contacte al soporte t√©cnico si el problema persiste.`;\n  }\n\n  // M√©todo para validar transcripci√≥n antes de enviar\n  validateTranscription(transcription: string): { isValid: boolean; error?: string } {\n    if (!transcription || transcription.trim().length === 0) {\n      return { isValid: false, error: 'La transcripci√≥n est√° vac√≠a' };\n    }\n    if (transcription.length < 10) {\n      return { isValid: false, error: 'La transcripci√≥n es demasiado corta (m√≠nimo 10 caracteres)' };\n    }\n    if (transcription.length > 50000) {\n      return { isValid: false, error: 'La transcripci√≥n es demasiado larga (m√°ximo 50,000 caracteres)' };\n    }\n    // üîß PASO 3: MENSAJE MEJORADO PARA USUARIO CL√çNICO\n    // Verificar que contiene palabras reales\n    const words = transcription.trim().split(/\\s+/);\n    if (words.length < 3) {\n      return {\n        isValid: false,\n        error: 'No se ha podido detectar una transcripci√≥n clara. Por favor, verifique su micr√≥fono e int√©ntelo de nuevo en un entorno con menos ruido de fondo.'\n      };\n    }\n    return { isValid: true };\n  }\n\n  // M√©todo para obtener estado del servicio\n  async getServiceStatus(): Promise<{ available: boolean; message: string }> {\n    try {\n      const response = await fetch(`${this.clinicalBrainEndpoint}/health`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        return {\n          available: true,\n          message: `‚úÖ Cerebro Cl√≠nico disponible (${data.version || 'v1.0.0'})`\n        };\n      } else {\n        return {\n          available: false,\n          message: `‚ö†Ô∏è Cerebro Cl√≠nico no disponible (${response.status})`\n        };\n      }\n    } catch (error) {\n      return {\n        available: false,\n        message: `‚ùå Error verificando estado del Cerebro Cl√≠nico: ${error instanceof Error ? error.message : 'Error desconocido'}`\n      };\n    }\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/services/UserAnalyticsService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'query' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'where' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'orderBy' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'limit' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":67}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * üìä User Analytics Service - Captura datos de usuarios para estad√≠sticas\n * Cumple HIPAA/GDPR: Datos anonimizados, sin PII expuesto\n */\n\nimport { collection, addDoc, getDocs, query, where, orderBy, limit } from 'firebase/firestore';\n\nimport { db } from '@/lib/firebase';\n\nexport interface UserAnalytics {\n  timestamp: Date;\n  stepCompleted: string;\n  profession: string;\n  country: string;\n  experienceLevel: string;\n  complianceAccepted: boolean;\n  sessionDuration: number;\n  deviceType: string;\n  browser: string;\n}\n\nexport interface AnalyticsSummary {\n  totalUsers: number;\n  professions: Record<string, number>;\n  countries: Record<string, number>;\n  experienceLevels: Record<string, number>;\n  complianceRate: number;\n  averageSessionDuration: number;\n  topProfessions: Array<{ profession: string; count: number }>;\n  topCountries: Array<{ country: string; count: number }>;\n}\n\nclass UserAnalyticsService {\n  private readonly COLLECTION_NAME = 'user_analytics';\n\n  /**\n   * Captura datos de un paso completado\n   */\n  async captureStepCompletion(data: Partial<UserAnalytics>): Promise<void> {\n    try {\n      const analyticsData: UserAnalytics = {\n        timestamp: new Date(),\n        stepCompleted: data.stepCompleted || 'unknown',\n        profession: data.profession || 'unknown',\n        country: data.country || 'unknown',\n        experienceLevel: data.experienceLevel || 'unknown',\n        complianceAccepted: data.complianceAccepted || false,\n        sessionDuration: data.sessionDuration || 0,\n        deviceType: this.getDeviceType(),\n        browser: this.getBrowser(),\n        ...data\n      };\n\n      await addDoc(collection(db, this.COLLECTION_NAME), analyticsData);\n      console.log('Analytics capturado:', analyticsData);\n    } catch (error) {\n      console.error('Error capturando analytics:', error);\n    }\n  }\n\n  /**\n   * Captura inicio de onboarding\n   */\n  async captureOnboardingStart(profession: string, country: string): Promise<void> {\n    await this.captureStepCompletion({\n      stepCompleted: 'onboarding_started',\n      profession,\n      country\n    });\n  }\n\n  /**\n   * Captura paso completado\n   */\n  async captureStepCompleted(step: string, data: Partial<UserAnalytics>): Promise<void> {\n    await this.captureStepCompletion({\n      stepCompleted: step,\n      ...data\n    });\n  }\n\n  /**\n   * Captura onboarding completado\n   */\n  async captureOnboardingCompleted(data: Partial<UserAnalytics>): Promise<void> {\n    await this.captureStepCompletion({\n      stepCompleted: 'onboarding_completed',\n      ...data\n    });\n  }\n\n  /**\n   * Obtiene resumen de estad√≠sticas\n   */\n  async getAnalyticsSummary(): Promise<AnalyticsSummary> {\n    try {\n      const querySnapshot = await getDocs(collection(db, this.COLLECTION_NAME));\n      const analytics: UserAnalytics[] = [];\n      \n      querySnapshot.forEach((doc) => {\n        const data = doc.data();\n        analytics.push({\n          timestamp: data.timestamp.toDate(),\n          stepCompleted: data.stepCompleted,\n          profession: data.profession,\n          country: data.country,\n          experienceLevel: data.experienceLevel,\n          complianceAccepted: data.complianceAccepted,\n          sessionDuration: data.sessionDuration,\n          deviceType: data.deviceType,\n          browser: data.browser\n        });\n      });\n\n      return this.calculateSummary(analytics);\n    } catch (error) {\n      console.error('Error obteniendo analytics:', error);\n      return this.getEmptySummary();\n    }\n  }\n\n  /**\n   * Calcula resumen de estad√≠sticas\n   */\n  private calculateSummary(analytics: UserAnalytics[]): AnalyticsSummary {\n    const professions: Record<string, number> = {};\n    const countries: Record<string, number> = {};\n    const experienceLevels: Record<string, number> = {};\n    let complianceAccepted = 0;\n    let totalSessionDuration = 0;\n\n    analytics.forEach((item) => {\n      // Contar profesiones\n      professions[item.profession] = (professions[item.profession] || 0) + 1;\n      \n      // Contar pa√≠ses\n      countries[item.country] = (countries[item.country] || 0) + 1;\n      \n      // Contar niveles de experiencia\n      experienceLevels[item.experienceLevel] = (experienceLevels[item.experienceLevel] || 0) + 1;\n      \n      // Contar compliance\n      if (item.complianceAccepted) complianceAccepted++;\n      \n      // Sumar duraci√≥n de sesi√≥n\n      totalSessionDuration += item.sessionDuration;\n    });\n\n    const totalUsers = analytics.length;\n    const complianceRate = totalUsers > 0 ? (complianceAccepted / totalUsers) * 100 : 0;\n    const averageSessionDuration = totalUsers > 0 ? totalSessionDuration / totalUsers : 0;\n\n    // Top profesiones\n    const topProfessions = Object.entries(professions)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 5)\n      .map(([profession, count]) => ({ profession, count }));\n\n    // Top pa√≠ses\n    const topCountries = Object.entries(countries)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 5)\n      .map(([country, count]) => ({ country, count }));\n\n    return {\n      totalUsers,\n      professions,\n      countries,\n      experienceLevels,\n      complianceRate,\n      averageSessionDuration,\n      topProfessions,\n      topCountries\n    };\n  }\n\n  /**\n   * Obtiene resumen vac√≠o\n   */\n  private getEmptySummary(): AnalyticsSummary {\n    return {\n      totalUsers: 0,\n      professions: {},\n      countries: {},\n      experienceLevels: {},\n      complianceRate: 0,\n      averageSessionDuration: 0,\n      topProfessions: [],\n      topCountries: []\n    };\n  }\n\n  /**\n   * Detecta tipo de dispositivo\n   */\n  private getDeviceType(): string {\n    if (window.innerWidth < 768) return 'mobile';\n    if (window.innerWidth < 1024) return 'tablet';\n    return 'desktop';\n  }\n\n  /**\n   * Detecta navegador\n   */\n  private getBrowser(): string {\n    const userAgent = navigator.userAgent;\n    if (userAgent.includes('Chrome')) return 'Chrome';\n    if (userAgent.includes('Firefox')) return 'Firefox';\n    if (userAgent.includes('Safari')) return 'Safari';\n    if (userAgent.includes('Edge')) return 'Edge';\n    return 'Unknown';\n  }\n}\n\nexport const userAnalyticsService = new UserAnalyticsService();\nexport default userAnalyticsService;\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/tests/basic.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/tests/basic.test.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview Test b√°sico para validar configuraci√≥n de Vitest\n * @version 1.0.0\n * @author AiDuxCare Development Team\n */\n\nimport { describe, it, expect } from 'vitest';\n\ndescribe('Configuraci√≥n B√°sica', () => {\n  it('debe ejecutar tests correctamente', () => {\n    expect(true).toBe(true);\n  });\n\n  it('debe manejar operaciones matem√°ticas', () => {\n    expect(2 + 2).toBe(4);\n  });\n\n  it('debe manejar strings', () => {\n    expect('AiDuxCare').toContain('AiDux');\n  });\n});\n\ndescribe('Configuraci√≥n TypeScript', () => {\n  it('debe tener tipos correctos', () => {\n    const message: string = 'Hola mundo';\n    expect(typeof message).toBe('string');\n  });\n\n  it('debe manejar arrays tipados', () => {\n    const numbers: number[] = [1, 2, 3, 4, 5];\n    expect(numbers).toHaveLength(5);\n    expect(numbers[0]).toBe(1);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/tests/core/sttLocal/index.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/tests/core/sttLocal/index.spec.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\n\nimport { STTLocalEngine, detectSTTCapabilities, transcribeLocal, createLocalTranscription } from '../../../core/sttLocal';\n\n// Configuraci√≥n condicional para tests WASM\nconst isWasmExpected = false; // en CI cambia a true\n\n// Mock de crypto.randomUUID\nconst mockUUID = 'test-uuid-123';\nvi.stubGlobal('crypto', {\n  randomUUID: () => mockUUID\n});\n\n// Mock de MediaRecorder\nconst mockMediaRecorder = {\n  start: vi.fn(),\n  stop: vi.fn(),\n  addEventListener: vi.fn(),\n  removeEventListener: vi.fn(),\n  stream: {\n    getTracks: () => [{ stop: vi.fn() }]\n  }\n};\n\n// Mock de Audio\nconst mockAudio = {\n  duration: 30,\n  sampleRate: 44100,\n  channels: 1,\n  addEventListener: vi.fn(),\n  removeEventListener: vi.fn(),\n  play: vi.fn(),\n  pause: vi.fn(),\n  currentTime: 0\n};\n\n// Mock de URL.createObjectURL\nvi.stubGlobal('URL', {\n  createObjectURL: vi.fn(() => 'mock-url'),\n  revokeObjectURL: vi.fn()\n});\n\n// Mock de WebAssembly\nObject.defineProperty(window, 'WebAssembly', {\n  value: {\n    validate: vi.fn(() => false),\n    instantiate: vi.fn()\n  },\n  writable: true,\n  configurable: true\n});\n\n// Mock de navigator.gpu\nconst mockNavigator = {\n  gpu: undefined\n};\n\n// Mock de performance.now\nconst mockPerformance = {\n  now: vi.fn(() => 1000)\n};\n\n// Configurar mocks globales\nObject.defineProperty(window, 'WebAssembly', {\n  value: {\n    validate: vi.fn(() => true),\n    instantiate: vi.fn()\n  },\n  writable: true,\n  configurable: true\n});\n\nObject.defineProperty(window, 'navigator', {\n  value: mockNavigator,\n  writable: true\n});\n\nObject.defineProperty(window, 'performance', {\n  value: mockPerformance,\n  writable: true\n});\n\ndescribe('STT Local Module', () => {\n  let sttEngine: STTLocalEngine;\n  let mockAudioBlob: Blob;\n\n  beforeEach(() => {\n    // Resetear mocks\n    mockPerformance.now.mockReturnValue(1000);\n    \n    // Resetear WebAssembly mock\n    Object.defineProperty(window, 'WebAssembly', {\n      value: {\n        validate: vi.fn(() => true),\n        instantiate: vi.fn()\n      },\n      writable: true,\n      configurable: true\n    });\n    \n    // Resetear navigator.gpu\n    Object.defineProperty(navigator, 'gpu', {\n      value: undefined,\n      writable: true\n    });\n  });\n\n  describe('detectSTTCapabilities', () => {\n    it('debe detectar capacidades WASM correctamente', () => {\n      const capabilities = detectSTTCapabilities();\n      \n      expect(capabilities.wasmSupported).toBe(true);\n      expect(capabilities.simdSupported).toBe(true);\n      expect(capabilities.webGPUSupported).toBe(false);\n      expect(capabilities.modelsAvailable).toContain('whisper-tiny');\n      expect(capabilities.modelsAvailable).toContain('vosk-small');\n      expect(capabilities.maxAudioLength).toBe(300);\n    });\n\n    it('debe manejar navegadores sin WASM', () => {\n      // Simular navegador sin WASM\n      Object.defineProperty(window, 'WebAssembly', {\n        value: undefined,\n        writable: true\n      });\n\n      const capabilities = detectSTTCapabilities();\n      \n      expect(capabilities.wasmSupported).toBe(false);\n      expect(capabilities.modelsAvailable).toEqual(['fallback']);\n      expect(capabilities.maxAudioLength).toBe(60);\n    });\n\n    it('debe detectar WebGPU cuando est√° disponible', () => {\n      // Simular navegador con WebGPU\n      Object.defineProperty(window, 'navigator', {\n        value: { gpu: {} },\n        writable: true\n      });\n\n      const capabilities = detectSTTCapabilities();\n      expect(capabilities.webGPUSupported).toBe(true);\n    });\n  });\n\n  describe('STTLocalEngine', () => {\n    beforeEach(() => {\n      sttEngine = new STTLocalEngine();\n    });\n\n    (isWasmExpected ? it : it.skip)('debe inicializarse correctamente', async () => {\n      // skipped locally: requires WASM in CI\n      // Esperar a que se complete la inicializaci√≥n\n      await new Promise(resolve => setTimeout(resolve, 150));\n      \n      expect(sttEngine.isReady()).toBe(true);\n      expect(sttEngine.getCapabilities().wasmSupported).toBe(true);\n    });\n\n    it('debe configurarse correctamente', () => {\n      const config = sttEngine.getConfig();\n      \n      expect(config.model).toBe('fallback');\n      expect(config.maxAudioDuration).toBe(300);\n      expect(config.confidenceThreshold).toBe(0.7);\n    });\n\n    it('debe actualizar configuraci√≥n', () => {\n      sttEngine.updateConfig({ maxAudioDuration: 600 });\n      \n      const config = sttEngine.getConfig();\n      expect(config.maxAudioDuration).toBe(600);\n    });\n\n    (isWasmExpected ? it : it.skip)('debe validar audio correctamente', async () => {\n      // skipped locally: requires WASM in CI\n      const audioInfo = await sttEngine['validateAudio'](mockAudioBlob);\n      \n      expect(audioInfo.duration).toBe(30);\n      expect(audioInfo.sampleRate).toBe(44100);\n      expect(audioInfo.channels).toBe(1);\n    });\n\n    (isWasmExpected ? it : it.skip)('debe rechazar audio demasiado largo', async () => {\n      // skipped locally: requires WASM in CI\n      // Configurar duraci√≥n m√°xima baja\n      sttEngine.updateConfig({ maxAudioDuration: 10 });\n      \n      // Simular audio largo\n      const longAudioBlob = new Blob(['long audio'], { type: 'audio/wav' });\n      Object.defineProperty(mockAudio, 'prototype', {\n        value: { duration: 60 },\n        writable: true\n      });\n\n      await expect(sttEngine.transcribeLocal(longAudioBlob)).rejects.toThrow('Audio demasiado largo');\n    });\n\n    (isWasmExpected ? it : it.skip)('debe usar modo fallback cuando WASM no est√° disponible', async () => {\n      // skipped locally: requires WASM in CI\n      // Simular navegador sin WASM\n      Object.defineProperty(window, 'WebAssembly', {\n        value: undefined,\n        writable: true\n      });\n\n      const fallbackEngine = new STTLocalEngine();\n      await new Promise(resolve => setTimeout(resolve, 150));\n\n      const result = await fallbackEngine.transcribeLocal(mockAudioBlob);\n      \n      expect(result.fallback).toBe(true);\n      expect(result.text).toBe('[Audio capturado - modo offline]');\n      expect(result.confidence).toBe(0.0);\n    });\n  });\n\n  describe('transcribeLocal', () => {\n    (isWasmExpected ? it : it.skip)('debe transcribir audio correctamente', async () => {\n      // skipped locally: requires WASM in CI\n      const result = await transcribeLocal(mockAudioBlob);\n      \n      expect(result).toHaveProperty('text');\n      expect(result).toHaveProperty('confidence');\n      expect(result).toHaveProperty('processingTime');\n      expect(result).toHaveProperty('model');\n      expect(result).toHaveProperty('fallback');\n    });\n\n    (isWasmExpected ? it : it.skip)('debe manejar errores de transcripci√≥n', async () => {\n      // skipped locally: requires WASM in CI\n      // Simular error en validaci√≥n de audio\n      const invalidBlob = new Blob(['invalid'], { type: 'invalid' });\n      \n      const result = await transcribeLocal(invalidBlob);\n      \n      expect(result.fallback).toBe(true);\n      expect(result.text).toBe('[Audio capturado - transcripci√≥n fallida]');\n      expect(result.confidence).toBe(0.0);\n    });\n  });\n\n  describe('createLocalTranscription', () => {\n    (isWasmExpected ? it : it.skip)('debe crear transcripci√≥n local correctamente', async () => {\n      // skipped locally: requires WASM in CI\n      const userId = 'test-user';\n      const sessionId = 'test-session';\n      \n      const transcription = await createLocalTranscription(mockAudioBlob, userId, sessionId);\n      \n      expect(transcription.id).toBe('test-uuid-123');\n      expect(transcription.userId).toBe(userId);\n      expect(transcription.sessionId).toBe(sessionId);\n      expect(transcription.timestamp).toBeInstanceOf(Date);\n      expect(transcription.metadata).toEqual({\n        duration: 30,\n        sampleRate: 44100,\n        channels: 1\n      });\n    });\n\n    (isWasmExpected ? it : it.skip)('debe manejar errores en creaci√≥n de transcripci√≥n', async () => {\n      // skipped locally: requires WASM in CI\n      // Simular error en transcribeLocal\n      const invalidBlob = new Blob(['invalid'], { type: 'invalid' });\n      \n      await expect(\n        createLocalTranscription(invalidBlob, 'user', 'session')\n      ).rejects.toThrow();\n    });\n  });\n\n  describe('Manejo de errores', () => {\n    it('debe manejar errores de inicializaci√≥n', async () => {\n      // Simular error en inicializaci√≥n\n      const errorEngine = new STTLocalEngine();\n      \n      // Forzar error\n      vi.spyOn(errorEngine as { initialize: () => Promise<void> }, 'initialize').mockRejectedValue(new Error('Init failed'));\n      \n      await new Promise(resolve => setTimeout(resolve, 150));\n      \n      // Debe usar fallback en caso de error\n      expect(errorEngine.isReady()).toBe(true);\n    });\n\n    it('debe manejar errores de carga de modelo', async () => {\n      const engine = new STTLocalEngine({ model: 'whisper-tiny' });\n      \n      // Simular error en carga de modelo\n      vi.spyOn(engine as { loadModel: (modelName: string) => Promise<void> }, 'loadModel').mockRejectedValue(new Error('Model load failed'));\n      \n      await new Promise(resolve => setTimeout(resolve, 150));\n      \n      // Debe usar fallback\n      expect(engine.isReady()).toBe(true);\n    });\n  });\n\n  describe('Compatibilidad', () => {\n    (isWasmExpected ? it : it.skip)('debe funcionar en navegadores modernos', () => {\n      // skipped locally: requires WASM in CI\n      const capabilities = detectSTTCapabilities();\n      \n      expect(capabilities.wasmSupported).toBe(true);\n      expect(capabilities.simdSupported).toBe(true);\n      expect(capabilities.modelsAvailable.length).toBeGreaterThan(0);\n    });\n\n    it('debe degradar gracefulmente en navegadores antiguos', () => {\n      // Simular navegador antiguo\n      Object.defineProperty(window, 'WebAssembly', {\n        value: undefined,\n        writable: true\n      });\n\n      const capabilities = detectSTTCapabilities();\n      \n      expect(capabilities.wasmSupported).toBe(false);\n      expect(capabilities.modelsAvailable).toEqual(['fallback']);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/tests/geolocation.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/tests/geolocation.test.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\n\nimport { geolocationService } from '../services/geolocationService';\n\n// Mock de fetch para las APIs externas\nglobal.fetch = vi.fn();\n\n// Mock de navigator.geolocation\nconst mockGeolocation = {\n  getCurrentPosition: vi.fn(),\n  watchPosition: vi.fn(),\n  clearWatch: vi.fn()\n};\n\nObject.defineProperty(navigator, 'geolocation', {\n  value: mockGeolocation,\n  writable: true,\n  configurable: true\n});\n\ndescribe('geolocationService - Tests de Integraci√≥n', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n    vi.resetAllMocks();\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  describe('detectLocation - Casos de √âxito', () => {\n    it('debe detectar ubicaci√≥n correctamente con todos los datos', async () => {\n      // Mock de geolocalizaci√≥n exitosa\n      const mockPosition = {\n        coords: {\n          latitude: 40.4168,\n          longitude: -3.7038,\n          accuracy: 100\n        }\n      };\n\n      mockGeolocation.getCurrentPosition.mockImplementation((success) => {\n        success(mockPosition);\n      });\n\n      // Mock de reverse geocoding exitoso\n      vi.mocked(fetch).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          address: {\n            country: 'Spain',\n            state: 'Madrid',\n            city: 'Madrid',\n            postcode: '28001'\n          }\n        })\n      } as Response);\n\n      const result = await geolocationService.getInstance().detectLocation();\n\n      expect(result).toBeTruthy();\n      expect(result?.country).toBe('Spain');\n      expect(result?.region).toBe('Madrid');\n      expect(result?.city).toBe('Madrid');\n      expect(result?.source).toBe('geolocation');\n    });\n\n    it('debe manejar ubicaci√≥n sin provincia y solicitar manualmente', async () => {\n      // Mock de geolocalizaci√≥n exitosa\n      const mockPosition = {\n        coords: {\n          latitude: 40.4168,\n          longitude: -3.7038,\n          accuracy: 100\n        }\n      };\n\n      mockGeolocation.getCurrentPosition.mockImplementation((success) => {\n        success(mockPosition);\n      });\n\n      // Mock de reverse geocoding sin provincia\n      vi.mocked(fetch).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          address: {\n            country: 'Spain',\n            city: 'Madrid',\n            postcode: '28001'\n            // Sin state/province\n          }\n        })\n      } as Response);\n\n      const result = await geolocationService.getInstance().detectLocation();\n\n      expect(result).toBeTruthy();\n      expect(result?.country).toBe('Spain');\n      expect(result?.region).toBeUndefined(); // Provincia vac√≠a\n      expect(result?.city).toBe('Madrid');\n      expect(result?.source).toBe('geolocation');\n    });\n  });\n\n  describe('detectLocation - Casos de Error', () => {\n    it('debe manejar error de permisos denegados', async () => {\n      const mockError = {\n        code: 1,\n        message: 'User denied Geolocation'\n      };\n\n      mockGeolocation.getCurrentPosition.mockImplementation((success, error) => {\n        error(mockError);\n      });\n\n      const result = await geolocationService.getInstance().detectLocation();\n\n      // Tolerar null o objeto vac√≠o - el resultado puede ser null o un objeto sin datos\n      expect(result === null || (result && !result.country && !result.region)).toBe(true);\n    });\n\n    it('debe manejar error de ubicaci√≥n no disponible', async () => {\n      const mockError = {\n        code: 2,\n        message: 'Position unavailable'\n      };\n\n      mockGeolocation.getCurrentPosition.mockImplementation((success, error) => {\n        error(mockError);\n      });\n\n      const result = await geolocationService.getInstance().detectLocation();\n\n      expect(result).toBeNull();\n    });\n\n    it('debe manejar timeout de geolocalizaci√≥n', async () => {\n      const mockError = {\n        code: 3,\n        message: 'Timeout'\n      };\n\n      mockGeolocation.getCurrentPosition.mockImplementation((success, error) => {\n        error(mockError);\n      });\n\n      const result = await geolocationService.getInstance().detectLocation();\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('detectLocationByIP - Casos de √âxito', () => {\n    it('debe detectar ubicaci√≥n por IP correctamente', async () => {\n      // Mock de respuesta de ipapi.co\n      vi.mocked(fetch).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          country_name: 'Spain',\n          country_code: 'ES',\n          region: 'Madrid',\n          region_code: 'MD',\n          city: 'Madrid',\n          timezone: 'Europe/Madrid',\n          ip: '192.168.1.1',\n          latitude: 40.4168,\n          longitude: -3.7038\n        })\n      } as Response);\n\n      const result = await geolocationService.getInstance().detectLocationByIP();\n\n      expect(result).toBeTruthy();\n      expect(result?.country).toBe('Spain');\n      expect(result?.region).toBe('Madrid');\n      expect(result?.city).toBe('Madrid');\n      expect(result?.source).toBe('ip');\n    });\n\n    it('debe manejar respuesta de IP sin regi√≥n', async () => {\n      // Mock de respuesta sin regi√≥n\n      vi.mocked(fetch).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          country_name: 'Spain',\n          country_code: 'ES',\n          city: 'Madrid',\n          timezone: 'Europe/Madrid',\n          ip: '192.168.1.1',\n          latitude: 40.4168,\n          longitude: -3.7038\n          // Sin region\n        })\n      } as Response);\n\n      const result = await geolocationService.getInstance().detectLocationByIP();\n\n      expect(result).toBeTruthy();\n      expect(result?.country).toBe('Spain');\n      expect(result?.region).toBeUndefined(); // Regi√≥n vac√≠a\n      expect(result?.city).toBe('Madrid');\n    });\n  });\n\n  describe('detectLocationByIP - Casos de Error', () => {\n    it('debe manejar error de red en detecci√≥n por IP', async () => {\n      vi.mocked(fetch).mockRejectedValueOnce(new Error('Network error'));\n\n      const result = await geolocationService.getInstance().detectLocationByIP();\n\n      expect(result).toBeNull();\n    });\n\n    it('debe manejar respuesta no v√°lida de IP API', async () => {\n      vi.mocked(fetch).mockResolvedValueOnce({\n        ok: false,\n        status: 500\n      } as Response);\n\n      const result = await geolocationService.getInstance().detectLocationByIP();\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('reverseGeocode - Validaciones', () => {\n    it('debe hacer reverse geocoding correctamente', async () => {\n      vi.mocked(fetch).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          address: {\n            country: 'Spain',\n            state: 'Madrid',\n            city: 'Madrid',\n            postcode: '28001'\n          }\n        })\n      } as Response);\n\n      const result = await geolocationService.getInstance().reverseGeocode(40.4168, -3.7038);\n\n      expect(result).toBeTruthy();\n      expect(result?.country).toBe('Spain');\n      expect(result?.region).toBe('Madrid');\n      expect(result?.city).toBe('Madrid');\n    });\n\n    it('debe manejar error en reverse geocoding', async () => {\n      vi.mocked(fetch).mockRejectedValueOnce(new Error('Geocoding error'));\n\n      const result = await geolocationService.getInstance().reverseGeocode(40.4168, -3.7038);\n\n      expect(result).toEqual({});\n    });\n  });\n\n  describe('Validaciones de Datos', () => {\n    it('debe validar coordenadas antes de procesar', async () => {\n      const result = await geolocationService.getInstance().reverseGeocode(0, 0);\n\n      expect(result).toBeTruthy();\n      // Coordenadas (0,0) deber√≠an retornar datos v√°lidos\n    });\n\n    it('debe manejar coordenadas inv√°lidas', async () => {\n      const result = await geolocationService.getInstance().reverseGeocode(999, 999);\n\n      expect(result).toBeTruthy();\n      // Coordenadas fuera de rango deber√≠an manejarse graciosamente\n    });\n  });\n\n  describe('Cache y Performance', () => {\n    it('debe usar cache para ubicaciones repetidas', async () => {\n      // Primera llamada\n      mockGeolocation.getCurrentPosition.mockImplementation((success) => {\n        success({\n          coords: { latitude: 40.4168, longitude: -3.7038, accuracy: 100 }\n        });\n      });\n\n      vi.mocked(fetch).mockResolvedValue({\n        ok: true,\n        json: async () => ({\n          address: {\n            country: 'Spain',\n            state: 'Madrid',\n            city: 'Madrid'\n          }\n        })\n      } as Response);\n\n      const result1 = await geolocationService.getInstance().detectLocation();\n      const result2 = await geolocationService.getInstance().detectLocation();\n\n      // Comparar solo las propiedades relevantes, excluyendo timestamp\n      expect(result1?.country).toBe(result2?.country);\n      expect(result1?.region).toBe(result2?.region);\n      expect(result1?.city).toBe(result2?.city);\n      expect(result1?.countryCode).toBe(result2?.countryCode);\n      expect(result1?.timezone).toBe(result2?.timezone);\n      expect(result1?.source).toBe(result2?.source);\n      expect(fetch).toHaveBeenCalledTimes(2); // Dos llamadas porque no hay cache autom√°tico\n    });\n\n    it('debe limpiar cache despu√©s de un tiempo', async () => {\n      // Simular cache expirado\n      const originalDate = Date.now;\n      Date.now = vi.fn(() => originalDate() + 3600000); // +1 hora\n\n      // Mock de geolocalizaci√≥n para evitar timeout\n      mockGeolocation.getCurrentPosition.mockImplementation((success) => {\n        success({\n          coords: { latitude: 40.4168, longitude: -3.7038, accuracy: 100 }\n        });\n      });\n\n      vi.mocked(fetch).mockResolvedValue({\n        ok: true,\n        json: async () => ({\n          address: {\n            country: 'Spain',\n            state: 'Madrid',\n            city: 'Madrid'\n          }\n        })\n      } as Response);\n\n      const result = await geolocationService.getInstance().detectLocation();\n\n      expect(result).toBeTruthy();\n      \n      // Restaurar Date.now\n      Date.now = originalDate;\n    }, 10000); // Aumentar timeout a 10 segundos\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/tests/integration/services.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/tests/integration/services.test.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview Tests de integraci√≥n para servicios principales\n * @version 1.0.0\n * @author AiDuxCare Development Team\n */\n\nimport { describe, it, expect, beforeEach, vi } from 'vitest';\n\nimport { TranscriptProcessor } from '../../services/TranscriptProcessor';\nimport PatientService from '../../services/patientService';\nimport { appointmentService } from '../../services/appointmentService';\n\n// Mock de Firebase\nvi.mock('../../lib/firebase', () => ({\n  db: {},\n  auth: {}\n}));\n\ndescribe('Servicios de Integraci√≥n', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe('TranscriptProcessor', () => {\n    it('debe extraer entidades cl√≠nicas de transcripci√≥n', () => {\n      const transcript = 'El paciente presenta dolor cervical y rigidez muscular';\n      const entities = TranscriptProcessor.extractClinicalEntities(transcript);\n      \n      expect(entities).toBeDefined();\n      expect(Array.isArray(entities)).toBe(true);\n      expect(entities.length).toBeGreaterThan(0);\n    });\n\n    it('debe generar insights cl√≠nicos', () => {\n      const transcript = 'Dolor en la rodilla derecha con inflamaci√≥n';\n      const entities = TranscriptProcessor.extractClinicalEntities(transcript);\n      const insights = TranscriptProcessor.generateClinicalInsights(entities);\n      \n      expect(insights).toBeDefined();\n      expect(Array.isArray(insights)).toBe(true);\n    });\n\n    it('debe procesar transcripci√≥n completa', () => {\n      const transcript = 'Paciente con dolor lumbar irradiado a la pierna';\n      const result = TranscriptProcessor.processTranscript(transcript);\n      \n      expect(result).toBeDefined();\n      expect(result.entities).toBeDefined();\n      expect(result.insights).toBeDefined();\n    });\n  });\n\n  describe('PatientService', () => {\n    it('debe tener m√©todos est√°ticos definidos', () => {\n      expect(typeof PatientService.searchPatients).toBe('function');\n      expect(typeof PatientService.getAllPatients).toBe('function');\n      expect(typeof PatientService.createPatient).toBe('function');\n      expect(typeof PatientService.getPatientById).toBe('function');\n      expect(typeof PatientService.updatePatient).toBe('function');\n    });\n  });\n\n  describe('AppointmentService', () => {\n    it('debe tener m√©todos est√°ticos definidos', () => {\n      expect(typeof appointmentService.getAppointments).toBe('function');\n      expect(typeof appointmentService.createAppointment).toBe('function');\n      expect(typeof appointmentService.getAppointmentById).toBe('function');\n      expect(typeof appointmentService.updateAppointment).toBe('function');\n      expect(typeof appointmentService.updateAppointmentStatus).toBe('function');\n      expect(typeof appointmentService.getAppointmentsByPatient).toBe('function');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/mauriciosobarzo/Desktop/AIDUXCARE-V.2/src/tests/stores/aiModeStore.spec.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): src/tests/stores/aiModeStore.spec.ts","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, vi } from 'vitest';\n\nimport { useAiModeStore } from '../../stores/aiModeStore';\n\n// Mock de localStorage\nconst localStorageMock = {\n  getItem: vi.fn(),\n  setItem: vi.fn(),\n  removeItem: vi.fn(),\n  clear: vi.fn(),\n  length: 0,\n  key: vi.fn()\n};\n\nObject.defineProperty(window, 'localStorage', {\n  value: localStorageMock\n});\n\ndescribe('aiModeStore', () => {\n  beforeEach(() => {\n    // Limpiar el store antes de cada test\n    useAiModeStore.getState().clearLocalTranscriptions();\n    vi.clearAllMocks();\n  });\n\n  describe('Estado inicial', () => {\n    it('debe tener valores por defecto correctos', () => {\n      const state = useAiModeStore.getState();\n      \n      expect(state.offlineMode).toBe(false);\n      expect(state.aiLightLocalSTT).toBe(false);\n      expect(state.promoteToProOnReconnect).toBe(true);\n      expect(state.localTranscriptions).toEqual([]);\n      expect(state.pendingUploads).toEqual([]);\n    });\n  });\n\n  describe('setFlag', () => {\n    it('debe cambiar el flag offlineMode correctamente', () => {\n      const { setFlag } = useAiModeStore.getState();\n      \n      setFlag('offlineMode', true);\n      expect(useAiModeStore.getState().offlineMode).toBe(true);\n      \n      setFlag('offlineMode', false);\n      expect(useAiModeStore.getState().offlineMode).toBe(false);\n    });\n\n    it('debe cambiar el flag aiLightLocalSTT correctamente', () => {\n      const { setFlag } = useAiModeStore.getState();\n      \n      setFlag('aiLightLocalSTT', true);\n      expect(useAiModeStore.getState().aiLightLocalSTT).toBe(true);\n    });\n\n    it('debe cambiar el flag promoteToProOnReconnect correctamente', () => {\n      const { setFlag } = useAiModeStore.getState();\n      \n      setFlag('promoteToProOnReconnect', false);\n      expect(useAiModeStore.getState().promoteToProOnReconnect).toBe(false);\n    });\n\n    it('debe rechazar flags inv√°lidos', () => {\n      const { setFlag } = useAiModeStore.getState();\n      \n      // @ts-expect-error - Testing invalid flag\n      expect(() => setFlag('invalidFlag', true)).toThrow();\n    });\n  });\n\n  describe('addLocalTranscription', () => {\n    it('debe agregar una transcripci√≥n local correctamente', () => {\n      const { addLocalTranscription } = useAiModeStore.getState();\n      \n      const mockTranscription = {\n        id: 'test-1',\n        text: 'Test transcription',\n        confidence: 0.8,\n        timestamp: new Date(),\n        userId: 'user-1',\n        sessionId: 'session-1',\n        metadata: {\n          duration: 30,\n          sampleRate: 44100,\n          channels: 1\n        }\n      };\n\n      addLocalTranscription(mockTranscription);\n      \n      const state = useAiModeStore.getState();\n      expect(state.localTranscriptions).toHaveLength(1);\n      expect(state.localTranscriptions[0]).toEqual(mockTranscription);\n    });\n\n    it('debe agregar m√∫ltiples transcripciones en orden', () => {\n      const { addLocalTranscription } = useAiModeStore.getState();\n      \n      const transcription1 = {\n        id: 'test-1',\n        text: 'First transcription',\n        confidence: 0.8,\n        timestamp: new Date('2025-01-01'),\n        userId: 'user-1',\n        sessionId: 'session-1',\n        metadata: { duration: 30, sampleRate: 44100, channels: 1 }\n      };\n\n      const transcription2 = {\n        id: 'test-2',\n        text: 'Second transcription',\n        confidence: 0.9,\n        timestamp: new Date('2025-01-02'),\n        userId: 'user-1',\n        sessionId: 'session-1',\n        metadata: { duration: 45, sampleRate: 44100, channels: 1 }\n      };\n\n      addLocalTranscription(transcription1);\n      addLocalTranscription(transcription2);\n      \n      const state = useAiModeStore.getState();\n      expect(state.localTranscriptions).toHaveLength(2);\n      expect(state.localTranscriptions[0]).toEqual(transcription1);\n      expect(state.localTranscriptions[1]).toEqual(transcription2);\n    });\n  });\n\n  describe('addPendingUpload', () => {\n    it('debe agregar un upload pendiente correctamente', () => {\n      const { addPendingUpload } = useAiModeStore.getState();\n      \n      const mockUpload = {\n        id: 'upload-1',\n        transcriptionId: 'transcription-1',\n        timestamp: new Date(),\n        retryCount: 0,\n        maxRetries: 3\n      };\n\n      addPendingUpload(mockUpload);\n      \n      const state = useAiModeStore.getState();\n      expect(state.pendingUploads).toHaveLength(1);\n      expect(state.pendingUploads[0]).toEqual(mockUpload);\n    });\n  });\n\n  describe('removePendingUpload', () => {\n    it('debe remover un upload pendiente correctamente', () => {\n      const { addPendingUpload, removePendingUpload } = useAiModeStore.getState();\n      \n      const mockUpload = {\n        id: 'upload-1',\n        transcriptionId: 'transcription-1',\n        timestamp: new Date(),\n        retryCount: 0,\n        maxRetries: 3\n      };\n\n      addPendingUpload(mockUpload);\n      expect(useAiModeStore.getState().pendingUploads).toHaveLength(1);\n      \n      removePendingUpload('upload-1');\n      expect(useAiModeStore.getState().pendingUploads).toHaveLength(0);\n    });\n\n    it('debe manejar IDs inexistentes sin error', () => {\n      const { removePendingUpload } = useAiModeStore.getState();\n      \n      expect(() => removePendingUpload('non-existent')).not.toThrow();\n    });\n  });\n\n  describe('clearLocalTranscriptions', () => {\n    it('debe limpiar todas las transcripciones y uploads pendientes', () => {\n      const { addLocalTranscription, addPendingUpload, clearLocalTranscriptions } = useAiModeStore.getState();\n      \n      // Agregar datos de prueba\n      const mockTranscription = {\n        id: 'test-1',\n        text: 'Test transcription',\n        confidence: 0.8,\n        timestamp: new Date(),\n        userId: 'user-1',\n        sessionId: 'session-1',\n        metadata: { duration: 30, sampleRate: 44100, channels: 1 }\n      };\n\n      const mockUpload = {\n        id: 'upload-1',\n        transcriptionId: 'transcription-1',\n        timestamp: new Date(),\n        retryCount: 0,\n        maxRetries: 3\n      };\n\n      addLocalTranscription(mockTranscription);\n      addPendingUpload(mockUpload);\n      \n      expect(useAiModeStore.getState().localTranscriptions).toHaveLength(1);\n      expect(useAiModeStore.getState().pendingUploads).toHaveLength(1);\n      \n      clearLocalTranscriptions();\n      \n      expect(useAiModeStore.getState().localTranscriptions).toHaveLength(0);\n      expect(useAiModeStore.getState().pendingUploads).toHaveLength(0);\n    });\n  });\n\n  describe('Hooks especializados', () => {\n    it('debe exportar hooks especializados correctamente', () => {\n      // Verificar que los hooks existen\n      expect(typeof useAiModeStore.getState().offlineMode).toBe('boolean');\n      expect(typeof useAiModeStore.getState().aiLightLocalSTT).toBe('boolean');\n      expect(typeof useAiModeStore.getState().promoteToProOnReconnect).toBe('boolean');\n    });\n  });\n\n  describe('Persistencia', () => {\n    it('debe persistir solo los flags configurados', () => {\n      const { setFlag } = useAiModeStore.getState();\n      \n      // Cambiar flags\n      setFlag('offlineMode', true);\n      setFlag('aiLightLocalSTT', true);\n      setFlag('promoteToProOnReconnect', false);\n      \n      // Agregar transcripci√≥n (no debe persistir)\n      const mockTranscription = {\n        id: 'test-1',\n        text: 'Test transcription',\n        confidence: 0.8,\n        timestamp: new Date(),\n        userId: 'user-1',\n        sessionId: 'session-1',\n        metadata: { duration: 30, sampleRate: 44100, channels: 1 }\n      };\n      \n      useAiModeStore.getState().addLocalTranscription(mockTranscription);\n      \n      // Verificar que solo los flags est√°n en el estado persistido\n      const state = useAiModeStore.getState();\n      expect(state.offlineMode).toBe(true);\n      expect(state.aiLightLocalSTT).toBe(true);\n      expect(state.promoteToProOnReconnect).toBe(false);\n      expect(state.localTranscriptions).toHaveLength(1); // Solo en memoria\n    });\n  });\n});\n","usedDeprecatedRules":[]}]