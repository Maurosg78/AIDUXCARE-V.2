
// Test simple de integraci√≥n Gemini 1.5 Pro
console.log('üîç Iniciando test de integraci√≥n Gemini...');

// Simular configuraci√≥n de entorno
process.env.GOOGLE_CLOUD_PROJECT = 'aiduxcare-v2';
process.env.GOOGLE_APPLICATION_CREDENTIALS = './credentials.json';

// Importar m√≥dulos din√°micamente
const { ConsultationClassifier } = await import('./src/core/classification/ConsultationClassifier.ts');
const { RealWorldSOAPProcessor } = await import('./src/services/RealWorldSOAPProcessor.ts');

const classifier = new ConsultationClassifier();
const processor = new RealWorldSOAPProcessor();

async function testGeminiIntegration() {
  console.log('üîç Iniciando clasificaci√≥n con Gemini 1.5 Pro...');
  
  const testCase = {
    transcription: `PACIENTE: Doctor, tengo un dolor terrible en el cuello que me est√° matando. 
  Empez√≥ hace como 3 semanas cuando me despert√© una ma√±ana y no pod√≠a mover la cabeza. 
  El dolor es insoportable, especialmente por la noche cuando me acuesto. 
  A veces siento como si me estuviera ahogando y tengo dificultad para tragar. 
  Tambi√©n noto que se me duermen los brazos cuando duermo y tengo mareos constantes. 
  Ayer tuve un episodio donde perd√≠ el equilibrio y casi me caigo. 
  El dolor se irradia hacia el hombro derecho y siento como pinchazos en la mano. 
  No puedo dormir bien porque cualquier posici√≥n me duele. 
  Tambi√©n he notado que mi visi√≥n se ha vuelto borrosa √∫ltimamente. 
  ¬øCrees que puede ser algo grave?`,
    professionalRole: 'PHYSIOTHERAPIST',
    location: {"country":"ES","state":"Madrid"}
  };
  
  try {
    // Clasificaci√≥n directa con Gemini
    console.log('üì§ Enviando a Gemini 1.5 Pro...');
    const startTime = Date.now();
    
    const geminiResult = await classifier.classifyWithGemini(
      testCase.transcription,
      testCase.professionalRole,
      testCase.location
    );
    
    const processingTime = Date.now() - startTime;
    
    console.log('‚úÖ Respuesta de Gemini recibida');
    console.log('‚è±Ô∏è  Tiempo de procesamiento:', processingTime + 'ms');
    console.log('üìä Resultado Gemini:', JSON.stringify(geminiResult, null, 2));
    
    // Procesamiento completo del pipeline
    console.log('\nüîÑ Ejecutando pipeline completo...');
    const pipelineStart = Date.now();
    
    const pipelineResult = await processor.processTranscription(
      testCase.transcription,
      testCase.professionalRole,
      testCase.location
    );
    
    const pipelineTime = Date.now() - pipelineStart;
    
    console.log('‚úÖ Pipeline completado');
    console.log('‚è±Ô∏è  Tiempo total pipeline:', pipelineTime + 'ms');
    console.log('üìä Resultado pipeline:', JSON.stringify(pipelineResult, null, 2));
    
    // Validaci√≥n de resultados
    console.log('\nüîç Validando resultados...');
    
    const validations = {
      geminiResponse: !!geminiResult,
      pipelineResponse: !!pipelineResult,
      processingTime: processingTime < 10000, // < 10 segundos
      pipelineTime: pipelineTime < 15000, // < 15 segundos
      hasSOAP: !!pipelineResult.soap,
      hasFlags: !!pipelineResult.redFlags && pipelineResult.redFlags.length > 0,
      hasRecommendations: !!pipelineResult.recommendations
    };
    
    console.log('üìã Validaciones:', validations);
    
    const allValid = Object.values(validations).every(v => v);
    
    if (allValid) {
      console.log('\nüéâ ¬°PRUEBA EXITOSA!');
      console.log('‚úÖ Integraci√≥n Gemini 1.5 Pro funcionando correctamente');
      console.log('‚úÖ Pipeline completo operativo');
      console.log('‚úÖ Tiempos de respuesta aceptables');
      console.log('‚úÖ Banderas rojas detectadas');
      console.log('‚úÖ Recomendaciones generadas');
    } else {
      console.log('\n‚ùå PRUEBA FALLIDA');
      console.log('‚ùå Algunas validaciones no pasaron');
    }
    
    return {
      success: allValid,
      geminiResult,
      pipelineResult,
      metrics: {
        geminiTime: processingTime,
        pipelineTime: pipelineTime,
        validations
      }
    };
    
  } catch (error) {
    console.error('‚ùå Error en test:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

testGeminiIntegration();
