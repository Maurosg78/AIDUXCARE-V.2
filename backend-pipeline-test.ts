/**
 * üè• Backend Pipeline Test - AiDuxCare V.2
 * Protocolo de Validaci√≥n de Backend End-to-End
 * 
 * Este script valida el "Cerebro Cl√≠nico" enviando casos de prueba reales
 * y midiendo el rendimiento y calidad del an√°lisis de IA.
 */

interface TestCase {
  name: string;
  transcription: string;
}

interface ClinicalBrainRequest {
  transcription: string;
  specialty: string;
  sessionType: string;
}

interface ClinicalBrainResponse {
  success: boolean;
  data?: any;
  error?: string;
  processingTime?: number;
}

// Casos de prueba cl√≠nicos seg√∫n especificaci√≥n
const testCases: TestCase[] = [
  {
    name: "Caso 1: Lumbalgia Mec√°nica Simple",
    transcription: "Paciente refiere dolor lumbar en la zona derecha desde hace una semana despu√©s de levantar peso. El dolor aumenta con la flexi√≥n y se alivia con el reposo."
  },
  {
    name: "Caso 2: Cuadro Complejo con Banderas Rojas (Nuestro caso de prueba maestro)",
    transcription: "Hola Doctor hoy estoy muy adolorida de mi espalda esto no es nuevo me levanto cada ma√±ana con mucho dolor en la parte baja de mi espalda y que a veces no me permite caminar incluso quedo como girada esto me viene pasando hace un tiempo y es mucho m√°s molesto durante la ma√±ana me cuesta partir incluso me cuesta salir de la cama y mi doctora sospecha de qu√© puede estar relacion con una posible celiaqu√≠a que tengo un estudio durante mucho tiempo me trataron como que fuera una enfermedad de artritis reum√°tica sin embargo al parecer tengo un tema inmunol√≥gico tambi√©n estoy deprimida y me est√°n dando algunos medicamentos para la depresi√≥n trato de hacer ejercicio pero no puedo ser constante y no s√© qu√© debo hacer me siento muy cansada constantemente y en el √∫ltimo examen de sangre me encontraron que el hierro estaba muy bajo y cuando estoy con mucho dolor estomacal porque he comido algo con gluten suelo tomar nolotil y paracetamol"
  }
];

// URL del Cerebro Cl√≠nico (Google Cloud Function)
const CLINICAL_BRAIN_URL = "https://us-east1-aiduxcare-stt-20250706.cloudfunctions.net/clinicalBrain";

/**
 * Funci√≥n principal de validaci√≥n del pipeline
 */
async function validateBackendPipeline(): Promise<void> {
  console.log("üè• INICIANDO PROTOCOLO DE VALIDACI√ìN BACKEND END-TO-END");
  console.log("=" .repeat(80));
  console.log("üéØ Objetivo: Validar el 'Cerebro Cl√≠nico' con casos de prueba reales");
  console.log("üîó Endpoint: " + CLINICAL_BRAIN_URL);
  console.log("üìä Casos de prueba: " + testCases.length);
  console.log("=" .repeat(80));
  console.log("");

  let totalProcessingTime = 0;
  let successfulTests = 0;
  let failedTests = 0;

  // Iterar sobre cada caso de prueba
  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    console.log(`üß™ EJECUTANDO ${testCase.name}`);
    console.log("-".repeat(60));

    try {
      // Construir el body de la petici√≥n POST
      const requestBody: ClinicalBrainRequest = {
        transcription: testCase.transcription,
        specialty: 'physiotherapy',
        sessionType: 'initial'
      };

      console.log("üì§ Enviando petici√≥n al Cerebro Cl√≠nico...");
      console.log("üìã Datos enviados:", JSON.stringify(requestBody, null, 2));
      console.log("");

      // Medir tiempo de respuesta
      const startTime = Date.now();
      console.time(`‚è±Ô∏è Tiempo de respuesta - ${testCase.name}`);

      // Realizar llamada fetch al Cerebro Cl√≠nico
      const response = await fetch(CLINICAL_BRAIN_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify(requestBody)
      });

      // Detener medidor de tiempo
      console.timeEnd(`‚è±Ô∏è Tiempo de respuesta - ${testCase.name}`);
      const endTime = Date.now();
      const processingTime = endTime - startTime;
      totalProcessingTime += processingTime;

      console.log(`‚è±Ô∏è Tiempo total de procesamiento: ${processingTime}ms`);
      console.log("");

      // Verificar estado de la respuesta
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      // Obtener respuesta JSON completa
      const responseData = await response.json();
      
      console.log("‚úÖ RESPUESTA EXITOSA DEL CEREBRO CL√çNICO");
      console.log("üìä Respuesta JSON completa y sin procesar:");
      console.log(JSON.stringify(responseData, null, 2));
      console.log("");

      // An√°lisis de la respuesta
      console.log("üîç AN√ÅLISIS DE LA RESPUESTA:");
      console.log(`   - Status HTTP: ${response.status}`);
      console.log(`   - Content-Type: ${response.headers.get('content-type')}`);
      console.log(`   - Tama√±o respuesta: ${JSON.stringify(responseData).length} caracteres`);
      
      if (responseData.soap) {
        console.log(`   - SOAP generado: ${responseData.soap.subjective ? 'S√ç' : 'NO'}`);
        console.log(`   - Secciones SOAP: ${Object.keys(responseData.soap).length}`);
      }
      
      if (responseData.highlights) {
        console.log(`   - Highlights detectados: ${responseData.highlights.length}`);
      }
      
      if (responseData.warnings) {
        console.log(`   - Warnings detectados: ${responseData.warnings.length}`);
      }

      successfulTests++;
      console.log("‚úÖ CASO EXITOSO");
      console.log("");

    } catch (error) {
      console.error("‚ùå ERROR EN EL CASO DE PRUEBA:");
      console.error("   Error:", error.message);
      console.error("   Stack:", error.stack);
      console.log("‚ùå CASO FALLIDO");
      console.log("");
      failedTests++;
    }

    // Separador entre casos
    if (i < testCases.length - 1) {
      console.log("=" .repeat(80));
      console.log("");
    }
  }

  // Resumen final
  console.log("üèÅ RESUMEN FINAL DE LA VALIDACI√ìN");
  console.log("=" .repeat(80));
  console.log(`üìä Total de casos ejecutados: ${testCases.length}`);
  console.log(`‚úÖ Casos exitosos: ${successfulTests}`);
  console.log(`‚ùå Casos fallidos: ${failedTests}`);
  console.log(`‚è±Ô∏è Tiempo total de procesamiento: ${totalProcessingTime}ms`);
  console.log(`üìà Tiempo promedio por caso: ${totalProcessingTime / testCases.length}ms`);
  console.log(`üéØ Tasa de √©xito: ${((successfulTests / testCases.length) * 100).toFixed(1)}%`);
  console.log("=" .repeat(80));

  // Evaluaci√≥n de rendimiento
  console.log("üìà EVALUACI√ìN DE RENDIMIENTO:");
  const avgTime = totalProcessingTime / testCases.length;
  if (avgTime < 5000) {
    console.log("   üü¢ EXCELENTE: Tiempo de respuesta < 5 segundos");
  } else if (avgTime < 10000) {
    console.log("   üü° ACEPTABLE: Tiempo de respuesta < 10 segundos");
  } else {
    console.log("   üî¥ CR√çTICO: Tiempo de respuesta > 10 segundos");
  }

  if (successfulTests === testCases.length) {
    console.log("   üü¢ EXCELENTE: 100% de casos exitosos");
  } else if (successfulTests > 0) {
    console.log("   üü° PARCIAL: Algunos casos fallaron");
  } else {
    console.log("   üî¥ CR√çTICO: 0% de casos exitosos");
  }

  console.log("=" .repeat(80));
  console.log("üè• PROTOCOLO DE VALIDACI√ìN BACKEND COMPLETADO");
}

/**
 * Funci√≥n de validaci√≥n de conectividad
 */
async function validateConnectivity(): Promise<boolean> {
  console.log("üîç VALIDANDO CONECTIVIDAD CON EL CEREBRO CL√çNICO...");
  
  try {
    const response = await fetch(CLINICAL_BRAIN_URL, {
      method: 'OPTIONS',
      headers: {
        'Accept': 'application/json'
      }
    });
    
    console.log(`   - Endpoint accesible: ${response.ok ? 'S√ç' : 'NO'}`);
    console.log(`   - CORS habilitado: ${response.headers.get('access-control-allow-origin') ? 'S√ç' : 'NO'}`);
    console.log(`   - M√©todos permitidos: ${response.headers.get('access-control-allow-methods') || 'N/A'}`);
    
    return response.ok;
  } catch (error) {
    console.error("   ‚ùå Error de conectividad:", error.message);
    return false;
  }
}

/**
 * Funci√≥n principal
 */
async function main(): Promise<void> {
  console.log("üöÄ INICIANDO SCRIPT DE VALIDACI√ìN BACKEND");
  console.log("üìÖ Fecha:", new Date().toISOString());
  console.log("");

  // Validar conectividad primero
  const isConnected = await validateConnectivity();
  console.log("");

  if (!isConnected) {
    console.error("‚ùå ERROR: No se puede conectar al Cerebro Cl√≠nico");
    console.error("   Verifique que la Google Cloud Function est√© desplegada y accesible");
    process.exit(1);
  }

  // Ejecutar validaci√≥n del pipeline
  await validateBackendPipeline();
}

// Ejecutar el script
main().catch(error => {
  console.error("üí• ERROR CR√çTICO EN EL SCRIPT:");
  console.error(error);
  process.exit(1);
}); 