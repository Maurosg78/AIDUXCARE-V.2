// Suite completa de pruebas para el backend gen√©rico

const TEST_SUITE = {
  simple: [
    "Paciente con dolor de rodilla hace 2 d√≠as. Sin inflamaci√≥n visible.",
    "Dolor muscular en trapecio derecho. Mejora con calor local.",
    "Contractura cervical. Limitaci√≥n leve de movimiento."
  ],
  
  redFlags: [
    "Dolor lumbar con p√©rdida de sensibilidad en silla de montar y dificultad para orinar.",
    "Cefalea s√∫bita intensa diferente a las habituales con rigidez de nuca.",
    "Dolor tor√°cico con disnea y sudoraci√≥n profusa."
  ],
  
  legalEthical: [
    "Voy a facturar 20 sesiones pero solo haremos 10, as√≠ el seguro paga todo.",
    "Este tratamiento no est√° aprobado pero funciona muy bien, cuesta 200 d√≥lares.",
    "No necesito evaluarte, s√© exactamente qu√© tienes sin revisarte."
  ],
  
  medications: [
    "Toma warfarina 5mg diarios y aspira 100mg.",
    "Est√° con morfina 30mg cada 8 horas m√°s gabapentina 600mg.",
    "Antidepresivos: sertralina 100mg y clonazepam 2mg para dormir."
  ],
  
  complex: [
    "Paciente de 65 a√±os diab√©tico con neuropat√≠a, toma metformina, insulina, pregabalina y tramadol. Refiere ca√≠das frecuentes y p√©rdida de equilibrio progresiva. El terapeuta no document√≥ la evaluaci√≥n inicial.",
    "Post-quir√∫rgico de columna hace 3 meses, dolor persistente 8/10, toma oxicodona, no puede dormir, muy ansioso por no mejorar. Terapeuta sugiere comprar m√°quina l√°ser que √©l vende.",
    "Embarazada 28 semanas con lumbalgia, edema bilateral, cefalea ocasional. Terapeuta quiere hacer manipulaci√≥n de alta velocidad."
  ]
};

async function runComprehensiveTests() {
  console.log("üß™ INICIANDO SUITE DE PRUEBAS COMPLETA\n");
  
  const results = {
    passed: 0,
    failed: 0,
    details: []
  };
  
  for (const [category, cases] of Object.entries(TEST_SUITE)) {
    console.log(`\nüìÅ Categor√≠a: ${category.toUpperCase()}`);
    console.log("=".repeat(50));
    
    for (let i = 0; i < cases.length; i++) {
      const testCase = cases[i];
      console.log(`\nTest ${i + 1}: ${testCase.substring(0, 60)}...`);
      
      try {
        // Simular llamada al backend (reemplazar con llamada real)
        const response = await processTranscript(testCase);
        
        // Validar estructura de respuesta
        const isValid = validateResponse(response, category);
        
        if (isValid) {
          console.log("‚úÖ PASSED");
          results.passed++;
        } else {
          console.log("‚ùå FAILED - Estructura inv√°lida");
          results.failed++;
        }
        
        // Mostrar m√©tricas clave
        console.log(`   Entidades: ${response.entities?.length || 0}`);
        console.log(`   Red flags: ${response.redFlags?.length || 0}`);
        console.log(`   Compliance: ${response.compliance_issues?.length || 0}`);
        
      } catch (error) {
        console.log("‚ùå ERROR:", error.message);
        results.failed++;
      }
    }
  }
  
  // Resumen final
  console.log("\n" + "=".repeat(50));
  console.log("üìä RESUMEN DE PRUEBAS");
  console.log("=".repeat(50));
  console.log(`‚úÖ Passed: ${results.passed}`);
  console.log(`‚ùå Failed: ${results.failed}`);
  console.log(`üìà Success Rate: ${(results.passed / (results.passed + results.failed) * 100).toFixed(1)}%`);
}

function validateResponse(response, expectedCategory) {
  // Validar estructura b√°sica
  if (!response.entities || !Array.isArray(response.entities)) return false;
  
  // Validaciones espec√≠ficas por categor√≠a
  switch(expectedCategory) {
    case 'redFlags':
      return response.redFlags && response.redFlags.length > 0;
    case 'legalEthical':
      return response.compliance_issues && response.compliance_issues.length > 0;
    case 'medications':
      return response.entities.some(e => e.type === 'medication');
    default:
      return true;
  }
}

// Mock de processTranscript para pruebas locales
async function processTranscript(text) {
  // Reemplazar con llamada real al backend
  return {
    entities: [{text: "test", type: "symptom", clinicalRelevance: "low"}],
    redFlags: text.includes("p√©rdida") ? [{pattern: "test"}] : [],
    yellowFlags: [],
    compliance_issues: text.includes("facturar") ? [{type: "legal"}] : []
  };
}

runComprehensiveTests();
