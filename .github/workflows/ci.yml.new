name: CI/CD Pipeline - AiDuxCare V.2

on:
  push:
    branches: [ main, develop, release/* ]
  pull_request:
    branches: [ main, develop, release/* ]

env:
  NODE_VERSION: '20'
  FIREBASE_VERSION: '14.12.1'

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Lint check (zero warnings allowed)
        run: npm run lint --max-warnings 0
        
      - name: TypeScript type check
        run: npx tsc --noEmit
        
      - name: Build project
        run: npm run build
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Run E2E tests
        run: npx playwright test tests/e2e/command-centre.spec.ts
        
      - name: Upload Playwright results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results
          path: playwright-report/
          retention-days: 30

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run Vitest unit/integration tests
        run: npx vitest run \
          "src/**/*.test.{ts,tsx}" "src/**/*.spec.{ts,tsx}" \
          "tests/**/*.test.{ts,tsx}" "tests/**/*.spec.{ts,tsx}" \
          --reporter=dot
  firebase-functions:
    name: Firebase Functions Build
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Firebase CLI
        run: npm install -g firebase-tools@${{ env.FIREBASE_VERSION }}
        
      - name: Build Firebase Functions
        run: |
          cd functions
          npm ci
          npm run build
          
      - name: Verify Functions build
        run: |
          cd functions
          node -e "
            try {
              require('./lib/index.js');
              console.log('✅ Functions build successful');
            } catch (e) {
              console.error('❌ Functions build failed:', e.message);
              process.exit(1);
            }
          "

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [quality-gates, firebase-functions]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Firebase CLI
        run: npm install -g firebase-tools@${{ env.FIREBASE_VERSION }}
        
      - name: Start Firebase emulators
        run: |
          firebase emulators:start --only functions,firestore,auth --project demo-project &
          sleep 30
          
      - name: Run smoke tests
        run: |
          # Esperar a que emuladores estén listos
          sleep 10
          
          # Test de funciones
          curl -X POST http://localhost:5001/demo-project/europe-west1/assistantQuery \
            -H "Content-Type: application/json" \
            -d '{"input":"test","userId":"test-user"}' \
            --fail-with-body
            
          curl -X POST http://localhost:5001/demo-project/europe-west1/assistantDataLookup \
            -H "Content-Type: application/json" \
            -d '{"intent":"test","params":{},"userId":"test-user"}' \
            --fail-with-body
            
      - name: Stop emulators
        run: pkill -f "firebase emulators" || true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        
      - name: Check for secrets in code
        run: |
          # Verificar que no hay credenciales hardcodeadas
          if grep -r "AIza\|sk-\|pk_" src/ functions/ --exclude-dir=node_modules; then
            echo "❌ SECURITY ALERT: Potential secrets found in code"
            exit 1
          fi
          echo "✅ No secrets found in code"

  deployment-gates:
    name: Deployment Gates
    runs-on: ubuntu-latest
    needs: [quality-gates, firebase-functions, smoke-tests, security-audit]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release/*'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Final validation
        run: |
          echo "🚀 All quality gates passed!"
          echo "✅ Lint: Clean"
          echo "✅ TypeScript: No errors"
          echo "✅ Build: Successful"
          echo "✅ E2E Tests: Passed"
          echo "✅ Firebase Functions: Built"
          echo "✅ Smoke Tests: Passed"
          echo "✅ Security Audit: Clean"
          echo ""
          echo "🎯 Ready for deployment to ${{ github.ref_name }}"
          
      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Ready" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Quality Gates:** ✅ All Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Deploy to UAT environment" >> $GITHUB_STEP_SUMMARY
          echo "2. Run smoke tests in UAT" >> $GITHUB_STEP_SUMMARY
          echo "3. Deploy to production" >> $GITHUB_STEP_SUMMARY
