#!/bin/bash

# üî• SCRIPT DE MARAT√ìN DE CALENTAMIENTO - ESTRATEGIA PARA DESBLOQUEAR VERTEX AI
# 
# Este script ejecuta de forma continua el test de calentamiento para generar
# actividad masiva en las APIs de Google Cloud y potencialmente desbloquear Vertex AI
#
# Autor: Claude Assistant
# Fecha: 2025-06-22
# Proyecto: aiduxcare-mvp-prod

# Configuraci√≥n
LOG_FILE="warmup_marathon_log.txt"
INTERVAL_MINUTES=10
INTERVAL_SECONDS=$((INTERVAL_MINUTES * 60))
SCRIPT_PATH="scripts/test-warmup-activity.cjs"

# Colores para la consola
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Variables de control
total_executions=0
successful_executions=0
failed_executions=0
start_time=$(date +%s)

# Funci√≥n para imprimir con timestamp
print_with_timestamp() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $message"
}

# Funci√≥n para imprimir con timestamp y color
print_with_timestamp_color() {
    local message="$1"
    local color="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${color}[$timestamp] $message${NC}"
}

# Funci√≥n para manejar la interrupci√≥n (Ctrl+C)
cleanup() {
    echo ""
    print_with_timestamp_color "üõë PROCESO DE MARAT√ìN DETENIDO POR EL USUARIO" $YELLOW
    echo ""
    
    # Calcular tiempo total de ejecuci√≥n
    end_time=$(date +%s)
    total_duration=$((end_time - start_time))
    hours=$((total_duration / 3600))
    minutes=$(((total_duration % 3600) / 60))
    seconds=$((total_duration % 60))
    
    # Mostrar resumen final
    print_with_timestamp_color "üìä RESUMEN FINAL DEL MARAT√ìN DE CALENTAMIENTO" $CYAN
    print_with_timestamp_color "============================================================" $CYAN
    print_with_timestamp_color "üî• Tiempo total de ejecuci√≥n: ${hours}h ${minutes}m ${seconds}s" $CYAN
    print_with_timestamp_color "üìã Total de ejecuciones: $total_executions" $CYAN
    print_with_timestamp_color "‚úÖ Ejecuciones exitosas: $successful_executions" $GREEN
    print_with_timestamp_color "‚ùå Ejecuciones fallidas: $failed_executions" $RED
    
    if [ $total_executions -gt 0 ]; then
        success_rate=$((successful_executions * 100 / total_executions))
        print_with_timestamp_color "üìà Tasa de √©xito: ${success_rate}%" $CYAN
    fi
    
    print_with_timestamp_color "üìù Log completo disponible en: $LOG_FILE" $CYAN
    print_with_timestamp_color "üéØ Objetivo: Desbloquear Vertex AI mediante actividad leg√≠tima" $PURPLE
    echo ""
    print_with_timestamp_color "üî• ¬°Marat√≥n de calentamiento completado! Revisa los logs para m√°s detalles." $GREEN
    echo ""
    
    exit 0
}

# Configurar trap para manejar Ctrl+C
trap cleanup SIGINT SIGTERM

# Funci√≥n para verificar si el script de prueba existe
check_prerequisites() {
    if [ ! -f "$SCRIPT_PATH" ]; then
        print_with_timestamp_color "‚ùå ERROR: No se encontr√≥ el script de prueba en $SCRIPT_PATH" $RED
        print_with_timestamp_color "üí° Aseg√∫rate de estar en el directorio ra√≠z del proyecto" $YELLOW
        exit 1
    fi
    
    if ! command -v node &> /dev/null; then
        print_with_timestamp_color "‚ùå ERROR: Node.js no est√° instalado o no est√° en el PATH" $RED
        print_with_timestamp_color "üí° Instala Node.js para continuar" $YELLOW
        exit 1
    fi
    
    print_with_timestamp_color "‚úÖ Prerrequisitos verificados correctamente" $GREEN
}

# Funci√≥n para ejecutar con timeout (compatible con macOS)
run_with_timeout() {
    local timeout_seconds=$1
    shift
    local command="$@"
    
    # En macOS, usamos gtimeout si est√° disponible, sino ejecutamos sin timeout
    if command -v gtimeout &> /dev/null; then
        gtimeout $timeout_seconds $command
    else
        # Sin timeout en macOS, pero con un proceso background para simular
        $command &
        local pid=$!
        sleep $timeout_seconds
        if kill -0 $pid 2>/dev/null; then
            kill $pid 2>/dev/null
            return 124  # Timeout
        else
            wait $pid
            return $?
        fi
    fi
}

# Funci√≥n para ejecutar una iteraci√≥n del test
run_test_iteration() {
    local iteration=$1
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    print_with_timestamp_color "üî• INICIANDO ITERACI√ìN #$iteration" $PURPLE
    print_with_timestamp_color "‚è∞ Timestamp: $timestamp" $BLUE
    print_with_timestamp_color "üîÑ Ejecutando script de calentamiento..." $CYAN
    
    # Ejecutar el script y capturar la salida
    local output
    local exit_code
    
    # Ejecutar el script (sin timeout en macOS por simplicidad)
    output=$(node "$SCRIPT_PATH" 1 1 2>&1)
    exit_code=$?
    
    # Registrar en el archivo de log
    echo "" >> "$LOG_FILE"
    echo "==================================================================================" >> "$LOG_FILE"
    echo "[$timestamp] ITERACI√ìN #$iteration" >> "$LOG_FILE"
    echo "==================================================================================" >> "$LOG_FILE"
    echo "$output" >> "$LOG_FILE"
    echo "==================================================================================" >> "$LOG_FILE"
    echo "" >> "$LOG_FILE"
    
    # Analizar el resultado
    if [ $exit_code -eq 0 ] && echo "$output" | grep -q "warmupStatus: COMPLETED"; then
        print_with_timestamp_color "‚úÖ ITERACI√ìN #$iteration COMPLETADA EXITOSAMENTE" $GREEN
        print_with_timestamp_color "üî• Actividad de calentamiento: EJECUTADA" $GREEN
        ((successful_executions++))
    else
        print_with_timestamp_color "‚ùå ITERACI√ìN #$iteration FALL√ì" $RED
        print_with_timestamp_color "üîç Revisa el log para m√°s detalles: $LOG_FILE" $YELLOW
        ((failed_executions++))
    fi
    
    ((total_executions++))
    
    # Mostrar estad√≠sticas actuales
    print_with_timestamp_color "üìä Estad√≠sticas actuales:" $CYAN
    print_with_timestamp_color "   Total: $total_executions | ‚úÖ √âxitos: $successful_executions | ‚ùå Fallos: $failed_executions" $CYAN
    
    if [ $total_executions -gt 0 ]; then
        success_rate=$((successful_executions * 100 / total_executions))
        print_with_timestamp_color "   üìà Tasa de √©xito: ${success_rate}%" $CYAN
    fi
}

# Funci√≥n para calcular pr√≥xima ejecuci√≥n (compatible con macOS)
get_next_execution_time() {
    local current_time=$(date +%s)
    local next_time=$((current_time + INTERVAL_SECONDS))
    date -r $next_time '+%H:%M:%S'
}

# Funci√≥n principal
main() {
    # Limpiar pantalla y mostrar header
    clear
    print_with_timestamp_color "üî• MARAT√ìN DE CALENTAMIENTO - ESTRATEGIA PARA DESBLOQUEAR VERTEX AI" $PURPLE
    print_with_timestamp_color "==================================================================================" $PURPLE
    print_with_timestamp_color "üéØ Objetivo: Generar actividad masiva en Google Cloud APIs" $CYAN
    print_with_timestamp_color "‚è∞ Intervalo entre ejecuciones: $INTERVAL_MINUTES minutos" $CYAN
    print_with_timestamp_color "üìù Log file: $LOG_FILE" $CYAN
    print_with_timestamp_color "üõë Para detener: Presiona Ctrl+C" $YELLOW
    echo ""
    
    # Verificar prerrequisitos
    check_prerequisites
    
    # Crear archivo de log si no existe
    if [ ! -f "$LOG_FILE" ]; then
        echo "üî• MARAT√ìN DE CALENTAMIENTO - LOG INICIADO $(date)" > "$LOG_FILE"
        echo "==================================================================================" >> "$LOG_FILE"
    fi
    
    print_with_timestamp_color "üöÄ INICIANDO MARAT√ìN DE CALENTAMIENTO..." $GREEN
    print_with_timestamp_color "‚è∞ Hora de inicio: $(date)" $BLUE
    echo ""
    
    # Bucle principal
    iteration=1
    while true; do
        run_test_iteration $iteration
        
        print_with_timestamp_color "‚è∞ Esperando $INTERVAL_MINUTES minutos antes de la siguiente iteraci√≥n..." $YELLOW
        print_with_timestamp_color "‚è∞ Pr√≥xima ejecuci√≥n: $(get_next_execution_time)" $BLUE
        echo ""
        
        # Pausa entre iteraciones
        sleep $INTERVAL_SECONDS
        
        ((iteration++))
    done
}

# Ejecutar funci√≥n principal
main
